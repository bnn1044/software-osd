# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
# 1 "C:\\ARMTC\\software-osd//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 201112L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 7
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "7.2.1 20170904 (release) [ARM/embedded-7-branch revision 255204]"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.4028234663852886e+38F32
#define __FLT32_MIN__ 1.1754943508222875e-38F32
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.7976931348623157e+308F64
#define __FLT64_MIN__ 2.2250738585072014e-308F64
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __ARM_FEATURE_DSP 1
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
#undef __ARM_FEATURE_QRDMX
# 1 "<built-in>"
#define __ARM_32BIT_STATE 1
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#undef __ARM_FEATURE_NUMERIC_MAXMIN
# 1 "<built-in>"
#define __ARM_FEATURE_SIMD32 1
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 4
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __THUMBEL__ 1
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __VFP_FP__ 1
#define __ARM_FP 4
#undef __ARM_FP16_FORMAT_IEEE
# 1 "<built-in>"
#undef __ARM_FP16_FORMAT_ALTERNATIVE
# 1 "<built-in>"
#undef __ARM_FP16_ARGS
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#define __ARM_FEATURE_FMA 1
#undef __ARM_NEON__
# 1 "<built-in>"
#undef __ARM_NEON
# 1 "<built-in>"
#undef __ARM_NEON_FP
# 1 "<built-in>"
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7EM__ 1
#define __ARM_PCS_VFP 1
#define __ARM_EABI__ 1
#define __ARM_ARCH_EXT_IDIV__ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
#define __ARM_FEATURE_COPROC 15
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
# 1 "<command-line>"
#define __USES_INITFINI__ 1
#define DEBUG 1
#define USE_HAL_DRIVER 1
#define USE_FULL_LL_DRIVER 1
#define ARM_MATH_MATRIX_CHECK 1
#define ARM_MATH_ROUNDING 1
#define UNALIGNED_SUPPORT_DISABLE 1
#define ARM_MATH_CM4 1
#define FLASH_SIZE 256
#define HSE_VALUE 8000000
#define USE_STDPERIPH_DRIVER 1
#define STM32F3_DISCOVERY 1
#define STM32F303xC 1
#define STM32F3 1
#define __PROJECTNAME__ "OSD"
#define __TARGET__ "STM32F3_DISCOVERY"
#define __REVISION__ "738a96a"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
# 73 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h" 1
# 39 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __STM32F3xx_HAL_H 






# 1 "./src/main/target/stm32f3xx_hal_conf.h" 1
# 37 "./src/main/target/stm32f3xx_hal_conf.h"
#define __STM32F3xx_HAL_CONF_H 
# 50 "./src/main/target/stm32f3xx_hal_conf.h"
#define HAL_MODULE_ENABLED 
#define HAL_ADC_MODULE_ENABLED 



#define HAL_CORTEX_MODULE_ENABLED 

#define HAL_DAC_MODULE_ENABLED 
#define HAL_DMA_MODULE_ENABLED 
#define HAL_FLASH_MODULE_ENABLED 




#define HAL_GPIO_MODULE_ENABLED 

#define HAL_I2C_MODULE_ENABLED 




#define HAL_PCD_MODULE_ENABLED 
#define HAL_PWR_MODULE_ENABLED 
#define HAL_RCC_MODULE_ENABLED 




#define HAL_SPI_MODULE_ENABLED 
#define HAL_TIM_MODULE_ENABLED 

#define HAL_UART_MODULE_ENABLED 
#define HAL_USART_MODULE_ENABLED 
# 100 "./src/main/target/stm32f3xx_hal_conf.h"
#define HSE_STARTUP_TIMEOUT ((uint32_t)100)
# 109 "./src/main/target/stm32f3xx_hal_conf.h"
#define HSI_VALUE ((uint32_t)8000000)







#define HSI_STARTUP_TIMEOUT ((uint32_t)5000)






#define LSI_VALUE ((uint32_t)40000)







#define LSE_VALUE ((uint32_t)32768)






#define LSE_STARTUP_TIMEOUT ((uint32_t)5000)
# 150 "./src/main/target/stm32f3xx_hal_conf.h"
#define EXTERNAL_CLOCK_VALUE ((uint32_t)8000000)
# 160 "./src/main/target/stm32f3xx_hal_conf.h"
#define VDD_VALUE ((uint32_t)3300)
#define TICK_INT_PRIORITY ((uint32_t)(1<<__NVIC_PRIO_BITS) - 1)
#define USE_RTOS 0
#define PREFETCH_ENABLE 1
#define INSTRUCTION_CACHE_ENABLE 0
#define DATA_CACHE_ENABLE 0
# 180 "./src/main/target/stm32f3xx_hal_conf.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __STM32F3xx_HAL_RCC_H 






# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h" 1
# 39 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
#define __STM32F3xx_HAL_DEF 






# 1 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h" 1
# 55 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
#define __STM32F3xx_H 
# 124 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
#define __STM32F3_CMSIS_VERSION_MAIN (0x02)
#define __STM32F3_CMSIS_VERSION_SUB1 (0x03)
#define __STM32F3_CMSIS_VERSION_SUB2 (0x02)
#define __STM32F3_CMSIS_VERSION_RC (0x00)
#define __STM32F3_CMSIS_VERSION ((__STM32F3_CMSIS_VERSION_MAIN << 24) |(__STM32F3_CMSIS_VERSION_SUB1 << 16) |(__STM32F3_CMSIS_VERSION_SUB2 << 8 ) |(__STM32F3_CMSIS_VERSION_RC))
# 152 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h" 1
# 51 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define __STM32F303xC_H 
# 64 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define __CM4_REV 0x0001U
#define __MPU_PRESENT 1U
#define __NVIC_PRIO_BITS 4U
#define __Vendor_SysTickConfig 0U
#define __FPU_PRESENT 1U
# 82 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
typedef enum
{

  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  WWDG_IRQn = 0,
  PVD_IRQn = 1,
  TAMP_STAMP_IRQn = 2,
  RTC_WKUP_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_TSC_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
  ADC1_2_IRQn = 18,
  USB_HP_CAN_TX_IRQn = 19,
  USB_LP_CAN_RX0_IRQn = 20,
  CAN_RX1_IRQn = 21,
  CAN_SCE_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_TIM15_IRQn = 24,
  TIM1_UP_TIM16_IRQn = 25,
  TIM1_TRG_COM_TIM17_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTC_Alarm_IRQn = 41,
  USBWakeUp_IRQn = 42,
  TIM8_BRK_IRQn = 43,
  TIM8_UP_IRQn = 44,
  TIM8_TRG_COM_IRQn = 45,
  TIM8_CC_IRQn = 46,
  ADC3_IRQn = 47,
  SPI3_IRQn = 51,
  UART4_IRQn = 52,
  UART5_IRQn = 53,
  TIM6_DAC_IRQn = 54,
  TIM7_IRQn = 55,
  DMA2_Channel1_IRQn = 56,
  DMA2_Channel2_IRQn = 57,
  DMA2_Channel3_IRQn = 58,
  DMA2_Channel4_IRQn = 59,
  DMA2_Channel5_IRQn = 60,
  ADC4_IRQn = 61,
  COMP1_2_3_IRQn = 64,
  COMP4_5_6_IRQn = 65,
  COMP7_IRQn = 66,
  USB_HP_IRQn = 74,
  USB_LP_IRQn = 75,
  USBWakeUp_RMP_IRQn = 76,
  FPU_IRQn = 81,
} IRQn_Type;





# 1 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h" 1
# 42 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __CORE_CM4_H_GENERIC 

# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdint.h" 1 3 4
# 9 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdint.h" 3 4
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 1 3 4
# 10 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define _STDINT_H 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 1 3 4
# 22 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define _SYS_FEATURES_H 





# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_newlib_version.h" 1 3 4



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "2.5.0"
#define __NEWLIB__ 2
#define __NEWLIB_MINOR__ 5
#define __NEWLIB_PATCHLEVEL__ 0
# 29 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 2 3 4




#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 128 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1



#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 155 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 242 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __ATFILE_VISIBLE 1





#define __BSD_VISIBLE 1







#define __GNU_VISIBLE 0




#define __ISO_C_VISIBLE 2011
# 272 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __LARGEFILE_VISIBLE 0



#define __MISC_VISIBLE 1





#define __POSIX_VISIBLE 200809
# 298 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __SVID_VISIBLE 1
# 314 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\features.h" 3 4
#define __XSI_VISIBLE 0
# 9 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 2 3 4






#define __EXP(x) __ ##x ##__
# 26 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
#define __have_longlong64 1






#define __have_long32 1








# 41 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 244 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
#undef __EXP
# 13 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 1 3 4
# 10 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define _SYS__INTSUP_H 





#define __STDINT_EXP(x) __ ##x ##__
# 35 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef __int20
#undef long
#define signed +0
#define unsigned +0
#define char +0
#define short +1
#define __int20 +2
#define int +2
#define long +4
# 64 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define _INTPTR_EQ_INT 






#define _INT32_EQ_LONG 







#define __INT8 "hh"
# 90 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT16 "h"
# 101 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT32 "l"
# 110 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __INT64 "ll"






#define __FAST8 
# 126 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __FAST16 






#define __FAST32 
# 144 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __FAST64 "ll"



#define __LEAST8 "hh"
# 159 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST16 "h"
# 170 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST32 "l"
# 179 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#define __LEAST64 "ll"

#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef long
       
       
       
       
       
# 191 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
#undef __int20
       
       
# 14 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h" 1 3 4
# 10 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h" 3 4
#define _SYS__STDINT_H 
# 20 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h" 3 4
typedef __int8_t int8_t ;
#define _INT8_T_DECLARED 


typedef __uint8_t uint8_t ;
#define _UINT8_T_DECLARED 

#define __int8_t_defined 1




typedef __int16_t int16_t ;
#define _INT16_T_DECLARED 


typedef __uint16_t uint16_t ;
#define _UINT16_T_DECLARED 

#define __int16_t_defined 1




typedef __int32_t int32_t ;
#define _INT32_T_DECLARED 


typedef __uint32_t uint32_t ;
#define _UINT32_T_DECLARED 

#define __int32_t_defined 1




typedef __int64_t int64_t ;
#define _INT64_T_DECLARED 


typedef __uint64_t uint64_t ;
#define _UINT64_T_DECLARED 

#define __int64_t_defined 1



typedef __intmax_t intmax_t;
#define _INTMAX_T_DECLARED 



typedef __uintmax_t uintmax_t;
#define _UINTMAX_T_DECLARED 



typedef __intptr_t intptr_t;
#define _INTPTR_T_DECLARED 



typedef __uintptr_t uintptr_t;
#define _UINTPTR_T_DECLARED 
# 15 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
# 51 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
# 128 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX (__INTPTR_MAX__)
#define UINTPTR_MAX (__UINTPTR_MAX__)
# 152 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX (__INT8_MAX__)
#define UINT8_MAX (__UINT8_MAX__)







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX (__INT_LEAST8_MAX__)
#define UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)
# 174 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX (__INT16_MAX__)
#define UINT16_MAX (__UINT16_MAX__)







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX (__INT_LEAST16_MAX__)
#define UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)
# 196 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX (__INT32_MAX__)
#define UINT32_MAX (__UINT32_MAX__)
# 212 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX (__INT_LEAST32_MAX__)
#define UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)
# 230 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX (__INT64_MAX__)
#define UINT64_MAX (__UINT64_MAX__)
# 246 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX (__INT_LEAST64_MAX__)
#define UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)
# 262 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX (__INT_FAST8_MAX__)
#define UINT_FAST8_MAX (__UINT_FAST8_MAX__)
# 278 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX (__INT_FAST16_MAX__)
#define UINT_FAST16_MAX (__UINT_FAST16_MAX__)
# 294 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX (__INT_FAST32_MAX__)
#define UINT_FAST32_MAX (__UINT_FAST32_MAX__)
# 310 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX (__INT_FAST64_MAX__)
#define UINT_FAST64_MAX (__UINT_FAST64_MAX__)
# 326 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_MAX (__INTMAX_MAX__)
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX (__UINTMAX_MAX__)







#define SIZE_MAX (__SIZE_MAX__)





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))



#define PTRDIFF_MAX (__PTRDIFF_MAX__)



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)




#define WCHAR_MIN (__WCHAR_MIN__)
# 374 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define WCHAR_MAX (__WCHAR_MAX__)
# 384 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define WINT_MAX (__WINT_MAX__)




#define WINT_MIN (__WINT_MIN__)






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 408 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 420 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 433 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 449 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdint.h" 3 4
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 10 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 45 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h" 2
# 74 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __CM4_CMSIS_VERSION_MAIN (0x04U)
#define __CM4_CMSIS_VERSION_SUB (0x1EU)
#define __CM4_CMSIS_VERSION ((__CM4_CMSIS_VERSION_MAIN << 16U) | __CM4_CMSIS_VERSION_SUB )


#define __CORTEX_M (0x04U)
# 93 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __ASM __asm
#define __INLINE inline
#define __STATIC_INLINE static inline
# 151 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __FPU_USED 1U
# 210 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmInstr.h" 1
# 42 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmInstr.h"
#define __CORE_CMINSTR_H 
# 61 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmInstr.h"
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h" 1
# 36 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __CMSIS_GCC_H 



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 58 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"

# 58 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__( ( always_inline ) ) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}
# 134 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp\n" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp\n" : "=r" (result) );
  return(result);
}
# 188 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 226 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__( ( always_inline ) ) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline void __set_BASEPRI(uint32_t value)
{
  __asm volatile ("MSR basepri, %0" : : "r" (value) : "memory");
}
# 274 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline void __set_BASEPRI_MAX(uint32_t value)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
}







__attribute__( ( always_inline ) ) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}







__attribute__( ( always_inline ) ) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 314 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline uint32_t __get_FPSCR(void)
{

  uint32_t result;


  __asm volatile ("");
  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  __asm volatile ("");
  return(result);



}







__attribute__( ( always_inline ) ) static inline void __set_FPSCR(uint32_t fpscr)
{


  __asm volatile ("");
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
  __asm volatile ("");

}
# 365 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
#define __CMSIS_GCC_USE_REG(r) "r" (r)






__attribute__((always_inline)) static inline void __NOP(void)
{
  __asm volatile ("nop");
}






__attribute__((always_inline)) static inline void __WFI(void)
{
  __asm volatile ("wfi");
}







__attribute__((always_inline)) static inline void __WFE(void)
{
  __asm volatile ("wfe");
}






__attribute__((always_inline)) static inline void __SEV(void)
{
  __asm volatile ("sev");
}
# 416 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 450 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 469 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 484 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 504 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 517 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __BKPT(value) __ASM volatile ("bkpt "#value)
# 526 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;


   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 544 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
  return(result);
}
# 554 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __CLZ __builtin_clz
# 565 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 587 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 609 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 626 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 643 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 660 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 686 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __SSAT(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 701 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
#define __USAT(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 716 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 731 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 753 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 775 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 790 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *addr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*addr) : "r" ((uint32_t)value) );
}
# 802 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *addr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*addr) : "r" ((uint32_t)value) );
}
# 814 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *addr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*addr) : "r" (value) );
}
# 832 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__( ( always_inline ) ) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__( ( always_inline ) ) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

#define __SSAT16(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






#define __USAT16(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






__attribute__( ( always_inline ) ) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__( ( always_inline ) ) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__( ( always_inline ) ) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__( ( always_inline ) ) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__( ( always_inline ) ) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

#define __PKHBT(ARG1,ARG2,ARG3) ({ uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); __ASM ("pkhbt %0, %1, %2, lsl %3" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2), "I" (ARG3) ); __RES; })






#define __PKHTB(ARG1,ARG2,ARG3) ({ uint32_t __RES, __ARG1 = (ARG1), __ARG2 = (ARG2); if (ARG3 == 0) __ASM ("pkhtb %0, %1, %2" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2) ); else __ASM ("pkhtb %0, %1, %2, asr %3" : "=r" (__RES) : "r" (__ARG1), "r" (__ARG2), "I" (ARG3) ); __RES; })
# 1357 "./lib/main/STM32F3/Drivers/CMSIS/Include/cmsis_gcc.h"
__attribute__( ( always_inline ) ) static inline uint32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}






#pragma GCC diagnostic pop
# 62 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmInstr.h" 2
# 211 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h" 2
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmFunc.h" 1
# 42 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmFunc.h"
#define __CORE_CMFUNC_H 
# 212 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h" 2
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmSimd.h" 1
# 42 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cmSimd.h"
#define __CORE_CMSIMD_H 
# 213 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h" 2
# 223 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __CORE_CM4_H_DEPENDANT 
# 268 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define __I volatile const

#define __O volatile
#define __IO volatile


#define __IM volatile const
#define __OM volatile
#define __IOM volatile
# 308 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;


#define APSR_N_Pos 31U
#define APSR_N_Msk (1UL << APSR_N_Pos)

#define APSR_Z_Pos 30U
#define APSR_Z_Msk (1UL << APSR_Z_Pos)

#define APSR_C_Pos 29U
#define APSR_C_Msk (1UL << APSR_C_Pos)

#define APSR_V_Pos 28U
#define APSR_V_Msk (1UL << APSR_V_Pos)

#define APSR_Q_Pos 27U
#define APSR_Q_Msk (1UL << APSR_Q_Pos)

#define APSR_GE_Pos 16U
#define APSR_GE_Msk (0xFUL << APSR_GE_Pos)





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;


#define IPSR_ISR_Pos 0U
#define IPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:7;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t IT:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;


#define xPSR_N_Pos 31U
#define xPSR_N_Msk (1UL << xPSR_N_Pos)

#define xPSR_Z_Pos 30U
#define xPSR_Z_Msk (1UL << xPSR_Z_Pos)

#define xPSR_C_Pos 29U
#define xPSR_C_Msk (1UL << xPSR_C_Pos)

#define xPSR_V_Pos 28U
#define xPSR_V_Msk (1UL << xPSR_V_Pos)

#define xPSR_Q_Pos 27U
#define xPSR_Q_Msk (1UL << xPSR_Q_Pos)

#define xPSR_IT_Pos 25U
#define xPSR_IT_Msk (3UL << xPSR_IT_Pos)

#define xPSR_T_Pos 24U
#define xPSR_T_Msk (1UL << xPSR_T_Pos)

#define xPSR_GE_Pos 16U
#define xPSR_GE_Msk (0xFUL << xPSR_GE_Pos)

#define xPSR_ISR_Pos 0U
#define xPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;


#define CONTROL_FPCA_Pos 2U
#define CONTROL_FPCA_Msk (1UL << CONTROL_FPCA_Pos)

#define CONTROL_SPSEL_Pos 1U
#define CONTROL_SPSEL_Msk (1UL << CONTROL_SPSEL_Pos)

#define CONTROL_nPRIV_Pos 0U
#define CONTROL_nPRIV_Msk (1UL )
# 451 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;


#define NVIC_STIR_INTID_Pos 0U
#define NVIC_STIR_INTID_Msk (0x1FFUL )
# 485 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;


#define SCB_CPUID_IMPLEMENTER_Pos 24U
#define SCB_CPUID_IMPLEMENTER_Msk (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)

#define SCB_CPUID_VARIANT_Pos 20U
#define SCB_CPUID_VARIANT_Msk (0xFUL << SCB_CPUID_VARIANT_Pos)

#define SCB_CPUID_ARCHITECTURE_Pos 16U
#define SCB_CPUID_ARCHITECTURE_Msk (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)

#define SCB_CPUID_PARTNO_Pos 4U
#define SCB_CPUID_PARTNO_Msk (0xFFFUL << SCB_CPUID_PARTNO_Pos)

#define SCB_CPUID_REVISION_Pos 0U
#define SCB_CPUID_REVISION_Msk (0xFUL )


#define SCB_ICSR_NMIPENDSET_Pos 31U
#define SCB_ICSR_NMIPENDSET_Msk (1UL << SCB_ICSR_NMIPENDSET_Pos)

#define SCB_ICSR_PENDSVSET_Pos 28U
#define SCB_ICSR_PENDSVSET_Msk (1UL << SCB_ICSR_PENDSVSET_Pos)

#define SCB_ICSR_PENDSVCLR_Pos 27U
#define SCB_ICSR_PENDSVCLR_Msk (1UL << SCB_ICSR_PENDSVCLR_Pos)

#define SCB_ICSR_PENDSTSET_Pos 26U
#define SCB_ICSR_PENDSTSET_Msk (1UL << SCB_ICSR_PENDSTSET_Pos)

#define SCB_ICSR_PENDSTCLR_Pos 25U
#define SCB_ICSR_PENDSTCLR_Msk (1UL << SCB_ICSR_PENDSTCLR_Pos)

#define SCB_ICSR_ISRPREEMPT_Pos 23U
#define SCB_ICSR_ISRPREEMPT_Msk (1UL << SCB_ICSR_ISRPREEMPT_Pos)

#define SCB_ICSR_ISRPENDING_Pos 22U
#define SCB_ICSR_ISRPENDING_Msk (1UL << SCB_ICSR_ISRPENDING_Pos)

#define SCB_ICSR_VECTPENDING_Pos 12U
#define SCB_ICSR_VECTPENDING_Msk (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)

#define SCB_ICSR_RETTOBASE_Pos 11U
#define SCB_ICSR_RETTOBASE_Msk (1UL << SCB_ICSR_RETTOBASE_Pos)

#define SCB_ICSR_VECTACTIVE_Pos 0U
#define SCB_ICSR_VECTACTIVE_Msk (0x1FFUL )


#define SCB_VTOR_TBLOFF_Pos 7U
#define SCB_VTOR_TBLOFF_Msk (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)


#define SCB_AIRCR_VECTKEY_Pos 16U
#define SCB_AIRCR_VECTKEY_Msk (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)

#define SCB_AIRCR_VECTKEYSTAT_Pos 16U
#define SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)

#define SCB_AIRCR_ENDIANESS_Pos 15U
#define SCB_AIRCR_ENDIANESS_Msk (1UL << SCB_AIRCR_ENDIANESS_Pos)

#define SCB_AIRCR_PRIGROUP_Pos 8U
#define SCB_AIRCR_PRIGROUP_Msk (7UL << SCB_AIRCR_PRIGROUP_Pos)

#define SCB_AIRCR_SYSRESETREQ_Pos 2U
#define SCB_AIRCR_SYSRESETREQ_Msk (1UL << SCB_AIRCR_SYSRESETREQ_Pos)

#define SCB_AIRCR_VECTCLRACTIVE_Pos 1U
#define SCB_AIRCR_VECTCLRACTIVE_Msk (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)

#define SCB_AIRCR_VECTRESET_Pos 0U
#define SCB_AIRCR_VECTRESET_Msk (1UL )


#define SCB_SCR_SEVONPEND_Pos 4U
#define SCB_SCR_SEVONPEND_Msk (1UL << SCB_SCR_SEVONPEND_Pos)

#define SCB_SCR_SLEEPDEEP_Pos 2U
#define SCB_SCR_SLEEPDEEP_Msk (1UL << SCB_SCR_SLEEPDEEP_Pos)

#define SCB_SCR_SLEEPONEXIT_Pos 1U
#define SCB_SCR_SLEEPONEXIT_Msk (1UL << SCB_SCR_SLEEPONEXIT_Pos)


#define SCB_CCR_STKALIGN_Pos 9U
#define SCB_CCR_STKALIGN_Msk (1UL << SCB_CCR_STKALIGN_Pos)

#define SCB_CCR_BFHFNMIGN_Pos 8U
#define SCB_CCR_BFHFNMIGN_Msk (1UL << SCB_CCR_BFHFNMIGN_Pos)

#define SCB_CCR_DIV_0_TRP_Pos 4U
#define SCB_CCR_DIV_0_TRP_Msk (1UL << SCB_CCR_DIV_0_TRP_Pos)

#define SCB_CCR_UNALIGN_TRP_Pos 3U
#define SCB_CCR_UNALIGN_TRP_Msk (1UL << SCB_CCR_UNALIGN_TRP_Pos)

#define SCB_CCR_USERSETMPEND_Pos 1U
#define SCB_CCR_USERSETMPEND_Msk (1UL << SCB_CCR_USERSETMPEND_Pos)

#define SCB_CCR_NONBASETHRDENA_Pos 0U
#define SCB_CCR_NONBASETHRDENA_Msk (1UL )


#define SCB_SHCSR_USGFAULTENA_Pos 18U
#define SCB_SHCSR_USGFAULTENA_Msk (1UL << SCB_SHCSR_USGFAULTENA_Pos)

#define SCB_SHCSR_BUSFAULTENA_Pos 17U
#define SCB_SHCSR_BUSFAULTENA_Msk (1UL << SCB_SHCSR_BUSFAULTENA_Pos)

#define SCB_SHCSR_MEMFAULTENA_Pos 16U
#define SCB_SHCSR_MEMFAULTENA_Msk (1UL << SCB_SHCSR_MEMFAULTENA_Pos)

#define SCB_SHCSR_SVCALLPENDED_Pos 15U
#define SCB_SHCSR_SVCALLPENDED_Msk (1UL << SCB_SHCSR_SVCALLPENDED_Pos)

#define SCB_SHCSR_BUSFAULTPENDED_Pos 14U
#define SCB_SHCSR_BUSFAULTPENDED_Msk (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)

#define SCB_SHCSR_MEMFAULTPENDED_Pos 13U
#define SCB_SHCSR_MEMFAULTPENDED_Msk (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)

#define SCB_SHCSR_USGFAULTPENDED_Pos 12U
#define SCB_SHCSR_USGFAULTPENDED_Msk (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)

#define SCB_SHCSR_SYSTICKACT_Pos 11U
#define SCB_SHCSR_SYSTICKACT_Msk (1UL << SCB_SHCSR_SYSTICKACT_Pos)

#define SCB_SHCSR_PENDSVACT_Pos 10U
#define SCB_SHCSR_PENDSVACT_Msk (1UL << SCB_SHCSR_PENDSVACT_Pos)

#define SCB_SHCSR_MONITORACT_Pos 8U
#define SCB_SHCSR_MONITORACT_Msk (1UL << SCB_SHCSR_MONITORACT_Pos)

#define SCB_SHCSR_SVCALLACT_Pos 7U
#define SCB_SHCSR_SVCALLACT_Msk (1UL << SCB_SHCSR_SVCALLACT_Pos)

#define SCB_SHCSR_USGFAULTACT_Pos 3U
#define SCB_SHCSR_USGFAULTACT_Msk (1UL << SCB_SHCSR_USGFAULTACT_Pos)

#define SCB_SHCSR_BUSFAULTACT_Pos 1U
#define SCB_SHCSR_BUSFAULTACT_Msk (1UL << SCB_SHCSR_BUSFAULTACT_Pos)

#define SCB_SHCSR_MEMFAULTACT_Pos 0U
#define SCB_SHCSR_MEMFAULTACT_Msk (1UL )


#define SCB_CFSR_USGFAULTSR_Pos 16U
#define SCB_CFSR_USGFAULTSR_Msk (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)

#define SCB_CFSR_BUSFAULTSR_Pos 8U
#define SCB_CFSR_BUSFAULTSR_Msk (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)

#define SCB_CFSR_MEMFAULTSR_Pos 0U
#define SCB_CFSR_MEMFAULTSR_Msk (0xFFUL )


#define SCB_HFSR_DEBUGEVT_Pos 31U
#define SCB_HFSR_DEBUGEVT_Msk (1UL << SCB_HFSR_DEBUGEVT_Pos)

#define SCB_HFSR_FORCED_Pos 30U
#define SCB_HFSR_FORCED_Msk (1UL << SCB_HFSR_FORCED_Pos)

#define SCB_HFSR_VECTTBL_Pos 1U
#define SCB_HFSR_VECTTBL_Msk (1UL << SCB_HFSR_VECTTBL_Pos)


#define SCB_DFSR_EXTERNAL_Pos 4U
#define SCB_DFSR_EXTERNAL_Msk (1UL << SCB_DFSR_EXTERNAL_Pos)

#define SCB_DFSR_VCATCH_Pos 3U
#define SCB_DFSR_VCATCH_Msk (1UL << SCB_DFSR_VCATCH_Pos)

#define SCB_DFSR_DWTTRAP_Pos 2U
#define SCB_DFSR_DWTTRAP_Msk (1UL << SCB_DFSR_DWTTRAP_Pos)

#define SCB_DFSR_BKPT_Pos 1U
#define SCB_DFSR_BKPT_Msk (1UL << SCB_DFSR_BKPT_Pos)

#define SCB_DFSR_HALTED_Pos 0U
#define SCB_DFSR_HALTED_Msk (1UL )
# 704 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;


#define SCnSCB_ICTR_INTLINESNUM_Pos 0U
#define SCnSCB_ICTR_INTLINESNUM_Msk (0xFUL )


#define SCnSCB_ACTLR_DISOOFP_Pos 9U
#define SCnSCB_ACTLR_DISOOFP_Msk (1UL << SCnSCB_ACTLR_DISOOFP_Pos)

#define SCnSCB_ACTLR_DISFPCA_Pos 8U
#define SCnSCB_ACTLR_DISFPCA_Msk (1UL << SCnSCB_ACTLR_DISFPCA_Pos)

#define SCnSCB_ACTLR_DISFOLD_Pos 2U
#define SCnSCB_ACTLR_DISFOLD_Msk (1UL << SCnSCB_ACTLR_DISFOLD_Pos)

#define SCnSCB_ACTLR_DISDEFWBUF_Pos 1U
#define SCnSCB_ACTLR_DISDEFWBUF_Msk (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)

#define SCnSCB_ACTLR_DISMCYCINT_Pos 0U
#define SCnSCB_ACTLR_DISMCYCINT_Msk (1UL )
# 744 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;


#define SysTick_CTRL_COUNTFLAG_Pos 16U
#define SysTick_CTRL_COUNTFLAG_Msk (1UL << SysTick_CTRL_COUNTFLAG_Pos)

#define SysTick_CTRL_CLKSOURCE_Pos 2U
#define SysTick_CTRL_CLKSOURCE_Msk (1UL << SysTick_CTRL_CLKSOURCE_Pos)

#define SysTick_CTRL_TICKINT_Pos 1U
#define SysTick_CTRL_TICKINT_Msk (1UL << SysTick_CTRL_TICKINT_Pos)

#define SysTick_CTRL_ENABLE_Pos 0U
#define SysTick_CTRL_ENABLE_Msk (1UL )


#define SysTick_LOAD_RELOAD_Pos 0U
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFUL )


#define SysTick_VAL_CURRENT_Pos 0U
#define SysTick_VAL_CURRENT_Msk (0xFFFFFFUL )


#define SysTick_CALIB_NOREF_Pos 31U
#define SysTick_CALIB_NOREF_Msk (1UL << SysTick_CALIB_NOREF_Pos)

#define SysTick_CALIB_SKEW_Pos 30U
#define SysTick_CALIB_SKEW_Msk (1UL << SysTick_CALIB_SKEW_Pos)

#define SysTick_CALIB_TENMS_Pos 0U
#define SysTick_CALIB_TENMS_Msk (0xFFFFFFUL )
# 796 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;


#define ITM_TPR_PRIVMASK_Pos 0U
#define ITM_TPR_PRIVMASK_Msk (0xFUL )


#define ITM_TCR_BUSY_Pos 23U
#define ITM_TCR_BUSY_Msk (1UL << ITM_TCR_BUSY_Pos)

#define ITM_TCR_TraceBusID_Pos 16U
#define ITM_TCR_TraceBusID_Msk (0x7FUL << ITM_TCR_TraceBusID_Pos)

#define ITM_TCR_GTSFREQ_Pos 10U
#define ITM_TCR_GTSFREQ_Msk (3UL << ITM_TCR_GTSFREQ_Pos)

#define ITM_TCR_TSPrescale_Pos 8U
#define ITM_TCR_TSPrescale_Msk (3UL << ITM_TCR_TSPrescale_Pos)

#define ITM_TCR_SWOENA_Pos 4U
#define ITM_TCR_SWOENA_Msk (1UL << ITM_TCR_SWOENA_Pos)

#define ITM_TCR_DWTENA_Pos 3U
#define ITM_TCR_DWTENA_Msk (1UL << ITM_TCR_DWTENA_Pos)

#define ITM_TCR_SYNCENA_Pos 2U
#define ITM_TCR_SYNCENA_Msk (1UL << ITM_TCR_SYNCENA_Pos)

#define ITM_TCR_TSENA_Pos 1U
#define ITM_TCR_TSENA_Msk (1UL << ITM_TCR_TSENA_Pos)

#define ITM_TCR_ITMENA_Pos 0U
#define ITM_TCR_ITMENA_Msk (1UL )


#define ITM_IWR_ATVALIDM_Pos 0U
#define ITM_IWR_ATVALIDM_Msk (1UL )


#define ITM_IRR_ATREADYM_Pos 0U
#define ITM_IRR_ATREADYM_Msk (1UL )


#define ITM_IMCR_INTEGRATION_Pos 0U
#define ITM_IMCR_INTEGRATION_Msk (1UL )


#define ITM_LSR_ByteAcc_Pos 2U
#define ITM_LSR_ByteAcc_Msk (1UL << ITM_LSR_ByteAcc_Pos)

#define ITM_LSR_Access_Pos 1U
#define ITM_LSR_Access_Msk (1UL << ITM_LSR_Access_Pos)

#define ITM_LSR_Present_Pos 0U
#define ITM_LSR_Present_Msk (1UL )
# 899 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;


#define DWT_CTRL_NUMCOMP_Pos 28U
#define DWT_CTRL_NUMCOMP_Msk (0xFUL << DWT_CTRL_NUMCOMP_Pos)

#define DWT_CTRL_NOTRCPKT_Pos 27U
#define DWT_CTRL_NOTRCPKT_Msk (0x1UL << DWT_CTRL_NOTRCPKT_Pos)

#define DWT_CTRL_NOEXTTRIG_Pos 26U
#define DWT_CTRL_NOEXTTRIG_Msk (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)

#define DWT_CTRL_NOCYCCNT_Pos 25U
#define DWT_CTRL_NOCYCCNT_Msk (0x1UL << DWT_CTRL_NOCYCCNT_Pos)

#define DWT_CTRL_NOPRFCNT_Pos 24U
#define DWT_CTRL_NOPRFCNT_Msk (0x1UL << DWT_CTRL_NOPRFCNT_Pos)

#define DWT_CTRL_CYCEVTENA_Pos 22U
#define DWT_CTRL_CYCEVTENA_Msk (0x1UL << DWT_CTRL_CYCEVTENA_Pos)

#define DWT_CTRL_FOLDEVTENA_Pos 21U
#define DWT_CTRL_FOLDEVTENA_Msk (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)

#define DWT_CTRL_LSUEVTENA_Pos 20U
#define DWT_CTRL_LSUEVTENA_Msk (0x1UL << DWT_CTRL_LSUEVTENA_Pos)

#define DWT_CTRL_SLEEPEVTENA_Pos 19U
#define DWT_CTRL_SLEEPEVTENA_Msk (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)

#define DWT_CTRL_EXCEVTENA_Pos 18U
#define DWT_CTRL_EXCEVTENA_Msk (0x1UL << DWT_CTRL_EXCEVTENA_Pos)

#define DWT_CTRL_CPIEVTENA_Pos 17U
#define DWT_CTRL_CPIEVTENA_Msk (0x1UL << DWT_CTRL_CPIEVTENA_Pos)

#define DWT_CTRL_EXCTRCENA_Pos 16U
#define DWT_CTRL_EXCTRCENA_Msk (0x1UL << DWT_CTRL_EXCTRCENA_Pos)

#define DWT_CTRL_PCSAMPLENA_Pos 12U
#define DWT_CTRL_PCSAMPLENA_Msk (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)

#define DWT_CTRL_SYNCTAP_Pos 10U
#define DWT_CTRL_SYNCTAP_Msk (0x3UL << DWT_CTRL_SYNCTAP_Pos)

#define DWT_CTRL_CYCTAP_Pos 9U
#define DWT_CTRL_CYCTAP_Msk (0x1UL << DWT_CTRL_CYCTAP_Pos)

#define DWT_CTRL_POSTINIT_Pos 5U
#define DWT_CTRL_POSTINIT_Msk (0xFUL << DWT_CTRL_POSTINIT_Pos)

#define DWT_CTRL_POSTPRESET_Pos 1U
#define DWT_CTRL_POSTPRESET_Msk (0xFUL << DWT_CTRL_POSTPRESET_Pos)

#define DWT_CTRL_CYCCNTENA_Pos 0U
#define DWT_CTRL_CYCCNTENA_Msk (0x1UL )


#define DWT_CPICNT_CPICNT_Pos 0U
#define DWT_CPICNT_CPICNT_Msk (0xFFUL )


#define DWT_EXCCNT_EXCCNT_Pos 0U
#define DWT_EXCCNT_EXCCNT_Msk (0xFFUL )


#define DWT_SLEEPCNT_SLEEPCNT_Pos 0U
#define DWT_SLEEPCNT_SLEEPCNT_Msk (0xFFUL )


#define DWT_LSUCNT_LSUCNT_Pos 0U
#define DWT_LSUCNT_LSUCNT_Msk (0xFFUL )


#define DWT_FOLDCNT_FOLDCNT_Pos 0U
#define DWT_FOLDCNT_FOLDCNT_Msk (0xFFUL )


#define DWT_MASK_MASK_Pos 0U
#define DWT_MASK_MASK_Msk (0x1FUL )


#define DWT_FUNCTION_MATCHED_Pos 24U
#define DWT_FUNCTION_MATCHED_Msk (0x1UL << DWT_FUNCTION_MATCHED_Pos)

#define DWT_FUNCTION_DATAVADDR1_Pos 16U
#define DWT_FUNCTION_DATAVADDR1_Msk (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)

#define DWT_FUNCTION_DATAVADDR0_Pos 12U
#define DWT_FUNCTION_DATAVADDR0_Msk (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)

#define DWT_FUNCTION_DATAVSIZE_Pos 10U
#define DWT_FUNCTION_DATAVSIZE_Msk (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)

#define DWT_FUNCTION_LNK1ENA_Pos 9U
#define DWT_FUNCTION_LNK1ENA_Msk (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)

#define DWT_FUNCTION_DATAVMATCH_Pos 8U
#define DWT_FUNCTION_DATAVMATCH_Msk (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)

#define DWT_FUNCTION_CYCMATCH_Pos 7U
#define DWT_FUNCTION_CYCMATCH_Msk (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)

#define DWT_FUNCTION_EMITRANGE_Pos 5U
#define DWT_FUNCTION_EMITRANGE_Msk (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)

#define DWT_FUNCTION_FUNCTION_Pos 0U
#define DWT_FUNCTION_FUNCTION_Msk (0xFUL )
# 1046 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;


#define TPI_ACPR_PRESCALER_Pos 0U
#define TPI_ACPR_PRESCALER_Msk (0x1FFFUL )


#define TPI_SPPR_TXMODE_Pos 0U
#define TPI_SPPR_TXMODE_Msk (0x3UL )


#define TPI_FFSR_FtNonStop_Pos 3U
#define TPI_FFSR_FtNonStop_Msk (0x1UL << TPI_FFSR_FtNonStop_Pos)

#define TPI_FFSR_TCPresent_Pos 2U
#define TPI_FFSR_TCPresent_Msk (0x1UL << TPI_FFSR_TCPresent_Pos)

#define TPI_FFSR_FtStopped_Pos 1U
#define TPI_FFSR_FtStopped_Msk (0x1UL << TPI_FFSR_FtStopped_Pos)

#define TPI_FFSR_FlInProg_Pos 0U
#define TPI_FFSR_FlInProg_Msk (0x1UL )


#define TPI_FFCR_TrigIn_Pos 8U
#define TPI_FFCR_TrigIn_Msk (0x1UL << TPI_FFCR_TrigIn_Pos)

#define TPI_FFCR_EnFCont_Pos 1U
#define TPI_FFCR_EnFCont_Msk (0x1UL << TPI_FFCR_EnFCont_Pos)


#define TPI_TRIGGER_TRIGGER_Pos 0U
#define TPI_TRIGGER_TRIGGER_Msk (0x1UL )


#define TPI_FIFO0_ITM_ATVALID_Pos 29U
#define TPI_FIFO0_ITM_ATVALID_Msk (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)

#define TPI_FIFO0_ITM_bytecount_Pos 27U
#define TPI_FIFO0_ITM_bytecount_Msk (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)

#define TPI_FIFO0_ETM_ATVALID_Pos 26U
#define TPI_FIFO0_ETM_ATVALID_Msk (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)

#define TPI_FIFO0_ETM_bytecount_Pos 24U
#define TPI_FIFO0_ETM_bytecount_Msk (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)

#define TPI_FIFO0_ETM2_Pos 16U
#define TPI_FIFO0_ETM2_Msk (0xFFUL << TPI_FIFO0_ETM2_Pos)

#define TPI_FIFO0_ETM1_Pos 8U
#define TPI_FIFO0_ETM1_Msk (0xFFUL << TPI_FIFO0_ETM1_Pos)

#define TPI_FIFO0_ETM0_Pos 0U
#define TPI_FIFO0_ETM0_Msk (0xFFUL )


#define TPI_ITATBCTR2_ATREADY_Pos 0U
#define TPI_ITATBCTR2_ATREADY_Msk (0x1UL )


#define TPI_FIFO1_ITM_ATVALID_Pos 29U
#define TPI_FIFO1_ITM_ATVALID_Msk (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)

#define TPI_FIFO1_ITM_bytecount_Pos 27U
#define TPI_FIFO1_ITM_bytecount_Msk (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)

#define TPI_FIFO1_ETM_ATVALID_Pos 26U
#define TPI_FIFO1_ETM_ATVALID_Msk (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)

#define TPI_FIFO1_ETM_bytecount_Pos 24U
#define TPI_FIFO1_ETM_bytecount_Msk (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)

#define TPI_FIFO1_ITM2_Pos 16U
#define TPI_FIFO1_ITM2_Msk (0xFFUL << TPI_FIFO1_ITM2_Pos)

#define TPI_FIFO1_ITM1_Pos 8U
#define TPI_FIFO1_ITM1_Msk (0xFFUL << TPI_FIFO1_ITM1_Pos)

#define TPI_FIFO1_ITM0_Pos 0U
#define TPI_FIFO1_ITM0_Msk (0xFFUL )


#define TPI_ITATBCTR0_ATREADY_Pos 0U
#define TPI_ITATBCTR0_ATREADY_Msk (0x1UL )


#define TPI_ITCTRL_Mode_Pos 0U
#define TPI_ITCTRL_Mode_Msk (0x1UL )


#define TPI_DEVID_NRZVALID_Pos 11U
#define TPI_DEVID_NRZVALID_Msk (0x1UL << TPI_DEVID_NRZVALID_Pos)

#define TPI_DEVID_MANCVALID_Pos 10U
#define TPI_DEVID_MANCVALID_Msk (0x1UL << TPI_DEVID_MANCVALID_Pos)

#define TPI_DEVID_PTINVALID_Pos 9U
#define TPI_DEVID_PTINVALID_Msk (0x1UL << TPI_DEVID_PTINVALID_Pos)

#define TPI_DEVID_MinBufSz_Pos 6U
#define TPI_DEVID_MinBufSz_Msk (0x7UL << TPI_DEVID_MinBufSz_Pos)

#define TPI_DEVID_AsynClkIn_Pos 5U
#define TPI_DEVID_AsynClkIn_Msk (0x1UL << TPI_DEVID_AsynClkIn_Pos)

#define TPI_DEVID_NrTraceInput_Pos 0U
#define TPI_DEVID_NrTraceInput_Msk (0x1FUL )


#define TPI_DEVTYPE_MajorType_Pos 4U
#define TPI_DEVTYPE_MajorType_Msk (0xFUL << TPI_DEVTYPE_MajorType_Pos)

#define TPI_DEVTYPE_SubType_Pos 0U
#define TPI_DEVTYPE_SubType_Msk (0xFUL )
# 1202 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;


#define MPU_TYPE_IREGION_Pos 16U
#define MPU_TYPE_IREGION_Msk (0xFFUL << MPU_TYPE_IREGION_Pos)

#define MPU_TYPE_DREGION_Pos 8U
#define MPU_TYPE_DREGION_Msk (0xFFUL << MPU_TYPE_DREGION_Pos)

#define MPU_TYPE_SEPARATE_Pos 0U
#define MPU_TYPE_SEPARATE_Msk (1UL )


#define MPU_CTRL_PRIVDEFENA_Pos 2U
#define MPU_CTRL_PRIVDEFENA_Msk (1UL << MPU_CTRL_PRIVDEFENA_Pos)

#define MPU_CTRL_HFNMIENA_Pos 1U
#define MPU_CTRL_HFNMIENA_Msk (1UL << MPU_CTRL_HFNMIENA_Pos)

#define MPU_CTRL_ENABLE_Pos 0U
#define MPU_CTRL_ENABLE_Msk (1UL )


#define MPU_RNR_REGION_Pos 0U
#define MPU_RNR_REGION_Msk (0xFFUL )


#define MPU_RBAR_ADDR_Pos 5U
#define MPU_RBAR_ADDR_Msk (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)

#define MPU_RBAR_VALID_Pos 4U
#define MPU_RBAR_VALID_Msk (1UL << MPU_RBAR_VALID_Pos)

#define MPU_RBAR_REGION_Pos 0U
#define MPU_RBAR_REGION_Msk (0xFUL )


#define MPU_RASR_ATTRS_Pos 16U
#define MPU_RASR_ATTRS_Msk (0xFFFFUL << MPU_RASR_ATTRS_Pos)

#define MPU_RASR_XN_Pos 28U
#define MPU_RASR_XN_Msk (1UL << MPU_RASR_XN_Pos)

#define MPU_RASR_AP_Pos 24U
#define MPU_RASR_AP_Msk (0x7UL << MPU_RASR_AP_Pos)

#define MPU_RASR_TEX_Pos 19U
#define MPU_RASR_TEX_Msk (0x7UL << MPU_RASR_TEX_Pos)

#define MPU_RASR_S_Pos 18U
#define MPU_RASR_S_Msk (1UL << MPU_RASR_S_Pos)

#define MPU_RASR_C_Pos 17U
#define MPU_RASR_C_Msk (1UL << MPU_RASR_C_Pos)

#define MPU_RASR_B_Pos 16U
#define MPU_RASR_B_Msk (1UL << MPU_RASR_B_Pos)

#define MPU_RASR_SRD_Pos 8U
#define MPU_RASR_SRD_Msk (0xFFUL << MPU_RASR_SRD_Pos)

#define MPU_RASR_SIZE_Pos 1U
#define MPU_RASR_SIZE_Msk (0x1FUL << MPU_RASR_SIZE_Pos)

#define MPU_RASR_ENABLE_Pos 0U
#define MPU_RASR_ENABLE_Msk (1UL )
# 1297 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
} FPU_Type;


#define FPU_FPCCR_ASPEN_Pos 31U
#define FPU_FPCCR_ASPEN_Msk (1UL << FPU_FPCCR_ASPEN_Pos)

#define FPU_FPCCR_LSPEN_Pos 30U
#define FPU_FPCCR_LSPEN_Msk (1UL << FPU_FPCCR_LSPEN_Pos)

#define FPU_FPCCR_MONRDY_Pos 8U
#define FPU_FPCCR_MONRDY_Msk (1UL << FPU_FPCCR_MONRDY_Pos)

#define FPU_FPCCR_BFRDY_Pos 6U
#define FPU_FPCCR_BFRDY_Msk (1UL << FPU_FPCCR_BFRDY_Pos)

#define FPU_FPCCR_MMRDY_Pos 5U
#define FPU_FPCCR_MMRDY_Msk (1UL << FPU_FPCCR_MMRDY_Pos)

#define FPU_FPCCR_HFRDY_Pos 4U
#define FPU_FPCCR_HFRDY_Msk (1UL << FPU_FPCCR_HFRDY_Pos)

#define FPU_FPCCR_THREAD_Pos 3U
#define FPU_FPCCR_THREAD_Msk (1UL << FPU_FPCCR_THREAD_Pos)

#define FPU_FPCCR_USER_Pos 1U
#define FPU_FPCCR_USER_Msk (1UL << FPU_FPCCR_USER_Pos)

#define FPU_FPCCR_LSPACT_Pos 0U
#define FPU_FPCCR_LSPACT_Msk (1UL )


#define FPU_FPCAR_ADDRESS_Pos 3U
#define FPU_FPCAR_ADDRESS_Msk (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)


#define FPU_FPDSCR_AHP_Pos 26U
#define FPU_FPDSCR_AHP_Msk (1UL << FPU_FPDSCR_AHP_Pos)

#define FPU_FPDSCR_DN_Pos 25U
#define FPU_FPDSCR_DN_Msk (1UL << FPU_FPDSCR_DN_Pos)

#define FPU_FPDSCR_FZ_Pos 24U
#define FPU_FPDSCR_FZ_Msk (1UL << FPU_FPDSCR_FZ_Pos)

#define FPU_FPDSCR_RMode_Pos 22U
#define FPU_FPDSCR_RMode_Msk (3UL << FPU_FPDSCR_RMode_Pos)


#define FPU_MVFR0_FP_rounding_modes_Pos 28U
#define FPU_MVFR0_FP_rounding_modes_Msk (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)

#define FPU_MVFR0_Short_vectors_Pos 24U
#define FPU_MVFR0_Short_vectors_Msk (0xFUL << FPU_MVFR0_Short_vectors_Pos)

#define FPU_MVFR0_Square_root_Pos 20U
#define FPU_MVFR0_Square_root_Msk (0xFUL << FPU_MVFR0_Square_root_Pos)

#define FPU_MVFR0_Divide_Pos 16U
#define FPU_MVFR0_Divide_Msk (0xFUL << FPU_MVFR0_Divide_Pos)

#define FPU_MVFR0_FP_excep_trapping_Pos 12U
#define FPU_MVFR0_FP_excep_trapping_Msk (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)

#define FPU_MVFR0_Double_precision_Pos 8U
#define FPU_MVFR0_Double_precision_Msk (0xFUL << FPU_MVFR0_Double_precision_Pos)

#define FPU_MVFR0_Single_precision_Pos 4U
#define FPU_MVFR0_Single_precision_Msk (0xFUL << FPU_MVFR0_Single_precision_Pos)

#define FPU_MVFR0_A_SIMD_registers_Pos 0U
#define FPU_MVFR0_A_SIMD_registers_Msk (0xFUL )


#define FPU_MVFR1_FP_fused_MAC_Pos 28U
#define FPU_MVFR1_FP_fused_MAC_Msk (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)

#define FPU_MVFR1_FP_HPFP_Pos 24U
#define FPU_MVFR1_FP_HPFP_Msk (0xFUL << FPU_MVFR1_FP_HPFP_Pos)

#define FPU_MVFR1_D_NaN_mode_Pos 4U
#define FPU_MVFR1_D_NaN_mode_Msk (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)

#define FPU_MVFR1_FtZ_mode_Pos 0U
#define FPU_MVFR1_FtZ_mode_Msk (0xFUL )
# 1404 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;


#define CoreDebug_DHCSR_DBGKEY_Pos 16U
#define CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)

#define CoreDebug_DHCSR_S_RESET_ST_Pos 25U
#define CoreDebug_DHCSR_S_RESET_ST_Msk (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)

#define CoreDebug_DHCSR_S_RETIRE_ST_Pos 24U
#define CoreDebug_DHCSR_S_RETIRE_ST_Msk (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)

#define CoreDebug_DHCSR_S_LOCKUP_Pos 19U
#define CoreDebug_DHCSR_S_LOCKUP_Msk (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)

#define CoreDebug_DHCSR_S_SLEEP_Pos 18U
#define CoreDebug_DHCSR_S_SLEEP_Msk (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)

#define CoreDebug_DHCSR_S_HALT_Pos 17U
#define CoreDebug_DHCSR_S_HALT_Msk (1UL << CoreDebug_DHCSR_S_HALT_Pos)

#define CoreDebug_DHCSR_S_REGRDY_Pos 16U
#define CoreDebug_DHCSR_S_REGRDY_Msk (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)

#define CoreDebug_DHCSR_C_SNAPSTALL_Pos 5U
#define CoreDebug_DHCSR_C_SNAPSTALL_Msk (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)

#define CoreDebug_DHCSR_C_MASKINTS_Pos 3U
#define CoreDebug_DHCSR_C_MASKINTS_Msk (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)

#define CoreDebug_DHCSR_C_STEP_Pos 2U
#define CoreDebug_DHCSR_C_STEP_Msk (1UL << CoreDebug_DHCSR_C_STEP_Pos)

#define CoreDebug_DHCSR_C_HALT_Pos 1U
#define CoreDebug_DHCSR_C_HALT_Msk (1UL << CoreDebug_DHCSR_C_HALT_Pos)

#define CoreDebug_DHCSR_C_DEBUGEN_Pos 0U
#define CoreDebug_DHCSR_C_DEBUGEN_Msk (1UL )


#define CoreDebug_DCRSR_REGWnR_Pos 16U
#define CoreDebug_DCRSR_REGWnR_Msk (1UL << CoreDebug_DCRSR_REGWnR_Pos)

#define CoreDebug_DCRSR_REGSEL_Pos 0U
#define CoreDebug_DCRSR_REGSEL_Msk (0x1FUL )


#define CoreDebug_DEMCR_TRCENA_Pos 24U
#define CoreDebug_DEMCR_TRCENA_Msk (1UL << CoreDebug_DEMCR_TRCENA_Pos)

#define CoreDebug_DEMCR_MON_REQ_Pos 19U
#define CoreDebug_DEMCR_MON_REQ_Msk (1UL << CoreDebug_DEMCR_MON_REQ_Pos)

#define CoreDebug_DEMCR_MON_STEP_Pos 18U
#define CoreDebug_DEMCR_MON_STEP_Msk (1UL << CoreDebug_DEMCR_MON_STEP_Pos)

#define CoreDebug_DEMCR_MON_PEND_Pos 17U
#define CoreDebug_DEMCR_MON_PEND_Msk (1UL << CoreDebug_DEMCR_MON_PEND_Pos)

#define CoreDebug_DEMCR_MON_EN_Pos 16U
#define CoreDebug_DEMCR_MON_EN_Msk (1UL << CoreDebug_DEMCR_MON_EN_Pos)

#define CoreDebug_DEMCR_VC_HARDERR_Pos 10U
#define CoreDebug_DEMCR_VC_HARDERR_Msk (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)

#define CoreDebug_DEMCR_VC_INTERR_Pos 9U
#define CoreDebug_DEMCR_VC_INTERR_Msk (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)

#define CoreDebug_DEMCR_VC_BUSERR_Pos 8U
#define CoreDebug_DEMCR_VC_BUSERR_Msk (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)

#define CoreDebug_DEMCR_VC_STATERR_Pos 7U
#define CoreDebug_DEMCR_VC_STATERR_Msk (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)

#define CoreDebug_DEMCR_VC_CHKERR_Pos 6U
#define CoreDebug_DEMCR_VC_CHKERR_Msk (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)

#define CoreDebug_DEMCR_VC_NOCPERR_Pos 5U
#define CoreDebug_DEMCR_VC_NOCPERR_Msk (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)

#define CoreDebug_DEMCR_VC_MMERR_Pos 4U
#define CoreDebug_DEMCR_VC_MMERR_Msk (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)

#define CoreDebug_DEMCR_VC_CORERESET_Pos 0U
#define CoreDebug_DEMCR_VC_CORERESET_Msk (1UL )
# 1512 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define _VAL2FLD(field,value) ((value << field ## _Pos) & field ## _Msk)







#define _FLD2VAL(field,value) ((value & field ## _Msk) >> field ## _Pos)
# 1533 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
#define SCS_BASE (0xE000E000UL)
#define ITM_BASE (0xE0000000UL)
#define DWT_BASE (0xE0001000UL)
#define TPI_BASE (0xE0040000UL)
#define CoreDebug_BASE (0xE000EDF0UL)
#define SysTick_BASE (SCS_BASE + 0x0010UL)
#define NVIC_BASE (SCS_BASE + 0x0100UL)
#define SCB_BASE (SCS_BASE + 0x0D00UL)

#define SCnSCB ((SCnSCB_Type *) SCS_BASE )
#define SCB ((SCB_Type *) SCB_BASE )
#define SysTick ((SysTick_Type *) SysTick_BASE )
#define NVIC ((NVIC_Type *) NVIC_BASE )
#define ITM ((ITM_Type *) ITM_BASE )
#define DWT ((DWT_Type *) DWT_BASE )
#define TPI ((TPI_Type *) TPI_BASE )
#define CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)


#define MPU_BASE (SCS_BASE + 0x0D90UL)
#define MPU ((MPU_Type *) MPU_BASE )



#define FPU_BASE (SCS_BASE + 0x0F30UL)
#define FPU ((FPU_Type *) FPU_BASE )
# 1596 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}







static inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}







static inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}
# 1650 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
}







static inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}







static inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
}
# 1685 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
}
# 1698 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
  }
}
# 1720 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) < 0)
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4U)));
  }
  else
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] >> (8U - 4U)));
  }
}
# 1745 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4U)) ? (uint32_t)(4U) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4U)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4U));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1772 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4U)) ? (uint32_t)(4U) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4U)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4U));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}






static inline void NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __NOP();
  }
}
# 1830 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  NVIC_SetPriority (SysTick_IRQn, (1UL << 4U) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 1860 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
#define ITM_RXBUFFER_EMPTY 0x5AA55AA5U
# 1872 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __NOP();
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 1893 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != 0x5AA55AA5U)
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5U;
  }

  return (ch);
}
# 1913 "./lib/main/STM32F3/Drivers/CMSIS/Include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == 0x5AA55AA5U)
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 168 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h" 2
# 1 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h" 1
# 48 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
#define __SYSTEM_STM32F3XX_H 
# 74 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
extern uint32_t SystemCoreClock;
extern const uint8_t AHBPrescTable[16];
extern const uint8_t APBPrescTable[8];
# 103 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 169 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h" 2
# 179 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IER;
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  uint32_t RESERVED0;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
  uint32_t RESERVED1;
  volatile uint32_t TR1;
  volatile uint32_t TR2;
  volatile uint32_t TR3;
  uint32_t RESERVED2;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t SQR4;
  volatile uint32_t DR;
  uint32_t RESERVED3;
  uint32_t RESERVED4;
  volatile uint32_t JSQR;
  uint32_t RESERVED5[4];
  volatile uint32_t OFR1;
  volatile uint32_t OFR2;
  volatile uint32_t OFR3;
  volatile uint32_t OFR4;
  uint32_t RESERVED6[4];
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
  uint32_t RESERVED7[4];
  volatile uint32_t AWD2CR;
  volatile uint32_t AWD3CR;
  uint32_t RESERVED8;
  uint32_t RESERVED9;
  volatile uint32_t DIFSEL;
  volatile uint32_t CALFACT;

} ADC_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
  uint32_t RESERVED;
  volatile uint32_t CCR;
  volatile uint32_t CDR;

} ADC_Common_TypeDef;




typedef struct
{
  volatile uint32_t TIR;
  volatile uint32_t TDTR;
  volatile uint32_t TDLR;
  volatile uint32_t TDHR;
} CAN_TxMailBox_TypeDef;




typedef struct
{
  volatile uint32_t RIR;
  volatile uint32_t RDTR;
  volatile uint32_t RDLR;
  volatile uint32_t RDHR;
} CAN_FIFOMailBox_TypeDef;




typedef struct
{
  volatile uint32_t FR1;
  volatile uint32_t FR2;
} CAN_FilterRegister_TypeDef;




typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t TSR;
  volatile uint32_t RF0R;
  volatile uint32_t RF1R;
  volatile uint32_t IER;
  volatile uint32_t ESR;
  volatile uint32_t BTR;
  uint32_t RESERVED0[88];
  CAN_TxMailBox_TypeDef sTxMailBox[3];
  CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];
  uint32_t RESERVED1[12];
  volatile uint32_t FMR;
  volatile uint32_t FM1R;
  uint32_t RESERVED2;
  volatile uint32_t FS1R;
  uint32_t RESERVED3;
  volatile uint32_t FFA1R;
  uint32_t RESERVED4;
  volatile uint32_t FA1R;
  uint32_t RESERVED5[8];
  CAN_FilterRegister_TypeDef sFilterRegister[28];
} CAN_TypeDef;




typedef struct
{
  volatile uint32_t CSR;
} COMP_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
} COMP_Common_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint8_t IDR;
  uint8_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint32_t CR;
  uint32_t RESERVED2;
  volatile uint32_t INIT;
  volatile uint32_t POL;
} CRC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;
  volatile uint32_t SR;
} DAC_TypeDef;





typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
  volatile uint32_t APB1FZ;
  volatile uint32_t APB2FZ;
}DBGMCU_TypeDef;





typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
} DMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;





typedef struct
{
  volatile uint32_t IMR;
  volatile uint32_t EMR;
  volatile uint32_t RTSR;
  volatile uint32_t FTSR;
  volatile uint32_t SWIER;
  volatile uint32_t PR;
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t IMR2;
  volatile uint32_t EMR2;
  volatile uint32_t RTSR2;
  volatile uint32_t FTSR2;
  volatile uint32_t SWIER2;
  volatile uint32_t PR2;
}EXTI_TypeDef;





typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t AR;
  uint32_t RESERVED;
  volatile uint32_t OBR;
  volatile uint32_t WRPR;

} FLASH_TypeDef;




typedef struct
{
  volatile uint16_t RDP;
  volatile uint16_t USER;
  uint16_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint16_t WRP0;
  volatile uint16_t WRP1;
  volatile uint16_t WRP2;
  volatile uint16_t WRP3;
} OB_TypeDef;





typedef struct
{
  volatile uint32_t MODER;
  volatile uint32_t OTYPER;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFR[2];
  volatile uint32_t BRR;
}GPIO_TypeDef;





typedef struct
{
  volatile uint32_t CSR;
} OPAMP_TypeDef;





typedef struct
{
  volatile uint32_t CFGR1;
  volatile uint32_t RCR;
  volatile uint32_t EXTICR[4];
  volatile uint32_t CFGR2;
} SYSCFG_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t OAR1;
  volatile uint32_t OAR2;
  volatile uint32_t TIMINGR;
  volatile uint32_t TIMEOUTR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t PECR;
  volatile uint32_t RXDR;
  volatile uint32_t TXDR;
}I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
  volatile uint32_t WINR;
} IWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CSR;
} PWR_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CIR;
  volatile uint32_t APB2RSTR;
  volatile uint32_t APB1RSTR;
  volatile uint32_t AHBENR;
  volatile uint32_t APB2ENR;
  volatile uint32_t APB1ENR;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
  volatile uint32_t AHBRSTR;
  volatile uint32_t CFGR2;
  volatile uint32_t CFGR3;
} RCC_TypeDef;





typedef struct
{
  volatile uint32_t TR;
  volatile uint32_t DR;
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t PRER;
  volatile uint32_t WUTR;
  uint32_t RESERVED0;
  volatile uint32_t ALRMAR;
  volatile uint32_t ALRMBR;
  volatile uint32_t WPR;
  volatile uint32_t SSR;
  volatile uint32_t SHIFTR;
  volatile uint32_t TSTR;
  volatile uint32_t TSDR;
  volatile uint32_t TSSSR;
  volatile uint32_t CALR;
  volatile uint32_t TAFCR;
  volatile uint32_t ALRMASSR;
  volatile uint32_t ALRMBSSR;
  uint32_t RESERVED7;
  volatile uint32_t BKP0R;
  volatile uint32_t BKP1R;
  volatile uint32_t BKP2R;
  volatile uint32_t BKP3R;
  volatile uint32_t BKP4R;
  volatile uint32_t BKP5R;
  volatile uint32_t BKP6R;
  volatile uint32_t BKP7R;
  volatile uint32_t BKP8R;
  volatile uint32_t BKP9R;
  volatile uint32_t BKP10R;
  volatile uint32_t BKP11R;
  volatile uint32_t BKP12R;
  volatile uint32_t BKP13R;
  volatile uint32_t BKP14R;
  volatile uint32_t BKP15R;
} RTC_TypeDef;






typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SR;
  volatile uint32_t DR;
  volatile uint32_t CRCPR;
  volatile uint32_t RXCRCR;
  volatile uint32_t TXCRCR;
  volatile uint32_t I2SCFGR;
  volatile uint32_t I2SPR;
} SPI_TypeDef;




typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMCR;
  volatile uint32_t DIER;
  volatile uint32_t SR;
  volatile uint32_t EGR;
  volatile uint32_t CCMR1;
  volatile uint32_t CCMR2;
  volatile uint32_t CCER;
  volatile uint32_t CNT;
  volatile uint32_t PSC;
  volatile uint32_t ARR;
  volatile uint32_t RCR;
  volatile uint32_t CCR1;
  volatile uint32_t CCR2;
  volatile uint32_t CCR3;
  volatile uint32_t CCR4;
  volatile uint32_t BDTR;
  volatile uint32_t DCR;
  volatile uint32_t DMAR;
  volatile uint32_t OR;
  volatile uint32_t CCMR3;
  volatile uint32_t CCR5;
  volatile uint32_t CCR6;
} TIM_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t IOHCR;
  uint32_t RESERVED1;
  volatile uint32_t IOASCR;
  uint32_t RESERVED2;
  volatile uint32_t IOSCR;
  uint32_t RESERVED3;
  volatile uint32_t IOCCR;
  uint32_t RESERVED4;
  volatile uint32_t IOGCSR;
  volatile uint32_t IOGXCR[8];
} TSC_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t BRR;
  volatile uint32_t GTPR;
  volatile uint32_t RTOR;
  volatile uint32_t RQR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint16_t RDR;
  uint16_t RESERVED1;
  volatile uint16_t TDR;
  uint16_t RESERVED2;
} USART_TypeDef;





typedef struct
{
  volatile uint16_t EP0R;
  volatile uint16_t RESERVED0;
  volatile uint16_t EP1R;
  volatile uint16_t RESERVED1;
  volatile uint16_t EP2R;
  volatile uint16_t RESERVED2;
  volatile uint16_t EP3R;
  volatile uint16_t RESERVED3;
  volatile uint16_t EP4R;
  volatile uint16_t RESERVED4;
  volatile uint16_t EP5R;
  volatile uint16_t RESERVED5;
  volatile uint16_t EP6R;
  volatile uint16_t RESERVED6;
  volatile uint16_t EP7R;
  volatile uint16_t RESERVED7[17];
  volatile uint16_t CNTR;
  volatile uint16_t RESERVED8;
  volatile uint16_t ISTR;
  volatile uint16_t RESERVED9;
  volatile uint16_t FNR;
  volatile uint16_t RESERVEDA;
  volatile uint16_t DADDR;
  volatile uint16_t RESERVEDB;
  volatile uint16_t BTABLE;
  volatile uint16_t RESERVEDC;
} USB_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;





#define FLASH_BASE ((uint32_t)0x08000000U)
#define CCMDATARAM_BASE ((uint32_t)0x10000000U)
#define SRAM_BASE ((uint32_t)0x20000000U)
#define PERIPH_BASE ((uint32_t)0x40000000U)
#define SRAM_BB_BASE ((uint32_t)0x22000000U)
#define PERIPH_BB_BASE ((uint32_t)0x42000000U)



#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE (PERIPH_BASE + 0x00010000U)
#define AHB1PERIPH_BASE (PERIPH_BASE + 0x00020000U)
#define AHB2PERIPH_BASE (PERIPH_BASE + 0x08000000U)
#define AHB3PERIPH_BASE (PERIPH_BASE + 0x10000000U)


#define TIM2_BASE (APB1PERIPH_BASE + 0x00000000U)
#define TIM3_BASE (APB1PERIPH_BASE + 0x00000400U)
#define TIM4_BASE (APB1PERIPH_BASE + 0x00000800U)
#define TIM6_BASE (APB1PERIPH_BASE + 0x00001000U)
#define TIM7_BASE (APB1PERIPH_BASE + 0x00001400U)
#define RTC_BASE (APB1PERIPH_BASE + 0x00002800U)
#define WWDG_BASE (APB1PERIPH_BASE + 0x00002C00U)
#define IWDG_BASE (APB1PERIPH_BASE + 0x00003000U)
#define I2S2ext_BASE (APB1PERIPH_BASE + 0x00003400U)
#define SPI2_BASE (APB1PERIPH_BASE + 0x00003800U)
#define SPI3_BASE (APB1PERIPH_BASE + 0x00003C00U)
#define I2S3ext_BASE (APB1PERIPH_BASE + 0x00004000U)
#define USART2_BASE (APB1PERIPH_BASE + 0x00004400U)
#define USART3_BASE (APB1PERIPH_BASE + 0x00004800U)
#define UART4_BASE (APB1PERIPH_BASE + 0x00004C00U)
#define UART5_BASE (APB1PERIPH_BASE + 0x00005000U)
#define I2C1_BASE (APB1PERIPH_BASE + 0x00005400U)
#define I2C2_BASE (APB1PERIPH_BASE + 0x00005800U)
#define USB_BASE (APB1PERIPH_BASE + 0x00005C00U)
#define USB_PMAADDR (APB1PERIPH_BASE + 0x00006000U)
#define CAN_BASE (APB1PERIPH_BASE + 0x00006400U)
#define PWR_BASE (APB1PERIPH_BASE + 0x00007000U)
#define DAC1_BASE (APB1PERIPH_BASE + 0x00007400U)
#define DAC_BASE DAC1_BASE


#define SYSCFG_BASE (APB2PERIPH_BASE + 0x00000000U)
#define COMP1_BASE (APB2PERIPH_BASE + 0x0000001CU)
#define COMP2_BASE (APB2PERIPH_BASE + 0x00000020U)
#define COMP3_BASE (APB2PERIPH_BASE + 0x00000024U)
#define COMP4_BASE (APB2PERIPH_BASE + 0x00000028U)
#define COMP5_BASE (APB2PERIPH_BASE + 0x0000002CU)
#define COMP6_BASE (APB2PERIPH_BASE + 0x00000030U)
#define COMP7_BASE (APB2PERIPH_BASE + 0x00000034U)
#define COMP_BASE COMP1_BASE
#define OPAMP1_BASE (APB2PERIPH_BASE + 0x00000038U)
#define OPAMP2_BASE (APB2PERIPH_BASE + 0x0000003CU)
#define OPAMP3_BASE (APB2PERIPH_BASE + 0x00000040U)
#define OPAMP4_BASE (APB2PERIPH_BASE + 0x00000044U)
#define OPAMP_BASE OPAMP1_BASE
#define EXTI_BASE (APB2PERIPH_BASE + 0x00000400U)
#define TIM1_BASE (APB2PERIPH_BASE + 0x00002C00U)
#define SPI1_BASE (APB2PERIPH_BASE + 0x00003000U)
#define TIM8_BASE (APB2PERIPH_BASE + 0x00003400U)
#define USART1_BASE (APB2PERIPH_BASE + 0x00003800U)
#define TIM15_BASE (APB2PERIPH_BASE + 0x00004000U)
#define TIM16_BASE (APB2PERIPH_BASE + 0x00004400U)
#define TIM17_BASE (APB2PERIPH_BASE + 0x00004800U)


#define DMA1_BASE (AHB1PERIPH_BASE + 0x00000000U)
#define DMA1_Channel1_BASE (AHB1PERIPH_BASE + 0x00000008U)
#define DMA1_Channel2_BASE (AHB1PERIPH_BASE + 0x0000001CU)
#define DMA1_Channel3_BASE (AHB1PERIPH_BASE + 0x00000030U)
#define DMA1_Channel4_BASE (AHB1PERIPH_BASE + 0x00000044U)
#define DMA1_Channel5_BASE (AHB1PERIPH_BASE + 0x00000058U)
#define DMA1_Channel6_BASE (AHB1PERIPH_BASE + 0x0000006CU)
#define DMA1_Channel7_BASE (AHB1PERIPH_BASE + 0x00000080U)
#define DMA2_BASE (AHB1PERIPH_BASE + 0x00000400U)
#define DMA2_Channel1_BASE (AHB1PERIPH_BASE + 0x00000408U)
#define DMA2_Channel2_BASE (AHB1PERIPH_BASE + 0x0000041CU)
#define DMA2_Channel3_BASE (AHB1PERIPH_BASE + 0x00000430U)
#define DMA2_Channel4_BASE (AHB1PERIPH_BASE + 0x00000444U)
#define DMA2_Channel5_BASE (AHB1PERIPH_BASE + 0x00000458U)
#define RCC_BASE (AHB1PERIPH_BASE + 0x00001000U)
#define FLASH_R_BASE (AHB1PERIPH_BASE + 0x00002000U)
#define OB_BASE ((uint32_t)0x1FFFF800U)
#define FLASHSIZE_BASE ((uint32_t)0x1FFFF7CCU)
#define UID_BASE ((uint32_t)0x1FFFF7ACU)
#define CRC_BASE (AHB1PERIPH_BASE + 0x00003000U)
#define TSC_BASE (AHB1PERIPH_BASE + 0x00004000U)


#define GPIOA_BASE (AHB2PERIPH_BASE + 0x00000000U)
#define GPIOB_BASE (AHB2PERIPH_BASE + 0x00000400U)
#define GPIOC_BASE (AHB2PERIPH_BASE + 0x00000800U)
#define GPIOD_BASE (AHB2PERIPH_BASE + 0x00000C00U)
#define GPIOE_BASE (AHB2PERIPH_BASE + 0x00001000U)
#define GPIOF_BASE (AHB2PERIPH_BASE + 0x00001400U)


#define ADC1_BASE (AHB3PERIPH_BASE + 0x00000000U)
#define ADC2_BASE (AHB3PERIPH_BASE + 0x00000100U)
#define ADC1_2_COMMON_BASE (AHB3PERIPH_BASE + 0x00000300U)
#define ADC3_BASE (AHB3PERIPH_BASE + 0x00000400U)
#define ADC4_BASE (AHB3PERIPH_BASE + 0x00000500U)
#define ADC3_4_COMMON_BASE (AHB3PERIPH_BASE + 0x00000700U)

#define DBGMCU_BASE ((uint32_t)0xE0042000U)







#define TIM2 ((TIM_TypeDef *) TIM2_BASE)
#define TIM3 ((TIM_TypeDef *) TIM3_BASE)
#define TIM4 ((TIM_TypeDef *) TIM4_BASE)
#define TIM6 ((TIM_TypeDef *) TIM6_BASE)
#define TIM7 ((TIM_TypeDef *) TIM7_BASE)
#define RTC ((RTC_TypeDef *) RTC_BASE)
#define WWDG ((WWDG_TypeDef *) WWDG_BASE)
#define IWDG ((IWDG_TypeDef *) IWDG_BASE)
#define I2S2ext ((SPI_TypeDef *) I2S2ext_BASE)
#define SPI2 ((SPI_TypeDef *) SPI2_BASE)
#define SPI3 ((SPI_TypeDef *) SPI3_BASE)
#define I2S3ext ((SPI_TypeDef *) I2S3ext_BASE)
#define USART2 ((USART_TypeDef *) USART2_BASE)
#define USART3 ((USART_TypeDef *) USART3_BASE)
#define UART4 ((USART_TypeDef *) UART4_BASE)
#define UART5 ((USART_TypeDef *) UART5_BASE)
#define I2C1 ((I2C_TypeDef *) I2C1_BASE)
#define I2C2 ((I2C_TypeDef *) I2C2_BASE)
#define CAN ((CAN_TypeDef *) CAN_BASE)
#define PWR ((PWR_TypeDef *) PWR_BASE)
#define DAC ((DAC_TypeDef *) DAC_BASE)
#define DAC1 ((DAC_TypeDef *) DAC1_BASE)
#define COMP1 ((COMP_TypeDef *) COMP1_BASE)
#define COMP2 ((COMP_TypeDef *) COMP2_BASE)
#define COMP12_COMMON ((COMP_Common_TypeDef *) COMP2_BASE)
#define COMP3 ((COMP_TypeDef *) COMP3_BASE)
#define COMP4 ((COMP_TypeDef *) COMP4_BASE)
#define COMP34_COMMON ((COMP_Common_TypeDef *) COMP4_BASE)
#define COMP5 ((COMP_TypeDef *) COMP5_BASE)
#define COMP6 ((COMP_TypeDef *) COMP6_BASE)
#define COMP56_COMMON ((COMP_Common_TypeDef *) COMP6_BASE)
#define COMP7 ((COMP_TypeDef *) COMP7_BASE)

#define COMP ((COMP_TypeDef *) COMP_BASE)
#define OPAMP1 ((OPAMP_TypeDef *) OPAMP1_BASE)
#define OPAMP ((OPAMP_TypeDef *) OPAMP_BASE)
#define OPAMP2 ((OPAMP_TypeDef *) OPAMP2_BASE)
#define OPAMP3 ((OPAMP_TypeDef *) OPAMP3_BASE)
#define OPAMP4 ((OPAMP_TypeDef *) OPAMP4_BASE)
#define SYSCFG ((SYSCFG_TypeDef *) SYSCFG_BASE)
#define EXTI ((EXTI_TypeDef *) EXTI_BASE)
#define TIM1 ((TIM_TypeDef *) TIM1_BASE)
#define SPI1 ((SPI_TypeDef *) SPI1_BASE)
#define TIM8 ((TIM_TypeDef *) TIM8_BASE)
#define USART1 ((USART_TypeDef *) USART1_BASE)
#define TIM15 ((TIM_TypeDef *) TIM15_BASE)
#define TIM16 ((TIM_TypeDef *) TIM16_BASE)
#define TIM17 ((TIM_TypeDef *) TIM17_BASE)
#define DBGMCU ((DBGMCU_TypeDef *) DBGMCU_BASE)
#define DMA1 ((DMA_TypeDef *) DMA1_BASE)
#define DMA1_Channel1 ((DMA_Channel_TypeDef *) DMA1_Channel1_BASE)
#define DMA1_Channel2 ((DMA_Channel_TypeDef *) DMA1_Channel2_BASE)
#define DMA1_Channel3 ((DMA_Channel_TypeDef *) DMA1_Channel3_BASE)
#define DMA1_Channel4 ((DMA_Channel_TypeDef *) DMA1_Channel4_BASE)
#define DMA1_Channel5 ((DMA_Channel_TypeDef *) DMA1_Channel5_BASE)
#define DMA1_Channel6 ((DMA_Channel_TypeDef *) DMA1_Channel6_BASE)
#define DMA1_Channel7 ((DMA_Channel_TypeDef *) DMA1_Channel7_BASE)
#define DMA2 ((DMA_TypeDef *) DMA2_BASE)
#define DMA2_Channel1 ((DMA_Channel_TypeDef *) DMA2_Channel1_BASE)
#define DMA2_Channel2 ((DMA_Channel_TypeDef *) DMA2_Channel2_BASE)
#define DMA2_Channel3 ((DMA_Channel_TypeDef *) DMA2_Channel3_BASE)
#define DMA2_Channel4 ((DMA_Channel_TypeDef *) DMA2_Channel4_BASE)
#define DMA2_Channel5 ((DMA_Channel_TypeDef *) DMA2_Channel5_BASE)
#define RCC ((RCC_TypeDef *) RCC_BASE)
#define FLASH ((FLASH_TypeDef *) FLASH_R_BASE)
#define OB ((OB_TypeDef *) OB_BASE)
#define CRC ((CRC_TypeDef *) CRC_BASE)
#define TSC ((TSC_TypeDef *) TSC_BASE)
#define GPIOA ((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB ((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC ((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD ((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE ((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOF ((GPIO_TypeDef *) GPIOF_BASE)
#define ADC1 ((ADC_TypeDef *) ADC1_BASE)
#define ADC2 ((ADC_TypeDef *) ADC2_BASE)
#define ADC3 ((ADC_TypeDef *) ADC3_BASE)
#define ADC4 ((ADC_TypeDef *) ADC4_BASE)
#define ADC12_COMMON ((ADC_Common_TypeDef *) ADC1_2_COMMON_BASE)
#define ADC34_COMMON ((ADC_Common_TypeDef *) ADC3_4_COMMON_BASE)

#define ADC1_2_COMMON ADC12_COMMON
#define ADC3_4_COMMON ADC34_COMMON
#define USB ((USB_TypeDef *) USB_BASE)
# 929 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define ADC5_V1_1 




#define ADC_MULTIMODE_SUPPORT 


#define ADC_ISR_ADRDY_Pos (0U)
#define ADC_ISR_ADRDY_Msk (0x1U << ADC_ISR_ADRDY_Pos)
#define ADC_ISR_ADRDY ADC_ISR_ADRDY_Msk
#define ADC_ISR_EOSMP_Pos (1U)
#define ADC_ISR_EOSMP_Msk (0x1U << ADC_ISR_EOSMP_Pos)
#define ADC_ISR_EOSMP ADC_ISR_EOSMP_Msk
#define ADC_ISR_EOC_Pos (2U)
#define ADC_ISR_EOC_Msk (0x1U << ADC_ISR_EOC_Pos)
#define ADC_ISR_EOC ADC_ISR_EOC_Msk
#define ADC_ISR_EOS_Pos (3U)
#define ADC_ISR_EOS_Msk (0x1U << ADC_ISR_EOS_Pos)
#define ADC_ISR_EOS ADC_ISR_EOS_Msk
#define ADC_ISR_OVR_Pos (4U)
#define ADC_ISR_OVR_Msk (0x1U << ADC_ISR_OVR_Pos)
#define ADC_ISR_OVR ADC_ISR_OVR_Msk
#define ADC_ISR_JEOC_Pos (5U)
#define ADC_ISR_JEOC_Msk (0x1U << ADC_ISR_JEOC_Pos)
#define ADC_ISR_JEOC ADC_ISR_JEOC_Msk
#define ADC_ISR_JEOS_Pos (6U)
#define ADC_ISR_JEOS_Msk (0x1U << ADC_ISR_JEOS_Pos)
#define ADC_ISR_JEOS ADC_ISR_JEOS_Msk
#define ADC_ISR_AWD1_Pos (7U)
#define ADC_ISR_AWD1_Msk (0x1U << ADC_ISR_AWD1_Pos)
#define ADC_ISR_AWD1 ADC_ISR_AWD1_Msk
#define ADC_ISR_AWD2_Pos (8U)
#define ADC_ISR_AWD2_Msk (0x1U << ADC_ISR_AWD2_Pos)
#define ADC_ISR_AWD2 ADC_ISR_AWD2_Msk
#define ADC_ISR_AWD3_Pos (9U)
#define ADC_ISR_AWD3_Msk (0x1U << ADC_ISR_AWD3_Pos)
#define ADC_ISR_AWD3 ADC_ISR_AWD3_Msk
#define ADC_ISR_JQOVF_Pos (10U)
#define ADC_ISR_JQOVF_Msk (0x1U << ADC_ISR_JQOVF_Pos)
#define ADC_ISR_JQOVF ADC_ISR_JQOVF_Msk


#define ADC_ISR_ADRD (ADC_ISR_ADRDY)


#define ADC_IER_ADRDYIE_Pos (0U)
#define ADC_IER_ADRDYIE_Msk (0x1U << ADC_IER_ADRDYIE_Pos)
#define ADC_IER_ADRDYIE ADC_IER_ADRDYIE_Msk
#define ADC_IER_EOSMPIE_Pos (1U)
#define ADC_IER_EOSMPIE_Msk (0x1U << ADC_IER_EOSMPIE_Pos)
#define ADC_IER_EOSMPIE ADC_IER_EOSMPIE_Msk
#define ADC_IER_EOCIE_Pos (2U)
#define ADC_IER_EOCIE_Msk (0x1U << ADC_IER_EOCIE_Pos)
#define ADC_IER_EOCIE ADC_IER_EOCIE_Msk
#define ADC_IER_EOSIE_Pos (3U)
#define ADC_IER_EOSIE_Msk (0x1U << ADC_IER_EOSIE_Pos)
#define ADC_IER_EOSIE ADC_IER_EOSIE_Msk
#define ADC_IER_OVRIE_Pos (4U)
#define ADC_IER_OVRIE_Msk (0x1U << ADC_IER_OVRIE_Pos)
#define ADC_IER_OVRIE ADC_IER_OVRIE_Msk
#define ADC_IER_JEOCIE_Pos (5U)
#define ADC_IER_JEOCIE_Msk (0x1U << ADC_IER_JEOCIE_Pos)
#define ADC_IER_JEOCIE ADC_IER_JEOCIE_Msk
#define ADC_IER_JEOSIE_Pos (6U)
#define ADC_IER_JEOSIE_Msk (0x1U << ADC_IER_JEOSIE_Pos)
#define ADC_IER_JEOSIE ADC_IER_JEOSIE_Msk
#define ADC_IER_AWD1IE_Pos (7U)
#define ADC_IER_AWD1IE_Msk (0x1U << ADC_IER_AWD1IE_Pos)
#define ADC_IER_AWD1IE ADC_IER_AWD1IE_Msk
#define ADC_IER_AWD2IE_Pos (8U)
#define ADC_IER_AWD2IE_Msk (0x1U << ADC_IER_AWD2IE_Pos)
#define ADC_IER_AWD2IE ADC_IER_AWD2IE_Msk
#define ADC_IER_AWD3IE_Pos (9U)
#define ADC_IER_AWD3IE_Msk (0x1U << ADC_IER_AWD3IE_Pos)
#define ADC_IER_AWD3IE ADC_IER_AWD3IE_Msk
#define ADC_IER_JQOVFIE_Pos (10U)
#define ADC_IER_JQOVFIE_Msk (0x1U << ADC_IER_JQOVFIE_Pos)
#define ADC_IER_JQOVFIE ADC_IER_JQOVFIE_Msk


#define ADC_IER_RDY (ADC_IER_ADRDYIE)
#define ADC_IER_EOSMP (ADC_IER_EOSMPIE)
#define ADC_IER_EOC (ADC_IER_EOCIE)
#define ADC_IER_EOS (ADC_IER_EOSIE)
#define ADC_IER_OVR (ADC_IER_OVRIE)
#define ADC_IER_JEOC (ADC_IER_JEOCIE)
#define ADC_IER_JEOS (ADC_IER_JEOSIE)
#define ADC_IER_AWD1 (ADC_IER_AWD1IE)
#define ADC_IER_AWD2 (ADC_IER_AWD2IE)
#define ADC_IER_AWD3 (ADC_IER_AWD3IE)
#define ADC_IER_JQOVF (ADC_IER_JQOVFIE)


#define ADC_CR_ADEN_Pos (0U)
#define ADC_CR_ADEN_Msk (0x1U << ADC_CR_ADEN_Pos)
#define ADC_CR_ADEN ADC_CR_ADEN_Msk
#define ADC_CR_ADDIS_Pos (1U)
#define ADC_CR_ADDIS_Msk (0x1U << ADC_CR_ADDIS_Pos)
#define ADC_CR_ADDIS ADC_CR_ADDIS_Msk
#define ADC_CR_ADSTART_Pos (2U)
#define ADC_CR_ADSTART_Msk (0x1U << ADC_CR_ADSTART_Pos)
#define ADC_CR_ADSTART ADC_CR_ADSTART_Msk
#define ADC_CR_JADSTART_Pos (3U)
#define ADC_CR_JADSTART_Msk (0x1U << ADC_CR_JADSTART_Pos)
#define ADC_CR_JADSTART ADC_CR_JADSTART_Msk
#define ADC_CR_ADSTP_Pos (4U)
#define ADC_CR_ADSTP_Msk (0x1U << ADC_CR_ADSTP_Pos)
#define ADC_CR_ADSTP ADC_CR_ADSTP_Msk
#define ADC_CR_JADSTP_Pos (5U)
#define ADC_CR_JADSTP_Msk (0x1U << ADC_CR_JADSTP_Pos)
#define ADC_CR_JADSTP ADC_CR_JADSTP_Msk
#define ADC_CR_ADVREGEN_Pos (28U)
#define ADC_CR_ADVREGEN_Msk (0x3U << ADC_CR_ADVREGEN_Pos)
#define ADC_CR_ADVREGEN ADC_CR_ADVREGEN_Msk
#define ADC_CR_ADVREGEN_0 (0x1U << ADC_CR_ADVREGEN_Pos)
#define ADC_CR_ADVREGEN_1 (0x2U << ADC_CR_ADVREGEN_Pos)
#define ADC_CR_ADCALDIF_Pos (30U)
#define ADC_CR_ADCALDIF_Msk (0x1U << ADC_CR_ADCALDIF_Pos)
#define ADC_CR_ADCALDIF ADC_CR_ADCALDIF_Msk
#define ADC_CR_ADCAL_Pos (31U)
#define ADC_CR_ADCAL_Msk (0x1U << ADC_CR_ADCAL_Pos)
#define ADC_CR_ADCAL ADC_CR_ADCAL_Msk


#define ADC_CFGR_DMAEN_Pos (0U)
#define ADC_CFGR_DMAEN_Msk (0x1U << ADC_CFGR_DMAEN_Pos)
#define ADC_CFGR_DMAEN ADC_CFGR_DMAEN_Msk
#define ADC_CFGR_DMACFG_Pos (1U)
#define ADC_CFGR_DMACFG_Msk (0x1U << ADC_CFGR_DMACFG_Pos)
#define ADC_CFGR_DMACFG ADC_CFGR_DMACFG_Msk

#define ADC_CFGR_RES_Pos (3U)
#define ADC_CFGR_RES_Msk (0x3U << ADC_CFGR_RES_Pos)
#define ADC_CFGR_RES ADC_CFGR_RES_Msk
#define ADC_CFGR_RES_0 (0x1U << ADC_CFGR_RES_Pos)
#define ADC_CFGR_RES_1 (0x2U << ADC_CFGR_RES_Pos)

#define ADC_CFGR_ALIGN_Pos (5U)
#define ADC_CFGR_ALIGN_Msk (0x1U << ADC_CFGR_ALIGN_Pos)
#define ADC_CFGR_ALIGN ADC_CFGR_ALIGN_Msk

#define ADC_CFGR_EXTSEL_Pos (6U)
#define ADC_CFGR_EXTSEL_Msk (0xFU << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL ADC_CFGR_EXTSEL_Msk
#define ADC_CFGR_EXTSEL_0 (0x1U << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_1 (0x2U << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_2 (0x4U << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_3 (0x8U << ADC_CFGR_EXTSEL_Pos)

#define ADC_CFGR_EXTEN_Pos (10U)
#define ADC_CFGR_EXTEN_Msk (0x3U << ADC_CFGR_EXTEN_Pos)
#define ADC_CFGR_EXTEN ADC_CFGR_EXTEN_Msk
#define ADC_CFGR_EXTEN_0 (0x1U << ADC_CFGR_EXTEN_Pos)
#define ADC_CFGR_EXTEN_1 (0x2U << ADC_CFGR_EXTEN_Pos)

#define ADC_CFGR_OVRMOD_Pos (12U)
#define ADC_CFGR_OVRMOD_Msk (0x1U << ADC_CFGR_OVRMOD_Pos)
#define ADC_CFGR_OVRMOD ADC_CFGR_OVRMOD_Msk
#define ADC_CFGR_CONT_Pos (13U)
#define ADC_CFGR_CONT_Msk (0x1U << ADC_CFGR_CONT_Pos)
#define ADC_CFGR_CONT ADC_CFGR_CONT_Msk
#define ADC_CFGR_AUTDLY_Pos (14U)
#define ADC_CFGR_AUTDLY_Msk (0x1U << ADC_CFGR_AUTDLY_Pos)
#define ADC_CFGR_AUTDLY ADC_CFGR_AUTDLY_Msk

#define ADC_CFGR_DISCEN_Pos (16U)
#define ADC_CFGR_DISCEN_Msk (0x1U << ADC_CFGR_DISCEN_Pos)
#define ADC_CFGR_DISCEN ADC_CFGR_DISCEN_Msk

#define ADC_CFGR_DISCNUM_Pos (17U)
#define ADC_CFGR_DISCNUM_Msk (0x7U << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM ADC_CFGR_DISCNUM_Msk
#define ADC_CFGR_DISCNUM_0 (0x1U << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM_1 (0x2U << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM_2 (0x4U << ADC_CFGR_DISCNUM_Pos)

#define ADC_CFGR_JDISCEN_Pos (20U)
#define ADC_CFGR_JDISCEN_Msk (0x1U << ADC_CFGR_JDISCEN_Pos)
#define ADC_CFGR_JDISCEN ADC_CFGR_JDISCEN_Msk
#define ADC_CFGR_JQM_Pos (21U)
#define ADC_CFGR_JQM_Msk (0x1U << ADC_CFGR_JQM_Pos)
#define ADC_CFGR_JQM ADC_CFGR_JQM_Msk
#define ADC_CFGR_AWD1SGL_Pos (22U)
#define ADC_CFGR_AWD1SGL_Msk (0x1U << ADC_CFGR_AWD1SGL_Pos)
#define ADC_CFGR_AWD1SGL ADC_CFGR_AWD1SGL_Msk
#define ADC_CFGR_AWD1EN_Pos (23U)
#define ADC_CFGR_AWD1EN_Msk (0x1U << ADC_CFGR_AWD1EN_Pos)
#define ADC_CFGR_AWD1EN ADC_CFGR_AWD1EN_Msk
#define ADC_CFGR_JAWD1EN_Pos (24U)
#define ADC_CFGR_JAWD1EN_Msk (0x1U << ADC_CFGR_JAWD1EN_Pos)
#define ADC_CFGR_JAWD1EN ADC_CFGR_JAWD1EN_Msk
#define ADC_CFGR_JAUTO_Pos (25U)
#define ADC_CFGR_JAUTO_Msk (0x1U << ADC_CFGR_JAUTO_Pos)
#define ADC_CFGR_JAUTO ADC_CFGR_JAUTO_Msk

#define ADC_CFGR_AWD1CH_Pos (26U)
#define ADC_CFGR_AWD1CH_Msk (0x1FU << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH ADC_CFGR_AWD1CH_Msk
#define ADC_CFGR_AWD1CH_0 (0x01U << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_1 (0x02U << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_2 (0x04U << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_3 (0x08U << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_4 (0x10U << ADC_CFGR_AWD1CH_Pos)


#define ADC_CFGR_AUTOFF_Pos (15U)
#define ADC_CFGR_AUTOFF_Msk (0x1U << ADC_CFGR_AUTOFF_Pos)
#define ADC_CFGR_AUTOFF ADC_CFGR_AUTOFF_Msk


#define ADC_SMPR1_SMP0_Pos (0U)
#define ADC_SMPR1_SMP0_Msk (0x7U << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0 ADC_SMPR1_SMP0_Msk
#define ADC_SMPR1_SMP0_0 (0x1U << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0_1 (0x2U << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0_2 (0x4U << ADC_SMPR1_SMP0_Pos)

#define ADC_SMPR1_SMP1_Pos (3U)
#define ADC_SMPR1_SMP1_Msk (0x7U << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1 ADC_SMPR1_SMP1_Msk
#define ADC_SMPR1_SMP1_0 (0x1U << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1_1 (0x2U << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1_2 (0x4U << ADC_SMPR1_SMP1_Pos)

#define ADC_SMPR1_SMP2_Pos (6U)
#define ADC_SMPR1_SMP2_Msk (0x7U << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2 ADC_SMPR1_SMP2_Msk
#define ADC_SMPR1_SMP2_0 (0x1U << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2_1 (0x2U << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2_2 (0x4U << ADC_SMPR1_SMP2_Pos)

#define ADC_SMPR1_SMP3_Pos (9U)
#define ADC_SMPR1_SMP3_Msk (0x7U << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3 ADC_SMPR1_SMP3_Msk
#define ADC_SMPR1_SMP3_0 (0x1U << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3_1 (0x2U << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3_2 (0x4U << ADC_SMPR1_SMP3_Pos)

#define ADC_SMPR1_SMP4_Pos (12U)
#define ADC_SMPR1_SMP4_Msk (0x7U << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4 ADC_SMPR1_SMP4_Msk
#define ADC_SMPR1_SMP4_0 (0x1U << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4_1 (0x2U << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4_2 (0x4U << ADC_SMPR1_SMP4_Pos)

#define ADC_SMPR1_SMP5_Pos (15U)
#define ADC_SMPR1_SMP5_Msk (0x7U << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5 ADC_SMPR1_SMP5_Msk
#define ADC_SMPR1_SMP5_0 (0x1U << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5_1 (0x2U << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5_2 (0x4U << ADC_SMPR1_SMP5_Pos)

#define ADC_SMPR1_SMP6_Pos (18U)
#define ADC_SMPR1_SMP6_Msk (0x7U << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6 ADC_SMPR1_SMP6_Msk
#define ADC_SMPR1_SMP6_0 (0x1U << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6_1 (0x2U << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6_2 (0x4U << ADC_SMPR1_SMP6_Pos)

#define ADC_SMPR1_SMP7_Pos (21U)
#define ADC_SMPR1_SMP7_Msk (0x7U << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7 ADC_SMPR1_SMP7_Msk
#define ADC_SMPR1_SMP7_0 (0x1U << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7_1 (0x2U << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7_2 (0x4U << ADC_SMPR1_SMP7_Pos)

#define ADC_SMPR1_SMP8_Pos (24U)
#define ADC_SMPR1_SMP8_Msk (0x7U << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8 ADC_SMPR1_SMP8_Msk
#define ADC_SMPR1_SMP8_0 (0x1U << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8_1 (0x2U << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8_2 (0x4U << ADC_SMPR1_SMP8_Pos)

#define ADC_SMPR1_SMP9_Pos (27U)
#define ADC_SMPR1_SMP9_Msk (0x7U << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9 ADC_SMPR1_SMP9_Msk
#define ADC_SMPR1_SMP9_0 (0x1U << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9_1 (0x2U << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9_2 (0x4U << ADC_SMPR1_SMP9_Pos)


#define ADC_SMPR2_SMP10_Pos (0U)
#define ADC_SMPR2_SMP10_Msk (0x7U << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10 ADC_SMPR2_SMP10_Msk
#define ADC_SMPR2_SMP10_0 (0x1U << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10_1 (0x2U << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10_2 (0x4U << ADC_SMPR2_SMP10_Pos)

#define ADC_SMPR2_SMP11_Pos (3U)
#define ADC_SMPR2_SMP11_Msk (0x7U << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11 ADC_SMPR2_SMP11_Msk
#define ADC_SMPR2_SMP11_0 (0x1U << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11_1 (0x2U << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11_2 (0x4U << ADC_SMPR2_SMP11_Pos)

#define ADC_SMPR2_SMP12_Pos (6U)
#define ADC_SMPR2_SMP12_Msk (0x7U << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12 ADC_SMPR2_SMP12_Msk
#define ADC_SMPR2_SMP12_0 (0x1U << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12_1 (0x2U << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12_2 (0x4U << ADC_SMPR2_SMP12_Pos)

#define ADC_SMPR2_SMP13_Pos (9U)
#define ADC_SMPR2_SMP13_Msk (0x7U << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13 ADC_SMPR2_SMP13_Msk
#define ADC_SMPR2_SMP13_0 (0x1U << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13_1 (0x2U << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13_2 (0x4U << ADC_SMPR2_SMP13_Pos)

#define ADC_SMPR2_SMP14_Pos (12U)
#define ADC_SMPR2_SMP14_Msk (0x7U << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14 ADC_SMPR2_SMP14_Msk
#define ADC_SMPR2_SMP14_0 (0x1U << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14_1 (0x2U << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14_2 (0x4U << ADC_SMPR2_SMP14_Pos)

#define ADC_SMPR2_SMP15_Pos (15U)
#define ADC_SMPR2_SMP15_Msk (0x7U << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15 ADC_SMPR2_SMP15_Msk
#define ADC_SMPR2_SMP15_0 (0x1U << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15_1 (0x2U << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15_2 (0x4U << ADC_SMPR2_SMP15_Pos)

#define ADC_SMPR2_SMP16_Pos (18U)
#define ADC_SMPR2_SMP16_Msk (0x7U << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16 ADC_SMPR2_SMP16_Msk
#define ADC_SMPR2_SMP16_0 (0x1U << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16_1 (0x2U << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16_2 (0x4U << ADC_SMPR2_SMP16_Pos)

#define ADC_SMPR2_SMP17_Pos (21U)
#define ADC_SMPR2_SMP17_Msk (0x7U << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17 ADC_SMPR2_SMP17_Msk
#define ADC_SMPR2_SMP17_0 (0x1U << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17_1 (0x2U << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17_2 (0x4U << ADC_SMPR2_SMP17_Pos)

#define ADC_SMPR2_SMP18_Pos (24U)
#define ADC_SMPR2_SMP18_Msk (0x7U << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18 ADC_SMPR2_SMP18_Msk
#define ADC_SMPR2_SMP18_0 (0x1U << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18_1 (0x2U << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18_2 (0x4U << ADC_SMPR2_SMP18_Pos)


#define ADC_TR1_LT1_Pos (0U)
#define ADC_TR1_LT1_Msk (0xFFFU << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1 ADC_TR1_LT1_Msk
#define ADC_TR1_LT1_0 (0x001U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_1 (0x002U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_2 (0x004U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_3 (0x008U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_4 (0x010U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_5 (0x020U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_6 (0x040U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_7 (0x080U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_8 (0x100U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_9 (0x200U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_10 (0x400U << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_11 (0x800U << ADC_TR1_LT1_Pos)

#define ADC_TR1_HT1_Pos (16U)
#define ADC_TR1_HT1_Msk (0xFFFU << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1 ADC_TR1_HT1_Msk
#define ADC_TR1_HT1_0 (0x001U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_1 (0x002U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_2 (0x004U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_3 (0x008U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_4 (0x010U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_5 (0x020U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_6 (0x040U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_7 (0x080U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_8 (0x100U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_9 (0x200U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_10 (0x400U << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_11 (0x800U << ADC_TR1_HT1_Pos)


#define ADC_TR2_LT2_Pos (0U)
#define ADC_TR2_LT2_Msk (0xFFU << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2 ADC_TR2_LT2_Msk
#define ADC_TR2_LT2_0 (0x01U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_1 (0x02U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_2 (0x04U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_3 (0x08U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_4 (0x10U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_5 (0x20U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_6 (0x40U << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_7 (0x80U << ADC_TR2_LT2_Pos)

#define ADC_TR2_HT2_Pos (16U)
#define ADC_TR2_HT2_Msk (0xFFU << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2 ADC_TR2_HT2_Msk
#define ADC_TR2_HT2_0 (0x01U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_1 (0x02U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_2 (0x04U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_3 (0x08U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_4 (0x10U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_5 (0x20U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_6 (0x40U << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_7 (0x80U << ADC_TR2_HT2_Pos)


#define ADC_TR3_LT3_Pos (0U)
#define ADC_TR3_LT3_Msk (0xFFU << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3 ADC_TR3_LT3_Msk
#define ADC_TR3_LT3_0 (0x01U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_1 (0x02U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_2 (0x04U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_3 (0x08U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_4 (0x10U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_5 (0x20U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_6 (0x40U << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_7 (0x80U << ADC_TR3_LT3_Pos)

#define ADC_TR3_HT3_Pos (16U)
#define ADC_TR3_HT3_Msk (0xFFU << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3 ADC_TR3_HT3_Msk
#define ADC_TR3_HT3_0 (0x01U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_1 (0x02U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_2 (0x04U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_3 (0x08U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_4 (0x10U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_5 (0x20U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_6 (0x40U << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_7 (0x80U << ADC_TR3_HT3_Pos)


#define ADC_SQR1_L_Pos (0U)
#define ADC_SQR1_L_Msk (0xFU << ADC_SQR1_L_Pos)
#define ADC_SQR1_L ADC_SQR1_L_Msk
#define ADC_SQR1_L_0 (0x1U << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_1 (0x2U << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_2 (0x4U << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_3 (0x8U << ADC_SQR1_L_Pos)

#define ADC_SQR1_SQ1_Pos (6U)
#define ADC_SQR1_SQ1_Msk (0x1FU << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1 ADC_SQR1_SQ1_Msk
#define ADC_SQR1_SQ1_0 (0x01U << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_1 (0x02U << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_2 (0x04U << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_3 (0x08U << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_4 (0x10U << ADC_SQR1_SQ1_Pos)

#define ADC_SQR1_SQ2_Pos (12U)
#define ADC_SQR1_SQ2_Msk (0x1FU << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2 ADC_SQR1_SQ2_Msk
#define ADC_SQR1_SQ2_0 (0x01U << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_1 (0x02U << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_2 (0x04U << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_3 (0x08U << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_4 (0x10U << ADC_SQR1_SQ2_Pos)

#define ADC_SQR1_SQ3_Pos (18U)
#define ADC_SQR1_SQ3_Msk (0x1FU << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3 ADC_SQR1_SQ3_Msk
#define ADC_SQR1_SQ3_0 (0x01U << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_1 (0x02U << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_2 (0x04U << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_3 (0x08U << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_4 (0x10U << ADC_SQR1_SQ3_Pos)

#define ADC_SQR1_SQ4_Pos (24U)
#define ADC_SQR1_SQ4_Msk (0x1FU << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4 ADC_SQR1_SQ4_Msk
#define ADC_SQR1_SQ4_0 (0x01U << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_1 (0x02U << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_2 (0x04U << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_3 (0x08U << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_4 (0x10U << ADC_SQR1_SQ4_Pos)


#define ADC_SQR2_SQ5_Pos (0U)
#define ADC_SQR2_SQ5_Msk (0x1FU << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5 ADC_SQR2_SQ5_Msk
#define ADC_SQR2_SQ5_0 (0x01U << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_1 (0x02U << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_2 (0x04U << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_3 (0x08U << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_4 (0x10U << ADC_SQR2_SQ5_Pos)

#define ADC_SQR2_SQ6_Pos (6U)
#define ADC_SQR2_SQ6_Msk (0x1FU << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6 ADC_SQR2_SQ6_Msk
#define ADC_SQR2_SQ6_0 (0x01U << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_1 (0x02U << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_2 (0x04U << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_3 (0x08U << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_4 (0x10U << ADC_SQR2_SQ6_Pos)

#define ADC_SQR2_SQ7_Pos (12U)
#define ADC_SQR2_SQ7_Msk (0x1FU << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7 ADC_SQR2_SQ7_Msk
#define ADC_SQR2_SQ7_0 (0x01U << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_1 (0x02U << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_2 (0x04U << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_3 (0x08U << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_4 (0x10U << ADC_SQR2_SQ7_Pos)

#define ADC_SQR2_SQ8_Pos (18U)
#define ADC_SQR2_SQ8_Msk (0x1FU << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8 ADC_SQR2_SQ8_Msk
#define ADC_SQR2_SQ8_0 (0x01U << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_1 (0x02U << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_2 (0x04U << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_3 (0x08U << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_4 (0x10U << ADC_SQR2_SQ8_Pos)

#define ADC_SQR2_SQ9_Pos (24U)
#define ADC_SQR2_SQ9_Msk (0x1FU << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9 ADC_SQR2_SQ9_Msk
#define ADC_SQR2_SQ9_0 (0x01U << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_1 (0x02U << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_2 (0x04U << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_3 (0x08U << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_4 (0x10U << ADC_SQR2_SQ9_Pos)


#define ADC_SQR3_SQ10_Pos (0U)
#define ADC_SQR3_SQ10_Msk (0x1FU << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10 ADC_SQR3_SQ10_Msk
#define ADC_SQR3_SQ10_0 (0x01U << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_1 (0x02U << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_2 (0x04U << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_3 (0x08U << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_4 (0x10U << ADC_SQR3_SQ10_Pos)

#define ADC_SQR3_SQ11_Pos (6U)
#define ADC_SQR3_SQ11_Msk (0x1FU << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11 ADC_SQR3_SQ11_Msk
#define ADC_SQR3_SQ11_0 (0x01U << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_1 (0x02U << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_2 (0x04U << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_3 (0x08U << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_4 (0x10U << ADC_SQR3_SQ11_Pos)

#define ADC_SQR3_SQ12_Pos (12U)
#define ADC_SQR3_SQ12_Msk (0x1FU << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12 ADC_SQR3_SQ12_Msk
#define ADC_SQR3_SQ12_0 (0x01U << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_1 (0x02U << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_2 (0x04U << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_3 (0x08U << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_4 (0x10U << ADC_SQR3_SQ12_Pos)

#define ADC_SQR3_SQ13_Pos (18U)
#define ADC_SQR3_SQ13_Msk (0x1FU << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13 ADC_SQR3_SQ13_Msk
#define ADC_SQR3_SQ13_0 (0x01U << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_1 (0x02U << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_2 (0x04U << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_3 (0x08U << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_4 (0x10U << ADC_SQR3_SQ13_Pos)

#define ADC_SQR3_SQ14_Pos (24U)
#define ADC_SQR3_SQ14_Msk (0x1FU << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14 ADC_SQR3_SQ14_Msk
#define ADC_SQR3_SQ14_0 (0x01U << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_1 (0x02U << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_2 (0x04U << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_3 (0x08U << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_4 (0x10U << ADC_SQR3_SQ14_Pos)


#define ADC_SQR4_SQ15_Pos (0U)
#define ADC_SQR4_SQ15_Msk (0x1FU << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15 ADC_SQR4_SQ15_Msk
#define ADC_SQR4_SQ15_0 (0x01U << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_1 (0x02U << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_2 (0x04U << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_3 (0x08U << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_4 (0x10U << ADC_SQR4_SQ15_Pos)

#define ADC_SQR4_SQ16_Pos (6U)
#define ADC_SQR4_SQ16_Msk (0x1FU << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16 ADC_SQR4_SQ16_Msk
#define ADC_SQR4_SQ16_0 (0x01U << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_1 (0x02U << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_2 (0x04U << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_3 (0x08U << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_4 (0x10U << ADC_SQR4_SQ16_Pos)


#define ADC_DR_RDATA_Pos (0U)
#define ADC_DR_RDATA_Msk (0xFFFFU << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA ADC_DR_RDATA_Msk
#define ADC_DR_RDATA_0 (0x0001U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_1 (0x0002U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_2 (0x0004U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_3 (0x0008U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_4 (0x0010U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_5 (0x0020U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_6 (0x0040U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_7 (0x0080U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_8 (0x0100U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_9 (0x0200U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_10 (0x0400U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_11 (0x0800U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_12 (0x1000U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_13 (0x2000U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_14 (0x4000U << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_15 (0x8000U << ADC_DR_RDATA_Pos)


#define ADC_JSQR_JL_Pos (0U)
#define ADC_JSQR_JL_Msk (0x3U << ADC_JSQR_JL_Pos)
#define ADC_JSQR_JL ADC_JSQR_JL_Msk
#define ADC_JSQR_JL_0 (0x1U << ADC_JSQR_JL_Pos)
#define ADC_JSQR_JL_1 (0x2U << ADC_JSQR_JL_Pos)

#define ADC_JSQR_JEXTSEL_Pos (2U)
#define ADC_JSQR_JEXTSEL_Msk (0xFU << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL ADC_JSQR_JEXTSEL_Msk
#define ADC_JSQR_JEXTSEL_0 (0x1U << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_1 (0x2U << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_2 (0x4U << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_3 (0x8U << ADC_JSQR_JEXTSEL_Pos)

#define ADC_JSQR_JEXTEN_Pos (6U)
#define ADC_JSQR_JEXTEN_Msk (0x3U << ADC_JSQR_JEXTEN_Pos)
#define ADC_JSQR_JEXTEN ADC_JSQR_JEXTEN_Msk
#define ADC_JSQR_JEXTEN_0 (0x1U << ADC_JSQR_JEXTEN_Pos)
#define ADC_JSQR_JEXTEN_1 (0x2U << ADC_JSQR_JEXTEN_Pos)

#define ADC_JSQR_JSQ1_Pos (8U)
#define ADC_JSQR_JSQ1_Msk (0x1FU << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1 ADC_JSQR_JSQ1_Msk
#define ADC_JSQR_JSQ1_0 (0x01U << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_1 (0x02U << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_2 (0x04U << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_3 (0x08U << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_4 (0x10U << ADC_JSQR_JSQ1_Pos)

#define ADC_JSQR_JSQ2_Pos (14U)
#define ADC_JSQR_JSQ2_Msk (0x1FU << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2 ADC_JSQR_JSQ2_Msk
#define ADC_JSQR_JSQ2_0 (0x01U << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_1 (0x02U << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_2 (0x04U << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_3 (0x08U << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_4 (0x10U << ADC_JSQR_JSQ2_Pos)

#define ADC_JSQR_JSQ3_Pos (20U)
#define ADC_JSQR_JSQ3_Msk (0x1FU << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3 ADC_JSQR_JSQ3_Msk
#define ADC_JSQR_JSQ3_0 (0x01U << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_1 (0x02U << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_2 (0x04U << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_3 (0x08U << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_4 (0x10U << ADC_JSQR_JSQ3_Pos)

#define ADC_JSQR_JSQ4_Pos (26U)
#define ADC_JSQR_JSQ4_Msk (0x1FU << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4 ADC_JSQR_JSQ4_Msk
#define ADC_JSQR_JSQ4_0 (0x01U << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_1 (0x02U << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_2 (0x04U << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_3 (0x08U << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_4 (0x10U << ADC_JSQR_JSQ4_Pos)



#define ADC_OFR1_OFFSET1_Pos (0U)
#define ADC_OFR1_OFFSET1_Msk (0xFFFU << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1 ADC_OFR1_OFFSET1_Msk
#define ADC_OFR1_OFFSET1_0 (0x001U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_1 (0x002U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_2 (0x004U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_3 (0x008U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_4 (0x010U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_5 (0x020U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_6 (0x040U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_7 (0x080U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_8 (0x100U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_9 (0x200U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_10 (0x400U << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_11 (0x800U << ADC_OFR1_OFFSET1_Pos)

#define ADC_OFR1_OFFSET1_CH_Pos (26U)
#define ADC_OFR1_OFFSET1_CH_Msk (0x1FU << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH ADC_OFR1_OFFSET1_CH_Msk
#define ADC_OFR1_OFFSET1_CH_0 (0x01U << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_1 (0x02U << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_2 (0x04U << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_3 (0x08U << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_4 (0x10U << ADC_OFR1_OFFSET1_CH_Pos)

#define ADC_OFR1_OFFSET1_EN_Pos (31U)
#define ADC_OFR1_OFFSET1_EN_Msk (0x1U << ADC_OFR1_OFFSET1_EN_Pos)
#define ADC_OFR1_OFFSET1_EN ADC_OFR1_OFFSET1_EN_Msk


#define ADC_OFR2_OFFSET2_Pos (0U)
#define ADC_OFR2_OFFSET2_Msk (0xFFFU << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2 ADC_OFR2_OFFSET2_Msk
#define ADC_OFR2_OFFSET2_0 (0x001U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_1 (0x002U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_2 (0x004U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_3 (0x008U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_4 (0x010U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_5 (0x020U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_6 (0x040U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_7 (0x080U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_8 (0x100U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_9 (0x200U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_10 (0x400U << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_11 (0x800U << ADC_OFR2_OFFSET2_Pos)

#define ADC_OFR2_OFFSET2_CH_Pos (26U)
#define ADC_OFR2_OFFSET2_CH_Msk (0x1FU << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH ADC_OFR2_OFFSET2_CH_Msk
#define ADC_OFR2_OFFSET2_CH_0 (0x01U << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_1 (0x02U << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_2 (0x04U << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_3 (0x08U << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_4 (0x10U << ADC_OFR2_OFFSET2_CH_Pos)

#define ADC_OFR2_OFFSET2_EN_Pos (31U)
#define ADC_OFR2_OFFSET2_EN_Msk (0x1U << ADC_OFR2_OFFSET2_EN_Pos)
#define ADC_OFR2_OFFSET2_EN ADC_OFR2_OFFSET2_EN_Msk


#define ADC_OFR3_OFFSET3_Pos (0U)
#define ADC_OFR3_OFFSET3_Msk (0xFFFU << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3 ADC_OFR3_OFFSET3_Msk
#define ADC_OFR3_OFFSET3_0 (0x001U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_1 (0x002U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_2 (0x004U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_3 (0x008U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_4 (0x010U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_5 (0x020U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_6 (0x040U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_7 (0x080U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_8 (0x100U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_9 (0x200U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_10 (0x400U << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_11 (0x800U << ADC_OFR3_OFFSET3_Pos)

#define ADC_OFR3_OFFSET3_CH_Pos (26U)
#define ADC_OFR3_OFFSET3_CH_Msk (0x1FU << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH ADC_OFR3_OFFSET3_CH_Msk
#define ADC_OFR3_OFFSET3_CH_0 (0x01U << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_1 (0x02U << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_2 (0x04U << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_3 (0x08U << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_4 (0x10U << ADC_OFR3_OFFSET3_CH_Pos)

#define ADC_OFR3_OFFSET3_EN_Pos (31U)
#define ADC_OFR3_OFFSET3_EN_Msk (0x1U << ADC_OFR3_OFFSET3_EN_Pos)
#define ADC_OFR3_OFFSET3_EN ADC_OFR3_OFFSET3_EN_Msk


#define ADC_OFR4_OFFSET4_Pos (0U)
#define ADC_OFR4_OFFSET4_Msk (0xFFFU << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4 ADC_OFR4_OFFSET4_Msk
#define ADC_OFR4_OFFSET4_0 (0x001U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_1 (0x002U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_2 (0x004U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_3 (0x008U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_4 (0x010U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_5 (0x020U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_6 (0x040U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_7 (0x080U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_8 (0x100U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_9 (0x200U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_10 (0x400U << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_11 (0x800U << ADC_OFR4_OFFSET4_Pos)

#define ADC_OFR4_OFFSET4_CH_Pos (26U)
#define ADC_OFR4_OFFSET4_CH_Msk (0x1FU << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH ADC_OFR4_OFFSET4_CH_Msk
#define ADC_OFR4_OFFSET4_CH_0 (0x01U << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_1 (0x02U << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_2 (0x04U << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_3 (0x08U << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_4 (0x10U << ADC_OFR4_OFFSET4_CH_Pos)

#define ADC_OFR4_OFFSET4_EN_Pos (31U)
#define ADC_OFR4_OFFSET4_EN_Msk (0x1U << ADC_OFR4_OFFSET4_EN_Pos)
#define ADC_OFR4_OFFSET4_EN ADC_OFR4_OFFSET4_EN_Msk


#define ADC_JDR1_JDATA_Pos (0U)
#define ADC_JDR1_JDATA_Msk (0xFFFFU << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA ADC_JDR1_JDATA_Msk
#define ADC_JDR1_JDATA_0 (0x0001U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_1 (0x0002U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_2 (0x0004U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_3 (0x0008U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_4 (0x0010U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_5 (0x0020U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_6 (0x0040U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_7 (0x0080U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_8 (0x0100U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_9 (0x0200U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_10 (0x0400U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_11 (0x0800U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_12 (0x1000U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_13 (0x2000U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_14 (0x4000U << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_15 (0x8000U << ADC_JDR1_JDATA_Pos)


#define ADC_JDR2_JDATA_Pos (0U)
#define ADC_JDR2_JDATA_Msk (0xFFFFU << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA ADC_JDR2_JDATA_Msk
#define ADC_JDR2_JDATA_0 (0x0001U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_1 (0x0002U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_2 (0x0004U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_3 (0x0008U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_4 (0x0010U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_5 (0x0020U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_6 (0x0040U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_7 (0x0080U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_8 (0x0100U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_9 (0x0200U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_10 (0x0400U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_11 (0x0800U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_12 (0x1000U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_13 (0x2000U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_14 (0x4000U << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_15 (0x8000U << ADC_JDR2_JDATA_Pos)


#define ADC_JDR3_JDATA_Pos (0U)
#define ADC_JDR3_JDATA_Msk (0xFFFFU << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA ADC_JDR3_JDATA_Msk
#define ADC_JDR3_JDATA_0 (0x0001U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_1 (0x0002U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_2 (0x0004U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_3 (0x0008U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_4 (0x0010U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_5 (0x0020U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_6 (0x0040U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_7 (0x0080U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_8 (0x0100U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_9 (0x0200U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_10 (0x0400U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_11 (0x0800U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_12 (0x1000U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_13 (0x2000U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_14 (0x4000U << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_15 (0x8000U << ADC_JDR3_JDATA_Pos)


#define ADC_JDR4_JDATA_Pos (0U)
#define ADC_JDR4_JDATA_Msk (0xFFFFU << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA ADC_JDR4_JDATA_Msk
#define ADC_JDR4_JDATA_0 (0x0001U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_1 (0x0002U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_2 (0x0004U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_3 (0x0008U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_4 (0x0010U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_5 (0x0020U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_6 (0x0040U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_7 (0x0080U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_8 (0x0100U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_9 (0x0200U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_10 (0x0400U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_11 (0x0800U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_12 (0x1000U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_13 (0x2000U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_14 (0x4000U << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_15 (0x8000U << ADC_JDR4_JDATA_Pos)


#define ADC_AWD2CR_AWD2CH_Pos (0U)
#define ADC_AWD2CR_AWD2CH_Msk (0x7FFFFU << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH ADC_AWD2CR_AWD2CH_Msk
#define ADC_AWD2CR_AWD2CH_0 (0x00001U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_1 (0x00002U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_2 (0x00004U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_3 (0x00008U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_4 (0x00010U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_5 (0x00020U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_6 (0x00040U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_7 (0x00080U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_8 (0x00100U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_9 (0x00200U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_10 (0x00400U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_11 (0x00800U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_12 (0x01000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_13 (0x02000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_14 (0x04000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_15 (0x08000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_16 (0x10000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_17 (0x20000U << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_18 (0x40000U << ADC_AWD2CR_AWD2CH_Pos)


#define ADC_AWD3CR_AWD3CH_Pos (0U)
#define ADC_AWD3CR_AWD3CH_Msk (0x7FFFFU << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH ADC_AWD3CR_AWD3CH_Msk
#define ADC_AWD3CR_AWD3CH_0 (0x00001U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_1 (0x00002U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_2 (0x00004U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_3 (0x00008U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_4 (0x00010U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_5 (0x00020U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_6 (0x00040U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_7 (0x00080U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_8 (0x00100U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_9 (0x00200U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_10 (0x00400U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_11 (0x00800U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_12 (0x01000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_13 (0x02000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_14 (0x04000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_15 (0x08000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_16 (0x10000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_17 (0x20000U << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_18 (0x40000U << ADC_AWD3CR_AWD3CH_Pos)


#define ADC_DIFSEL_DIFSEL_Pos (0U)
#define ADC_DIFSEL_DIFSEL_Msk (0x7FFFFU << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL ADC_DIFSEL_DIFSEL_Msk
#define ADC_DIFSEL_DIFSEL_0 (0x00001U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_1 (0x00002U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_2 (0x00004U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_3 (0x00008U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_4 (0x00010U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_5 (0x00020U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_6 (0x00040U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_7 (0x00080U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_8 (0x00100U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_9 (0x00200U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_10 (0x00400U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_11 (0x00800U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_12 (0x01000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_13 (0x02000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_14 (0x04000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_15 (0x08000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_16 (0x10000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_17 (0x20000U << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_18 (0x40000U << ADC_DIFSEL_DIFSEL_Pos)


#define ADC_CALFACT_CALFACT_S_Pos (0U)
#define ADC_CALFACT_CALFACT_S_Msk (0x7FU << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S ADC_CALFACT_CALFACT_S_Msk
#define ADC_CALFACT_CALFACT_S_0 (0x01U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_1 (0x02U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_2 (0x04U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_3 (0x08U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_4 (0x10U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_5 (0x20U << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_6 (0x40U << ADC_CALFACT_CALFACT_S_Pos)

#define ADC_CALFACT_CALFACT_D_Pos (16U)
#define ADC_CALFACT_CALFACT_D_Msk (0x7FU << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D ADC_CALFACT_CALFACT_D_Msk
#define ADC_CALFACT_CALFACT_D_0 (0x01U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_1 (0x02U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_2 (0x04U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_3 (0x08U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_4 (0x10U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_5 (0x20U << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_6 (0x40U << ADC_CALFACT_CALFACT_D_Pos)



#define ADC12_CSR_ADRDY_MST_Pos (0U)
#define ADC12_CSR_ADRDY_MST_Msk (0x1U << ADC12_CSR_ADRDY_MST_Pos)
#define ADC12_CSR_ADRDY_MST ADC12_CSR_ADRDY_MST_Msk
#define ADC12_CSR_ADRDY_EOSMP_MST_Pos (1U)
#define ADC12_CSR_ADRDY_EOSMP_MST_Msk (0x1U << ADC12_CSR_ADRDY_EOSMP_MST_Pos)
#define ADC12_CSR_ADRDY_EOSMP_MST ADC12_CSR_ADRDY_EOSMP_MST_Msk
#define ADC12_CSR_ADRDY_EOC_MST_Pos (2U)
#define ADC12_CSR_ADRDY_EOC_MST_Msk (0x1U << ADC12_CSR_ADRDY_EOC_MST_Pos)
#define ADC12_CSR_ADRDY_EOC_MST ADC12_CSR_ADRDY_EOC_MST_Msk
#define ADC12_CSR_ADRDY_EOS_MST_Pos (3U)
#define ADC12_CSR_ADRDY_EOS_MST_Msk (0x1U << ADC12_CSR_ADRDY_EOS_MST_Pos)
#define ADC12_CSR_ADRDY_EOS_MST ADC12_CSR_ADRDY_EOS_MST_Msk
#define ADC12_CSR_ADRDY_OVR_MST_Pos (4U)
#define ADC12_CSR_ADRDY_OVR_MST_Msk (0x1U << ADC12_CSR_ADRDY_OVR_MST_Pos)
#define ADC12_CSR_ADRDY_OVR_MST ADC12_CSR_ADRDY_OVR_MST_Msk
#define ADC12_CSR_ADRDY_JEOC_MST_Pos (5U)
#define ADC12_CSR_ADRDY_JEOC_MST_Msk (0x1U << ADC12_CSR_ADRDY_JEOC_MST_Pos)
#define ADC12_CSR_ADRDY_JEOC_MST ADC12_CSR_ADRDY_JEOC_MST_Msk
#define ADC12_CSR_ADRDY_JEOS_MST_Pos (6U)
#define ADC12_CSR_ADRDY_JEOS_MST_Msk (0x1U << ADC12_CSR_ADRDY_JEOS_MST_Pos)
#define ADC12_CSR_ADRDY_JEOS_MST ADC12_CSR_ADRDY_JEOS_MST_Msk
#define ADC12_CSR_AWD1_MST_Pos (7U)
#define ADC12_CSR_AWD1_MST_Msk (0x1U << ADC12_CSR_AWD1_MST_Pos)
#define ADC12_CSR_AWD1_MST ADC12_CSR_AWD1_MST_Msk
#define ADC12_CSR_AWD2_MST_Pos (8U)
#define ADC12_CSR_AWD2_MST_Msk (0x1U << ADC12_CSR_AWD2_MST_Pos)
#define ADC12_CSR_AWD2_MST ADC12_CSR_AWD2_MST_Msk
#define ADC12_CSR_AWD3_MST_Pos (9U)
#define ADC12_CSR_AWD3_MST_Msk (0x1U << ADC12_CSR_AWD3_MST_Pos)
#define ADC12_CSR_AWD3_MST ADC12_CSR_AWD3_MST_Msk
#define ADC12_CSR_JQOVF_MST_Pos (10U)
#define ADC12_CSR_JQOVF_MST_Msk (0x1U << ADC12_CSR_JQOVF_MST_Pos)
#define ADC12_CSR_JQOVF_MST ADC12_CSR_JQOVF_MST_Msk
#define ADC12_CSR_ADRDY_SLV_Pos (16U)
#define ADC12_CSR_ADRDY_SLV_Msk (0x1U << ADC12_CSR_ADRDY_SLV_Pos)
#define ADC12_CSR_ADRDY_SLV ADC12_CSR_ADRDY_SLV_Msk
#define ADC12_CSR_ADRDY_EOSMP_SLV_Pos (17U)
#define ADC12_CSR_ADRDY_EOSMP_SLV_Msk (0x1U << ADC12_CSR_ADRDY_EOSMP_SLV_Pos)
#define ADC12_CSR_ADRDY_EOSMP_SLV ADC12_CSR_ADRDY_EOSMP_SLV_Msk
#define ADC12_CSR_ADRDY_EOC_SLV_Pos (18U)
#define ADC12_CSR_ADRDY_EOC_SLV_Msk (0x1U << ADC12_CSR_ADRDY_EOC_SLV_Pos)
#define ADC12_CSR_ADRDY_EOC_SLV ADC12_CSR_ADRDY_EOC_SLV_Msk
#define ADC12_CSR_ADRDY_EOS_SLV_Pos (19U)
#define ADC12_CSR_ADRDY_EOS_SLV_Msk (0x1U << ADC12_CSR_ADRDY_EOS_SLV_Pos)
#define ADC12_CSR_ADRDY_EOS_SLV ADC12_CSR_ADRDY_EOS_SLV_Msk
#define ADC12_CSR_ADRDY_OVR_SLV_Pos (20U)
#define ADC12_CSR_ADRDY_OVR_SLV_Msk (0x1U << ADC12_CSR_ADRDY_OVR_SLV_Pos)
#define ADC12_CSR_ADRDY_OVR_SLV ADC12_CSR_ADRDY_OVR_SLV_Msk
#define ADC12_CSR_ADRDY_JEOC_SLV_Pos (21U)
#define ADC12_CSR_ADRDY_JEOC_SLV_Msk (0x1U << ADC12_CSR_ADRDY_JEOC_SLV_Pos)
#define ADC12_CSR_ADRDY_JEOC_SLV ADC12_CSR_ADRDY_JEOC_SLV_Msk
#define ADC12_CSR_ADRDY_JEOS_SLV_Pos (22U)
#define ADC12_CSR_ADRDY_JEOS_SLV_Msk (0x1U << ADC12_CSR_ADRDY_JEOS_SLV_Pos)
#define ADC12_CSR_ADRDY_JEOS_SLV ADC12_CSR_ADRDY_JEOS_SLV_Msk
#define ADC12_CSR_AWD1_SLV_Pos (23U)
#define ADC12_CSR_AWD1_SLV_Msk (0x1U << ADC12_CSR_AWD1_SLV_Pos)
#define ADC12_CSR_AWD1_SLV ADC12_CSR_AWD1_SLV_Msk
#define ADC12_CSR_AWD2_SLV_Pos (24U)
#define ADC12_CSR_AWD2_SLV_Msk (0x1U << ADC12_CSR_AWD2_SLV_Pos)
#define ADC12_CSR_AWD2_SLV ADC12_CSR_AWD2_SLV_Msk
#define ADC12_CSR_AWD3_SLV_Pos (25U)
#define ADC12_CSR_AWD3_SLV_Msk (0x1U << ADC12_CSR_AWD3_SLV_Pos)
#define ADC12_CSR_AWD3_SLV ADC12_CSR_AWD3_SLV_Msk
#define ADC12_CSR_JQOVF_SLV_Pos (26U)
#define ADC12_CSR_JQOVF_SLV_Msk (0x1U << ADC12_CSR_JQOVF_SLV_Pos)
#define ADC12_CSR_JQOVF_SLV ADC12_CSR_JQOVF_SLV_Msk


#define ADC34_CSR_ADRDY_MST_Pos (0U)
#define ADC34_CSR_ADRDY_MST_Msk (0x1U << ADC34_CSR_ADRDY_MST_Pos)
#define ADC34_CSR_ADRDY_MST ADC34_CSR_ADRDY_MST_Msk
#define ADC34_CSR_ADRDY_EOSMP_MST_Pos (1U)
#define ADC34_CSR_ADRDY_EOSMP_MST_Msk (0x1U << ADC34_CSR_ADRDY_EOSMP_MST_Pos)
#define ADC34_CSR_ADRDY_EOSMP_MST ADC34_CSR_ADRDY_EOSMP_MST_Msk
#define ADC34_CSR_ADRDY_EOC_MST_Pos (2U)
#define ADC34_CSR_ADRDY_EOC_MST_Msk (0x1U << ADC34_CSR_ADRDY_EOC_MST_Pos)
#define ADC34_CSR_ADRDY_EOC_MST ADC34_CSR_ADRDY_EOC_MST_Msk
#define ADC34_CSR_ADRDY_EOS_MST_Pos (3U)
#define ADC34_CSR_ADRDY_EOS_MST_Msk (0x1U << ADC34_CSR_ADRDY_EOS_MST_Pos)
#define ADC34_CSR_ADRDY_EOS_MST ADC34_CSR_ADRDY_EOS_MST_Msk
#define ADC34_CSR_ADRDY_OVR_MST_Pos (4U)
#define ADC34_CSR_ADRDY_OVR_MST_Msk (0x1U << ADC34_CSR_ADRDY_OVR_MST_Pos)
#define ADC34_CSR_ADRDY_OVR_MST ADC34_CSR_ADRDY_OVR_MST_Msk
#define ADC34_CSR_ADRDY_JEOC_MST_Pos (5U)
#define ADC34_CSR_ADRDY_JEOC_MST_Msk (0x1U << ADC34_CSR_ADRDY_JEOC_MST_Pos)
#define ADC34_CSR_ADRDY_JEOC_MST ADC34_CSR_ADRDY_JEOC_MST_Msk
#define ADC34_CSR_ADRDY_JEOS_MST_Pos (6U)
#define ADC34_CSR_ADRDY_JEOS_MST_Msk (0x1U << ADC34_CSR_ADRDY_JEOS_MST_Pos)
#define ADC34_CSR_ADRDY_JEOS_MST ADC34_CSR_ADRDY_JEOS_MST_Msk
#define ADC34_CSR_AWD1_MST_Pos (7U)
#define ADC34_CSR_AWD1_MST_Msk (0x1U << ADC34_CSR_AWD1_MST_Pos)
#define ADC34_CSR_AWD1_MST ADC34_CSR_AWD1_MST_Msk
#define ADC34_CSR_AWD2_MST_Pos (8U)
#define ADC34_CSR_AWD2_MST_Msk (0x1U << ADC34_CSR_AWD2_MST_Pos)
#define ADC34_CSR_AWD2_MST ADC34_CSR_AWD2_MST_Msk
#define ADC34_CSR_AWD3_MST_Pos (9U)
#define ADC34_CSR_AWD3_MST_Msk (0x1U << ADC34_CSR_AWD3_MST_Pos)
#define ADC34_CSR_AWD3_MST ADC34_CSR_AWD3_MST_Msk
#define ADC34_CSR_JQOVF_MST_Pos (10U)
#define ADC34_CSR_JQOVF_MST_Msk (0x1U << ADC34_CSR_JQOVF_MST_Pos)
#define ADC34_CSR_JQOVF_MST ADC34_CSR_JQOVF_MST_Msk
#define ADC34_CSR_ADRDY_SLV_Pos (16U)
#define ADC34_CSR_ADRDY_SLV_Msk (0x1U << ADC34_CSR_ADRDY_SLV_Pos)
#define ADC34_CSR_ADRDY_SLV ADC34_CSR_ADRDY_SLV_Msk
#define ADC34_CSR_ADRDY_EOSMP_SLV_Pos (17U)
#define ADC34_CSR_ADRDY_EOSMP_SLV_Msk (0x1U << ADC34_CSR_ADRDY_EOSMP_SLV_Pos)
#define ADC34_CSR_ADRDY_EOSMP_SLV ADC34_CSR_ADRDY_EOSMP_SLV_Msk
#define ADC34_CSR_ADRDY_EOC_SLV_Pos (18U)
#define ADC34_CSR_ADRDY_EOC_SLV_Msk (0x1U << ADC34_CSR_ADRDY_EOC_SLV_Pos)
#define ADC34_CSR_ADRDY_EOC_SLV ADC34_CSR_ADRDY_EOC_SLV_Msk
#define ADC34_CSR_ADRDY_EOS_SLV_Pos (19U)
#define ADC34_CSR_ADRDY_EOS_SLV_Msk (0x1U << ADC34_CSR_ADRDY_EOS_SLV_Pos)
#define ADC34_CSR_ADRDY_EOS_SLV ADC34_CSR_ADRDY_EOS_SLV_Msk
#define ADC12_CSR_ADRDY_OVR_SLV_Pos (20U)
#define ADC12_CSR_ADRDY_OVR_SLV_Msk (0x1U << ADC12_CSR_ADRDY_OVR_SLV_Pos)
#define ADC12_CSR_ADRDY_OVR_SLV ADC12_CSR_ADRDY_OVR_SLV_Msk
#define ADC34_CSR_ADRDY_JEOC_SLV_Pos (21U)
#define ADC34_CSR_ADRDY_JEOC_SLV_Msk (0x1U << ADC34_CSR_ADRDY_JEOC_SLV_Pos)
#define ADC34_CSR_ADRDY_JEOC_SLV ADC34_CSR_ADRDY_JEOC_SLV_Msk
#define ADC34_CSR_ADRDY_JEOS_SLV_Pos (22U)
#define ADC34_CSR_ADRDY_JEOS_SLV_Msk (0x1U << ADC34_CSR_ADRDY_JEOS_SLV_Pos)
#define ADC34_CSR_ADRDY_JEOS_SLV ADC34_CSR_ADRDY_JEOS_SLV_Msk
#define ADC34_CSR_AWD1_SLV_Pos (23U)
#define ADC34_CSR_AWD1_SLV_Msk (0x1U << ADC34_CSR_AWD1_SLV_Pos)
#define ADC34_CSR_AWD1_SLV ADC34_CSR_AWD1_SLV_Msk
#define ADC34_CSR_AWD2_SLV_Pos (24U)
#define ADC34_CSR_AWD2_SLV_Msk (0x1U << ADC34_CSR_AWD2_SLV_Pos)
#define ADC34_CSR_AWD2_SLV ADC34_CSR_AWD2_SLV_Msk
#define ADC34_CSR_AWD3_SLV_Pos (25U)
#define ADC34_CSR_AWD3_SLV_Msk (0x1U << ADC34_CSR_AWD3_SLV_Pos)
#define ADC34_CSR_AWD3_SLV ADC34_CSR_AWD3_SLV_Msk
#define ADC34_CSR_JQOVF_SLV_Pos (26U)
#define ADC34_CSR_JQOVF_SLV_Msk (0x1U << ADC34_CSR_JQOVF_SLV_Pos)
#define ADC34_CSR_JQOVF_SLV ADC34_CSR_JQOVF_SLV_Msk


#define ADC12_CCR_MULTI_Pos (0U)
#define ADC12_CCR_MULTI_Msk (0x1FU << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_MULTI ADC12_CCR_MULTI_Msk
#define ADC12_CCR_MULTI_0 (0x01U << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_MULTI_1 (0x02U << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_MULTI_2 (0x04U << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_MULTI_3 (0x08U << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_MULTI_4 (0x10U << ADC12_CCR_MULTI_Pos)
#define ADC12_CCR_DELAY_Pos (8U)
#define ADC12_CCR_DELAY_Msk (0xFU << ADC12_CCR_DELAY_Pos)
#define ADC12_CCR_DELAY ADC12_CCR_DELAY_Msk
#define ADC12_CCR_DELAY_0 (0x1U << ADC12_CCR_DELAY_Pos)
#define ADC12_CCR_DELAY_1 (0x2U << ADC12_CCR_DELAY_Pos)
#define ADC12_CCR_DELAY_2 (0x4U << ADC12_CCR_DELAY_Pos)
#define ADC12_CCR_DELAY_3 (0x8U << ADC12_CCR_DELAY_Pos)
#define ADC12_CCR_DMACFG_Pos (13U)
#define ADC12_CCR_DMACFG_Msk (0x1U << ADC12_CCR_DMACFG_Pos)
#define ADC12_CCR_DMACFG ADC12_CCR_DMACFG_Msk
#define ADC12_CCR_MDMA_Pos (14U)
#define ADC12_CCR_MDMA_Msk (0x3U << ADC12_CCR_MDMA_Pos)
#define ADC12_CCR_MDMA ADC12_CCR_MDMA_Msk
#define ADC12_CCR_MDMA_0 (0x1U << ADC12_CCR_MDMA_Pos)
#define ADC12_CCR_MDMA_1 (0x2U << ADC12_CCR_MDMA_Pos)
#define ADC12_CCR_CKMODE_Pos (16U)
#define ADC12_CCR_CKMODE_Msk (0x3U << ADC12_CCR_CKMODE_Pos)
#define ADC12_CCR_CKMODE ADC12_CCR_CKMODE_Msk
#define ADC12_CCR_CKMODE_0 (0x1U << ADC12_CCR_CKMODE_Pos)
#define ADC12_CCR_CKMODE_1 (0x2U << ADC12_CCR_CKMODE_Pos)
#define ADC12_CCR_VREFEN_Pos (22U)
#define ADC12_CCR_VREFEN_Msk (0x1U << ADC12_CCR_VREFEN_Pos)
#define ADC12_CCR_VREFEN ADC12_CCR_VREFEN_Msk
#define ADC12_CCR_TSEN_Pos (23U)
#define ADC12_CCR_TSEN_Msk (0x1U << ADC12_CCR_TSEN_Pos)
#define ADC12_CCR_TSEN ADC12_CCR_TSEN_Msk
#define ADC12_CCR_VBATEN_Pos (24U)
#define ADC12_CCR_VBATEN_Msk (0x1U << ADC12_CCR_VBATEN_Pos)
#define ADC12_CCR_VBATEN ADC12_CCR_VBATEN_Msk


#define ADC34_CCR_MULTI_Pos (0U)
#define ADC34_CCR_MULTI_Msk (0x1FU << ADC34_CCR_MULTI_Pos)
#define ADC34_CCR_MULTI ADC34_CCR_MULTI_Msk
#define ADC34_CCR_MULTI_0 (0x01U << ADC34_CCR_MULTI_Pos)
#define ADC34_CCR_MULTI_1 (0x02U << ADC34_CCR_MULTI_Pos)
#define ADC34_CCR_MULTI_2 (0x04U << ADC34_CCR_MULTI_Pos)
#define ADC34_CCR_MULTI_3 (0x08U << ADC34_CCR_MULTI_Pos)
#define ADC34_CCR_MULTI_4 (0x10U << ADC34_CCR_MULTI_Pos)

#define ADC34_CCR_DELAY_Pos (8U)
#define ADC34_CCR_DELAY_Msk (0xFU << ADC34_CCR_DELAY_Pos)
#define ADC34_CCR_DELAY ADC34_CCR_DELAY_Msk
#define ADC34_CCR_DELAY_0 (0x1U << ADC34_CCR_DELAY_Pos)
#define ADC34_CCR_DELAY_1 (0x2U << ADC34_CCR_DELAY_Pos)
#define ADC34_CCR_DELAY_2 (0x4U << ADC34_CCR_DELAY_Pos)
#define ADC34_CCR_DELAY_3 (0x8U << ADC34_CCR_DELAY_Pos)

#define ADC34_CCR_DMACFG_Pos (13U)
#define ADC34_CCR_DMACFG_Msk (0x1U << ADC34_CCR_DMACFG_Pos)
#define ADC34_CCR_DMACFG ADC34_CCR_DMACFG_Msk
#define ADC34_CCR_MDMA_Pos (14U)
#define ADC34_CCR_MDMA_Msk (0x3U << ADC34_CCR_MDMA_Pos)
#define ADC34_CCR_MDMA ADC34_CCR_MDMA_Msk
#define ADC34_CCR_MDMA_0 (0x1U << ADC34_CCR_MDMA_Pos)
#define ADC34_CCR_MDMA_1 (0x2U << ADC34_CCR_MDMA_Pos)

#define ADC34_CCR_CKMODE_Pos (16U)
#define ADC34_CCR_CKMODE_Msk (0x3U << ADC34_CCR_CKMODE_Pos)
#define ADC34_CCR_CKMODE ADC34_CCR_CKMODE_Msk
#define ADC34_CCR_CKMODE_0 (0x1U << ADC34_CCR_CKMODE_Pos)
#define ADC34_CCR_CKMODE_1 (0x2U << ADC34_CCR_CKMODE_Pos)

#define ADC34_CCR_VREFEN_Pos (22U)
#define ADC34_CCR_VREFEN_Msk (0x1U << ADC34_CCR_VREFEN_Pos)
#define ADC34_CCR_VREFEN ADC34_CCR_VREFEN_Msk
#define ADC34_CCR_TSEN_Pos (23U)
#define ADC34_CCR_TSEN_Msk (0x1U << ADC34_CCR_TSEN_Pos)
#define ADC34_CCR_TSEN ADC34_CCR_TSEN_Msk
#define ADC34_CCR_VBATEN_Pos (24U)
#define ADC34_CCR_VBATEN_Msk (0x1U << ADC34_CCR_VBATEN_Pos)
#define ADC34_CCR_VBATEN ADC34_CCR_VBATEN_Msk


#define ADC12_CDR_RDATA_MST_Pos (0U)
#define ADC12_CDR_RDATA_MST_Msk (0xFFFFU << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST ADC12_CDR_RDATA_MST_Msk
#define ADC12_CDR_RDATA_MST_0 (0x0001U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_1 (0x0002U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_2 (0x0004U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_3 (0x0008U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_4 (0x0010U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_5 (0x0020U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_6 (0x0040U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_7 (0x0080U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_8 (0x0100U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_9 (0x0200U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_10 (0x0400U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_11 (0x0800U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_12 (0x1000U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_13 (0x2000U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_14 (0x4000U << ADC12_CDR_RDATA_MST_Pos)
#define ADC12_CDR_RDATA_MST_15 (0x8000U << ADC12_CDR_RDATA_MST_Pos)

#define ADC12_CDR_RDATA_SLV_Pos (16U)
#define ADC12_CDR_RDATA_SLV_Msk (0xFFFFU << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV ADC12_CDR_RDATA_SLV_Msk
#define ADC12_CDR_RDATA_SLV_0 (0x0001U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_1 (0x0002U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_2 (0x0004U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_3 (0x0008U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_4 (0x0010U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_5 (0x0020U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_6 (0x0040U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_7 (0x0080U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_8 (0x0100U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_9 (0x0200U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_10 (0x0400U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_11 (0x0800U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_12 (0x1000U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_13 (0x2000U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_14 (0x4000U << ADC12_CDR_RDATA_SLV_Pos)
#define ADC12_CDR_RDATA_SLV_15 (0x8000U << ADC12_CDR_RDATA_SLV_Pos)


#define ADC34_CDR_RDATA_MST_Pos (0U)
#define ADC34_CDR_RDATA_MST_Msk (0xFFFFU << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST ADC34_CDR_RDATA_MST_Msk
#define ADC34_CDR_RDATA_MST_0 (0x0001U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_1 (0x0002U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_2 (0x0004U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_3 (0x0008U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_4 (0x0010U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_5 (0x0020U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_6 (0x0040U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_7 (0x0080U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_8 (0x0100U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_9 (0x0200U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_10 (0x0400U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_11 (0x0800U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_12 (0x1000U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_13 (0x2000U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_14 (0x4000U << ADC34_CDR_RDATA_MST_Pos)
#define ADC34_CDR_RDATA_MST_15 (0x8000U << ADC34_CDR_RDATA_MST_Pos)

#define ADC34_CDR_RDATA_SLV_Pos (16U)
#define ADC34_CDR_RDATA_SLV_Msk (0xFFFFU << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV ADC34_CDR_RDATA_SLV_Msk
#define ADC34_CDR_RDATA_SLV_0 (0x0001U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_1 (0x0002U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_2 (0x0004U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_3 (0x0008U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_4 (0x0010U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_5 (0x0020U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_6 (0x0040U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_7 (0x0080U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_8 (0x0100U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_9 (0x0200U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_10 (0x0400U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_11 (0x0800U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_12 (0x1000U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_13 (0x2000U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_14 (0x4000U << ADC34_CDR_RDATA_SLV_Pos)
#define ADC34_CDR_RDATA_SLV_15 (0x8000U << ADC34_CDR_RDATA_SLV_Pos)


#define ADC_CSR_ADRDY_MST_Pos (0U)
#define ADC_CSR_ADRDY_MST_Msk (0x1U << ADC_CSR_ADRDY_MST_Pos)
#define ADC_CSR_ADRDY_MST ADC_CSR_ADRDY_MST_Msk
#define ADC_CSR_EOSMP_MST_Pos (1U)
#define ADC_CSR_EOSMP_MST_Msk (0x1U << ADC_CSR_EOSMP_MST_Pos)
#define ADC_CSR_EOSMP_MST ADC_CSR_EOSMP_MST_Msk
#define ADC_CSR_EOC_MST_Pos (2U)
#define ADC_CSR_EOC_MST_Msk (0x1U << ADC_CSR_EOC_MST_Pos)
#define ADC_CSR_EOC_MST ADC_CSR_EOC_MST_Msk
#define ADC_CSR_EOS_MST_Pos (3U)
#define ADC_CSR_EOS_MST_Msk (0x1U << ADC_CSR_EOS_MST_Pos)
#define ADC_CSR_EOS_MST ADC_CSR_EOS_MST_Msk
#define ADC_CSR_OVR_MST_Pos (4U)
#define ADC_CSR_OVR_MST_Msk (0x1U << ADC_CSR_OVR_MST_Pos)
#define ADC_CSR_OVR_MST ADC_CSR_OVR_MST_Msk
#define ADC_CSR_JEOC_MST_Pos (5U)
#define ADC_CSR_JEOC_MST_Msk (0x1U << ADC_CSR_JEOC_MST_Pos)
#define ADC_CSR_JEOC_MST ADC_CSR_JEOC_MST_Msk
#define ADC_CSR_JEOS_MST_Pos (6U)
#define ADC_CSR_JEOS_MST_Msk (0x1U << ADC_CSR_JEOS_MST_Pos)
#define ADC_CSR_JEOS_MST ADC_CSR_JEOS_MST_Msk
#define ADC_CSR_AWD1_MST_Pos (7U)
#define ADC_CSR_AWD1_MST_Msk (0x1U << ADC_CSR_AWD1_MST_Pos)
#define ADC_CSR_AWD1_MST ADC_CSR_AWD1_MST_Msk
#define ADC_CSR_AWD2_MST_Pos (8U)
#define ADC_CSR_AWD2_MST_Msk (0x1U << ADC_CSR_AWD2_MST_Pos)
#define ADC_CSR_AWD2_MST ADC_CSR_AWD2_MST_Msk
#define ADC_CSR_AWD3_MST_Pos (9U)
#define ADC_CSR_AWD3_MST_Msk (0x1U << ADC_CSR_AWD3_MST_Pos)
#define ADC_CSR_AWD3_MST ADC_CSR_AWD3_MST_Msk
#define ADC_CSR_JQOVF_MST_Pos (10U)
#define ADC_CSR_JQOVF_MST_Msk (0x1U << ADC_CSR_JQOVF_MST_Pos)
#define ADC_CSR_JQOVF_MST ADC_CSR_JQOVF_MST_Msk

#define ADC_CSR_ADRDY_SLV_Pos (16U)
#define ADC_CSR_ADRDY_SLV_Msk (0x1U << ADC_CSR_ADRDY_SLV_Pos)
#define ADC_CSR_ADRDY_SLV ADC_CSR_ADRDY_SLV_Msk
#define ADC_CSR_EOSMP_SLV_Pos (17U)
#define ADC_CSR_EOSMP_SLV_Msk (0x1U << ADC_CSR_EOSMP_SLV_Pos)
#define ADC_CSR_EOSMP_SLV ADC_CSR_EOSMP_SLV_Msk
#define ADC_CSR_EOC_SLV_Pos (18U)
#define ADC_CSR_EOC_SLV_Msk (0x1U << ADC_CSR_EOC_SLV_Pos)
#define ADC_CSR_EOC_SLV ADC_CSR_EOC_SLV_Msk
#define ADC_CSR_EOS_SLV_Pos (19U)
#define ADC_CSR_EOS_SLV_Msk (0x1U << ADC_CSR_EOS_SLV_Pos)
#define ADC_CSR_EOS_SLV ADC_CSR_EOS_SLV_Msk
#define ADC_CSR_OVR_SLV_Pos (20U)
#define ADC_CSR_OVR_SLV_Msk (0x1U << ADC_CSR_OVR_SLV_Pos)
#define ADC_CSR_OVR_SLV ADC_CSR_OVR_SLV_Msk
#define ADC_CSR_JEOC_SLV_Pos (21U)
#define ADC_CSR_JEOC_SLV_Msk (0x1U << ADC_CSR_JEOC_SLV_Pos)
#define ADC_CSR_JEOC_SLV ADC_CSR_JEOC_SLV_Msk
#define ADC_CSR_JEOS_SLV_Pos (22U)
#define ADC_CSR_JEOS_SLV_Msk (0x1U << ADC_CSR_JEOS_SLV_Pos)
#define ADC_CSR_JEOS_SLV ADC_CSR_JEOS_SLV_Msk
#define ADC_CSR_AWD1_SLV_Pos (23U)
#define ADC_CSR_AWD1_SLV_Msk (0x1U << ADC_CSR_AWD1_SLV_Pos)
#define ADC_CSR_AWD1_SLV ADC_CSR_AWD1_SLV_Msk
#define ADC_CSR_AWD2_SLV_Pos (24U)
#define ADC_CSR_AWD2_SLV_Msk (0x1U << ADC_CSR_AWD2_SLV_Pos)
#define ADC_CSR_AWD2_SLV ADC_CSR_AWD2_SLV_Msk
#define ADC_CSR_AWD3_SLV_Pos (25U)
#define ADC_CSR_AWD3_SLV_Msk (0x1U << ADC_CSR_AWD3_SLV_Pos)
#define ADC_CSR_AWD3_SLV ADC_CSR_AWD3_SLV_Msk
#define ADC_CSR_JQOVF_SLV_Pos (26U)
#define ADC_CSR_JQOVF_SLV_Msk (0x1U << ADC_CSR_JQOVF_SLV_Pos)
#define ADC_CSR_JQOVF_SLV ADC_CSR_JQOVF_SLV_Msk


#define ADC_CSR_ADRDY_EOSMP_MST ADC_CSR_EOSMP_MST
#define ADC_CSR_ADRDY_EOC_MST ADC_CSR_EOC_MST
#define ADC_CSR_ADRDY_EOS_MST ADC_CSR_EOS_MST
#define ADC_CSR_ADRDY_OVR_MST ADC_CSR_OVR_MST
#define ADC_CSR_ADRDY_JEOC_MST ADC_CSR_JEOC_MST
#define ADC_CSR_ADRDY_JEOS_MST ADC_CSR_JEOS_MST

#define ADC_CSR_ADRDY_EOSMP_SLV ADC_CSR_EOSMP_SLV
#define ADC_CSR_ADRDY_EOC_SLV ADC_CSR_EOC_SLV
#define ADC_CSR_ADRDY_EOS_SLV ADC_CSR_EOS_SLV
#define ADC_CSR_ADRDY_OVR_SLV ADC_CSR_OVR_SLV
#define ADC_CSR_ADRDY_JEOC_SLV ADC_CSR_JEOC_SLV
#define ADC_CSR_ADRDY_JEOS_SLV ADC_CSR_JEOS_SLV


#define ADC_CCR_DUAL_Pos (0U)
#define ADC_CCR_DUAL_Msk (0x1FU << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL ADC_CCR_DUAL_Msk
#define ADC_CCR_DUAL_0 (0x01U << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_1 (0x02U << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_2 (0x04U << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_3 (0x08U << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_4 (0x10U << ADC_CCR_DUAL_Pos)

#define ADC_CCR_DELAY_Pos (8U)
#define ADC_CCR_DELAY_Msk (0xFU << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY ADC_CCR_DELAY_Msk
#define ADC_CCR_DELAY_0 (0x1U << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_1 (0x2U << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_2 (0x4U << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_3 (0x8U << ADC_CCR_DELAY_Pos)

#define ADC_CCR_DMACFG_Pos (13U)
#define ADC_CCR_DMACFG_Msk (0x1U << ADC_CCR_DMACFG_Pos)
#define ADC_CCR_DMACFG ADC_CCR_DMACFG_Msk

#define ADC_CCR_MDMA_Pos (14U)
#define ADC_CCR_MDMA_Msk (0x3U << ADC_CCR_MDMA_Pos)
#define ADC_CCR_MDMA ADC_CCR_MDMA_Msk
#define ADC_CCR_MDMA_0 (0x1U << ADC_CCR_MDMA_Pos)
#define ADC_CCR_MDMA_1 (0x2U << ADC_CCR_MDMA_Pos)

#define ADC_CCR_CKMODE_Pos (16U)
#define ADC_CCR_CKMODE_Msk (0x3U << ADC_CCR_CKMODE_Pos)
#define ADC_CCR_CKMODE ADC_CCR_CKMODE_Msk
#define ADC_CCR_CKMODE_0 (0x1U << ADC_CCR_CKMODE_Pos)
#define ADC_CCR_CKMODE_1 (0x2U << ADC_CCR_CKMODE_Pos)

#define ADC_CCR_VREFEN_Pos (22U)
#define ADC_CCR_VREFEN_Msk (0x1U << ADC_CCR_VREFEN_Pos)
#define ADC_CCR_VREFEN ADC_CCR_VREFEN_Msk
#define ADC_CCR_TSEN_Pos (23U)
#define ADC_CCR_TSEN_Msk (0x1U << ADC_CCR_TSEN_Pos)
#define ADC_CCR_TSEN ADC_CCR_TSEN_Msk
#define ADC_CCR_VBATEN_Pos (24U)
#define ADC_CCR_VBATEN_Msk (0x1U << ADC_CCR_VBATEN_Pos)
#define ADC_CCR_VBATEN ADC_CCR_VBATEN_Msk


#define ADC_CCR_MULTI (ADC_CCR_DUAL)
#define ADC_CCR_MULTI_0 (ADC_CCR_DUAL_0)
#define ADC_CCR_MULTI_1 (ADC_CCR_DUAL_1)
#define ADC_CCR_MULTI_2 (ADC_CCR_DUAL_2)
#define ADC_CCR_MULTI_3 (ADC_CCR_DUAL_3)
#define ADC_CCR_MULTI_4 (ADC_CCR_DUAL_4)


#define ADC_CDR_RDATA_MST_Pos (0U)
#define ADC_CDR_RDATA_MST_Msk (0xFFFFU << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST ADC_CDR_RDATA_MST_Msk
#define ADC_CDR_RDATA_MST_0 (0x0001U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_1 (0x0002U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_2 (0x0004U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_3 (0x0008U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_4 (0x0010U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_5 (0x0020U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_6 (0x0040U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_7 (0x0080U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_8 (0x0100U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_9 (0x0200U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_10 (0x0400U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_11 (0x0800U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_12 (0x1000U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_13 (0x2000U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_14 (0x4000U << ADC_CDR_RDATA_MST_Pos)
#define ADC_CDR_RDATA_MST_15 (0x8000U << ADC_CDR_RDATA_MST_Pos)

#define ADC_CDR_RDATA_SLV_Pos (16U)
#define ADC_CDR_RDATA_SLV_Msk (0xFFFFU << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV ADC_CDR_RDATA_SLV_Msk
#define ADC_CDR_RDATA_SLV_0 (0x0001U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_1 (0x0002U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_2 (0x0004U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_3 (0x0008U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_4 (0x0010U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_5 (0x0020U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_6 (0x0040U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_7 (0x0080U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_8 (0x0100U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_9 (0x0200U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_10 (0x0400U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_11 (0x0800U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_12 (0x1000U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_13 (0x2000U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_14 (0x4000U << ADC_CDR_RDATA_SLV_Pos)
#define ADC_CDR_RDATA_SLV_15 (0x8000U << ADC_CDR_RDATA_SLV_Pos)







#define COMP_V1_3_0_0 


#define COMP1_CSR_COMP1EN_Pos (0U)
#define COMP1_CSR_COMP1EN_Msk (0x1U << COMP1_CSR_COMP1EN_Pos)
#define COMP1_CSR_COMP1EN COMP1_CSR_COMP1EN_Msk
#define COMP1_CSR_COMP1SW1_Pos (1U)
#define COMP1_CSR_COMP1SW1_Msk (0x1U << COMP1_CSR_COMP1SW1_Pos)
#define COMP1_CSR_COMP1SW1 COMP1_CSR_COMP1SW1_Msk

#define COMP_CSR_COMP1SW1 COMP1_CSR_COMP1SW1
#define COMP1_CSR_COMP1MODE_Pos (2U)
#define COMP1_CSR_COMP1MODE_Msk (0x3U << COMP1_CSR_COMP1MODE_Pos)
#define COMP1_CSR_COMP1MODE COMP1_CSR_COMP1MODE_Msk
#define COMP1_CSR_COMP1MODE_0 (0x1U << COMP1_CSR_COMP1MODE_Pos)
#define COMP1_CSR_COMP1MODE_1 (0x2U << COMP1_CSR_COMP1MODE_Pos)
#define COMP1_CSR_COMP1INSEL_Pos (4U)
#define COMP1_CSR_COMP1INSEL_Msk (0x7U << COMP1_CSR_COMP1INSEL_Pos)
#define COMP1_CSR_COMP1INSEL COMP1_CSR_COMP1INSEL_Msk
#define COMP1_CSR_COMP1INSEL_0 (0x1U << COMP1_CSR_COMP1INSEL_Pos)
#define COMP1_CSR_COMP1INSEL_1 (0x2U << COMP1_CSR_COMP1INSEL_Pos)
#define COMP1_CSR_COMP1INSEL_2 (0x4U << COMP1_CSR_COMP1INSEL_Pos)
#define COMP1_CSR_COMP1OUTSEL_Pos (10U)
#define COMP1_CSR_COMP1OUTSEL_Msk (0xFU << COMP1_CSR_COMP1OUTSEL_Pos)
#define COMP1_CSR_COMP1OUTSEL COMP1_CSR_COMP1OUTSEL_Msk
#define COMP1_CSR_COMP1OUTSEL_0 (0x1U << COMP1_CSR_COMP1OUTSEL_Pos)
#define COMP1_CSR_COMP1OUTSEL_1 (0x2U << COMP1_CSR_COMP1OUTSEL_Pos)
#define COMP1_CSR_COMP1OUTSEL_2 (0x4U << COMP1_CSR_COMP1OUTSEL_Pos)
#define COMP1_CSR_COMP1OUTSEL_3 (0x8U << COMP1_CSR_COMP1OUTSEL_Pos)
#define COMP1_CSR_COMP1POL_Pos (15U)
#define COMP1_CSR_COMP1POL_Msk (0x1U << COMP1_CSR_COMP1POL_Pos)
#define COMP1_CSR_COMP1POL COMP1_CSR_COMP1POL_Msk
#define COMP1_CSR_COMP1HYST_Pos (16U)
#define COMP1_CSR_COMP1HYST_Msk (0x3U << COMP1_CSR_COMP1HYST_Pos)
#define COMP1_CSR_COMP1HYST COMP1_CSR_COMP1HYST_Msk
#define COMP1_CSR_COMP1HYST_0 (0x1U << COMP1_CSR_COMP1HYST_Pos)
#define COMP1_CSR_COMP1HYST_1 (0x2U << COMP1_CSR_COMP1HYST_Pos)
#define COMP1_CSR_COMP1BLANKING_Pos (18U)
#define COMP1_CSR_COMP1BLANKING_Msk (0x3U << COMP1_CSR_COMP1BLANKING_Pos)
#define COMP1_CSR_COMP1BLANKING COMP1_CSR_COMP1BLANKING_Msk
#define COMP1_CSR_COMP1BLANKING_0 (0x1U << COMP1_CSR_COMP1BLANKING_Pos)
#define COMP1_CSR_COMP1BLANKING_1 (0x2U << COMP1_CSR_COMP1BLANKING_Pos)
#define COMP1_CSR_COMP1BLANKING_2 (0x4U << COMP1_CSR_COMP1BLANKING_Pos)
#define COMP1_CSR_COMP1OUT_Pos (30U)
#define COMP1_CSR_COMP1OUT_Msk (0x1U << COMP1_CSR_COMP1OUT_Pos)
#define COMP1_CSR_COMP1OUT COMP1_CSR_COMP1OUT_Msk
#define COMP1_CSR_COMP1LOCK_Pos (31U)
#define COMP1_CSR_COMP1LOCK_Msk (0x1U << COMP1_CSR_COMP1LOCK_Pos)
#define COMP1_CSR_COMP1LOCK COMP1_CSR_COMP1LOCK_Msk


#define COMP2_CSR_COMP2EN_Pos (0U)
#define COMP2_CSR_COMP2EN_Msk (0x1U << COMP2_CSR_COMP2EN_Pos)
#define COMP2_CSR_COMP2EN COMP2_CSR_COMP2EN_Msk
#define COMP2_CSR_COMP2MODE_Pos (2U)
#define COMP2_CSR_COMP2MODE_Msk (0x3U << COMP2_CSR_COMP2MODE_Pos)
#define COMP2_CSR_COMP2MODE COMP2_CSR_COMP2MODE_Msk
#define COMP2_CSR_COMP2MODE_0 (0x1U << COMP2_CSR_COMP2MODE_Pos)
#define COMP2_CSR_COMP2MODE_1 (0x2U << COMP2_CSR_COMP2MODE_Pos)
#define COMP2_CSR_COMP2INSEL_Pos (4U)
#define COMP2_CSR_COMP2INSEL_Msk (0x7U << COMP2_CSR_COMP2INSEL_Pos)
#define COMP2_CSR_COMP2INSEL COMP2_CSR_COMP2INSEL_Msk
#define COMP2_CSR_COMP2INSEL_0 (0x00000010U)
#define COMP2_CSR_COMP2INSEL_1 (0x00000020U)
#define COMP2_CSR_COMP2INSEL_2 (0x00000040U)
#define COMP2_CSR_COMP2NONINSEL_Pos (7U)
#define COMP2_CSR_COMP2NONINSEL_Msk (0x1U << COMP2_CSR_COMP2NONINSEL_Pos)
#define COMP2_CSR_COMP2NONINSEL COMP2_CSR_COMP2NONINSEL_Msk
#define COMP2_CSR_COMP2WNDWEN_Pos (9U)
#define COMP2_CSR_COMP2WNDWEN_Msk (0x1U << COMP2_CSR_COMP2WNDWEN_Pos)
#define COMP2_CSR_COMP2WNDWEN COMP2_CSR_COMP2WNDWEN_Msk
#define COMP2_CSR_COMP2OUTSEL_Pos (10U)
#define COMP2_CSR_COMP2OUTSEL_Msk (0xFU << COMP2_CSR_COMP2OUTSEL_Pos)
#define COMP2_CSR_COMP2OUTSEL COMP2_CSR_COMP2OUTSEL_Msk
#define COMP2_CSR_COMP2OUTSEL_0 (0x1U << COMP2_CSR_COMP2OUTSEL_Pos)
#define COMP2_CSR_COMP2OUTSEL_1 (0x2U << COMP2_CSR_COMP2OUTSEL_Pos)
#define COMP2_CSR_COMP2OUTSEL_2 (0x4U << COMP2_CSR_COMP2OUTSEL_Pos)
#define COMP2_CSR_COMP2OUTSEL_3 (0x8U << COMP2_CSR_COMP2OUTSEL_Pos)
#define COMP2_CSR_COMP2POL_Pos (15U)
#define COMP2_CSR_COMP2POL_Msk (0x1U << COMP2_CSR_COMP2POL_Pos)
#define COMP2_CSR_COMP2POL COMP2_CSR_COMP2POL_Msk
#define COMP2_CSR_COMP2HYST_Pos (16U)
#define COMP2_CSR_COMP2HYST_Msk (0x3U << COMP2_CSR_COMP2HYST_Pos)
#define COMP2_CSR_COMP2HYST COMP2_CSR_COMP2HYST_Msk
#define COMP2_CSR_COMP2HYST_0 (0x1U << COMP2_CSR_COMP2HYST_Pos)
#define COMP2_CSR_COMP2HYST_1 (0x2U << COMP2_CSR_COMP2HYST_Pos)
#define COMP2_CSR_COMP2BLANKING_Pos (18U)
#define COMP2_CSR_COMP2BLANKING_Msk (0x3U << COMP2_CSR_COMP2BLANKING_Pos)
#define COMP2_CSR_COMP2BLANKING COMP2_CSR_COMP2BLANKING_Msk
#define COMP2_CSR_COMP2BLANKING_0 (0x1U << COMP2_CSR_COMP2BLANKING_Pos)
#define COMP2_CSR_COMP2BLANKING_1 (0x2U << COMP2_CSR_COMP2BLANKING_Pos)
#define COMP2_CSR_COMP2BLANKING_2 (0x4U << COMP2_CSR_COMP2BLANKING_Pos)
#define COMP2_CSR_COMP2OUT_Pos (30U)
#define COMP2_CSR_COMP2OUT_Msk (0x1U << COMP2_CSR_COMP2OUT_Pos)
#define COMP2_CSR_COMP2OUT COMP2_CSR_COMP2OUT_Msk
#define COMP2_CSR_COMP2LOCK_Pos (31U)
#define COMP2_CSR_COMP2LOCK_Msk (0x1U << COMP2_CSR_COMP2LOCK_Pos)
#define COMP2_CSR_COMP2LOCK COMP2_CSR_COMP2LOCK_Msk


#define COMP3_CSR_COMP3EN_Pos (0U)
#define COMP3_CSR_COMP3EN_Msk (0x1U << COMP3_CSR_COMP3EN_Pos)
#define COMP3_CSR_COMP3EN COMP3_CSR_COMP3EN_Msk
#define COMP3_CSR_COMP3MODE_Pos (2U)
#define COMP3_CSR_COMP3MODE_Msk (0x3U << COMP3_CSR_COMP3MODE_Pos)
#define COMP3_CSR_COMP3MODE COMP3_CSR_COMP3MODE_Msk
#define COMP3_CSR_COMP3MODE_0 (0x1U << COMP3_CSR_COMP3MODE_Pos)
#define COMP3_CSR_COMP3MODE_1 (0x2U << COMP3_CSR_COMP3MODE_Pos)
#define COMP3_CSR_COMP3INSEL_Pos (4U)
#define COMP3_CSR_COMP3INSEL_Msk (0x7U << COMP3_CSR_COMP3INSEL_Pos)
#define COMP3_CSR_COMP3INSEL COMP3_CSR_COMP3INSEL_Msk
#define COMP3_CSR_COMP3INSEL_0 (0x1U << COMP3_CSR_COMP3INSEL_Pos)
#define COMP3_CSR_COMP3INSEL_1 (0x2U << COMP3_CSR_COMP3INSEL_Pos)
#define COMP3_CSR_COMP3INSEL_2 (0x4U << COMP3_CSR_COMP3INSEL_Pos)
#define COMP3_CSR_COMP3NONINSEL_Pos (7U)
#define COMP3_CSR_COMP3NONINSEL_Msk (0x1U << COMP3_CSR_COMP3NONINSEL_Pos)
#define COMP3_CSR_COMP3NONINSEL COMP3_CSR_COMP3NONINSEL_Msk
#define COMP3_CSR_COMP3OUTSEL_Pos (10U)
#define COMP3_CSR_COMP3OUTSEL_Msk (0xFU << COMP3_CSR_COMP3OUTSEL_Pos)
#define COMP3_CSR_COMP3OUTSEL COMP3_CSR_COMP3OUTSEL_Msk
#define COMP3_CSR_COMP3OUTSEL_0 (0x1U << COMP3_CSR_COMP3OUTSEL_Pos)
#define COMP3_CSR_COMP3OUTSEL_1 (0x2U << COMP3_CSR_COMP3OUTSEL_Pos)
#define COMP3_CSR_COMP3OUTSEL_2 (0x4U << COMP3_CSR_COMP3OUTSEL_Pos)
#define COMP3_CSR_COMP3OUTSEL_3 (0x8U << COMP3_CSR_COMP3OUTSEL_Pos)
#define COMP3_CSR_COMP3POL_Pos (15U)
#define COMP3_CSR_COMP3POL_Msk (0x1U << COMP3_CSR_COMP3POL_Pos)
#define COMP3_CSR_COMP3POL COMP3_CSR_COMP3POL_Msk
#define COMP3_CSR_COMP3HYST_Pos (16U)
#define COMP3_CSR_COMP3HYST_Msk (0x3U << COMP3_CSR_COMP3HYST_Pos)
#define COMP3_CSR_COMP3HYST COMP3_CSR_COMP3HYST_Msk
#define COMP3_CSR_COMP3HYST_0 (0x1U << COMP3_CSR_COMP3HYST_Pos)
#define COMP3_CSR_COMP3HYST_1 (0x2U << COMP3_CSR_COMP3HYST_Pos)
#define COMP3_CSR_COMP3BLANKING_Pos (18U)
#define COMP3_CSR_COMP3BLANKING_Msk (0x3U << COMP3_CSR_COMP3BLANKING_Pos)
#define COMP3_CSR_COMP3BLANKING COMP3_CSR_COMP3BLANKING_Msk
#define COMP3_CSR_COMP3BLANKING_0 (0x1U << COMP3_CSR_COMP3BLANKING_Pos)
#define COMP3_CSR_COMP3BLANKING_1 (0x2U << COMP3_CSR_COMP3BLANKING_Pos)
#define COMP3_CSR_COMP3BLANKING_2 (0x4U << COMP3_CSR_COMP3BLANKING_Pos)
#define COMP3_CSR_COMP3OUT_Pos (30U)
#define COMP3_CSR_COMP3OUT_Msk (0x1U << COMP3_CSR_COMP3OUT_Pos)
#define COMP3_CSR_COMP3OUT COMP3_CSR_COMP3OUT_Msk
#define COMP3_CSR_COMP3LOCK_Pos (31U)
#define COMP3_CSR_COMP3LOCK_Msk (0x1U << COMP3_CSR_COMP3LOCK_Pos)
#define COMP3_CSR_COMP3LOCK COMP3_CSR_COMP3LOCK_Msk


#define COMP4_CSR_COMP4EN_Pos (0U)
#define COMP4_CSR_COMP4EN_Msk (0x1U << COMP4_CSR_COMP4EN_Pos)
#define COMP4_CSR_COMP4EN COMP4_CSR_COMP4EN_Msk
#define COMP4_CSR_COMP4MODE_Pos (2U)
#define COMP4_CSR_COMP4MODE_Msk (0x3U << COMP4_CSR_COMP4MODE_Pos)
#define COMP4_CSR_COMP4MODE COMP4_CSR_COMP4MODE_Msk
#define COMP4_CSR_COMP4MODE_0 (0x1U << COMP4_CSR_COMP4MODE_Pos)
#define COMP4_CSR_COMP4MODE_1 (0x2U << COMP4_CSR_COMP4MODE_Pos)
#define COMP4_CSR_COMP4INSEL_Pos (4U)
#define COMP4_CSR_COMP4INSEL_Msk (0x7U << COMP4_CSR_COMP4INSEL_Pos)
#define COMP4_CSR_COMP4INSEL COMP4_CSR_COMP4INSEL_Msk
#define COMP4_CSR_COMP4INSEL_0 (0x00000010U)
#define COMP4_CSR_COMP4INSEL_1 (0x00000020U)
#define COMP4_CSR_COMP4INSEL_2 (0x00000040U)
#define COMP4_CSR_COMP4NONINSEL_Pos (7U)
#define COMP4_CSR_COMP4NONINSEL_Msk (0x1U << COMP4_CSR_COMP4NONINSEL_Pos)
#define COMP4_CSR_COMP4NONINSEL COMP4_CSR_COMP4NONINSEL_Msk
#define COMP4_CSR_COMP4WNDWEN_Pos (9U)
#define COMP4_CSR_COMP4WNDWEN_Msk (0x1U << COMP4_CSR_COMP4WNDWEN_Pos)
#define COMP4_CSR_COMP4WNDWEN COMP4_CSR_COMP4WNDWEN_Msk
#define COMP4_CSR_COMP4OUTSEL_Pos (10U)
#define COMP4_CSR_COMP4OUTSEL_Msk (0xFU << COMP4_CSR_COMP4OUTSEL_Pos)
#define COMP4_CSR_COMP4OUTSEL COMP4_CSR_COMP4OUTSEL_Msk
#define COMP4_CSR_COMP4OUTSEL_0 (0x1U << COMP4_CSR_COMP4OUTSEL_Pos)
#define COMP4_CSR_COMP4OUTSEL_1 (0x2U << COMP4_CSR_COMP4OUTSEL_Pos)
#define COMP4_CSR_COMP4OUTSEL_2 (0x4U << COMP4_CSR_COMP4OUTSEL_Pos)
#define COMP4_CSR_COMP4OUTSEL_3 (0x8U << COMP4_CSR_COMP4OUTSEL_Pos)
#define COMP4_CSR_COMP4POL_Pos (15U)
#define COMP4_CSR_COMP4POL_Msk (0x1U << COMP4_CSR_COMP4POL_Pos)
#define COMP4_CSR_COMP4POL COMP4_CSR_COMP4POL_Msk
#define COMP4_CSR_COMP4HYST_Pos (16U)
#define COMP4_CSR_COMP4HYST_Msk (0x3U << COMP4_CSR_COMP4HYST_Pos)
#define COMP4_CSR_COMP4HYST COMP4_CSR_COMP4HYST_Msk
#define COMP4_CSR_COMP4HYST_0 (0x1U << COMP4_CSR_COMP4HYST_Pos)
#define COMP4_CSR_COMP4HYST_1 (0x2U << COMP4_CSR_COMP4HYST_Pos)
#define COMP4_CSR_COMP4BLANKING_Pos (18U)
#define COMP4_CSR_COMP4BLANKING_Msk (0x3U << COMP4_CSR_COMP4BLANKING_Pos)
#define COMP4_CSR_COMP4BLANKING COMP4_CSR_COMP4BLANKING_Msk
#define COMP4_CSR_COMP4BLANKING_0 (0x1U << COMP4_CSR_COMP4BLANKING_Pos)
#define COMP4_CSR_COMP4BLANKING_1 (0x2U << COMP4_CSR_COMP4BLANKING_Pos)
#define COMP4_CSR_COMP4BLANKING_2 (0x4U << COMP4_CSR_COMP4BLANKING_Pos)
#define COMP4_CSR_COMP4OUT_Pos (30U)
#define COMP4_CSR_COMP4OUT_Msk (0x1U << COMP4_CSR_COMP4OUT_Pos)
#define COMP4_CSR_COMP4OUT COMP4_CSR_COMP4OUT_Msk
#define COMP4_CSR_COMP4LOCK_Pos (31U)
#define COMP4_CSR_COMP4LOCK_Msk (0x1U << COMP4_CSR_COMP4LOCK_Pos)
#define COMP4_CSR_COMP4LOCK COMP4_CSR_COMP4LOCK_Msk


#define COMP5_CSR_COMP5EN_Pos (0U)
#define COMP5_CSR_COMP5EN_Msk (0x1U << COMP5_CSR_COMP5EN_Pos)
#define COMP5_CSR_COMP5EN COMP5_CSR_COMP5EN_Msk
#define COMP5_CSR_COMP5MODE_Pos (2U)
#define COMP5_CSR_COMP5MODE_Msk (0x3U << COMP5_CSR_COMP5MODE_Pos)
#define COMP5_CSR_COMP5MODE COMP5_CSR_COMP5MODE_Msk
#define COMP5_CSR_COMP5MODE_0 (0x1U << COMP5_CSR_COMP5MODE_Pos)
#define COMP5_CSR_COMP5MODE_1 (0x2U << COMP5_CSR_COMP5MODE_Pos)
#define COMP5_CSR_COMP5INSEL_Pos (4U)
#define COMP5_CSR_COMP5INSEL_Msk (0x7U << COMP5_CSR_COMP5INSEL_Pos)
#define COMP5_CSR_COMP5INSEL COMP5_CSR_COMP5INSEL_Msk
#define COMP5_CSR_COMP5INSEL_0 (0x1U << COMP5_CSR_COMP5INSEL_Pos)
#define COMP5_CSR_COMP5INSEL_1 (0x2U << COMP5_CSR_COMP5INSEL_Pos)
#define COMP5_CSR_COMP5INSEL_2 (0x4U << COMP5_CSR_COMP5INSEL_Pos)
#define COMP5_CSR_COMP5NONINSEL_Pos (7U)
#define COMP5_CSR_COMP5NONINSEL_Msk (0x1U << COMP5_CSR_COMP5NONINSEL_Pos)
#define COMP5_CSR_COMP5NONINSEL COMP5_CSR_COMP5NONINSEL_Msk
#define COMP5_CSR_COMP5OUTSEL_Pos (10U)
#define COMP5_CSR_COMP5OUTSEL_Msk (0xFU << COMP5_CSR_COMP5OUTSEL_Pos)
#define COMP5_CSR_COMP5OUTSEL COMP5_CSR_COMP5OUTSEL_Msk
#define COMP5_CSR_COMP5OUTSEL_0 (0x1U << COMP5_CSR_COMP5OUTSEL_Pos)
#define COMP5_CSR_COMP5OUTSEL_1 (0x2U << COMP5_CSR_COMP5OUTSEL_Pos)
#define COMP5_CSR_COMP5OUTSEL_2 (0x4U << COMP5_CSR_COMP5OUTSEL_Pos)
#define COMP5_CSR_COMP5OUTSEL_3 (0x8U << COMP5_CSR_COMP5OUTSEL_Pos)
#define COMP5_CSR_COMP5POL_Pos (15U)
#define COMP5_CSR_COMP5POL_Msk (0x1U << COMP5_CSR_COMP5POL_Pos)
#define COMP5_CSR_COMP5POL COMP5_CSR_COMP5POL_Msk
#define COMP5_CSR_COMP5HYST_Pos (16U)
#define COMP5_CSR_COMP5HYST_Msk (0x3U << COMP5_CSR_COMP5HYST_Pos)
#define COMP5_CSR_COMP5HYST COMP5_CSR_COMP5HYST_Msk
#define COMP5_CSR_COMP5HYST_0 (0x1U << COMP5_CSR_COMP5HYST_Pos)
#define COMP5_CSR_COMP5HYST_1 (0x2U << COMP5_CSR_COMP5HYST_Pos)
#define COMP5_CSR_COMP5BLANKING_Pos (18U)
#define COMP5_CSR_COMP5BLANKING_Msk (0x3U << COMP5_CSR_COMP5BLANKING_Pos)
#define COMP5_CSR_COMP5BLANKING COMP5_CSR_COMP5BLANKING_Msk
#define COMP5_CSR_COMP5BLANKING_0 (0x1U << COMP5_CSR_COMP5BLANKING_Pos)
#define COMP5_CSR_COMP5BLANKING_1 (0x2U << COMP5_CSR_COMP5BLANKING_Pos)
#define COMP5_CSR_COMP5BLANKING_2 (0x4U << COMP5_CSR_COMP5BLANKING_Pos)
#define COMP5_CSR_COMP5OUT_Pos (30U)
#define COMP5_CSR_COMP5OUT_Msk (0x1U << COMP5_CSR_COMP5OUT_Pos)
#define COMP5_CSR_COMP5OUT COMP5_CSR_COMP5OUT_Msk
#define COMP5_CSR_COMP5LOCK_Pos (31U)
#define COMP5_CSR_COMP5LOCK_Msk (0x1U << COMP5_CSR_COMP5LOCK_Pos)
#define COMP5_CSR_COMP5LOCK COMP5_CSR_COMP5LOCK_Msk


#define COMP6_CSR_COMP6EN_Pos (0U)
#define COMP6_CSR_COMP6EN_Msk (0x1U << COMP6_CSR_COMP6EN_Pos)
#define COMP6_CSR_COMP6EN COMP6_CSR_COMP6EN_Msk
#define COMP6_CSR_COMP6MODE_Pos (2U)
#define COMP6_CSR_COMP6MODE_Msk (0x3U << COMP6_CSR_COMP6MODE_Pos)
#define COMP6_CSR_COMP6MODE COMP6_CSR_COMP6MODE_Msk
#define COMP6_CSR_COMP6MODE_0 (0x1U << COMP6_CSR_COMP6MODE_Pos)
#define COMP6_CSR_COMP6MODE_1 (0x2U << COMP6_CSR_COMP6MODE_Pos)
#define COMP6_CSR_COMP6INSEL_Pos (4U)
#define COMP6_CSR_COMP6INSEL_Msk (0x7U << COMP6_CSR_COMP6INSEL_Pos)
#define COMP6_CSR_COMP6INSEL COMP6_CSR_COMP6INSEL_Msk
#define COMP6_CSR_COMP6INSEL_0 (0x00000010U)
#define COMP6_CSR_COMP6INSEL_1 (0x00000020U)
#define COMP6_CSR_COMP6INSEL_2 (0x00000040U)
#define COMP6_CSR_COMP6NONINSEL_Pos (7U)
#define COMP6_CSR_COMP6NONINSEL_Msk (0x1U << COMP6_CSR_COMP6NONINSEL_Pos)
#define COMP6_CSR_COMP6NONINSEL COMP6_CSR_COMP6NONINSEL_Msk
#define COMP6_CSR_COMP6WNDWEN_Pos (9U)
#define COMP6_CSR_COMP6WNDWEN_Msk (0x1U << COMP6_CSR_COMP6WNDWEN_Pos)
#define COMP6_CSR_COMP6WNDWEN COMP6_CSR_COMP6WNDWEN_Msk
#define COMP6_CSR_COMP6OUTSEL_Pos (10U)
#define COMP6_CSR_COMP6OUTSEL_Msk (0xFU << COMP6_CSR_COMP6OUTSEL_Pos)
#define COMP6_CSR_COMP6OUTSEL COMP6_CSR_COMP6OUTSEL_Msk
#define COMP6_CSR_COMP6OUTSEL_0 (0x1U << COMP6_CSR_COMP6OUTSEL_Pos)
#define COMP6_CSR_COMP6OUTSEL_1 (0x2U << COMP6_CSR_COMP6OUTSEL_Pos)
#define COMP6_CSR_COMP6OUTSEL_2 (0x4U << COMP6_CSR_COMP6OUTSEL_Pos)
#define COMP6_CSR_COMP6OUTSEL_3 (0x8U << COMP6_CSR_COMP6OUTSEL_Pos)
#define COMP6_CSR_COMP6POL_Pos (15U)
#define COMP6_CSR_COMP6POL_Msk (0x1U << COMP6_CSR_COMP6POL_Pos)
#define COMP6_CSR_COMP6POL COMP6_CSR_COMP6POL_Msk
#define COMP6_CSR_COMP6HYST_Pos (16U)
#define COMP6_CSR_COMP6HYST_Msk (0x3U << COMP6_CSR_COMP6HYST_Pos)
#define COMP6_CSR_COMP6HYST COMP6_CSR_COMP6HYST_Msk
#define COMP6_CSR_COMP6HYST_0 (0x1U << COMP6_CSR_COMP6HYST_Pos)
#define COMP6_CSR_COMP6HYST_1 (0x2U << COMP6_CSR_COMP6HYST_Pos)
#define COMP6_CSR_COMP6BLANKING_Pos (18U)
#define COMP6_CSR_COMP6BLANKING_Msk (0x3U << COMP6_CSR_COMP6BLANKING_Pos)
#define COMP6_CSR_COMP6BLANKING COMP6_CSR_COMP6BLANKING_Msk
#define COMP6_CSR_COMP6BLANKING_0 (0x1U << COMP6_CSR_COMP6BLANKING_Pos)
#define COMP6_CSR_COMP6BLANKING_1 (0x2U << COMP6_CSR_COMP6BLANKING_Pos)
#define COMP6_CSR_COMP6BLANKING_2 (0x4U << COMP6_CSR_COMP6BLANKING_Pos)
#define COMP6_CSR_COMP6OUT_Pos (30U)
#define COMP6_CSR_COMP6OUT_Msk (0x1U << COMP6_CSR_COMP6OUT_Pos)
#define COMP6_CSR_COMP6OUT COMP6_CSR_COMP6OUT_Msk
#define COMP6_CSR_COMP6LOCK_Pos (31U)
#define COMP6_CSR_COMP6LOCK_Msk (0x1U << COMP6_CSR_COMP6LOCK_Pos)
#define COMP6_CSR_COMP6LOCK COMP6_CSR_COMP6LOCK_Msk


#define COMP7_CSR_COMP7EN_Pos (0U)
#define COMP7_CSR_COMP7EN_Msk (0x1U << COMP7_CSR_COMP7EN_Pos)
#define COMP7_CSR_COMP7EN COMP7_CSR_COMP7EN_Msk
#define COMP7_CSR_COMP7MODE_Pos (2U)
#define COMP7_CSR_COMP7MODE_Msk (0x3U << COMP7_CSR_COMP7MODE_Pos)
#define COMP7_CSR_COMP7MODE COMP7_CSR_COMP7MODE_Msk
#define COMP7_CSR_COMP7MODE_0 (0x1U << COMP7_CSR_COMP7MODE_Pos)
#define COMP7_CSR_COMP7MODE_1 (0x2U << COMP7_CSR_COMP7MODE_Pos)
#define COMP7_CSR_COMP7INSEL_Pos (4U)
#define COMP7_CSR_COMP7INSEL_Msk (0x7U << COMP7_CSR_COMP7INSEL_Pos)
#define COMP7_CSR_COMP7INSEL COMP7_CSR_COMP7INSEL_Msk
#define COMP7_CSR_COMP7INSEL_0 (0x1U << COMP7_CSR_COMP7INSEL_Pos)
#define COMP7_CSR_COMP7INSEL_1 (0x2U << COMP7_CSR_COMP7INSEL_Pos)
#define COMP7_CSR_COMP7INSEL_2 (0x4U << COMP7_CSR_COMP7INSEL_Pos)
#define COMP7_CSR_COMP7NONINSEL_Pos (7U)
#define COMP7_CSR_COMP7NONINSEL_Msk (0x1U << COMP7_CSR_COMP7NONINSEL_Pos)
#define COMP7_CSR_COMP7NONINSEL COMP7_CSR_COMP7NONINSEL_Msk
#define COMP7_CSR_COMP7OUTSEL_Pos (10U)
#define COMP7_CSR_COMP7OUTSEL_Msk (0xFU << COMP7_CSR_COMP7OUTSEL_Pos)
#define COMP7_CSR_COMP7OUTSEL COMP7_CSR_COMP7OUTSEL_Msk
#define COMP7_CSR_COMP7OUTSEL_0 (0x1U << COMP7_CSR_COMP7OUTSEL_Pos)
#define COMP7_CSR_COMP7OUTSEL_1 (0x2U << COMP7_CSR_COMP7OUTSEL_Pos)
#define COMP7_CSR_COMP7OUTSEL_2 (0x4U << COMP7_CSR_COMP7OUTSEL_Pos)
#define COMP7_CSR_COMP7OUTSEL_3 (0x8U << COMP7_CSR_COMP7OUTSEL_Pos)
#define COMP7_CSR_COMP7POL_Pos (15U)
#define COMP7_CSR_COMP7POL_Msk (0x1U << COMP7_CSR_COMP7POL_Pos)
#define COMP7_CSR_COMP7POL COMP7_CSR_COMP7POL_Msk
#define COMP7_CSR_COMP7HYST_Pos (16U)
#define COMP7_CSR_COMP7HYST_Msk (0x3U << COMP7_CSR_COMP7HYST_Pos)
#define COMP7_CSR_COMP7HYST COMP7_CSR_COMP7HYST_Msk
#define COMP7_CSR_COMP7HYST_0 (0x1U << COMP7_CSR_COMP7HYST_Pos)
#define COMP7_CSR_COMP7HYST_1 (0x2U << COMP7_CSR_COMP7HYST_Pos)
#define COMP7_CSR_COMP7BLANKING_Pos (18U)
#define COMP7_CSR_COMP7BLANKING_Msk (0x3U << COMP7_CSR_COMP7BLANKING_Pos)
#define COMP7_CSR_COMP7BLANKING COMP7_CSR_COMP7BLANKING_Msk
#define COMP7_CSR_COMP7BLANKING_0 (0x1U << COMP7_CSR_COMP7BLANKING_Pos)
#define COMP7_CSR_COMP7BLANKING_1 (0x2U << COMP7_CSR_COMP7BLANKING_Pos)
#define COMP7_CSR_COMP7BLANKING_2 (0x4U << COMP7_CSR_COMP7BLANKING_Pos)
#define COMP7_CSR_COMP7OUT_Pos (30U)
#define COMP7_CSR_COMP7OUT_Msk (0x1U << COMP7_CSR_COMP7OUT_Pos)
#define COMP7_CSR_COMP7OUT COMP7_CSR_COMP7OUT_Msk
#define COMP7_CSR_COMP7LOCK_Pos (31U)
#define COMP7_CSR_COMP7LOCK_Msk (0x1U << COMP7_CSR_COMP7LOCK_Pos)
#define COMP7_CSR_COMP7LOCK COMP7_CSR_COMP7LOCK_Msk


#define COMP_CSR_COMPxEN_Pos (0U)
#define COMP_CSR_COMPxEN_Msk (0x1U << COMP_CSR_COMPxEN_Pos)
#define COMP_CSR_COMPxEN COMP_CSR_COMPxEN_Msk
#define COMP_CSR_COMPxSW1_Pos (1U)
#define COMP_CSR_COMPxSW1_Msk (0x1U << COMP_CSR_COMPxSW1_Pos)
#define COMP_CSR_COMPxSW1 COMP_CSR_COMPxSW1_Msk
#define COMP_CSR_COMPxMODE_Pos (2U)
#define COMP_CSR_COMPxMODE_Msk (0x3U << COMP_CSR_COMPxMODE_Pos)
#define COMP_CSR_COMPxMODE COMP_CSR_COMPxMODE_Msk
#define COMP_CSR_COMPxMODE_0 (0x1U << COMP_CSR_COMPxMODE_Pos)
#define COMP_CSR_COMPxMODE_1 (0x2U << COMP_CSR_COMPxMODE_Pos)
#define COMP_CSR_COMPxINSEL_Pos (4U)
#define COMP_CSR_COMPxINSEL_Msk (0x7U << COMP_CSR_COMPxINSEL_Pos)
#define COMP_CSR_COMPxINSEL COMP_CSR_COMPxINSEL_Msk
#define COMP_CSR_COMPxINSEL_0 (0x00000010U)
#define COMP_CSR_COMPxINSEL_1 (0x00000020U)
#define COMP_CSR_COMPxINSEL_2 (0x00000040U)
#define COMP_CSR_COMPxNONINSEL_Pos (7U)
#define COMP_CSR_COMPxNONINSEL_Msk (0x1U << COMP_CSR_COMPxNONINSEL_Pos)
#define COMP_CSR_COMPxNONINSEL COMP_CSR_COMPxNONINSEL_Msk
#define COMP_CSR_COMPxWNDWEN_Pos (9U)
#define COMP_CSR_COMPxWNDWEN_Msk (0x1U << COMP_CSR_COMPxWNDWEN_Pos)
#define COMP_CSR_COMPxWNDWEN COMP_CSR_COMPxWNDWEN_Msk
#define COMP_CSR_COMPxOUTSEL_Pos (10U)
#define COMP_CSR_COMPxOUTSEL_Msk (0xFU << COMP_CSR_COMPxOUTSEL_Pos)
#define COMP_CSR_COMPxOUTSEL COMP_CSR_COMPxOUTSEL_Msk
#define COMP_CSR_COMPxOUTSEL_0 (0x1U << COMP_CSR_COMPxOUTSEL_Pos)
#define COMP_CSR_COMPxOUTSEL_1 (0x2U << COMP_CSR_COMPxOUTSEL_Pos)
#define COMP_CSR_COMPxOUTSEL_2 (0x4U << COMP_CSR_COMPxOUTSEL_Pos)
#define COMP_CSR_COMPxOUTSEL_3 (0x8U << COMP_CSR_COMPxOUTSEL_Pos)
#define COMP_CSR_COMPxPOL_Pos (15U)
#define COMP_CSR_COMPxPOL_Msk (0x1U << COMP_CSR_COMPxPOL_Pos)
#define COMP_CSR_COMPxPOL COMP_CSR_COMPxPOL_Msk
#define COMP_CSR_COMPxHYST_Pos (16U)
#define COMP_CSR_COMPxHYST_Msk (0x3U << COMP_CSR_COMPxHYST_Pos)
#define COMP_CSR_COMPxHYST COMP_CSR_COMPxHYST_Msk
#define COMP_CSR_COMPxHYST_0 (0x1U << COMP_CSR_COMPxHYST_Pos)
#define COMP_CSR_COMPxHYST_1 (0x2U << COMP_CSR_COMPxHYST_Pos)
#define COMP_CSR_COMPxBLANKING_Pos (18U)
#define COMP_CSR_COMPxBLANKING_Msk (0x3U << COMP_CSR_COMPxBLANKING_Pos)
#define COMP_CSR_COMPxBLANKING COMP_CSR_COMPxBLANKING_Msk
#define COMP_CSR_COMPxBLANKING_0 (0x1U << COMP_CSR_COMPxBLANKING_Pos)
#define COMP_CSR_COMPxBLANKING_1 (0x2U << COMP_CSR_COMPxBLANKING_Pos)
#define COMP_CSR_COMPxBLANKING_2 (0x4U << COMP_CSR_COMPxBLANKING_Pos)
#define COMP_CSR_COMPxOUT_Pos (30U)
#define COMP_CSR_COMPxOUT_Msk (0x1U << COMP_CSR_COMPxOUT_Pos)
#define COMP_CSR_COMPxOUT COMP_CSR_COMPxOUT_Msk
#define COMP_CSR_COMPxLOCK_Pos (31U)
#define COMP_CSR_COMPxLOCK_Msk (0x1U << COMP_CSR_COMPxLOCK_Pos)
#define COMP_CSR_COMPxLOCK COMP_CSR_COMPxLOCK_Msk







#define OPAMP1_CSR_OPAMP1EN_Pos (0U)
#define OPAMP1_CSR_OPAMP1EN_Msk (0x1U << OPAMP1_CSR_OPAMP1EN_Pos)
#define OPAMP1_CSR_OPAMP1EN OPAMP1_CSR_OPAMP1EN_Msk
#define OPAMP1_CSR_FORCEVP_Pos (1U)
#define OPAMP1_CSR_FORCEVP_Msk (0x1U << OPAMP1_CSR_FORCEVP_Pos)
#define OPAMP1_CSR_FORCEVP OPAMP1_CSR_FORCEVP_Msk
#define OPAMP1_CSR_VPSEL_Pos (2U)
#define OPAMP1_CSR_VPSEL_Msk (0x3U << OPAMP1_CSR_VPSEL_Pos)
#define OPAMP1_CSR_VPSEL OPAMP1_CSR_VPSEL_Msk
#define OPAMP1_CSR_VPSEL_0 (0x1U << OPAMP1_CSR_VPSEL_Pos)
#define OPAMP1_CSR_VPSEL_1 (0x2U << OPAMP1_CSR_VPSEL_Pos)
#define OPAMP1_CSR_VMSEL_Pos (5U)
#define OPAMP1_CSR_VMSEL_Msk (0x3U << OPAMP1_CSR_VMSEL_Pos)
#define OPAMP1_CSR_VMSEL OPAMP1_CSR_VMSEL_Msk
#define OPAMP1_CSR_VMSEL_0 (0x1U << OPAMP1_CSR_VMSEL_Pos)
#define OPAMP1_CSR_VMSEL_1 (0x2U << OPAMP1_CSR_VMSEL_Pos)
#define OPAMP1_CSR_TCMEN_Pos (7U)
#define OPAMP1_CSR_TCMEN_Msk (0x1U << OPAMP1_CSR_TCMEN_Pos)
#define OPAMP1_CSR_TCMEN OPAMP1_CSR_TCMEN_Msk
#define OPAMP1_CSR_VMSSEL_Pos (8U)
#define OPAMP1_CSR_VMSSEL_Msk (0x1U << OPAMP1_CSR_VMSSEL_Pos)
#define OPAMP1_CSR_VMSSEL OPAMP1_CSR_VMSSEL_Msk
#define OPAMP1_CSR_VPSSEL_Pos (9U)
#define OPAMP1_CSR_VPSSEL_Msk (0x3U << OPAMP1_CSR_VPSSEL_Pos)
#define OPAMP1_CSR_VPSSEL OPAMP1_CSR_VPSSEL_Msk
#define OPAMP1_CSR_VPSSEL_0 (0x1U << OPAMP1_CSR_VPSSEL_Pos)
#define OPAMP1_CSR_VPSSEL_1 (0x2U << OPAMP1_CSR_VPSSEL_Pos)
#define OPAMP1_CSR_CALON_Pos (11U)
#define OPAMP1_CSR_CALON_Msk (0x1U << OPAMP1_CSR_CALON_Pos)
#define OPAMP1_CSR_CALON OPAMP1_CSR_CALON_Msk
#define OPAMP1_CSR_CALSEL_Pos (12U)
#define OPAMP1_CSR_CALSEL_Msk (0x3U << OPAMP1_CSR_CALSEL_Pos)
#define OPAMP1_CSR_CALSEL OPAMP1_CSR_CALSEL_Msk
#define OPAMP1_CSR_CALSEL_0 (0x1U << OPAMP1_CSR_CALSEL_Pos)
#define OPAMP1_CSR_CALSEL_1 (0x2U << OPAMP1_CSR_CALSEL_Pos)
#define OPAMP1_CSR_PGGAIN_Pos (14U)
#define OPAMP1_CSR_PGGAIN_Msk (0xFU << OPAMP1_CSR_PGGAIN_Pos)
#define OPAMP1_CSR_PGGAIN OPAMP1_CSR_PGGAIN_Msk
#define OPAMP1_CSR_PGGAIN_0 (0x1U << OPAMP1_CSR_PGGAIN_Pos)
#define OPAMP1_CSR_PGGAIN_1 (0x2U << OPAMP1_CSR_PGGAIN_Pos)
#define OPAMP1_CSR_PGGAIN_2 (0x4U << OPAMP1_CSR_PGGAIN_Pos)
#define OPAMP1_CSR_PGGAIN_3 (0x8U << OPAMP1_CSR_PGGAIN_Pos)
#define OPAMP1_CSR_USERTRIM_Pos (18U)
#define OPAMP1_CSR_USERTRIM_Msk (0x1U << OPAMP1_CSR_USERTRIM_Pos)
#define OPAMP1_CSR_USERTRIM OPAMP1_CSR_USERTRIM_Msk
#define OPAMP1_CSR_TRIMOFFSETP_Pos (19U)
#define OPAMP1_CSR_TRIMOFFSETP_Msk (0x1FU << OPAMP1_CSR_TRIMOFFSETP_Pos)
#define OPAMP1_CSR_TRIMOFFSETP OPAMP1_CSR_TRIMOFFSETP_Msk
#define OPAMP1_CSR_TRIMOFFSETN_Pos (24U)
#define OPAMP1_CSR_TRIMOFFSETN_Msk (0x1FU << OPAMP1_CSR_TRIMOFFSETN_Pos)
#define OPAMP1_CSR_TRIMOFFSETN OPAMP1_CSR_TRIMOFFSETN_Msk
#define OPAMP1_CSR_TSTREF_Pos (29U)
#define OPAMP1_CSR_TSTREF_Msk (0x1U << OPAMP1_CSR_TSTREF_Pos)
#define OPAMP1_CSR_TSTREF OPAMP1_CSR_TSTREF_Msk
#define OPAMP1_CSR_OUTCAL_Pos (30U)
#define OPAMP1_CSR_OUTCAL_Msk (0x1U << OPAMP1_CSR_OUTCAL_Pos)
#define OPAMP1_CSR_OUTCAL OPAMP1_CSR_OUTCAL_Msk
#define OPAMP1_CSR_LOCK_Pos (31U)
#define OPAMP1_CSR_LOCK_Msk (0x1U << OPAMP1_CSR_LOCK_Pos)
#define OPAMP1_CSR_LOCK OPAMP1_CSR_LOCK_Msk


#define OPAMP2_CSR_OPAMP2EN_Pos (0U)
#define OPAMP2_CSR_OPAMP2EN_Msk (0x1U << OPAMP2_CSR_OPAMP2EN_Pos)
#define OPAMP2_CSR_OPAMP2EN OPAMP2_CSR_OPAMP2EN_Msk
#define OPAMP2_CSR_FORCEVP_Pos (1U)
#define OPAMP2_CSR_FORCEVP_Msk (0x1U << OPAMP2_CSR_FORCEVP_Pos)
#define OPAMP2_CSR_FORCEVP OPAMP2_CSR_FORCEVP_Msk
#define OPAMP2_CSR_VPSEL_Pos (2U)
#define OPAMP2_CSR_VPSEL_Msk (0x3U << OPAMP2_CSR_VPSEL_Pos)
#define OPAMP2_CSR_VPSEL OPAMP2_CSR_VPSEL_Msk
#define OPAMP2_CSR_VPSEL_0 (0x1U << OPAMP2_CSR_VPSEL_Pos)
#define OPAMP2_CSR_VPSEL_1 (0x2U << OPAMP2_CSR_VPSEL_Pos)
#define OPAMP2_CSR_VMSEL_Pos (5U)
#define OPAMP2_CSR_VMSEL_Msk (0x3U << OPAMP2_CSR_VMSEL_Pos)
#define OPAMP2_CSR_VMSEL OPAMP2_CSR_VMSEL_Msk
#define OPAMP2_CSR_VMSEL_0 (0x1U << OPAMP2_CSR_VMSEL_Pos)
#define OPAMP2_CSR_VMSEL_1 (0x2U << OPAMP2_CSR_VMSEL_Pos)
#define OPAMP2_CSR_TCMEN_Pos (7U)
#define OPAMP2_CSR_TCMEN_Msk (0x1U << OPAMP2_CSR_TCMEN_Pos)
#define OPAMP2_CSR_TCMEN OPAMP2_CSR_TCMEN_Msk
#define OPAMP2_CSR_VMSSEL_Pos (8U)
#define OPAMP2_CSR_VMSSEL_Msk (0x1U << OPAMP2_CSR_VMSSEL_Pos)
#define OPAMP2_CSR_VMSSEL OPAMP2_CSR_VMSSEL_Msk
#define OPAMP2_CSR_VPSSEL_Pos (9U)
#define OPAMP2_CSR_VPSSEL_Msk (0x3U << OPAMP2_CSR_VPSSEL_Pos)
#define OPAMP2_CSR_VPSSEL OPAMP2_CSR_VPSSEL_Msk
#define OPAMP2_CSR_VPSSEL_0 (0x1U << OPAMP2_CSR_VPSSEL_Pos)
#define OPAMP2_CSR_VPSSEL_1 (0x2U << OPAMP2_CSR_VPSSEL_Pos)
#define OPAMP2_CSR_CALON_Pos (11U)
#define OPAMP2_CSR_CALON_Msk (0x1U << OPAMP2_CSR_CALON_Pos)
#define OPAMP2_CSR_CALON OPAMP2_CSR_CALON_Msk
#define OPAMP2_CSR_CALSEL_Pos (12U)
#define OPAMP2_CSR_CALSEL_Msk (0x3U << OPAMP2_CSR_CALSEL_Pos)
#define OPAMP2_CSR_CALSEL OPAMP2_CSR_CALSEL_Msk
#define OPAMP2_CSR_CALSEL_0 (0x1U << OPAMP2_CSR_CALSEL_Pos)
#define OPAMP2_CSR_CALSEL_1 (0x2U << OPAMP2_CSR_CALSEL_Pos)
#define OPAMP2_CSR_PGGAIN_Pos (14U)
#define OPAMP2_CSR_PGGAIN_Msk (0xFU << OPAMP2_CSR_PGGAIN_Pos)
#define OPAMP2_CSR_PGGAIN OPAMP2_CSR_PGGAIN_Msk
#define OPAMP2_CSR_PGGAIN_0 (0x1U << OPAMP2_CSR_PGGAIN_Pos)
#define OPAMP2_CSR_PGGAIN_1 (0x2U << OPAMP2_CSR_PGGAIN_Pos)
#define OPAMP2_CSR_PGGAIN_2 (0x4U << OPAMP2_CSR_PGGAIN_Pos)
#define OPAMP2_CSR_PGGAIN_3 (0x8U << OPAMP2_CSR_PGGAIN_Pos)
#define OPAMP2_CSR_USERTRIM_Pos (18U)
#define OPAMP2_CSR_USERTRIM_Msk (0x1U << OPAMP2_CSR_USERTRIM_Pos)
#define OPAMP2_CSR_USERTRIM OPAMP2_CSR_USERTRIM_Msk
#define OPAMP2_CSR_TRIMOFFSETP_Pos (19U)
#define OPAMP2_CSR_TRIMOFFSETP_Msk (0x1FU << OPAMP2_CSR_TRIMOFFSETP_Pos)
#define OPAMP2_CSR_TRIMOFFSETP OPAMP2_CSR_TRIMOFFSETP_Msk
#define OPAMP2_CSR_TRIMOFFSETN_Pos (24U)
#define OPAMP2_CSR_TRIMOFFSETN_Msk (0x1FU << OPAMP2_CSR_TRIMOFFSETN_Pos)
#define OPAMP2_CSR_TRIMOFFSETN OPAMP2_CSR_TRIMOFFSETN_Msk
#define OPAMP2_CSR_TSTREF_Pos (29U)
#define OPAMP2_CSR_TSTREF_Msk (0x1U << OPAMP2_CSR_TSTREF_Pos)
#define OPAMP2_CSR_TSTREF OPAMP2_CSR_TSTREF_Msk
#define OPAMP2_CSR_OUTCAL_Pos (30U)
#define OPAMP2_CSR_OUTCAL_Msk (0x1U << OPAMP2_CSR_OUTCAL_Pos)
#define OPAMP2_CSR_OUTCAL OPAMP2_CSR_OUTCAL_Msk
#define OPAMP2_CSR_LOCK_Pos (31U)
#define OPAMP2_CSR_LOCK_Msk (0x1U << OPAMP2_CSR_LOCK_Pos)
#define OPAMP2_CSR_LOCK OPAMP2_CSR_LOCK_Msk


#define OPAMP3_CSR_OPAMP3EN_Pos (0U)
#define OPAMP3_CSR_OPAMP3EN_Msk (0x1U << OPAMP3_CSR_OPAMP3EN_Pos)
#define OPAMP3_CSR_OPAMP3EN OPAMP3_CSR_OPAMP3EN_Msk
#define OPAMP3_CSR_FORCEVP_Pos (1U)
#define OPAMP3_CSR_FORCEVP_Msk (0x1U << OPAMP3_CSR_FORCEVP_Pos)
#define OPAMP3_CSR_FORCEVP OPAMP3_CSR_FORCEVP_Msk
#define OPAMP3_CSR_VPSEL_Pos (2U)
#define OPAMP3_CSR_VPSEL_Msk (0x3U << OPAMP3_CSR_VPSEL_Pos)
#define OPAMP3_CSR_VPSEL OPAMP3_CSR_VPSEL_Msk
#define OPAMP3_CSR_VPSEL_0 (0x1U << OPAMP3_CSR_VPSEL_Pos)
#define OPAMP3_CSR_VPSEL_1 (0x2U << OPAMP3_CSR_VPSEL_Pos)
#define OPAMP3_CSR_VMSEL_Pos (5U)
#define OPAMP3_CSR_VMSEL_Msk (0x3U << OPAMP3_CSR_VMSEL_Pos)
#define OPAMP3_CSR_VMSEL OPAMP3_CSR_VMSEL_Msk
#define OPAMP3_CSR_VMSEL_0 (0x1U << OPAMP3_CSR_VMSEL_Pos)
#define OPAMP3_CSR_VMSEL_1 (0x2U << OPAMP3_CSR_VMSEL_Pos)
#define OPAMP3_CSR_TCMEN_Pos (7U)
#define OPAMP3_CSR_TCMEN_Msk (0x1U << OPAMP3_CSR_TCMEN_Pos)
#define OPAMP3_CSR_TCMEN OPAMP3_CSR_TCMEN_Msk
#define OPAMP3_CSR_VMSSEL_Pos (8U)
#define OPAMP3_CSR_VMSSEL_Msk (0x1U << OPAMP3_CSR_VMSSEL_Pos)
#define OPAMP3_CSR_VMSSEL OPAMP3_CSR_VMSSEL_Msk
#define OPAMP3_CSR_VPSSEL_Pos (9U)
#define OPAMP3_CSR_VPSSEL_Msk (0x3U << OPAMP3_CSR_VPSSEL_Pos)
#define OPAMP3_CSR_VPSSEL OPAMP3_CSR_VPSSEL_Msk
#define OPAMP3_CSR_VPSSEL_0 (0x1U << OPAMP3_CSR_VPSSEL_Pos)
#define OPAMP3_CSR_VPSSEL_1 (0x2U << OPAMP3_CSR_VPSSEL_Pos)
#define OPAMP3_CSR_CALON_Pos (11U)
#define OPAMP3_CSR_CALON_Msk (0x1U << OPAMP3_CSR_CALON_Pos)
#define OPAMP3_CSR_CALON OPAMP3_CSR_CALON_Msk
#define OPAMP3_CSR_CALSEL_Pos (12U)
#define OPAMP3_CSR_CALSEL_Msk (0x3U << OPAMP3_CSR_CALSEL_Pos)
#define OPAMP3_CSR_CALSEL OPAMP3_CSR_CALSEL_Msk
#define OPAMP3_CSR_CALSEL_0 (0x1U << OPAMP3_CSR_CALSEL_Pos)
#define OPAMP3_CSR_CALSEL_1 (0x2U << OPAMP3_CSR_CALSEL_Pos)
#define OPAMP3_CSR_PGGAIN_Pos (14U)
#define OPAMP3_CSR_PGGAIN_Msk (0xFU << OPAMP3_CSR_PGGAIN_Pos)
#define OPAMP3_CSR_PGGAIN OPAMP3_CSR_PGGAIN_Msk
#define OPAMP3_CSR_PGGAIN_0 (0x1U << OPAMP3_CSR_PGGAIN_Pos)
#define OPAMP3_CSR_PGGAIN_1 (0x2U << OPAMP3_CSR_PGGAIN_Pos)
#define OPAMP3_CSR_PGGAIN_2 (0x4U << OPAMP3_CSR_PGGAIN_Pos)
#define OPAMP3_CSR_PGGAIN_3 (0x8U << OPAMP3_CSR_PGGAIN_Pos)
#define OPAMP3_CSR_USERTRIM_Pos (18U)
#define OPAMP3_CSR_USERTRIM_Msk (0x1U << OPAMP3_CSR_USERTRIM_Pos)
#define OPAMP3_CSR_USERTRIM OPAMP3_CSR_USERTRIM_Msk
#define OPAMP3_CSR_TRIMOFFSETP_Pos (19U)
#define OPAMP3_CSR_TRIMOFFSETP_Msk (0x1FU << OPAMP3_CSR_TRIMOFFSETP_Pos)
#define OPAMP3_CSR_TRIMOFFSETP OPAMP3_CSR_TRIMOFFSETP_Msk
#define OPAMP3_CSR_TRIMOFFSETN_Pos (24U)
#define OPAMP3_CSR_TRIMOFFSETN_Msk (0x1FU << OPAMP3_CSR_TRIMOFFSETN_Pos)
#define OPAMP3_CSR_TRIMOFFSETN OPAMP3_CSR_TRIMOFFSETN_Msk
#define OPAMP3_CSR_TSTREF_Pos (29U)
#define OPAMP3_CSR_TSTREF_Msk (0x1U << OPAMP3_CSR_TSTREF_Pos)
#define OPAMP3_CSR_TSTREF OPAMP3_CSR_TSTREF_Msk
#define OPAMP3_CSR_OUTCAL_Pos (30U)
#define OPAMP3_CSR_OUTCAL_Msk (0x1U << OPAMP3_CSR_OUTCAL_Pos)
#define OPAMP3_CSR_OUTCAL OPAMP3_CSR_OUTCAL_Msk
#define OPAMP3_CSR_LOCK_Pos (31U)
#define OPAMP3_CSR_LOCK_Msk (0x1U << OPAMP3_CSR_LOCK_Pos)
#define OPAMP3_CSR_LOCK OPAMP3_CSR_LOCK_Msk


#define OPAMP4_CSR_OPAMP4EN_Pos (0U)
#define OPAMP4_CSR_OPAMP4EN_Msk (0x1U << OPAMP4_CSR_OPAMP4EN_Pos)
#define OPAMP4_CSR_OPAMP4EN OPAMP4_CSR_OPAMP4EN_Msk
#define OPAMP4_CSR_FORCEVP_Pos (1U)
#define OPAMP4_CSR_FORCEVP_Msk (0x1U << OPAMP4_CSR_FORCEVP_Pos)
#define OPAMP4_CSR_FORCEVP OPAMP4_CSR_FORCEVP_Msk
#define OPAMP4_CSR_VPSEL_Pos (2U)
#define OPAMP4_CSR_VPSEL_Msk (0x3U << OPAMP4_CSR_VPSEL_Pos)
#define OPAMP4_CSR_VPSEL OPAMP4_CSR_VPSEL_Msk
#define OPAMP4_CSR_VPSEL_0 (0x1U << OPAMP4_CSR_VPSEL_Pos)
#define OPAMP4_CSR_VPSEL_1 (0x2U << OPAMP4_CSR_VPSEL_Pos)
#define OPAMP4_CSR_VMSEL_Pos (5U)
#define OPAMP4_CSR_VMSEL_Msk (0x3U << OPAMP4_CSR_VMSEL_Pos)
#define OPAMP4_CSR_VMSEL OPAMP4_CSR_VMSEL_Msk
#define OPAMP4_CSR_VMSEL_0 (0x1U << OPAMP4_CSR_VMSEL_Pos)
#define OPAMP4_CSR_VMSEL_1 (0x2U << OPAMP4_CSR_VMSEL_Pos)
#define OPAMP4_CSR_TCMEN_Pos (7U)
#define OPAMP4_CSR_TCMEN_Msk (0x1U << OPAMP4_CSR_TCMEN_Pos)
#define OPAMP4_CSR_TCMEN OPAMP4_CSR_TCMEN_Msk
#define OPAMP4_CSR_VMSSEL_Pos (8U)
#define OPAMP4_CSR_VMSSEL_Msk (0x1U << OPAMP4_CSR_VMSSEL_Pos)
#define OPAMP4_CSR_VMSSEL OPAMP4_CSR_VMSSEL_Msk
#define OPAMP4_CSR_VPSSEL_Pos (9U)
#define OPAMP4_CSR_VPSSEL_Msk (0x3U << OPAMP4_CSR_VPSSEL_Pos)
#define OPAMP4_CSR_VPSSEL OPAMP4_CSR_VPSSEL_Msk
#define OPAMP4_CSR_VPSSEL_0 (0x1U << OPAMP4_CSR_VPSSEL_Pos)
#define OPAMP4_CSR_VPSSEL_1 (0x2U << OPAMP4_CSR_VPSSEL_Pos)
#define OPAMP4_CSR_CALON_Pos (11U)
#define OPAMP4_CSR_CALON_Msk (0x1U << OPAMP4_CSR_CALON_Pos)
#define OPAMP4_CSR_CALON OPAMP4_CSR_CALON_Msk
#define OPAMP4_CSR_CALSEL_Pos (12U)
#define OPAMP4_CSR_CALSEL_Msk (0x3U << OPAMP4_CSR_CALSEL_Pos)
#define OPAMP4_CSR_CALSEL OPAMP4_CSR_CALSEL_Msk
#define OPAMP4_CSR_CALSEL_0 (0x1U << OPAMP4_CSR_CALSEL_Pos)
#define OPAMP4_CSR_CALSEL_1 (0x2U << OPAMP4_CSR_CALSEL_Pos)
#define OPAMP4_CSR_PGGAIN_Pos (14U)
#define OPAMP4_CSR_PGGAIN_Msk (0xFU << OPAMP4_CSR_PGGAIN_Pos)
#define OPAMP4_CSR_PGGAIN OPAMP4_CSR_PGGAIN_Msk
#define OPAMP4_CSR_PGGAIN_0 (0x1U << OPAMP4_CSR_PGGAIN_Pos)
#define OPAMP4_CSR_PGGAIN_1 (0x2U << OPAMP4_CSR_PGGAIN_Pos)
#define OPAMP4_CSR_PGGAIN_2 (0x4U << OPAMP4_CSR_PGGAIN_Pos)
#define OPAMP4_CSR_PGGAIN_3 (0x8U << OPAMP4_CSR_PGGAIN_Pos)
#define OPAMP4_CSR_USERTRIM_Pos (18U)
#define OPAMP4_CSR_USERTRIM_Msk (0x1U << OPAMP4_CSR_USERTRIM_Pos)
#define OPAMP4_CSR_USERTRIM OPAMP4_CSR_USERTRIM_Msk
#define OPAMP4_CSR_TRIMOFFSETP_Pos (19U)
#define OPAMP4_CSR_TRIMOFFSETP_Msk (0x1FU << OPAMP4_CSR_TRIMOFFSETP_Pos)
#define OPAMP4_CSR_TRIMOFFSETP OPAMP4_CSR_TRIMOFFSETP_Msk
#define OPAMP4_CSR_TRIMOFFSETN_Pos (24U)
#define OPAMP4_CSR_TRIMOFFSETN_Msk (0x1FU << OPAMP4_CSR_TRIMOFFSETN_Pos)
#define OPAMP4_CSR_TRIMOFFSETN OPAMP4_CSR_TRIMOFFSETN_Msk
#define OPAMP4_CSR_TSTREF_Pos (29U)
#define OPAMP4_CSR_TSTREF_Msk (0x1U << OPAMP4_CSR_TSTREF_Pos)
#define OPAMP4_CSR_TSTREF OPAMP4_CSR_TSTREF_Msk
#define OPAMP4_CSR_OUTCAL_Pos (30U)
#define OPAMP4_CSR_OUTCAL_Msk (0x1U << OPAMP4_CSR_OUTCAL_Pos)
#define OPAMP4_CSR_OUTCAL OPAMP4_CSR_OUTCAL_Msk
#define OPAMP4_CSR_LOCK_Pos (31U)
#define OPAMP4_CSR_LOCK_Msk (0x1U << OPAMP4_CSR_LOCK_Pos)
#define OPAMP4_CSR_LOCK OPAMP4_CSR_LOCK_Msk


#define OPAMP_CSR_OPAMPxEN_Pos (0U)
#define OPAMP_CSR_OPAMPxEN_Msk (0x1U << OPAMP_CSR_OPAMPxEN_Pos)
#define OPAMP_CSR_OPAMPxEN OPAMP_CSR_OPAMPxEN_Msk
#define OPAMP_CSR_FORCEVP_Pos (1U)
#define OPAMP_CSR_FORCEVP_Msk (0x1U << OPAMP_CSR_FORCEVP_Pos)
#define OPAMP_CSR_FORCEVP OPAMP_CSR_FORCEVP_Msk
#define OPAMP_CSR_VPSEL_Pos (2U)
#define OPAMP_CSR_VPSEL_Msk (0x3U << OPAMP_CSR_VPSEL_Pos)
#define OPAMP_CSR_VPSEL OPAMP_CSR_VPSEL_Msk
#define OPAMP_CSR_VPSEL_0 (0x1U << OPAMP_CSR_VPSEL_Pos)
#define OPAMP_CSR_VPSEL_1 (0x2U << OPAMP_CSR_VPSEL_Pos)
#define OPAMP_CSR_VMSEL_Pos (5U)
#define OPAMP_CSR_VMSEL_Msk (0x3U << OPAMP_CSR_VMSEL_Pos)
#define OPAMP_CSR_VMSEL OPAMP_CSR_VMSEL_Msk
#define OPAMP_CSR_VMSEL_0 (0x1U << OPAMP_CSR_VMSEL_Pos)
#define OPAMP_CSR_VMSEL_1 (0x2U << OPAMP_CSR_VMSEL_Pos)
#define OPAMP_CSR_TCMEN_Pos (7U)
#define OPAMP_CSR_TCMEN_Msk (0x1U << OPAMP_CSR_TCMEN_Pos)
#define OPAMP_CSR_TCMEN OPAMP_CSR_TCMEN_Msk
#define OPAMP_CSR_VMSSEL_Pos (8U)
#define OPAMP_CSR_VMSSEL_Msk (0x1U << OPAMP_CSR_VMSSEL_Pos)
#define OPAMP_CSR_VMSSEL OPAMP_CSR_VMSSEL_Msk
#define OPAMP_CSR_VPSSEL_Pos (9U)
#define OPAMP_CSR_VPSSEL_Msk (0x3U << OPAMP_CSR_VPSSEL_Pos)
#define OPAMP_CSR_VPSSEL OPAMP_CSR_VPSSEL_Msk
#define OPAMP_CSR_VPSSEL_0 (0x1U << OPAMP_CSR_VPSSEL_Pos)
#define OPAMP_CSR_VPSSEL_1 (0x2U << OPAMP_CSR_VPSSEL_Pos)
#define OPAMP_CSR_CALON_Pos (11U)
#define OPAMP_CSR_CALON_Msk (0x1U << OPAMP_CSR_CALON_Pos)
#define OPAMP_CSR_CALON OPAMP_CSR_CALON_Msk
#define OPAMP_CSR_CALSEL_Pos (12U)
#define OPAMP_CSR_CALSEL_Msk (0x3U << OPAMP_CSR_CALSEL_Pos)
#define OPAMP_CSR_CALSEL OPAMP_CSR_CALSEL_Msk
#define OPAMP_CSR_CALSEL_0 (0x1U << OPAMP_CSR_CALSEL_Pos)
#define OPAMP_CSR_CALSEL_1 (0x2U << OPAMP_CSR_CALSEL_Pos)
#define OPAMP_CSR_PGGAIN_Pos (14U)
#define OPAMP_CSR_PGGAIN_Msk (0xFU << OPAMP_CSR_PGGAIN_Pos)
#define OPAMP_CSR_PGGAIN OPAMP_CSR_PGGAIN_Msk
#define OPAMP_CSR_PGGAIN_0 (0x1U << OPAMP_CSR_PGGAIN_Pos)
#define OPAMP_CSR_PGGAIN_1 (0x2U << OPAMP_CSR_PGGAIN_Pos)
#define OPAMP_CSR_PGGAIN_2 (0x4U << OPAMP_CSR_PGGAIN_Pos)
#define OPAMP_CSR_PGGAIN_3 (0x8U << OPAMP_CSR_PGGAIN_Pos)
#define OPAMP_CSR_USERTRIM_Pos (18U)
#define OPAMP_CSR_USERTRIM_Msk (0x1U << OPAMP_CSR_USERTRIM_Pos)
#define OPAMP_CSR_USERTRIM OPAMP_CSR_USERTRIM_Msk
#define OPAMP_CSR_TRIMOFFSETP_Pos (19U)
#define OPAMP_CSR_TRIMOFFSETP_Msk (0x1FU << OPAMP_CSR_TRIMOFFSETP_Pos)
#define OPAMP_CSR_TRIMOFFSETP OPAMP_CSR_TRIMOFFSETP_Msk
#define OPAMP_CSR_TRIMOFFSETN_Pos (24U)
#define OPAMP_CSR_TRIMOFFSETN_Msk (0x1FU << OPAMP_CSR_TRIMOFFSETN_Pos)
#define OPAMP_CSR_TRIMOFFSETN OPAMP_CSR_TRIMOFFSETN_Msk
#define OPAMP_CSR_TSTREF_Pos (29U)
#define OPAMP_CSR_TSTREF_Msk (0x1U << OPAMP_CSR_TSTREF_Pos)
#define OPAMP_CSR_TSTREF OPAMP_CSR_TSTREF_Msk
#define OPAMP_CSR_OUTCAL_Pos (30U)
#define OPAMP_CSR_OUTCAL_Msk (0x1U << OPAMP_CSR_OUTCAL_Pos)
#define OPAMP_CSR_OUTCAL OPAMP_CSR_OUTCAL_Msk
#define OPAMP_CSR_LOCK_Pos (31U)
#define OPAMP_CSR_LOCK_Msk (0x1U << OPAMP_CSR_LOCK_Pos)
#define OPAMP_CSR_LOCK OPAMP_CSR_LOCK_Msk







#define CAN_MCR_INRQ_Pos (0U)
#define CAN_MCR_INRQ_Msk (0x1U << CAN_MCR_INRQ_Pos)
#define CAN_MCR_INRQ CAN_MCR_INRQ_Msk
#define CAN_MCR_SLEEP_Pos (1U)
#define CAN_MCR_SLEEP_Msk (0x1U << CAN_MCR_SLEEP_Pos)
#define CAN_MCR_SLEEP CAN_MCR_SLEEP_Msk
#define CAN_MCR_TXFP_Pos (2U)
#define CAN_MCR_TXFP_Msk (0x1U << CAN_MCR_TXFP_Pos)
#define CAN_MCR_TXFP CAN_MCR_TXFP_Msk
#define CAN_MCR_RFLM_Pos (3U)
#define CAN_MCR_RFLM_Msk (0x1U << CAN_MCR_RFLM_Pos)
#define CAN_MCR_RFLM CAN_MCR_RFLM_Msk
#define CAN_MCR_NART_Pos (4U)
#define CAN_MCR_NART_Msk (0x1U << CAN_MCR_NART_Pos)
#define CAN_MCR_NART CAN_MCR_NART_Msk
#define CAN_MCR_AWUM_Pos (5U)
#define CAN_MCR_AWUM_Msk (0x1U << CAN_MCR_AWUM_Pos)
#define CAN_MCR_AWUM CAN_MCR_AWUM_Msk
#define CAN_MCR_ABOM_Pos (6U)
#define CAN_MCR_ABOM_Msk (0x1U << CAN_MCR_ABOM_Pos)
#define CAN_MCR_ABOM CAN_MCR_ABOM_Msk
#define CAN_MCR_TTCM_Pos (7U)
#define CAN_MCR_TTCM_Msk (0x1U << CAN_MCR_TTCM_Pos)
#define CAN_MCR_TTCM CAN_MCR_TTCM_Msk
#define CAN_MCR_RESET_Pos (15U)
#define CAN_MCR_RESET_Msk (0x1U << CAN_MCR_RESET_Pos)
#define CAN_MCR_RESET CAN_MCR_RESET_Msk


#define CAN_MSR_INAK_Pos (0U)
#define CAN_MSR_INAK_Msk (0x1U << CAN_MSR_INAK_Pos)
#define CAN_MSR_INAK CAN_MSR_INAK_Msk
#define CAN_MSR_SLAK_Pos (1U)
#define CAN_MSR_SLAK_Msk (0x1U << CAN_MSR_SLAK_Pos)
#define CAN_MSR_SLAK CAN_MSR_SLAK_Msk
#define CAN_MSR_ERRI_Pos (2U)
#define CAN_MSR_ERRI_Msk (0x1U << CAN_MSR_ERRI_Pos)
#define CAN_MSR_ERRI CAN_MSR_ERRI_Msk
#define CAN_MSR_WKUI_Pos (3U)
#define CAN_MSR_WKUI_Msk (0x1U << CAN_MSR_WKUI_Pos)
#define CAN_MSR_WKUI CAN_MSR_WKUI_Msk
#define CAN_MSR_SLAKI_Pos (4U)
#define CAN_MSR_SLAKI_Msk (0x1U << CAN_MSR_SLAKI_Pos)
#define CAN_MSR_SLAKI CAN_MSR_SLAKI_Msk
#define CAN_MSR_TXM_Pos (8U)
#define CAN_MSR_TXM_Msk (0x1U << CAN_MSR_TXM_Pos)
#define CAN_MSR_TXM CAN_MSR_TXM_Msk
#define CAN_MSR_RXM_Pos (9U)
#define CAN_MSR_RXM_Msk (0x1U << CAN_MSR_RXM_Pos)
#define CAN_MSR_RXM CAN_MSR_RXM_Msk
#define CAN_MSR_SAMP_Pos (10U)
#define CAN_MSR_SAMP_Msk (0x1U << CAN_MSR_SAMP_Pos)
#define CAN_MSR_SAMP CAN_MSR_SAMP_Msk
#define CAN_MSR_RX_Pos (11U)
#define CAN_MSR_RX_Msk (0x1U << CAN_MSR_RX_Pos)
#define CAN_MSR_RX CAN_MSR_RX_Msk


#define CAN_TSR_RQCP0_Pos (0U)
#define CAN_TSR_RQCP0_Msk (0x1U << CAN_TSR_RQCP0_Pos)
#define CAN_TSR_RQCP0 CAN_TSR_RQCP0_Msk
#define CAN_TSR_TXOK0_Pos (1U)
#define CAN_TSR_TXOK0_Msk (0x1U << CAN_TSR_TXOK0_Pos)
#define CAN_TSR_TXOK0 CAN_TSR_TXOK0_Msk
#define CAN_TSR_ALST0_Pos (2U)
#define CAN_TSR_ALST0_Msk (0x1U << CAN_TSR_ALST0_Pos)
#define CAN_TSR_ALST0 CAN_TSR_ALST0_Msk
#define CAN_TSR_TERR0_Pos (3U)
#define CAN_TSR_TERR0_Msk (0x1U << CAN_TSR_TERR0_Pos)
#define CAN_TSR_TERR0 CAN_TSR_TERR0_Msk
#define CAN_TSR_ABRQ0_Pos (7U)
#define CAN_TSR_ABRQ0_Msk (0x1U << CAN_TSR_ABRQ0_Pos)
#define CAN_TSR_ABRQ0 CAN_TSR_ABRQ0_Msk
#define CAN_TSR_RQCP1_Pos (8U)
#define CAN_TSR_RQCP1_Msk (0x1U << CAN_TSR_RQCP1_Pos)
#define CAN_TSR_RQCP1 CAN_TSR_RQCP1_Msk
#define CAN_TSR_TXOK1_Pos (9U)
#define CAN_TSR_TXOK1_Msk (0x1U << CAN_TSR_TXOK1_Pos)
#define CAN_TSR_TXOK1 CAN_TSR_TXOK1_Msk
#define CAN_TSR_ALST1_Pos (10U)
#define CAN_TSR_ALST1_Msk (0x1U << CAN_TSR_ALST1_Pos)
#define CAN_TSR_ALST1 CAN_TSR_ALST1_Msk
#define CAN_TSR_TERR1_Pos (11U)
#define CAN_TSR_TERR1_Msk (0x1U << CAN_TSR_TERR1_Pos)
#define CAN_TSR_TERR1 CAN_TSR_TERR1_Msk
#define CAN_TSR_ABRQ1_Pos (15U)
#define CAN_TSR_ABRQ1_Msk (0x1U << CAN_TSR_ABRQ1_Pos)
#define CAN_TSR_ABRQ1 CAN_TSR_ABRQ1_Msk
#define CAN_TSR_RQCP2_Pos (16U)
#define CAN_TSR_RQCP2_Msk (0x1U << CAN_TSR_RQCP2_Pos)
#define CAN_TSR_RQCP2 CAN_TSR_RQCP2_Msk
#define CAN_TSR_TXOK2_Pos (17U)
#define CAN_TSR_TXOK2_Msk (0x1U << CAN_TSR_TXOK2_Pos)
#define CAN_TSR_TXOK2 CAN_TSR_TXOK2_Msk
#define CAN_TSR_ALST2_Pos (18U)
#define CAN_TSR_ALST2_Msk (0x1U << CAN_TSR_ALST2_Pos)
#define CAN_TSR_ALST2 CAN_TSR_ALST2_Msk
#define CAN_TSR_TERR2_Pos (19U)
#define CAN_TSR_TERR2_Msk (0x1U << CAN_TSR_TERR2_Pos)
#define CAN_TSR_TERR2 CAN_TSR_TERR2_Msk
#define CAN_TSR_ABRQ2_Pos (23U)
#define CAN_TSR_ABRQ2_Msk (0x1U << CAN_TSR_ABRQ2_Pos)
#define CAN_TSR_ABRQ2 CAN_TSR_ABRQ2_Msk
#define CAN_TSR_CODE_Pos (24U)
#define CAN_TSR_CODE_Msk (0x3U << CAN_TSR_CODE_Pos)
#define CAN_TSR_CODE CAN_TSR_CODE_Msk

#define CAN_TSR_TME_Pos (26U)
#define CAN_TSR_TME_Msk (0x7U << CAN_TSR_TME_Pos)
#define CAN_TSR_TME CAN_TSR_TME_Msk
#define CAN_TSR_TME0_Pos (26U)
#define CAN_TSR_TME0_Msk (0x1U << CAN_TSR_TME0_Pos)
#define CAN_TSR_TME0 CAN_TSR_TME0_Msk
#define CAN_TSR_TME1_Pos (27U)
#define CAN_TSR_TME1_Msk (0x1U << CAN_TSR_TME1_Pos)
#define CAN_TSR_TME1 CAN_TSR_TME1_Msk
#define CAN_TSR_TME2_Pos (28U)
#define CAN_TSR_TME2_Msk (0x1U << CAN_TSR_TME2_Pos)
#define CAN_TSR_TME2 CAN_TSR_TME2_Msk

#define CAN_TSR_LOW_Pos (29U)
#define CAN_TSR_LOW_Msk (0x7U << CAN_TSR_LOW_Pos)
#define CAN_TSR_LOW CAN_TSR_LOW_Msk
#define CAN_TSR_LOW0_Pos (29U)
#define CAN_TSR_LOW0_Msk (0x1U << CAN_TSR_LOW0_Pos)
#define CAN_TSR_LOW0 CAN_TSR_LOW0_Msk
#define CAN_TSR_LOW1_Pos (30U)
#define CAN_TSR_LOW1_Msk (0x1U << CAN_TSR_LOW1_Pos)
#define CAN_TSR_LOW1 CAN_TSR_LOW1_Msk
#define CAN_TSR_LOW2_Pos (31U)
#define CAN_TSR_LOW2_Msk (0x1U << CAN_TSR_LOW2_Pos)
#define CAN_TSR_LOW2 CAN_TSR_LOW2_Msk


#define CAN_RF0R_FMP0_Pos (0U)
#define CAN_RF0R_FMP0_Msk (0x3U << CAN_RF0R_FMP0_Pos)
#define CAN_RF0R_FMP0 CAN_RF0R_FMP0_Msk
#define CAN_RF0R_FULL0_Pos (3U)
#define CAN_RF0R_FULL0_Msk (0x1U << CAN_RF0R_FULL0_Pos)
#define CAN_RF0R_FULL0 CAN_RF0R_FULL0_Msk
#define CAN_RF0R_FOVR0_Pos (4U)
#define CAN_RF0R_FOVR0_Msk (0x1U << CAN_RF0R_FOVR0_Pos)
#define CAN_RF0R_FOVR0 CAN_RF0R_FOVR0_Msk
#define CAN_RF0R_RFOM0_Pos (5U)
#define CAN_RF0R_RFOM0_Msk (0x1U << CAN_RF0R_RFOM0_Pos)
#define CAN_RF0R_RFOM0 CAN_RF0R_RFOM0_Msk


#define CAN_RF1R_FMP1_Pos (0U)
#define CAN_RF1R_FMP1_Msk (0x3U << CAN_RF1R_FMP1_Pos)
#define CAN_RF1R_FMP1 CAN_RF1R_FMP1_Msk
#define CAN_RF1R_FULL1_Pos (3U)
#define CAN_RF1R_FULL1_Msk (0x1U << CAN_RF1R_FULL1_Pos)
#define CAN_RF1R_FULL1 CAN_RF1R_FULL1_Msk
#define CAN_RF1R_FOVR1_Pos (4U)
#define CAN_RF1R_FOVR1_Msk (0x1U << CAN_RF1R_FOVR1_Pos)
#define CAN_RF1R_FOVR1 CAN_RF1R_FOVR1_Msk
#define CAN_RF1R_RFOM1_Pos (5U)
#define CAN_RF1R_RFOM1_Msk (0x1U << CAN_RF1R_RFOM1_Pos)
#define CAN_RF1R_RFOM1 CAN_RF1R_RFOM1_Msk


#define CAN_IER_TMEIE_Pos (0U)
#define CAN_IER_TMEIE_Msk (0x1U << CAN_IER_TMEIE_Pos)
#define CAN_IER_TMEIE CAN_IER_TMEIE_Msk
#define CAN_IER_FMPIE0_Pos (1U)
#define CAN_IER_FMPIE0_Msk (0x1U << CAN_IER_FMPIE0_Pos)
#define CAN_IER_FMPIE0 CAN_IER_FMPIE0_Msk
#define CAN_IER_FFIE0_Pos (2U)
#define CAN_IER_FFIE0_Msk (0x1U << CAN_IER_FFIE0_Pos)
#define CAN_IER_FFIE0 CAN_IER_FFIE0_Msk
#define CAN_IER_FOVIE0_Pos (3U)
#define CAN_IER_FOVIE0_Msk (0x1U << CAN_IER_FOVIE0_Pos)
#define CAN_IER_FOVIE0 CAN_IER_FOVIE0_Msk
#define CAN_IER_FMPIE1_Pos (4U)
#define CAN_IER_FMPIE1_Msk (0x1U << CAN_IER_FMPIE1_Pos)
#define CAN_IER_FMPIE1 CAN_IER_FMPIE1_Msk
#define CAN_IER_FFIE1_Pos (5U)
#define CAN_IER_FFIE1_Msk (0x1U << CAN_IER_FFIE1_Pos)
#define CAN_IER_FFIE1 CAN_IER_FFIE1_Msk
#define CAN_IER_FOVIE1_Pos (6U)
#define CAN_IER_FOVIE1_Msk (0x1U << CAN_IER_FOVIE1_Pos)
#define CAN_IER_FOVIE1 CAN_IER_FOVIE1_Msk
#define CAN_IER_EWGIE_Pos (8U)
#define CAN_IER_EWGIE_Msk (0x1U << CAN_IER_EWGIE_Pos)
#define CAN_IER_EWGIE CAN_IER_EWGIE_Msk
#define CAN_IER_EPVIE_Pos (9U)
#define CAN_IER_EPVIE_Msk (0x1U << CAN_IER_EPVIE_Pos)
#define CAN_IER_EPVIE CAN_IER_EPVIE_Msk
#define CAN_IER_BOFIE_Pos (10U)
#define CAN_IER_BOFIE_Msk (0x1U << CAN_IER_BOFIE_Pos)
#define CAN_IER_BOFIE CAN_IER_BOFIE_Msk
#define CAN_IER_LECIE_Pos (11U)
#define CAN_IER_LECIE_Msk (0x1U << CAN_IER_LECIE_Pos)
#define CAN_IER_LECIE CAN_IER_LECIE_Msk
#define CAN_IER_ERRIE_Pos (15U)
#define CAN_IER_ERRIE_Msk (0x1U << CAN_IER_ERRIE_Pos)
#define CAN_IER_ERRIE CAN_IER_ERRIE_Msk
#define CAN_IER_WKUIE_Pos (16U)
#define CAN_IER_WKUIE_Msk (0x1U << CAN_IER_WKUIE_Pos)
#define CAN_IER_WKUIE CAN_IER_WKUIE_Msk
#define CAN_IER_SLKIE_Pos (17U)
#define CAN_IER_SLKIE_Msk (0x1U << CAN_IER_SLKIE_Pos)
#define CAN_IER_SLKIE CAN_IER_SLKIE_Msk


#define CAN_ESR_EWGF_Pos (0U)
#define CAN_ESR_EWGF_Msk (0x1U << CAN_ESR_EWGF_Pos)
#define CAN_ESR_EWGF CAN_ESR_EWGF_Msk
#define CAN_ESR_EPVF_Pos (1U)
#define CAN_ESR_EPVF_Msk (0x1U << CAN_ESR_EPVF_Pos)
#define CAN_ESR_EPVF CAN_ESR_EPVF_Msk
#define CAN_ESR_BOFF_Pos (2U)
#define CAN_ESR_BOFF_Msk (0x1U << CAN_ESR_BOFF_Pos)
#define CAN_ESR_BOFF CAN_ESR_BOFF_Msk

#define CAN_ESR_LEC_Pos (4U)
#define CAN_ESR_LEC_Msk (0x7U << CAN_ESR_LEC_Pos)
#define CAN_ESR_LEC CAN_ESR_LEC_Msk
#define CAN_ESR_LEC_0 (0x1U << CAN_ESR_LEC_Pos)
#define CAN_ESR_LEC_1 (0x2U << CAN_ESR_LEC_Pos)
#define CAN_ESR_LEC_2 (0x4U << CAN_ESR_LEC_Pos)

#define CAN_ESR_TEC_Pos (16U)
#define CAN_ESR_TEC_Msk (0xFFU << CAN_ESR_TEC_Pos)
#define CAN_ESR_TEC CAN_ESR_TEC_Msk
#define CAN_ESR_REC_Pos (24U)
#define CAN_ESR_REC_Msk (0xFFU << CAN_ESR_REC_Pos)
#define CAN_ESR_REC CAN_ESR_REC_Msk


#define CAN_BTR_BRP_Pos (0U)
#define CAN_BTR_BRP_Msk (0x3FFU << CAN_BTR_BRP_Pos)
#define CAN_BTR_BRP CAN_BTR_BRP_Msk
#define CAN_BTR_TS1_Pos (16U)
#define CAN_BTR_TS1_Msk (0xFU << CAN_BTR_TS1_Pos)
#define CAN_BTR_TS1 CAN_BTR_TS1_Msk
#define CAN_BTR_TS1_0 (0x1U << CAN_BTR_TS1_Pos)
#define CAN_BTR_TS1_1 (0x2U << CAN_BTR_TS1_Pos)
#define CAN_BTR_TS1_2 (0x4U << CAN_BTR_TS1_Pos)
#define CAN_BTR_TS1_3 (0x8U << CAN_BTR_TS1_Pos)
#define CAN_BTR_TS2_Pos (20U)
#define CAN_BTR_TS2_Msk (0x7U << CAN_BTR_TS2_Pos)
#define CAN_BTR_TS2 CAN_BTR_TS2_Msk
#define CAN_BTR_TS2_0 (0x1U << CAN_BTR_TS2_Pos)
#define CAN_BTR_TS2_1 (0x2U << CAN_BTR_TS2_Pos)
#define CAN_BTR_TS2_2 (0x4U << CAN_BTR_TS2_Pos)
#define CAN_BTR_SJW_Pos (24U)
#define CAN_BTR_SJW_Msk (0x3U << CAN_BTR_SJW_Pos)
#define CAN_BTR_SJW CAN_BTR_SJW_Msk
#define CAN_BTR_SJW_0 (0x1U << CAN_BTR_SJW_Pos)
#define CAN_BTR_SJW_1 (0x2U << CAN_BTR_SJW_Pos)
#define CAN_BTR_LBKM_Pos (30U)
#define CAN_BTR_LBKM_Msk (0x1U << CAN_BTR_LBKM_Pos)
#define CAN_BTR_LBKM CAN_BTR_LBKM_Msk
#define CAN_BTR_SILM_Pos (31U)
#define CAN_BTR_SILM_Msk (0x1U << CAN_BTR_SILM_Pos)
#define CAN_BTR_SILM CAN_BTR_SILM_Msk



#define CAN_TI0R_TXRQ_Pos (0U)
#define CAN_TI0R_TXRQ_Msk (0x1U << CAN_TI0R_TXRQ_Pos)
#define CAN_TI0R_TXRQ CAN_TI0R_TXRQ_Msk
#define CAN_TI0R_RTR_Pos (1U)
#define CAN_TI0R_RTR_Msk (0x1U << CAN_TI0R_RTR_Pos)
#define CAN_TI0R_RTR CAN_TI0R_RTR_Msk
#define CAN_TI0R_IDE_Pos (2U)
#define CAN_TI0R_IDE_Msk (0x1U << CAN_TI0R_IDE_Pos)
#define CAN_TI0R_IDE CAN_TI0R_IDE_Msk
#define CAN_TI0R_EXID_Pos (3U)
#define CAN_TI0R_EXID_Msk (0x3FFFFU << CAN_TI0R_EXID_Pos)
#define CAN_TI0R_EXID CAN_TI0R_EXID_Msk
#define CAN_TI0R_STID_Pos (21U)
#define CAN_TI0R_STID_Msk (0x7FFU << CAN_TI0R_STID_Pos)
#define CAN_TI0R_STID CAN_TI0R_STID_Msk


#define CAN_TDT0R_DLC_Pos (0U)
#define CAN_TDT0R_DLC_Msk (0xFU << CAN_TDT0R_DLC_Pos)
#define CAN_TDT0R_DLC CAN_TDT0R_DLC_Msk
#define CAN_TDT0R_TGT_Pos (8U)
#define CAN_TDT0R_TGT_Msk (0x1U << CAN_TDT0R_TGT_Pos)
#define CAN_TDT0R_TGT CAN_TDT0R_TGT_Msk
#define CAN_TDT0R_TIME_Pos (16U)
#define CAN_TDT0R_TIME_Msk (0xFFFFU << CAN_TDT0R_TIME_Pos)
#define CAN_TDT0R_TIME CAN_TDT0R_TIME_Msk


#define CAN_TDL0R_DATA0_Pos (0U)
#define CAN_TDL0R_DATA0_Msk (0xFFU << CAN_TDL0R_DATA0_Pos)
#define CAN_TDL0R_DATA0 CAN_TDL0R_DATA0_Msk
#define CAN_TDL0R_DATA1_Pos (8U)
#define CAN_TDL0R_DATA1_Msk (0xFFU << CAN_TDL0R_DATA1_Pos)
#define CAN_TDL0R_DATA1 CAN_TDL0R_DATA1_Msk
#define CAN_TDL0R_DATA2_Pos (16U)
#define CAN_TDL0R_DATA2_Msk (0xFFU << CAN_TDL0R_DATA2_Pos)
#define CAN_TDL0R_DATA2 CAN_TDL0R_DATA2_Msk
#define CAN_TDL0R_DATA3_Pos (24U)
#define CAN_TDL0R_DATA3_Msk (0xFFU << CAN_TDL0R_DATA3_Pos)
#define CAN_TDL0R_DATA3 CAN_TDL0R_DATA3_Msk


#define CAN_TDH0R_DATA4_Pos (0U)
#define CAN_TDH0R_DATA4_Msk (0xFFU << CAN_TDH0R_DATA4_Pos)
#define CAN_TDH0R_DATA4 CAN_TDH0R_DATA4_Msk
#define CAN_TDH0R_DATA5_Pos (8U)
#define CAN_TDH0R_DATA5_Msk (0xFFU << CAN_TDH0R_DATA5_Pos)
#define CAN_TDH0R_DATA5 CAN_TDH0R_DATA5_Msk
#define CAN_TDH0R_DATA6_Pos (16U)
#define CAN_TDH0R_DATA6_Msk (0xFFU << CAN_TDH0R_DATA6_Pos)
#define CAN_TDH0R_DATA6 CAN_TDH0R_DATA6_Msk
#define CAN_TDH0R_DATA7_Pos (24U)
#define CAN_TDH0R_DATA7_Msk (0xFFU << CAN_TDH0R_DATA7_Pos)
#define CAN_TDH0R_DATA7 CAN_TDH0R_DATA7_Msk


#define CAN_TI1R_TXRQ_Pos (0U)
#define CAN_TI1R_TXRQ_Msk (0x1U << CAN_TI1R_TXRQ_Pos)
#define CAN_TI1R_TXRQ CAN_TI1R_TXRQ_Msk
#define CAN_TI1R_RTR_Pos (1U)
#define CAN_TI1R_RTR_Msk (0x1U << CAN_TI1R_RTR_Pos)
#define CAN_TI1R_RTR CAN_TI1R_RTR_Msk
#define CAN_TI1R_IDE_Pos (2U)
#define CAN_TI1R_IDE_Msk (0x1U << CAN_TI1R_IDE_Pos)
#define CAN_TI1R_IDE CAN_TI1R_IDE_Msk
#define CAN_TI1R_EXID_Pos (3U)
#define CAN_TI1R_EXID_Msk (0x3FFFFU << CAN_TI1R_EXID_Pos)
#define CAN_TI1R_EXID CAN_TI1R_EXID_Msk
#define CAN_TI1R_STID_Pos (21U)
#define CAN_TI1R_STID_Msk (0x7FFU << CAN_TI1R_STID_Pos)
#define CAN_TI1R_STID CAN_TI1R_STID_Msk


#define CAN_TDT1R_DLC_Pos (0U)
#define CAN_TDT1R_DLC_Msk (0xFU << CAN_TDT1R_DLC_Pos)
#define CAN_TDT1R_DLC CAN_TDT1R_DLC_Msk
#define CAN_TDT1R_TGT_Pos (8U)
#define CAN_TDT1R_TGT_Msk (0x1U << CAN_TDT1R_TGT_Pos)
#define CAN_TDT1R_TGT CAN_TDT1R_TGT_Msk
#define CAN_TDT1R_TIME_Pos (16U)
#define CAN_TDT1R_TIME_Msk (0xFFFFU << CAN_TDT1R_TIME_Pos)
#define CAN_TDT1R_TIME CAN_TDT1R_TIME_Msk


#define CAN_TDL1R_DATA0_Pos (0U)
#define CAN_TDL1R_DATA0_Msk (0xFFU << CAN_TDL1R_DATA0_Pos)
#define CAN_TDL1R_DATA0 CAN_TDL1R_DATA0_Msk
#define CAN_TDL1R_DATA1_Pos (8U)
#define CAN_TDL1R_DATA1_Msk (0xFFU << CAN_TDL1R_DATA1_Pos)
#define CAN_TDL1R_DATA1 CAN_TDL1R_DATA1_Msk
#define CAN_TDL1R_DATA2_Pos (16U)
#define CAN_TDL1R_DATA2_Msk (0xFFU << CAN_TDL1R_DATA2_Pos)
#define CAN_TDL1R_DATA2 CAN_TDL1R_DATA2_Msk
#define CAN_TDL1R_DATA3_Pos (24U)
#define CAN_TDL1R_DATA3_Msk (0xFFU << CAN_TDL1R_DATA3_Pos)
#define CAN_TDL1R_DATA3 CAN_TDL1R_DATA3_Msk


#define CAN_TDH1R_DATA4_Pos (0U)
#define CAN_TDH1R_DATA4_Msk (0xFFU << CAN_TDH1R_DATA4_Pos)
#define CAN_TDH1R_DATA4 CAN_TDH1R_DATA4_Msk
#define CAN_TDH1R_DATA5_Pos (8U)
#define CAN_TDH1R_DATA5_Msk (0xFFU << CAN_TDH1R_DATA5_Pos)
#define CAN_TDH1R_DATA5 CAN_TDH1R_DATA5_Msk
#define CAN_TDH1R_DATA6_Pos (16U)
#define CAN_TDH1R_DATA6_Msk (0xFFU << CAN_TDH1R_DATA6_Pos)
#define CAN_TDH1R_DATA6 CAN_TDH1R_DATA6_Msk
#define CAN_TDH1R_DATA7_Pos (24U)
#define CAN_TDH1R_DATA7_Msk (0xFFU << CAN_TDH1R_DATA7_Pos)
#define CAN_TDH1R_DATA7 CAN_TDH1R_DATA7_Msk


#define CAN_TI2R_TXRQ_Pos (0U)
#define CAN_TI2R_TXRQ_Msk (0x1U << CAN_TI2R_TXRQ_Pos)
#define CAN_TI2R_TXRQ CAN_TI2R_TXRQ_Msk
#define CAN_TI2R_RTR_Pos (1U)
#define CAN_TI2R_RTR_Msk (0x1U << CAN_TI2R_RTR_Pos)
#define CAN_TI2R_RTR CAN_TI2R_RTR_Msk
#define CAN_TI2R_IDE_Pos (2U)
#define CAN_TI2R_IDE_Msk (0x1U << CAN_TI2R_IDE_Pos)
#define CAN_TI2R_IDE CAN_TI2R_IDE_Msk
#define CAN_TI2R_EXID_Pos (3U)
#define CAN_TI2R_EXID_Msk (0x3FFFFU << CAN_TI2R_EXID_Pos)
#define CAN_TI2R_EXID CAN_TI2R_EXID_Msk
#define CAN_TI2R_STID_Pos (21U)
#define CAN_TI2R_STID_Msk (0x7FFU << CAN_TI2R_STID_Pos)
#define CAN_TI2R_STID CAN_TI2R_STID_Msk


#define CAN_TDT2R_DLC_Pos (0U)
#define CAN_TDT2R_DLC_Msk (0xFU << CAN_TDT2R_DLC_Pos)
#define CAN_TDT2R_DLC CAN_TDT2R_DLC_Msk
#define CAN_TDT2R_TGT_Pos (8U)
#define CAN_TDT2R_TGT_Msk (0x1U << CAN_TDT2R_TGT_Pos)
#define CAN_TDT2R_TGT CAN_TDT2R_TGT_Msk
#define CAN_TDT2R_TIME_Pos (16U)
#define CAN_TDT2R_TIME_Msk (0xFFFFU << CAN_TDT2R_TIME_Pos)
#define CAN_TDT2R_TIME CAN_TDT2R_TIME_Msk


#define CAN_TDL2R_DATA0_Pos (0U)
#define CAN_TDL2R_DATA0_Msk (0xFFU << CAN_TDL2R_DATA0_Pos)
#define CAN_TDL2R_DATA0 CAN_TDL2R_DATA0_Msk
#define CAN_TDL2R_DATA1_Pos (8U)
#define CAN_TDL2R_DATA1_Msk (0xFFU << CAN_TDL2R_DATA1_Pos)
#define CAN_TDL2R_DATA1 CAN_TDL2R_DATA1_Msk
#define CAN_TDL2R_DATA2_Pos (16U)
#define CAN_TDL2R_DATA2_Msk (0xFFU << CAN_TDL2R_DATA2_Pos)
#define CAN_TDL2R_DATA2 CAN_TDL2R_DATA2_Msk
#define CAN_TDL2R_DATA3_Pos (24U)
#define CAN_TDL2R_DATA3_Msk (0xFFU << CAN_TDL2R_DATA3_Pos)
#define CAN_TDL2R_DATA3 CAN_TDL2R_DATA3_Msk


#define CAN_TDH2R_DATA4_Pos (0U)
#define CAN_TDH2R_DATA4_Msk (0xFFU << CAN_TDH2R_DATA4_Pos)
#define CAN_TDH2R_DATA4 CAN_TDH2R_DATA4_Msk
#define CAN_TDH2R_DATA5_Pos (8U)
#define CAN_TDH2R_DATA5_Msk (0xFFU << CAN_TDH2R_DATA5_Pos)
#define CAN_TDH2R_DATA5 CAN_TDH2R_DATA5_Msk
#define CAN_TDH2R_DATA6_Pos (16U)
#define CAN_TDH2R_DATA6_Msk (0xFFU << CAN_TDH2R_DATA6_Pos)
#define CAN_TDH2R_DATA6 CAN_TDH2R_DATA6_Msk
#define CAN_TDH2R_DATA7_Pos (24U)
#define CAN_TDH2R_DATA7_Msk (0xFFU << CAN_TDH2R_DATA7_Pos)
#define CAN_TDH2R_DATA7 CAN_TDH2R_DATA7_Msk


#define CAN_RI0R_RTR_Pos (1U)
#define CAN_RI0R_RTR_Msk (0x1U << CAN_RI0R_RTR_Pos)
#define CAN_RI0R_RTR CAN_RI0R_RTR_Msk
#define CAN_RI0R_IDE_Pos (2U)
#define CAN_RI0R_IDE_Msk (0x1U << CAN_RI0R_IDE_Pos)
#define CAN_RI0R_IDE CAN_RI0R_IDE_Msk
#define CAN_RI0R_EXID_Pos (3U)
#define CAN_RI0R_EXID_Msk (0x3FFFFU << CAN_RI0R_EXID_Pos)
#define CAN_RI0R_EXID CAN_RI0R_EXID_Msk
#define CAN_RI0R_STID_Pos (21U)
#define CAN_RI0R_STID_Msk (0x7FFU << CAN_RI0R_STID_Pos)
#define CAN_RI0R_STID CAN_RI0R_STID_Msk


#define CAN_RDT0R_DLC_Pos (0U)
#define CAN_RDT0R_DLC_Msk (0xFU << CAN_RDT0R_DLC_Pos)
#define CAN_RDT0R_DLC CAN_RDT0R_DLC_Msk
#define CAN_RDT0R_FMI_Pos (8U)
#define CAN_RDT0R_FMI_Msk (0xFFU << CAN_RDT0R_FMI_Pos)
#define CAN_RDT0R_FMI CAN_RDT0R_FMI_Msk
#define CAN_RDT0R_TIME_Pos (16U)
#define CAN_RDT0R_TIME_Msk (0xFFFFU << CAN_RDT0R_TIME_Pos)
#define CAN_RDT0R_TIME CAN_RDT0R_TIME_Msk


#define CAN_RDL0R_DATA0_Pos (0U)
#define CAN_RDL0R_DATA0_Msk (0xFFU << CAN_RDL0R_DATA0_Pos)
#define CAN_RDL0R_DATA0 CAN_RDL0R_DATA0_Msk
#define CAN_RDL0R_DATA1_Pos (8U)
#define CAN_RDL0R_DATA1_Msk (0xFFU << CAN_RDL0R_DATA1_Pos)
#define CAN_RDL0R_DATA1 CAN_RDL0R_DATA1_Msk
#define CAN_RDL0R_DATA2_Pos (16U)
#define CAN_RDL0R_DATA2_Msk (0xFFU << CAN_RDL0R_DATA2_Pos)
#define CAN_RDL0R_DATA2 CAN_RDL0R_DATA2_Msk
#define CAN_RDL0R_DATA3_Pos (24U)
#define CAN_RDL0R_DATA3_Msk (0xFFU << CAN_RDL0R_DATA3_Pos)
#define CAN_RDL0R_DATA3 CAN_RDL0R_DATA3_Msk


#define CAN_RDH0R_DATA4_Pos (0U)
#define CAN_RDH0R_DATA4_Msk (0xFFU << CAN_RDH0R_DATA4_Pos)
#define CAN_RDH0R_DATA4 CAN_RDH0R_DATA4_Msk
#define CAN_RDH0R_DATA5_Pos (8U)
#define CAN_RDH0R_DATA5_Msk (0xFFU << CAN_RDH0R_DATA5_Pos)
#define CAN_RDH0R_DATA5 CAN_RDH0R_DATA5_Msk
#define CAN_RDH0R_DATA6_Pos (16U)
#define CAN_RDH0R_DATA6_Msk (0xFFU << CAN_RDH0R_DATA6_Pos)
#define CAN_RDH0R_DATA6 CAN_RDH0R_DATA6_Msk
#define CAN_RDH0R_DATA7_Pos (24U)
#define CAN_RDH0R_DATA7_Msk (0xFFU << CAN_RDH0R_DATA7_Pos)
#define CAN_RDH0R_DATA7 CAN_RDH0R_DATA7_Msk


#define CAN_RI1R_RTR_Pos (1U)
#define CAN_RI1R_RTR_Msk (0x1U << CAN_RI1R_RTR_Pos)
#define CAN_RI1R_RTR CAN_RI1R_RTR_Msk
#define CAN_RI1R_IDE_Pos (2U)
#define CAN_RI1R_IDE_Msk (0x1U << CAN_RI1R_IDE_Pos)
#define CAN_RI1R_IDE CAN_RI1R_IDE_Msk
#define CAN_RI1R_EXID_Pos (3U)
#define CAN_RI1R_EXID_Msk (0x3FFFFU << CAN_RI1R_EXID_Pos)
#define CAN_RI1R_EXID CAN_RI1R_EXID_Msk
#define CAN_RI1R_STID_Pos (21U)
#define CAN_RI1R_STID_Msk (0x7FFU << CAN_RI1R_STID_Pos)
#define CAN_RI1R_STID CAN_RI1R_STID_Msk


#define CAN_RDT1R_DLC_Pos (0U)
#define CAN_RDT1R_DLC_Msk (0xFU << CAN_RDT1R_DLC_Pos)
#define CAN_RDT1R_DLC CAN_RDT1R_DLC_Msk
#define CAN_RDT1R_FMI_Pos (8U)
#define CAN_RDT1R_FMI_Msk (0xFFU << CAN_RDT1R_FMI_Pos)
#define CAN_RDT1R_FMI CAN_RDT1R_FMI_Msk
#define CAN_RDT1R_TIME_Pos (16U)
#define CAN_RDT1R_TIME_Msk (0xFFFFU << CAN_RDT1R_TIME_Pos)
#define CAN_RDT1R_TIME CAN_RDT1R_TIME_Msk


#define CAN_RDL1R_DATA0_Pos (0U)
#define CAN_RDL1R_DATA0_Msk (0xFFU << CAN_RDL1R_DATA0_Pos)
#define CAN_RDL1R_DATA0 CAN_RDL1R_DATA0_Msk
#define CAN_RDL1R_DATA1_Pos (8U)
#define CAN_RDL1R_DATA1_Msk (0xFFU << CAN_RDL1R_DATA1_Pos)
#define CAN_RDL1R_DATA1 CAN_RDL1R_DATA1_Msk
#define CAN_RDL1R_DATA2_Pos (16U)
#define CAN_RDL1R_DATA2_Msk (0xFFU << CAN_RDL1R_DATA2_Pos)
#define CAN_RDL1R_DATA2 CAN_RDL1R_DATA2_Msk
#define CAN_RDL1R_DATA3_Pos (24U)
#define CAN_RDL1R_DATA3_Msk (0xFFU << CAN_RDL1R_DATA3_Pos)
#define CAN_RDL1R_DATA3 CAN_RDL1R_DATA3_Msk


#define CAN_RDH1R_DATA4_Pos (0U)
#define CAN_RDH1R_DATA4_Msk (0xFFU << CAN_RDH1R_DATA4_Pos)
#define CAN_RDH1R_DATA4 CAN_RDH1R_DATA4_Msk
#define CAN_RDH1R_DATA5_Pos (8U)
#define CAN_RDH1R_DATA5_Msk (0xFFU << CAN_RDH1R_DATA5_Pos)
#define CAN_RDH1R_DATA5 CAN_RDH1R_DATA5_Msk
#define CAN_RDH1R_DATA6_Pos (16U)
#define CAN_RDH1R_DATA6_Msk (0xFFU << CAN_RDH1R_DATA6_Pos)
#define CAN_RDH1R_DATA6 CAN_RDH1R_DATA6_Msk
#define CAN_RDH1R_DATA7_Pos (24U)
#define CAN_RDH1R_DATA7_Msk (0xFFU << CAN_RDH1R_DATA7_Pos)
#define CAN_RDH1R_DATA7 CAN_RDH1R_DATA7_Msk



#define CAN_FMR_FINIT_Pos (0U)
#define CAN_FMR_FINIT_Msk (0x1U << CAN_FMR_FINIT_Pos)
#define CAN_FMR_FINIT CAN_FMR_FINIT_Msk


#define CAN_FM1R_FBM_Pos (0U)
#define CAN_FM1R_FBM_Msk (0x3FFFU << CAN_FM1R_FBM_Pos)
#define CAN_FM1R_FBM CAN_FM1R_FBM_Msk
#define CAN_FM1R_FBM0_Pos (0U)
#define CAN_FM1R_FBM0_Msk (0x1U << CAN_FM1R_FBM0_Pos)
#define CAN_FM1R_FBM0 CAN_FM1R_FBM0_Msk
#define CAN_FM1R_FBM1_Pos (1U)
#define CAN_FM1R_FBM1_Msk (0x1U << CAN_FM1R_FBM1_Pos)
#define CAN_FM1R_FBM1 CAN_FM1R_FBM1_Msk
#define CAN_FM1R_FBM2_Pos (2U)
#define CAN_FM1R_FBM2_Msk (0x1U << CAN_FM1R_FBM2_Pos)
#define CAN_FM1R_FBM2 CAN_FM1R_FBM2_Msk
#define CAN_FM1R_FBM3_Pos (3U)
#define CAN_FM1R_FBM3_Msk (0x1U << CAN_FM1R_FBM3_Pos)
#define CAN_FM1R_FBM3 CAN_FM1R_FBM3_Msk
#define CAN_FM1R_FBM4_Pos (4U)
#define CAN_FM1R_FBM4_Msk (0x1U << CAN_FM1R_FBM4_Pos)
#define CAN_FM1R_FBM4 CAN_FM1R_FBM4_Msk
#define CAN_FM1R_FBM5_Pos (5U)
#define CAN_FM1R_FBM5_Msk (0x1U << CAN_FM1R_FBM5_Pos)
#define CAN_FM1R_FBM5 CAN_FM1R_FBM5_Msk
#define CAN_FM1R_FBM6_Pos (6U)
#define CAN_FM1R_FBM6_Msk (0x1U << CAN_FM1R_FBM6_Pos)
#define CAN_FM1R_FBM6 CAN_FM1R_FBM6_Msk
#define CAN_FM1R_FBM7_Pos (7U)
#define CAN_FM1R_FBM7_Msk (0x1U << CAN_FM1R_FBM7_Pos)
#define CAN_FM1R_FBM7 CAN_FM1R_FBM7_Msk
#define CAN_FM1R_FBM8_Pos (8U)
#define CAN_FM1R_FBM8_Msk (0x1U << CAN_FM1R_FBM8_Pos)
#define CAN_FM1R_FBM8 CAN_FM1R_FBM8_Msk
#define CAN_FM1R_FBM9_Pos (9U)
#define CAN_FM1R_FBM9_Msk (0x1U << CAN_FM1R_FBM9_Pos)
#define CAN_FM1R_FBM9 CAN_FM1R_FBM9_Msk
#define CAN_FM1R_FBM10_Pos (10U)
#define CAN_FM1R_FBM10_Msk (0x1U << CAN_FM1R_FBM10_Pos)
#define CAN_FM1R_FBM10 CAN_FM1R_FBM10_Msk
#define CAN_FM1R_FBM11_Pos (11U)
#define CAN_FM1R_FBM11_Msk (0x1U << CAN_FM1R_FBM11_Pos)
#define CAN_FM1R_FBM11 CAN_FM1R_FBM11_Msk
#define CAN_FM1R_FBM12_Pos (12U)
#define CAN_FM1R_FBM12_Msk (0x1U << CAN_FM1R_FBM12_Pos)
#define CAN_FM1R_FBM12 CAN_FM1R_FBM12_Msk
#define CAN_FM1R_FBM13_Pos (13U)
#define CAN_FM1R_FBM13_Msk (0x1U << CAN_FM1R_FBM13_Pos)
#define CAN_FM1R_FBM13 CAN_FM1R_FBM13_Msk


#define CAN_FS1R_FSC_Pos (0U)
#define CAN_FS1R_FSC_Msk (0x3FFFU << CAN_FS1R_FSC_Pos)
#define CAN_FS1R_FSC CAN_FS1R_FSC_Msk
#define CAN_FS1R_FSC0_Pos (0U)
#define CAN_FS1R_FSC0_Msk (0x1U << CAN_FS1R_FSC0_Pos)
#define CAN_FS1R_FSC0 CAN_FS1R_FSC0_Msk
#define CAN_FS1R_FSC1_Pos (1U)
#define CAN_FS1R_FSC1_Msk (0x1U << CAN_FS1R_FSC1_Pos)
#define CAN_FS1R_FSC1 CAN_FS1R_FSC1_Msk
#define CAN_FS1R_FSC2_Pos (2U)
#define CAN_FS1R_FSC2_Msk (0x1U << CAN_FS1R_FSC2_Pos)
#define CAN_FS1R_FSC2 CAN_FS1R_FSC2_Msk
#define CAN_FS1R_FSC3_Pos (3U)
#define CAN_FS1R_FSC3_Msk (0x1U << CAN_FS1R_FSC3_Pos)
#define CAN_FS1R_FSC3 CAN_FS1R_FSC3_Msk
#define CAN_FS1R_FSC4_Pos (4U)
#define CAN_FS1R_FSC4_Msk (0x1U << CAN_FS1R_FSC4_Pos)
#define CAN_FS1R_FSC4 CAN_FS1R_FSC4_Msk
#define CAN_FS1R_FSC5_Pos (5U)
#define CAN_FS1R_FSC5_Msk (0x1U << CAN_FS1R_FSC5_Pos)
#define CAN_FS1R_FSC5 CAN_FS1R_FSC5_Msk
#define CAN_FS1R_FSC6_Pos (6U)
#define CAN_FS1R_FSC6_Msk (0x1U << CAN_FS1R_FSC6_Pos)
#define CAN_FS1R_FSC6 CAN_FS1R_FSC6_Msk
#define CAN_FS1R_FSC7_Pos (7U)
#define CAN_FS1R_FSC7_Msk (0x1U << CAN_FS1R_FSC7_Pos)
#define CAN_FS1R_FSC7 CAN_FS1R_FSC7_Msk
#define CAN_FS1R_FSC8_Pos (8U)
#define CAN_FS1R_FSC8_Msk (0x1U << CAN_FS1R_FSC8_Pos)
#define CAN_FS1R_FSC8 CAN_FS1R_FSC8_Msk
#define CAN_FS1R_FSC9_Pos (9U)
#define CAN_FS1R_FSC9_Msk (0x1U << CAN_FS1R_FSC9_Pos)
#define CAN_FS1R_FSC9 CAN_FS1R_FSC9_Msk
#define CAN_FS1R_FSC10_Pos (10U)
#define CAN_FS1R_FSC10_Msk (0x1U << CAN_FS1R_FSC10_Pos)
#define CAN_FS1R_FSC10 CAN_FS1R_FSC10_Msk
#define CAN_FS1R_FSC11_Pos (11U)
#define CAN_FS1R_FSC11_Msk (0x1U << CAN_FS1R_FSC11_Pos)
#define CAN_FS1R_FSC11 CAN_FS1R_FSC11_Msk
#define CAN_FS1R_FSC12_Pos (12U)
#define CAN_FS1R_FSC12_Msk (0x1U << CAN_FS1R_FSC12_Pos)
#define CAN_FS1R_FSC12 CAN_FS1R_FSC12_Msk
#define CAN_FS1R_FSC13_Pos (13U)
#define CAN_FS1R_FSC13_Msk (0x1U << CAN_FS1R_FSC13_Pos)
#define CAN_FS1R_FSC13 CAN_FS1R_FSC13_Msk


#define CAN_FFA1R_FFA_Pos (0U)
#define CAN_FFA1R_FFA_Msk (0x3FFFU << CAN_FFA1R_FFA_Pos)
#define CAN_FFA1R_FFA CAN_FFA1R_FFA_Msk
#define CAN_FFA1R_FFA0_Pos (0U)
#define CAN_FFA1R_FFA0_Msk (0x1U << CAN_FFA1R_FFA0_Pos)
#define CAN_FFA1R_FFA0 CAN_FFA1R_FFA0_Msk
#define CAN_FFA1R_FFA1_Pos (1U)
#define CAN_FFA1R_FFA1_Msk (0x1U << CAN_FFA1R_FFA1_Pos)
#define CAN_FFA1R_FFA1 CAN_FFA1R_FFA1_Msk
#define CAN_FFA1R_FFA2_Pos (2U)
#define CAN_FFA1R_FFA2_Msk (0x1U << CAN_FFA1R_FFA2_Pos)
#define CAN_FFA1R_FFA2 CAN_FFA1R_FFA2_Msk
#define CAN_FFA1R_FFA3_Pos (3U)
#define CAN_FFA1R_FFA3_Msk (0x1U << CAN_FFA1R_FFA3_Pos)
#define CAN_FFA1R_FFA3 CAN_FFA1R_FFA3_Msk
#define CAN_FFA1R_FFA4_Pos (4U)
#define CAN_FFA1R_FFA4_Msk (0x1U << CAN_FFA1R_FFA4_Pos)
#define CAN_FFA1R_FFA4 CAN_FFA1R_FFA4_Msk
#define CAN_FFA1R_FFA5_Pos (5U)
#define CAN_FFA1R_FFA5_Msk (0x1U << CAN_FFA1R_FFA5_Pos)
#define CAN_FFA1R_FFA5 CAN_FFA1R_FFA5_Msk
#define CAN_FFA1R_FFA6_Pos (6U)
#define CAN_FFA1R_FFA6_Msk (0x1U << CAN_FFA1R_FFA6_Pos)
#define CAN_FFA1R_FFA6 CAN_FFA1R_FFA6_Msk
#define CAN_FFA1R_FFA7_Pos (7U)
#define CAN_FFA1R_FFA7_Msk (0x1U << CAN_FFA1R_FFA7_Pos)
#define CAN_FFA1R_FFA7 CAN_FFA1R_FFA7_Msk
#define CAN_FFA1R_FFA8_Pos (8U)
#define CAN_FFA1R_FFA8_Msk (0x1U << CAN_FFA1R_FFA8_Pos)
#define CAN_FFA1R_FFA8 CAN_FFA1R_FFA8_Msk
#define CAN_FFA1R_FFA9_Pos (9U)
#define CAN_FFA1R_FFA9_Msk (0x1U << CAN_FFA1R_FFA9_Pos)
#define CAN_FFA1R_FFA9 CAN_FFA1R_FFA9_Msk
#define CAN_FFA1R_FFA10_Pos (10U)
#define CAN_FFA1R_FFA10_Msk (0x1U << CAN_FFA1R_FFA10_Pos)
#define CAN_FFA1R_FFA10 CAN_FFA1R_FFA10_Msk
#define CAN_FFA1R_FFA11_Pos (11U)
#define CAN_FFA1R_FFA11_Msk (0x1U << CAN_FFA1R_FFA11_Pos)
#define CAN_FFA1R_FFA11 CAN_FFA1R_FFA11_Msk
#define CAN_FFA1R_FFA12_Pos (12U)
#define CAN_FFA1R_FFA12_Msk (0x1U << CAN_FFA1R_FFA12_Pos)
#define CAN_FFA1R_FFA12 CAN_FFA1R_FFA12_Msk
#define CAN_FFA1R_FFA13_Pos (13U)
#define CAN_FFA1R_FFA13_Msk (0x1U << CAN_FFA1R_FFA13_Pos)
#define CAN_FFA1R_FFA13 CAN_FFA1R_FFA13_Msk


#define CAN_FA1R_FACT_Pos (0U)
#define CAN_FA1R_FACT_Msk (0x3FFFU << CAN_FA1R_FACT_Pos)
#define CAN_FA1R_FACT CAN_FA1R_FACT_Msk
#define CAN_FA1R_FACT0_Pos (0U)
#define CAN_FA1R_FACT0_Msk (0x1U << CAN_FA1R_FACT0_Pos)
#define CAN_FA1R_FACT0 CAN_FA1R_FACT0_Msk
#define CAN_FA1R_FACT1_Pos (1U)
#define CAN_FA1R_FACT1_Msk (0x1U << CAN_FA1R_FACT1_Pos)
#define CAN_FA1R_FACT1 CAN_FA1R_FACT1_Msk
#define CAN_FA1R_FACT2_Pos (2U)
#define CAN_FA1R_FACT2_Msk (0x1U << CAN_FA1R_FACT2_Pos)
#define CAN_FA1R_FACT2 CAN_FA1R_FACT2_Msk
#define CAN_FA1R_FACT3_Pos (3U)
#define CAN_FA1R_FACT3_Msk (0x1U << CAN_FA1R_FACT3_Pos)
#define CAN_FA1R_FACT3 CAN_FA1R_FACT3_Msk
#define CAN_FA1R_FACT4_Pos (4U)
#define CAN_FA1R_FACT4_Msk (0x1U << CAN_FA1R_FACT4_Pos)
#define CAN_FA1R_FACT4 CAN_FA1R_FACT4_Msk
#define CAN_FA1R_FACT5_Pos (5U)
#define CAN_FA1R_FACT5_Msk (0x1U << CAN_FA1R_FACT5_Pos)
#define CAN_FA1R_FACT5 CAN_FA1R_FACT5_Msk
#define CAN_FA1R_FACT6_Pos (6U)
#define CAN_FA1R_FACT6_Msk (0x1U << CAN_FA1R_FACT6_Pos)
#define CAN_FA1R_FACT6 CAN_FA1R_FACT6_Msk
#define CAN_FA1R_FACT7_Pos (7U)
#define CAN_FA1R_FACT7_Msk (0x1U << CAN_FA1R_FACT7_Pos)
#define CAN_FA1R_FACT7 CAN_FA1R_FACT7_Msk
#define CAN_FA1R_FACT8_Pos (8U)
#define CAN_FA1R_FACT8_Msk (0x1U << CAN_FA1R_FACT8_Pos)
#define CAN_FA1R_FACT8 CAN_FA1R_FACT8_Msk
#define CAN_FA1R_FACT9_Pos (9U)
#define CAN_FA1R_FACT9_Msk (0x1U << CAN_FA1R_FACT9_Pos)
#define CAN_FA1R_FACT9 CAN_FA1R_FACT9_Msk
#define CAN_FA1R_FACT10_Pos (10U)
#define CAN_FA1R_FACT10_Msk (0x1U << CAN_FA1R_FACT10_Pos)
#define CAN_FA1R_FACT10 CAN_FA1R_FACT10_Msk
#define CAN_FA1R_FACT11_Pos (11U)
#define CAN_FA1R_FACT11_Msk (0x1U << CAN_FA1R_FACT11_Pos)
#define CAN_FA1R_FACT11 CAN_FA1R_FACT11_Msk
#define CAN_FA1R_FACT12_Pos (12U)
#define CAN_FA1R_FACT12_Msk (0x1U << CAN_FA1R_FACT12_Pos)
#define CAN_FA1R_FACT12 CAN_FA1R_FACT12_Msk
#define CAN_FA1R_FACT13_Pos (13U)
#define CAN_FA1R_FACT13_Msk (0x1U << CAN_FA1R_FACT13_Pos)
#define CAN_FA1R_FACT13 CAN_FA1R_FACT13_Msk


#define CAN_F0R1_FB0_Pos (0U)
#define CAN_F0R1_FB0_Msk (0x1U << CAN_F0R1_FB0_Pos)
#define CAN_F0R1_FB0 CAN_F0R1_FB0_Msk
#define CAN_F0R1_FB1_Pos (1U)
#define CAN_F0R1_FB1_Msk (0x1U << CAN_F0R1_FB1_Pos)
#define CAN_F0R1_FB1 CAN_F0R1_FB1_Msk
#define CAN_F0R1_FB2_Pos (2U)
#define CAN_F0R1_FB2_Msk (0x1U << CAN_F0R1_FB2_Pos)
#define CAN_F0R1_FB2 CAN_F0R1_FB2_Msk
#define CAN_F0R1_FB3_Pos (3U)
#define CAN_F0R1_FB3_Msk (0x1U << CAN_F0R1_FB3_Pos)
#define CAN_F0R1_FB3 CAN_F0R1_FB3_Msk
#define CAN_F0R1_FB4_Pos (4U)
#define CAN_F0R1_FB4_Msk (0x1U << CAN_F0R1_FB4_Pos)
#define CAN_F0R1_FB4 CAN_F0R1_FB4_Msk
#define CAN_F0R1_FB5_Pos (5U)
#define CAN_F0R1_FB5_Msk (0x1U << CAN_F0R1_FB5_Pos)
#define CAN_F0R1_FB5 CAN_F0R1_FB5_Msk
#define CAN_F0R1_FB6_Pos (6U)
#define CAN_F0R1_FB6_Msk (0x1U << CAN_F0R1_FB6_Pos)
#define CAN_F0R1_FB6 CAN_F0R1_FB6_Msk
#define CAN_F0R1_FB7_Pos (7U)
#define CAN_F0R1_FB7_Msk (0x1U << CAN_F0R1_FB7_Pos)
#define CAN_F0R1_FB7 CAN_F0R1_FB7_Msk
#define CAN_F0R1_FB8_Pos (8U)
#define CAN_F0R1_FB8_Msk (0x1U << CAN_F0R1_FB8_Pos)
#define CAN_F0R1_FB8 CAN_F0R1_FB8_Msk
#define CAN_F0R1_FB9_Pos (9U)
#define CAN_F0R1_FB9_Msk (0x1U << CAN_F0R1_FB9_Pos)
#define CAN_F0R1_FB9 CAN_F0R1_FB9_Msk
#define CAN_F0R1_FB10_Pos (10U)
#define CAN_F0R1_FB10_Msk (0x1U << CAN_F0R1_FB10_Pos)
#define CAN_F0R1_FB10 CAN_F0R1_FB10_Msk
#define CAN_F0R1_FB11_Pos (11U)
#define CAN_F0R1_FB11_Msk (0x1U << CAN_F0R1_FB11_Pos)
#define CAN_F0R1_FB11 CAN_F0R1_FB11_Msk
#define CAN_F0R1_FB12_Pos (12U)
#define CAN_F0R1_FB12_Msk (0x1U << CAN_F0R1_FB12_Pos)
#define CAN_F0R1_FB12 CAN_F0R1_FB12_Msk
#define CAN_F0R1_FB13_Pos (13U)
#define CAN_F0R1_FB13_Msk (0x1U << CAN_F0R1_FB13_Pos)
#define CAN_F0R1_FB13 CAN_F0R1_FB13_Msk
#define CAN_F0R1_FB14_Pos (14U)
#define CAN_F0R1_FB14_Msk (0x1U << CAN_F0R1_FB14_Pos)
#define CAN_F0R1_FB14 CAN_F0R1_FB14_Msk
#define CAN_F0R1_FB15_Pos (15U)
#define CAN_F0R1_FB15_Msk (0x1U << CAN_F0R1_FB15_Pos)
#define CAN_F0R1_FB15 CAN_F0R1_FB15_Msk
#define CAN_F0R1_FB16_Pos (16U)
#define CAN_F0R1_FB16_Msk (0x1U << CAN_F0R1_FB16_Pos)
#define CAN_F0R1_FB16 CAN_F0R1_FB16_Msk
#define CAN_F0R1_FB17_Pos (17U)
#define CAN_F0R1_FB17_Msk (0x1U << CAN_F0R1_FB17_Pos)
#define CAN_F0R1_FB17 CAN_F0R1_FB17_Msk
#define CAN_F0R1_FB18_Pos (18U)
#define CAN_F0R1_FB18_Msk (0x1U << CAN_F0R1_FB18_Pos)
#define CAN_F0R1_FB18 CAN_F0R1_FB18_Msk
#define CAN_F0R1_FB19_Pos (19U)
#define CAN_F0R1_FB19_Msk (0x1U << CAN_F0R1_FB19_Pos)
#define CAN_F0R1_FB19 CAN_F0R1_FB19_Msk
#define CAN_F0R1_FB20_Pos (20U)
#define CAN_F0R1_FB20_Msk (0x1U << CAN_F0R1_FB20_Pos)
#define CAN_F0R1_FB20 CAN_F0R1_FB20_Msk
#define CAN_F0R1_FB21_Pos (21U)
#define CAN_F0R1_FB21_Msk (0x1U << CAN_F0R1_FB21_Pos)
#define CAN_F0R1_FB21 CAN_F0R1_FB21_Msk
#define CAN_F0R1_FB22_Pos (22U)
#define CAN_F0R1_FB22_Msk (0x1U << CAN_F0R1_FB22_Pos)
#define CAN_F0R1_FB22 CAN_F0R1_FB22_Msk
#define CAN_F0R1_FB23_Pos (23U)
#define CAN_F0R1_FB23_Msk (0x1U << CAN_F0R1_FB23_Pos)
#define CAN_F0R1_FB23 CAN_F0R1_FB23_Msk
#define CAN_F0R1_FB24_Pos (24U)
#define CAN_F0R1_FB24_Msk (0x1U << CAN_F0R1_FB24_Pos)
#define CAN_F0R1_FB24 CAN_F0R1_FB24_Msk
#define CAN_F0R1_FB25_Pos (25U)
#define CAN_F0R1_FB25_Msk (0x1U << CAN_F0R1_FB25_Pos)
#define CAN_F0R1_FB25 CAN_F0R1_FB25_Msk
#define CAN_F0R1_FB26_Pos (26U)
#define CAN_F0R1_FB26_Msk (0x1U << CAN_F0R1_FB26_Pos)
#define CAN_F0R1_FB26 CAN_F0R1_FB26_Msk
#define CAN_F0R1_FB27_Pos (27U)
#define CAN_F0R1_FB27_Msk (0x1U << CAN_F0R1_FB27_Pos)
#define CAN_F0R1_FB27 CAN_F0R1_FB27_Msk
#define CAN_F0R1_FB28_Pos (28U)
#define CAN_F0R1_FB28_Msk (0x1U << CAN_F0R1_FB28_Pos)
#define CAN_F0R1_FB28 CAN_F0R1_FB28_Msk
#define CAN_F0R1_FB29_Pos (29U)
#define CAN_F0R1_FB29_Msk (0x1U << CAN_F0R1_FB29_Pos)
#define CAN_F0R1_FB29 CAN_F0R1_FB29_Msk
#define CAN_F0R1_FB30_Pos (30U)
#define CAN_F0R1_FB30_Msk (0x1U << CAN_F0R1_FB30_Pos)
#define CAN_F0R1_FB30 CAN_F0R1_FB30_Msk
#define CAN_F0R1_FB31_Pos (31U)
#define CAN_F0R1_FB31_Msk (0x1U << CAN_F0R1_FB31_Pos)
#define CAN_F0R1_FB31 CAN_F0R1_FB31_Msk


#define CAN_F1R1_FB0_Pos (0U)
#define CAN_F1R1_FB0_Msk (0x1U << CAN_F1R1_FB0_Pos)
#define CAN_F1R1_FB0 CAN_F1R1_FB0_Msk
#define CAN_F1R1_FB1_Pos (1U)
#define CAN_F1R1_FB1_Msk (0x1U << CAN_F1R1_FB1_Pos)
#define CAN_F1R1_FB1 CAN_F1R1_FB1_Msk
#define CAN_F1R1_FB2_Pos (2U)
#define CAN_F1R1_FB2_Msk (0x1U << CAN_F1R1_FB2_Pos)
#define CAN_F1R1_FB2 CAN_F1R1_FB2_Msk
#define CAN_F1R1_FB3_Pos (3U)
#define CAN_F1R1_FB3_Msk (0x1U << CAN_F1R1_FB3_Pos)
#define CAN_F1R1_FB3 CAN_F1R1_FB3_Msk
#define CAN_F1R1_FB4_Pos (4U)
#define CAN_F1R1_FB4_Msk (0x1U << CAN_F1R1_FB4_Pos)
#define CAN_F1R1_FB4 CAN_F1R1_FB4_Msk
#define CAN_F1R1_FB5_Pos (5U)
#define CAN_F1R1_FB5_Msk (0x1U << CAN_F1R1_FB5_Pos)
#define CAN_F1R1_FB5 CAN_F1R1_FB5_Msk
#define CAN_F1R1_FB6_Pos (6U)
#define CAN_F1R1_FB6_Msk (0x1U << CAN_F1R1_FB6_Pos)
#define CAN_F1R1_FB6 CAN_F1R1_FB6_Msk
#define CAN_F1R1_FB7_Pos (7U)
#define CAN_F1R1_FB7_Msk (0x1U << CAN_F1R1_FB7_Pos)
#define CAN_F1R1_FB7 CAN_F1R1_FB7_Msk
#define CAN_F1R1_FB8_Pos (8U)
#define CAN_F1R1_FB8_Msk (0x1U << CAN_F1R1_FB8_Pos)
#define CAN_F1R1_FB8 CAN_F1R1_FB8_Msk
#define CAN_F1R1_FB9_Pos (9U)
#define CAN_F1R1_FB9_Msk (0x1U << CAN_F1R1_FB9_Pos)
#define CAN_F1R1_FB9 CAN_F1R1_FB9_Msk
#define CAN_F1R1_FB10_Pos (10U)
#define CAN_F1R1_FB10_Msk (0x1U << CAN_F1R1_FB10_Pos)
#define CAN_F1R1_FB10 CAN_F1R1_FB10_Msk
#define CAN_F1R1_FB11_Pos (11U)
#define CAN_F1R1_FB11_Msk (0x1U << CAN_F1R1_FB11_Pos)
#define CAN_F1R1_FB11 CAN_F1R1_FB11_Msk
#define CAN_F1R1_FB12_Pos (12U)
#define CAN_F1R1_FB12_Msk (0x1U << CAN_F1R1_FB12_Pos)
#define CAN_F1R1_FB12 CAN_F1R1_FB12_Msk
#define CAN_F1R1_FB13_Pos (13U)
#define CAN_F1R1_FB13_Msk (0x1U << CAN_F1R1_FB13_Pos)
#define CAN_F1R1_FB13 CAN_F1R1_FB13_Msk
#define CAN_F1R1_FB14_Pos (14U)
#define CAN_F1R1_FB14_Msk (0x1U << CAN_F1R1_FB14_Pos)
#define CAN_F1R1_FB14 CAN_F1R1_FB14_Msk
#define CAN_F1R1_FB15_Pos (15U)
#define CAN_F1R1_FB15_Msk (0x1U << CAN_F1R1_FB15_Pos)
#define CAN_F1R1_FB15 CAN_F1R1_FB15_Msk
#define CAN_F1R1_FB16_Pos (16U)
#define CAN_F1R1_FB16_Msk (0x1U << CAN_F1R1_FB16_Pos)
#define CAN_F1R1_FB16 CAN_F1R1_FB16_Msk
#define CAN_F1R1_FB17_Pos (17U)
#define CAN_F1R1_FB17_Msk (0x1U << CAN_F1R1_FB17_Pos)
#define CAN_F1R1_FB17 CAN_F1R1_FB17_Msk
#define CAN_F1R1_FB18_Pos (18U)
#define CAN_F1R1_FB18_Msk (0x1U << CAN_F1R1_FB18_Pos)
#define CAN_F1R1_FB18 CAN_F1R1_FB18_Msk
#define CAN_F1R1_FB19_Pos (19U)
#define CAN_F1R1_FB19_Msk (0x1U << CAN_F1R1_FB19_Pos)
#define CAN_F1R1_FB19 CAN_F1R1_FB19_Msk
#define CAN_F1R1_FB20_Pos (20U)
#define CAN_F1R1_FB20_Msk (0x1U << CAN_F1R1_FB20_Pos)
#define CAN_F1R1_FB20 CAN_F1R1_FB20_Msk
#define CAN_F1R1_FB21_Pos (21U)
#define CAN_F1R1_FB21_Msk (0x1U << CAN_F1R1_FB21_Pos)
#define CAN_F1R1_FB21 CAN_F1R1_FB21_Msk
#define CAN_F1R1_FB22_Pos (22U)
#define CAN_F1R1_FB22_Msk (0x1U << CAN_F1R1_FB22_Pos)
#define CAN_F1R1_FB22 CAN_F1R1_FB22_Msk
#define CAN_F1R1_FB23_Pos (23U)
#define CAN_F1R1_FB23_Msk (0x1U << CAN_F1R1_FB23_Pos)
#define CAN_F1R1_FB23 CAN_F1R1_FB23_Msk
#define CAN_F1R1_FB24_Pos (24U)
#define CAN_F1R1_FB24_Msk (0x1U << CAN_F1R1_FB24_Pos)
#define CAN_F1R1_FB24 CAN_F1R1_FB24_Msk
#define CAN_F1R1_FB25_Pos (25U)
#define CAN_F1R1_FB25_Msk (0x1U << CAN_F1R1_FB25_Pos)
#define CAN_F1R1_FB25 CAN_F1R1_FB25_Msk
#define CAN_F1R1_FB26_Pos (26U)
#define CAN_F1R1_FB26_Msk (0x1U << CAN_F1R1_FB26_Pos)
#define CAN_F1R1_FB26 CAN_F1R1_FB26_Msk
#define CAN_F1R1_FB27_Pos (27U)
#define CAN_F1R1_FB27_Msk (0x1U << CAN_F1R1_FB27_Pos)
#define CAN_F1R1_FB27 CAN_F1R1_FB27_Msk
#define CAN_F1R1_FB28_Pos (28U)
#define CAN_F1R1_FB28_Msk (0x1U << CAN_F1R1_FB28_Pos)
#define CAN_F1R1_FB28 CAN_F1R1_FB28_Msk
#define CAN_F1R1_FB29_Pos (29U)
#define CAN_F1R1_FB29_Msk (0x1U << CAN_F1R1_FB29_Pos)
#define CAN_F1R1_FB29 CAN_F1R1_FB29_Msk
#define CAN_F1R1_FB30_Pos (30U)
#define CAN_F1R1_FB30_Msk (0x1U << CAN_F1R1_FB30_Pos)
#define CAN_F1R1_FB30 CAN_F1R1_FB30_Msk
#define CAN_F1R1_FB31_Pos (31U)
#define CAN_F1R1_FB31_Msk (0x1U << CAN_F1R1_FB31_Pos)
#define CAN_F1R1_FB31 CAN_F1R1_FB31_Msk


#define CAN_F2R1_FB0_Pos (0U)
#define CAN_F2R1_FB0_Msk (0x1U << CAN_F2R1_FB0_Pos)
#define CAN_F2R1_FB0 CAN_F2R1_FB0_Msk
#define CAN_F2R1_FB1_Pos (1U)
#define CAN_F2R1_FB1_Msk (0x1U << CAN_F2R1_FB1_Pos)
#define CAN_F2R1_FB1 CAN_F2R1_FB1_Msk
#define CAN_F2R1_FB2_Pos (2U)
#define CAN_F2R1_FB2_Msk (0x1U << CAN_F2R1_FB2_Pos)
#define CAN_F2R1_FB2 CAN_F2R1_FB2_Msk
#define CAN_F2R1_FB3_Pos (3U)
#define CAN_F2R1_FB3_Msk (0x1U << CAN_F2R1_FB3_Pos)
#define CAN_F2R1_FB3 CAN_F2R1_FB3_Msk
#define CAN_F2R1_FB4_Pos (4U)
#define CAN_F2R1_FB4_Msk (0x1U << CAN_F2R1_FB4_Pos)
#define CAN_F2R1_FB4 CAN_F2R1_FB4_Msk
#define CAN_F2R1_FB5_Pos (5U)
#define CAN_F2R1_FB5_Msk (0x1U << CAN_F2R1_FB5_Pos)
#define CAN_F2R1_FB5 CAN_F2R1_FB5_Msk
#define CAN_F2R1_FB6_Pos (6U)
#define CAN_F2R1_FB6_Msk (0x1U << CAN_F2R1_FB6_Pos)
#define CAN_F2R1_FB6 CAN_F2R1_FB6_Msk
#define CAN_F2R1_FB7_Pos (7U)
#define CAN_F2R1_FB7_Msk (0x1U << CAN_F2R1_FB7_Pos)
#define CAN_F2R1_FB7 CAN_F2R1_FB7_Msk
#define CAN_F2R1_FB8_Pos (8U)
#define CAN_F2R1_FB8_Msk (0x1U << CAN_F2R1_FB8_Pos)
#define CAN_F2R1_FB8 CAN_F2R1_FB8_Msk
#define CAN_F2R1_FB9_Pos (9U)
#define CAN_F2R1_FB9_Msk (0x1U << CAN_F2R1_FB9_Pos)
#define CAN_F2R1_FB9 CAN_F2R1_FB9_Msk
#define CAN_F2R1_FB10_Pos (10U)
#define CAN_F2R1_FB10_Msk (0x1U << CAN_F2R1_FB10_Pos)
#define CAN_F2R1_FB10 CAN_F2R1_FB10_Msk
#define CAN_F2R1_FB11_Pos (11U)
#define CAN_F2R1_FB11_Msk (0x1U << CAN_F2R1_FB11_Pos)
#define CAN_F2R1_FB11 CAN_F2R1_FB11_Msk
#define CAN_F2R1_FB12_Pos (12U)
#define CAN_F2R1_FB12_Msk (0x1U << CAN_F2R1_FB12_Pos)
#define CAN_F2R1_FB12 CAN_F2R1_FB12_Msk
#define CAN_F2R1_FB13_Pos (13U)
#define CAN_F2R1_FB13_Msk (0x1U << CAN_F2R1_FB13_Pos)
#define CAN_F2R1_FB13 CAN_F2R1_FB13_Msk
#define CAN_F2R1_FB14_Pos (14U)
#define CAN_F2R1_FB14_Msk (0x1U << CAN_F2R1_FB14_Pos)
#define CAN_F2R1_FB14 CAN_F2R1_FB14_Msk
#define CAN_F2R1_FB15_Pos (15U)
#define CAN_F2R1_FB15_Msk (0x1U << CAN_F2R1_FB15_Pos)
#define CAN_F2R1_FB15 CAN_F2R1_FB15_Msk
#define CAN_F2R1_FB16_Pos (16U)
#define CAN_F2R1_FB16_Msk (0x1U << CAN_F2R1_FB16_Pos)
#define CAN_F2R1_FB16 CAN_F2R1_FB16_Msk
#define CAN_F2R1_FB17_Pos (17U)
#define CAN_F2R1_FB17_Msk (0x1U << CAN_F2R1_FB17_Pos)
#define CAN_F2R1_FB17 CAN_F2R1_FB17_Msk
#define CAN_F2R1_FB18_Pos (18U)
#define CAN_F2R1_FB18_Msk (0x1U << CAN_F2R1_FB18_Pos)
#define CAN_F2R1_FB18 CAN_F2R1_FB18_Msk
#define CAN_F2R1_FB19_Pos (19U)
#define CAN_F2R1_FB19_Msk (0x1U << CAN_F2R1_FB19_Pos)
#define CAN_F2R1_FB19 CAN_F2R1_FB19_Msk
#define CAN_F2R1_FB20_Pos (20U)
#define CAN_F2R1_FB20_Msk (0x1U << CAN_F2R1_FB20_Pos)
#define CAN_F2R1_FB20 CAN_F2R1_FB20_Msk
#define CAN_F2R1_FB21_Pos (21U)
#define CAN_F2R1_FB21_Msk (0x1U << CAN_F2R1_FB21_Pos)
#define CAN_F2R1_FB21 CAN_F2R1_FB21_Msk
#define CAN_F2R1_FB22_Pos (22U)
#define CAN_F2R1_FB22_Msk (0x1U << CAN_F2R1_FB22_Pos)
#define CAN_F2R1_FB22 CAN_F2R1_FB22_Msk
#define CAN_F2R1_FB23_Pos (23U)
#define CAN_F2R1_FB23_Msk (0x1U << CAN_F2R1_FB23_Pos)
#define CAN_F2R1_FB23 CAN_F2R1_FB23_Msk
#define CAN_F2R1_FB24_Pos (24U)
#define CAN_F2R1_FB24_Msk (0x1U << CAN_F2R1_FB24_Pos)
#define CAN_F2R1_FB24 CAN_F2R1_FB24_Msk
#define CAN_F2R1_FB25_Pos (25U)
#define CAN_F2R1_FB25_Msk (0x1U << CAN_F2R1_FB25_Pos)
#define CAN_F2R1_FB25 CAN_F2R1_FB25_Msk
#define CAN_F2R1_FB26_Pos (26U)
#define CAN_F2R1_FB26_Msk (0x1U << CAN_F2R1_FB26_Pos)
#define CAN_F2R1_FB26 CAN_F2R1_FB26_Msk
#define CAN_F2R1_FB27_Pos (27U)
#define CAN_F2R1_FB27_Msk (0x1U << CAN_F2R1_FB27_Pos)
#define CAN_F2R1_FB27 CAN_F2R1_FB27_Msk
#define CAN_F2R1_FB28_Pos (28U)
#define CAN_F2R1_FB28_Msk (0x1U << CAN_F2R1_FB28_Pos)
#define CAN_F2R1_FB28 CAN_F2R1_FB28_Msk
#define CAN_F2R1_FB29_Pos (29U)
#define CAN_F2R1_FB29_Msk (0x1U << CAN_F2R1_FB29_Pos)
#define CAN_F2R1_FB29 CAN_F2R1_FB29_Msk
#define CAN_F2R1_FB30_Pos (30U)
#define CAN_F2R1_FB30_Msk (0x1U << CAN_F2R1_FB30_Pos)
#define CAN_F2R1_FB30 CAN_F2R1_FB30_Msk
#define CAN_F2R1_FB31_Pos (31U)
#define CAN_F2R1_FB31_Msk (0x1U << CAN_F2R1_FB31_Pos)
#define CAN_F2R1_FB31 CAN_F2R1_FB31_Msk


#define CAN_F3R1_FB0_Pos (0U)
#define CAN_F3R1_FB0_Msk (0x1U << CAN_F3R1_FB0_Pos)
#define CAN_F3R1_FB0 CAN_F3R1_FB0_Msk
#define CAN_F3R1_FB1_Pos (1U)
#define CAN_F3R1_FB1_Msk (0x1U << CAN_F3R1_FB1_Pos)
#define CAN_F3R1_FB1 CAN_F3R1_FB1_Msk
#define CAN_F3R1_FB2_Pos (2U)
#define CAN_F3R1_FB2_Msk (0x1U << CAN_F3R1_FB2_Pos)
#define CAN_F3R1_FB2 CAN_F3R1_FB2_Msk
#define CAN_F3R1_FB3_Pos (3U)
#define CAN_F3R1_FB3_Msk (0x1U << CAN_F3R1_FB3_Pos)
#define CAN_F3R1_FB3 CAN_F3R1_FB3_Msk
#define CAN_F3R1_FB4_Pos (4U)
#define CAN_F3R1_FB4_Msk (0x1U << CAN_F3R1_FB4_Pos)
#define CAN_F3R1_FB4 CAN_F3R1_FB4_Msk
#define CAN_F3R1_FB5_Pos (5U)
#define CAN_F3R1_FB5_Msk (0x1U << CAN_F3R1_FB5_Pos)
#define CAN_F3R1_FB5 CAN_F3R1_FB5_Msk
#define CAN_F3R1_FB6_Pos (6U)
#define CAN_F3R1_FB6_Msk (0x1U << CAN_F3R1_FB6_Pos)
#define CAN_F3R1_FB6 CAN_F3R1_FB6_Msk
#define CAN_F3R1_FB7_Pos (7U)
#define CAN_F3R1_FB7_Msk (0x1U << CAN_F3R1_FB7_Pos)
#define CAN_F3R1_FB7 CAN_F3R1_FB7_Msk
#define CAN_F3R1_FB8_Pos (8U)
#define CAN_F3R1_FB8_Msk (0x1U << CAN_F3R1_FB8_Pos)
#define CAN_F3R1_FB8 CAN_F3R1_FB8_Msk
#define CAN_F3R1_FB9_Pos (9U)
#define CAN_F3R1_FB9_Msk (0x1U << CAN_F3R1_FB9_Pos)
#define CAN_F3R1_FB9 CAN_F3R1_FB9_Msk
#define CAN_F3R1_FB10_Pos (10U)
#define CAN_F3R1_FB10_Msk (0x1U << CAN_F3R1_FB10_Pos)
#define CAN_F3R1_FB10 CAN_F3R1_FB10_Msk
#define CAN_F3R1_FB11_Pos (11U)
#define CAN_F3R1_FB11_Msk (0x1U << CAN_F3R1_FB11_Pos)
#define CAN_F3R1_FB11 CAN_F3R1_FB11_Msk
#define CAN_F3R1_FB12_Pos (12U)
#define CAN_F3R1_FB12_Msk (0x1U << CAN_F3R1_FB12_Pos)
#define CAN_F3R1_FB12 CAN_F3R1_FB12_Msk
#define CAN_F3R1_FB13_Pos (13U)
#define CAN_F3R1_FB13_Msk (0x1U << CAN_F3R1_FB13_Pos)
#define CAN_F3R1_FB13 CAN_F3R1_FB13_Msk
#define CAN_F3R1_FB14_Pos (14U)
#define CAN_F3R1_FB14_Msk (0x1U << CAN_F3R1_FB14_Pos)
#define CAN_F3R1_FB14 CAN_F3R1_FB14_Msk
#define CAN_F3R1_FB15_Pos (15U)
#define CAN_F3R1_FB15_Msk (0x1U << CAN_F3R1_FB15_Pos)
#define CAN_F3R1_FB15 CAN_F3R1_FB15_Msk
#define CAN_F3R1_FB16_Pos (16U)
#define CAN_F3R1_FB16_Msk (0x1U << CAN_F3R1_FB16_Pos)
#define CAN_F3R1_FB16 CAN_F3R1_FB16_Msk
#define CAN_F3R1_FB17_Pos (17U)
#define CAN_F3R1_FB17_Msk (0x1U << CAN_F3R1_FB17_Pos)
#define CAN_F3R1_FB17 CAN_F3R1_FB17_Msk
#define CAN_F3R1_FB18_Pos (18U)
#define CAN_F3R1_FB18_Msk (0x1U << CAN_F3R1_FB18_Pos)
#define CAN_F3R1_FB18 CAN_F3R1_FB18_Msk
#define CAN_F3R1_FB19_Pos (19U)
#define CAN_F3R1_FB19_Msk (0x1U << CAN_F3R1_FB19_Pos)
#define CAN_F3R1_FB19 CAN_F3R1_FB19_Msk
#define CAN_F3R1_FB20_Pos (20U)
#define CAN_F3R1_FB20_Msk (0x1U << CAN_F3R1_FB20_Pos)
#define CAN_F3R1_FB20 CAN_F3R1_FB20_Msk
#define CAN_F3R1_FB21_Pos (21U)
#define CAN_F3R1_FB21_Msk (0x1U << CAN_F3R1_FB21_Pos)
#define CAN_F3R1_FB21 CAN_F3R1_FB21_Msk
#define CAN_F3R1_FB22_Pos (22U)
#define CAN_F3R1_FB22_Msk (0x1U << CAN_F3R1_FB22_Pos)
#define CAN_F3R1_FB22 CAN_F3R1_FB22_Msk
#define CAN_F3R1_FB23_Pos (23U)
#define CAN_F3R1_FB23_Msk (0x1U << CAN_F3R1_FB23_Pos)
#define CAN_F3R1_FB23 CAN_F3R1_FB23_Msk
#define CAN_F3R1_FB24_Pos (24U)
#define CAN_F3R1_FB24_Msk (0x1U << CAN_F3R1_FB24_Pos)
#define CAN_F3R1_FB24 CAN_F3R1_FB24_Msk
#define CAN_F3R1_FB25_Pos (25U)
#define CAN_F3R1_FB25_Msk (0x1U << CAN_F3R1_FB25_Pos)
#define CAN_F3R1_FB25 CAN_F3R1_FB25_Msk
#define CAN_F3R1_FB26_Pos (26U)
#define CAN_F3R1_FB26_Msk (0x1U << CAN_F3R1_FB26_Pos)
#define CAN_F3R1_FB26 CAN_F3R1_FB26_Msk
#define CAN_F3R1_FB27_Pos (27U)
#define CAN_F3R1_FB27_Msk (0x1U << CAN_F3R1_FB27_Pos)
#define CAN_F3R1_FB27 CAN_F3R1_FB27_Msk
#define CAN_F3R1_FB28_Pos (28U)
#define CAN_F3R1_FB28_Msk (0x1U << CAN_F3R1_FB28_Pos)
#define CAN_F3R1_FB28 CAN_F3R1_FB28_Msk
#define CAN_F3R1_FB29_Pos (29U)
#define CAN_F3R1_FB29_Msk (0x1U << CAN_F3R1_FB29_Pos)
#define CAN_F3R1_FB29 CAN_F3R1_FB29_Msk
#define CAN_F3R1_FB30_Pos (30U)
#define CAN_F3R1_FB30_Msk (0x1U << CAN_F3R1_FB30_Pos)
#define CAN_F3R1_FB30 CAN_F3R1_FB30_Msk
#define CAN_F3R1_FB31_Pos (31U)
#define CAN_F3R1_FB31_Msk (0x1U << CAN_F3R1_FB31_Pos)
#define CAN_F3R1_FB31 CAN_F3R1_FB31_Msk


#define CAN_F4R1_FB0_Pos (0U)
#define CAN_F4R1_FB0_Msk (0x1U << CAN_F4R1_FB0_Pos)
#define CAN_F4R1_FB0 CAN_F4R1_FB0_Msk
#define CAN_F4R1_FB1_Pos (1U)
#define CAN_F4R1_FB1_Msk (0x1U << CAN_F4R1_FB1_Pos)
#define CAN_F4R1_FB1 CAN_F4R1_FB1_Msk
#define CAN_F4R1_FB2_Pos (2U)
#define CAN_F4R1_FB2_Msk (0x1U << CAN_F4R1_FB2_Pos)
#define CAN_F4R1_FB2 CAN_F4R1_FB2_Msk
#define CAN_F4R1_FB3_Pos (3U)
#define CAN_F4R1_FB3_Msk (0x1U << CAN_F4R1_FB3_Pos)
#define CAN_F4R1_FB3 CAN_F4R1_FB3_Msk
#define CAN_F4R1_FB4_Pos (4U)
#define CAN_F4R1_FB4_Msk (0x1U << CAN_F4R1_FB4_Pos)
#define CAN_F4R1_FB4 CAN_F4R1_FB4_Msk
#define CAN_F4R1_FB5_Pos (5U)
#define CAN_F4R1_FB5_Msk (0x1U << CAN_F4R1_FB5_Pos)
#define CAN_F4R1_FB5 CAN_F4R1_FB5_Msk
#define CAN_F4R1_FB6_Pos (6U)
#define CAN_F4R1_FB6_Msk (0x1U << CAN_F4R1_FB6_Pos)
#define CAN_F4R1_FB6 CAN_F4R1_FB6_Msk
#define CAN_F4R1_FB7_Pos (7U)
#define CAN_F4R1_FB7_Msk (0x1U << CAN_F4R1_FB7_Pos)
#define CAN_F4R1_FB7 CAN_F4R1_FB7_Msk
#define CAN_F4R1_FB8_Pos (8U)
#define CAN_F4R1_FB8_Msk (0x1U << CAN_F4R1_FB8_Pos)
#define CAN_F4R1_FB8 CAN_F4R1_FB8_Msk
#define CAN_F4R1_FB9_Pos (9U)
#define CAN_F4R1_FB9_Msk (0x1U << CAN_F4R1_FB9_Pos)
#define CAN_F4R1_FB9 CAN_F4R1_FB9_Msk
#define CAN_F4R1_FB10_Pos (10U)
#define CAN_F4R1_FB10_Msk (0x1U << CAN_F4R1_FB10_Pos)
#define CAN_F4R1_FB10 CAN_F4R1_FB10_Msk
#define CAN_F4R1_FB11_Pos (11U)
#define CAN_F4R1_FB11_Msk (0x1U << CAN_F4R1_FB11_Pos)
#define CAN_F4R1_FB11 CAN_F4R1_FB11_Msk
#define CAN_F4R1_FB12_Pos (12U)
#define CAN_F4R1_FB12_Msk (0x1U << CAN_F4R1_FB12_Pos)
#define CAN_F4R1_FB12 CAN_F4R1_FB12_Msk
#define CAN_F4R1_FB13_Pos (13U)
#define CAN_F4R1_FB13_Msk (0x1U << CAN_F4R1_FB13_Pos)
#define CAN_F4R1_FB13 CAN_F4R1_FB13_Msk
#define CAN_F4R1_FB14_Pos (14U)
#define CAN_F4R1_FB14_Msk (0x1U << CAN_F4R1_FB14_Pos)
#define CAN_F4R1_FB14 CAN_F4R1_FB14_Msk
#define CAN_F4R1_FB15_Pos (15U)
#define CAN_F4R1_FB15_Msk (0x1U << CAN_F4R1_FB15_Pos)
#define CAN_F4R1_FB15 CAN_F4R1_FB15_Msk
#define CAN_F4R1_FB16_Pos (16U)
#define CAN_F4R1_FB16_Msk (0x1U << CAN_F4R1_FB16_Pos)
#define CAN_F4R1_FB16 CAN_F4R1_FB16_Msk
#define CAN_F4R1_FB17_Pos (17U)
#define CAN_F4R1_FB17_Msk (0x1U << CAN_F4R1_FB17_Pos)
#define CAN_F4R1_FB17 CAN_F4R1_FB17_Msk
#define CAN_F4R1_FB18_Pos (18U)
#define CAN_F4R1_FB18_Msk (0x1U << CAN_F4R1_FB18_Pos)
#define CAN_F4R1_FB18 CAN_F4R1_FB18_Msk
#define CAN_F4R1_FB19_Pos (19U)
#define CAN_F4R1_FB19_Msk (0x1U << CAN_F4R1_FB19_Pos)
#define CAN_F4R1_FB19 CAN_F4R1_FB19_Msk
#define CAN_F4R1_FB20_Pos (20U)
#define CAN_F4R1_FB20_Msk (0x1U << CAN_F4R1_FB20_Pos)
#define CAN_F4R1_FB20 CAN_F4R1_FB20_Msk
#define CAN_F4R1_FB21_Pos (21U)
#define CAN_F4R1_FB21_Msk (0x1U << CAN_F4R1_FB21_Pos)
#define CAN_F4R1_FB21 CAN_F4R1_FB21_Msk
#define CAN_F4R1_FB22_Pos (22U)
#define CAN_F4R1_FB22_Msk (0x1U << CAN_F4R1_FB22_Pos)
#define CAN_F4R1_FB22 CAN_F4R1_FB22_Msk
#define CAN_F4R1_FB23_Pos (23U)
#define CAN_F4R1_FB23_Msk (0x1U << CAN_F4R1_FB23_Pos)
#define CAN_F4R1_FB23 CAN_F4R1_FB23_Msk
#define CAN_F4R1_FB24_Pos (24U)
#define CAN_F4R1_FB24_Msk (0x1U << CAN_F4R1_FB24_Pos)
#define CAN_F4R1_FB24 CAN_F4R1_FB24_Msk
#define CAN_F4R1_FB25_Pos (25U)
#define CAN_F4R1_FB25_Msk (0x1U << CAN_F4R1_FB25_Pos)
#define CAN_F4R1_FB25 CAN_F4R1_FB25_Msk
#define CAN_F4R1_FB26_Pos (26U)
#define CAN_F4R1_FB26_Msk (0x1U << CAN_F4R1_FB26_Pos)
#define CAN_F4R1_FB26 CAN_F4R1_FB26_Msk
#define CAN_F4R1_FB27_Pos (27U)
#define CAN_F4R1_FB27_Msk (0x1U << CAN_F4R1_FB27_Pos)
#define CAN_F4R1_FB27 CAN_F4R1_FB27_Msk
#define CAN_F4R1_FB28_Pos (28U)
#define CAN_F4R1_FB28_Msk (0x1U << CAN_F4R1_FB28_Pos)
#define CAN_F4R1_FB28 CAN_F4R1_FB28_Msk
#define CAN_F4R1_FB29_Pos (29U)
#define CAN_F4R1_FB29_Msk (0x1U << CAN_F4R1_FB29_Pos)
#define CAN_F4R1_FB29 CAN_F4R1_FB29_Msk
#define CAN_F4R1_FB30_Pos (30U)
#define CAN_F4R1_FB30_Msk (0x1U << CAN_F4R1_FB30_Pos)
#define CAN_F4R1_FB30 CAN_F4R1_FB30_Msk
#define CAN_F4R1_FB31_Pos (31U)
#define CAN_F4R1_FB31_Msk (0x1U << CAN_F4R1_FB31_Pos)
#define CAN_F4R1_FB31 CAN_F4R1_FB31_Msk


#define CAN_F5R1_FB0_Pos (0U)
#define CAN_F5R1_FB0_Msk (0x1U << CAN_F5R1_FB0_Pos)
#define CAN_F5R1_FB0 CAN_F5R1_FB0_Msk
#define CAN_F5R1_FB1_Pos (1U)
#define CAN_F5R1_FB1_Msk (0x1U << CAN_F5R1_FB1_Pos)
#define CAN_F5R1_FB1 CAN_F5R1_FB1_Msk
#define CAN_F5R1_FB2_Pos (2U)
#define CAN_F5R1_FB2_Msk (0x1U << CAN_F5R1_FB2_Pos)
#define CAN_F5R1_FB2 CAN_F5R1_FB2_Msk
#define CAN_F5R1_FB3_Pos (3U)
#define CAN_F5R1_FB3_Msk (0x1U << CAN_F5R1_FB3_Pos)
#define CAN_F5R1_FB3 CAN_F5R1_FB3_Msk
#define CAN_F5R1_FB4_Pos (4U)
#define CAN_F5R1_FB4_Msk (0x1U << CAN_F5R1_FB4_Pos)
#define CAN_F5R1_FB4 CAN_F5R1_FB4_Msk
#define CAN_F5R1_FB5_Pos (5U)
#define CAN_F5R1_FB5_Msk (0x1U << CAN_F5R1_FB5_Pos)
#define CAN_F5R1_FB5 CAN_F5R1_FB5_Msk
#define CAN_F5R1_FB6_Pos (6U)
#define CAN_F5R1_FB6_Msk (0x1U << CAN_F5R1_FB6_Pos)
#define CAN_F5R1_FB6 CAN_F5R1_FB6_Msk
#define CAN_F5R1_FB7_Pos (7U)
#define CAN_F5R1_FB7_Msk (0x1U << CAN_F5R1_FB7_Pos)
#define CAN_F5R1_FB7 CAN_F5R1_FB7_Msk
#define CAN_F5R1_FB8_Pos (8U)
#define CAN_F5R1_FB8_Msk (0x1U << CAN_F5R1_FB8_Pos)
#define CAN_F5R1_FB8 CAN_F5R1_FB8_Msk
#define CAN_F5R1_FB9_Pos (9U)
#define CAN_F5R1_FB9_Msk (0x1U << CAN_F5R1_FB9_Pos)
#define CAN_F5R1_FB9 CAN_F5R1_FB9_Msk
#define CAN_F5R1_FB10_Pos (10U)
#define CAN_F5R1_FB10_Msk (0x1U << CAN_F5R1_FB10_Pos)
#define CAN_F5R1_FB10 CAN_F5R1_FB10_Msk
#define CAN_F5R1_FB11_Pos (11U)
#define CAN_F5R1_FB11_Msk (0x1U << CAN_F5R1_FB11_Pos)
#define CAN_F5R1_FB11 CAN_F5R1_FB11_Msk
#define CAN_F5R1_FB12_Pos (12U)
#define CAN_F5R1_FB12_Msk (0x1U << CAN_F5R1_FB12_Pos)
#define CAN_F5R1_FB12 CAN_F5R1_FB12_Msk
#define CAN_F5R1_FB13_Pos (13U)
#define CAN_F5R1_FB13_Msk (0x1U << CAN_F5R1_FB13_Pos)
#define CAN_F5R1_FB13 CAN_F5R1_FB13_Msk
#define CAN_F5R1_FB14_Pos (14U)
#define CAN_F5R1_FB14_Msk (0x1U << CAN_F5R1_FB14_Pos)
#define CAN_F5R1_FB14 CAN_F5R1_FB14_Msk
#define CAN_F5R1_FB15_Pos (15U)
#define CAN_F5R1_FB15_Msk (0x1U << CAN_F5R1_FB15_Pos)
#define CAN_F5R1_FB15 CAN_F5R1_FB15_Msk
#define CAN_F5R1_FB16_Pos (16U)
#define CAN_F5R1_FB16_Msk (0x1U << CAN_F5R1_FB16_Pos)
#define CAN_F5R1_FB16 CAN_F5R1_FB16_Msk
#define CAN_F5R1_FB17_Pos (17U)
#define CAN_F5R1_FB17_Msk (0x1U << CAN_F5R1_FB17_Pos)
#define CAN_F5R1_FB17 CAN_F5R1_FB17_Msk
#define CAN_F5R1_FB18_Pos (18U)
#define CAN_F5R1_FB18_Msk (0x1U << CAN_F5R1_FB18_Pos)
#define CAN_F5R1_FB18 CAN_F5R1_FB18_Msk
#define CAN_F5R1_FB19_Pos (19U)
#define CAN_F5R1_FB19_Msk (0x1U << CAN_F5R1_FB19_Pos)
#define CAN_F5R1_FB19 CAN_F5R1_FB19_Msk
#define CAN_F5R1_FB20_Pos (20U)
#define CAN_F5R1_FB20_Msk (0x1U << CAN_F5R1_FB20_Pos)
#define CAN_F5R1_FB20 CAN_F5R1_FB20_Msk
#define CAN_F5R1_FB21_Pos (21U)
#define CAN_F5R1_FB21_Msk (0x1U << CAN_F5R1_FB21_Pos)
#define CAN_F5R1_FB21 CAN_F5R1_FB21_Msk
#define CAN_F5R1_FB22_Pos (22U)
#define CAN_F5R1_FB22_Msk (0x1U << CAN_F5R1_FB22_Pos)
#define CAN_F5R1_FB22 CAN_F5R1_FB22_Msk
#define CAN_F5R1_FB23_Pos (23U)
#define CAN_F5R1_FB23_Msk (0x1U << CAN_F5R1_FB23_Pos)
#define CAN_F5R1_FB23 CAN_F5R1_FB23_Msk
#define CAN_F5R1_FB24_Pos (24U)
#define CAN_F5R1_FB24_Msk (0x1U << CAN_F5R1_FB24_Pos)
#define CAN_F5R1_FB24 CAN_F5R1_FB24_Msk
#define CAN_F5R1_FB25_Pos (25U)
#define CAN_F5R1_FB25_Msk (0x1U << CAN_F5R1_FB25_Pos)
#define CAN_F5R1_FB25 CAN_F5R1_FB25_Msk
#define CAN_F5R1_FB26_Pos (26U)
#define CAN_F5R1_FB26_Msk (0x1U << CAN_F5R1_FB26_Pos)
#define CAN_F5R1_FB26 CAN_F5R1_FB26_Msk
#define CAN_F5R1_FB27_Pos (27U)
#define CAN_F5R1_FB27_Msk (0x1U << CAN_F5R1_FB27_Pos)
#define CAN_F5R1_FB27 CAN_F5R1_FB27_Msk
#define CAN_F5R1_FB28_Pos (28U)
#define CAN_F5R1_FB28_Msk (0x1U << CAN_F5R1_FB28_Pos)
#define CAN_F5R1_FB28 CAN_F5R1_FB28_Msk
#define CAN_F5R1_FB29_Pos (29U)
#define CAN_F5R1_FB29_Msk (0x1U << CAN_F5R1_FB29_Pos)
#define CAN_F5R1_FB29 CAN_F5R1_FB29_Msk
#define CAN_F5R1_FB30_Pos (30U)
#define CAN_F5R1_FB30_Msk (0x1U << CAN_F5R1_FB30_Pos)
#define CAN_F5R1_FB30 CAN_F5R1_FB30_Msk
#define CAN_F5R1_FB31_Pos (31U)
#define CAN_F5R1_FB31_Msk (0x1U << CAN_F5R1_FB31_Pos)
#define CAN_F5R1_FB31 CAN_F5R1_FB31_Msk


#define CAN_F6R1_FB0_Pos (0U)
#define CAN_F6R1_FB0_Msk (0x1U << CAN_F6R1_FB0_Pos)
#define CAN_F6R1_FB0 CAN_F6R1_FB0_Msk
#define CAN_F6R1_FB1_Pos (1U)
#define CAN_F6R1_FB1_Msk (0x1U << CAN_F6R1_FB1_Pos)
#define CAN_F6R1_FB1 CAN_F6R1_FB1_Msk
#define CAN_F6R1_FB2_Pos (2U)
#define CAN_F6R1_FB2_Msk (0x1U << CAN_F6R1_FB2_Pos)
#define CAN_F6R1_FB2 CAN_F6R1_FB2_Msk
#define CAN_F6R1_FB3_Pos (3U)
#define CAN_F6R1_FB3_Msk (0x1U << CAN_F6R1_FB3_Pos)
#define CAN_F6R1_FB3 CAN_F6R1_FB3_Msk
#define CAN_F6R1_FB4_Pos (4U)
#define CAN_F6R1_FB4_Msk (0x1U << CAN_F6R1_FB4_Pos)
#define CAN_F6R1_FB4 CAN_F6R1_FB4_Msk
#define CAN_F6R1_FB5_Pos (5U)
#define CAN_F6R1_FB5_Msk (0x1U << CAN_F6R1_FB5_Pos)
#define CAN_F6R1_FB5 CAN_F6R1_FB5_Msk
#define CAN_F6R1_FB6_Pos (6U)
#define CAN_F6R1_FB6_Msk (0x1U << CAN_F6R1_FB6_Pos)
#define CAN_F6R1_FB6 CAN_F6R1_FB6_Msk
#define CAN_F6R1_FB7_Pos (7U)
#define CAN_F6R1_FB7_Msk (0x1U << CAN_F6R1_FB7_Pos)
#define CAN_F6R1_FB7 CAN_F6R1_FB7_Msk
#define CAN_F6R1_FB8_Pos (8U)
#define CAN_F6R1_FB8_Msk (0x1U << CAN_F6R1_FB8_Pos)
#define CAN_F6R1_FB8 CAN_F6R1_FB8_Msk
#define CAN_F6R1_FB9_Pos (9U)
#define CAN_F6R1_FB9_Msk (0x1U << CAN_F6R1_FB9_Pos)
#define CAN_F6R1_FB9 CAN_F6R1_FB9_Msk
#define CAN_F6R1_FB10_Pos (10U)
#define CAN_F6R1_FB10_Msk (0x1U << CAN_F6R1_FB10_Pos)
#define CAN_F6R1_FB10 CAN_F6R1_FB10_Msk
#define CAN_F6R1_FB11_Pos (11U)
#define CAN_F6R1_FB11_Msk (0x1U << CAN_F6R1_FB11_Pos)
#define CAN_F6R1_FB11 CAN_F6R1_FB11_Msk
#define CAN_F6R1_FB12_Pos (12U)
#define CAN_F6R1_FB12_Msk (0x1U << CAN_F6R1_FB12_Pos)
#define CAN_F6R1_FB12 CAN_F6R1_FB12_Msk
#define CAN_F6R1_FB13_Pos (13U)
#define CAN_F6R1_FB13_Msk (0x1U << CAN_F6R1_FB13_Pos)
#define CAN_F6R1_FB13 CAN_F6R1_FB13_Msk
#define CAN_F6R1_FB14_Pos (14U)
#define CAN_F6R1_FB14_Msk (0x1U << CAN_F6R1_FB14_Pos)
#define CAN_F6R1_FB14 CAN_F6R1_FB14_Msk
#define CAN_F6R1_FB15_Pos (15U)
#define CAN_F6R1_FB15_Msk (0x1U << CAN_F6R1_FB15_Pos)
#define CAN_F6R1_FB15 CAN_F6R1_FB15_Msk
#define CAN_F6R1_FB16_Pos (16U)
#define CAN_F6R1_FB16_Msk (0x1U << CAN_F6R1_FB16_Pos)
#define CAN_F6R1_FB16 CAN_F6R1_FB16_Msk
#define CAN_F6R1_FB17_Pos (17U)
#define CAN_F6R1_FB17_Msk (0x1U << CAN_F6R1_FB17_Pos)
#define CAN_F6R1_FB17 CAN_F6R1_FB17_Msk
#define CAN_F6R1_FB18_Pos (18U)
#define CAN_F6R1_FB18_Msk (0x1U << CAN_F6R1_FB18_Pos)
#define CAN_F6R1_FB18 CAN_F6R1_FB18_Msk
#define CAN_F6R1_FB19_Pos (19U)
#define CAN_F6R1_FB19_Msk (0x1U << CAN_F6R1_FB19_Pos)
#define CAN_F6R1_FB19 CAN_F6R1_FB19_Msk
#define CAN_F6R1_FB20_Pos (20U)
#define CAN_F6R1_FB20_Msk (0x1U << CAN_F6R1_FB20_Pos)
#define CAN_F6R1_FB20 CAN_F6R1_FB20_Msk
#define CAN_F6R1_FB21_Pos (21U)
#define CAN_F6R1_FB21_Msk (0x1U << CAN_F6R1_FB21_Pos)
#define CAN_F6R1_FB21 CAN_F6R1_FB21_Msk
#define CAN_F6R1_FB22_Pos (22U)
#define CAN_F6R1_FB22_Msk (0x1U << CAN_F6R1_FB22_Pos)
#define CAN_F6R1_FB22 CAN_F6R1_FB22_Msk
#define CAN_F6R1_FB23_Pos (23U)
#define CAN_F6R1_FB23_Msk (0x1U << CAN_F6R1_FB23_Pos)
#define CAN_F6R1_FB23 CAN_F6R1_FB23_Msk
#define CAN_F6R1_FB24_Pos (24U)
#define CAN_F6R1_FB24_Msk (0x1U << CAN_F6R1_FB24_Pos)
#define CAN_F6R1_FB24 CAN_F6R1_FB24_Msk
#define CAN_F6R1_FB25_Pos (25U)
#define CAN_F6R1_FB25_Msk (0x1U << CAN_F6R1_FB25_Pos)
#define CAN_F6R1_FB25 CAN_F6R1_FB25_Msk
#define CAN_F6R1_FB26_Pos (26U)
#define CAN_F6R1_FB26_Msk (0x1U << CAN_F6R1_FB26_Pos)
#define CAN_F6R1_FB26 CAN_F6R1_FB26_Msk
#define CAN_F6R1_FB27_Pos (27U)
#define CAN_F6R1_FB27_Msk (0x1U << CAN_F6R1_FB27_Pos)
#define CAN_F6R1_FB27 CAN_F6R1_FB27_Msk
#define CAN_F6R1_FB28_Pos (28U)
#define CAN_F6R1_FB28_Msk (0x1U << CAN_F6R1_FB28_Pos)
#define CAN_F6R1_FB28 CAN_F6R1_FB28_Msk
#define CAN_F6R1_FB29_Pos (29U)
#define CAN_F6R1_FB29_Msk (0x1U << CAN_F6R1_FB29_Pos)
#define CAN_F6R1_FB29 CAN_F6R1_FB29_Msk
#define CAN_F6R1_FB30_Pos (30U)
#define CAN_F6R1_FB30_Msk (0x1U << CAN_F6R1_FB30_Pos)
#define CAN_F6R1_FB30 CAN_F6R1_FB30_Msk
#define CAN_F6R1_FB31_Pos (31U)
#define CAN_F6R1_FB31_Msk (0x1U << CAN_F6R1_FB31_Pos)
#define CAN_F6R1_FB31 CAN_F6R1_FB31_Msk


#define CAN_F7R1_FB0_Pos (0U)
#define CAN_F7R1_FB0_Msk (0x1U << CAN_F7R1_FB0_Pos)
#define CAN_F7R1_FB0 CAN_F7R1_FB0_Msk
#define CAN_F7R1_FB1_Pos (1U)
#define CAN_F7R1_FB1_Msk (0x1U << CAN_F7R1_FB1_Pos)
#define CAN_F7R1_FB1 CAN_F7R1_FB1_Msk
#define CAN_F7R1_FB2_Pos (2U)
#define CAN_F7R1_FB2_Msk (0x1U << CAN_F7R1_FB2_Pos)
#define CAN_F7R1_FB2 CAN_F7R1_FB2_Msk
#define CAN_F7R1_FB3_Pos (3U)
#define CAN_F7R1_FB3_Msk (0x1U << CAN_F7R1_FB3_Pos)
#define CAN_F7R1_FB3 CAN_F7R1_FB3_Msk
#define CAN_F7R1_FB4_Pos (4U)
#define CAN_F7R1_FB4_Msk (0x1U << CAN_F7R1_FB4_Pos)
#define CAN_F7R1_FB4 CAN_F7R1_FB4_Msk
#define CAN_F7R1_FB5_Pos (5U)
#define CAN_F7R1_FB5_Msk (0x1U << CAN_F7R1_FB5_Pos)
#define CAN_F7R1_FB5 CAN_F7R1_FB5_Msk
#define CAN_F7R1_FB6_Pos (6U)
#define CAN_F7R1_FB6_Msk (0x1U << CAN_F7R1_FB6_Pos)
#define CAN_F7R1_FB6 CAN_F7R1_FB6_Msk
#define CAN_F7R1_FB7_Pos (7U)
#define CAN_F7R1_FB7_Msk (0x1U << CAN_F7R1_FB7_Pos)
#define CAN_F7R1_FB7 CAN_F7R1_FB7_Msk
#define CAN_F7R1_FB8_Pos (8U)
#define CAN_F7R1_FB8_Msk (0x1U << CAN_F7R1_FB8_Pos)
#define CAN_F7R1_FB8 CAN_F7R1_FB8_Msk
#define CAN_F7R1_FB9_Pos (9U)
#define CAN_F7R1_FB9_Msk (0x1U << CAN_F7R1_FB9_Pos)
#define CAN_F7R1_FB9 CAN_F7R1_FB9_Msk
#define CAN_F7R1_FB10_Pos (10U)
#define CAN_F7R1_FB10_Msk (0x1U << CAN_F7R1_FB10_Pos)
#define CAN_F7R1_FB10 CAN_F7R1_FB10_Msk
#define CAN_F7R1_FB11_Pos (11U)
#define CAN_F7R1_FB11_Msk (0x1U << CAN_F7R1_FB11_Pos)
#define CAN_F7R1_FB11 CAN_F7R1_FB11_Msk
#define CAN_F7R1_FB12_Pos (12U)
#define CAN_F7R1_FB12_Msk (0x1U << CAN_F7R1_FB12_Pos)
#define CAN_F7R1_FB12 CAN_F7R1_FB12_Msk
#define CAN_F7R1_FB13_Pos (13U)
#define CAN_F7R1_FB13_Msk (0x1U << CAN_F7R1_FB13_Pos)
#define CAN_F7R1_FB13 CAN_F7R1_FB13_Msk
#define CAN_F7R1_FB14_Pos (14U)
#define CAN_F7R1_FB14_Msk (0x1U << CAN_F7R1_FB14_Pos)
#define CAN_F7R1_FB14 CAN_F7R1_FB14_Msk
#define CAN_F7R1_FB15_Pos (15U)
#define CAN_F7R1_FB15_Msk (0x1U << CAN_F7R1_FB15_Pos)
#define CAN_F7R1_FB15 CAN_F7R1_FB15_Msk
#define CAN_F7R1_FB16_Pos (16U)
#define CAN_F7R1_FB16_Msk (0x1U << CAN_F7R1_FB16_Pos)
#define CAN_F7R1_FB16 CAN_F7R1_FB16_Msk
#define CAN_F7R1_FB17_Pos (17U)
#define CAN_F7R1_FB17_Msk (0x1U << CAN_F7R1_FB17_Pos)
#define CAN_F7R1_FB17 CAN_F7R1_FB17_Msk
#define CAN_F7R1_FB18_Pos (18U)
#define CAN_F7R1_FB18_Msk (0x1U << CAN_F7R1_FB18_Pos)
#define CAN_F7R1_FB18 CAN_F7R1_FB18_Msk
#define CAN_F7R1_FB19_Pos (19U)
#define CAN_F7R1_FB19_Msk (0x1U << CAN_F7R1_FB19_Pos)
#define CAN_F7R1_FB19 CAN_F7R1_FB19_Msk
#define CAN_F7R1_FB20_Pos (20U)
#define CAN_F7R1_FB20_Msk (0x1U << CAN_F7R1_FB20_Pos)
#define CAN_F7R1_FB20 CAN_F7R1_FB20_Msk
#define CAN_F7R1_FB21_Pos (21U)
#define CAN_F7R1_FB21_Msk (0x1U << CAN_F7R1_FB21_Pos)
#define CAN_F7R1_FB21 CAN_F7R1_FB21_Msk
#define CAN_F7R1_FB22_Pos (22U)
#define CAN_F7R1_FB22_Msk (0x1U << CAN_F7R1_FB22_Pos)
#define CAN_F7R1_FB22 CAN_F7R1_FB22_Msk
#define CAN_F7R1_FB23_Pos (23U)
#define CAN_F7R1_FB23_Msk (0x1U << CAN_F7R1_FB23_Pos)
#define CAN_F7R1_FB23 CAN_F7R1_FB23_Msk
#define CAN_F7R1_FB24_Pos (24U)
#define CAN_F7R1_FB24_Msk (0x1U << CAN_F7R1_FB24_Pos)
#define CAN_F7R1_FB24 CAN_F7R1_FB24_Msk
#define CAN_F7R1_FB25_Pos (25U)
#define CAN_F7R1_FB25_Msk (0x1U << CAN_F7R1_FB25_Pos)
#define CAN_F7R1_FB25 CAN_F7R1_FB25_Msk
#define CAN_F7R1_FB26_Pos (26U)
#define CAN_F7R1_FB26_Msk (0x1U << CAN_F7R1_FB26_Pos)
#define CAN_F7R1_FB26 CAN_F7R1_FB26_Msk
#define CAN_F7R1_FB27_Pos (27U)
#define CAN_F7R1_FB27_Msk (0x1U << CAN_F7R1_FB27_Pos)
#define CAN_F7R1_FB27 CAN_F7R1_FB27_Msk
#define CAN_F7R1_FB28_Pos (28U)
#define CAN_F7R1_FB28_Msk (0x1U << CAN_F7R1_FB28_Pos)
#define CAN_F7R1_FB28 CAN_F7R1_FB28_Msk
#define CAN_F7R1_FB29_Pos (29U)
#define CAN_F7R1_FB29_Msk (0x1U << CAN_F7R1_FB29_Pos)
#define CAN_F7R1_FB29 CAN_F7R1_FB29_Msk
#define CAN_F7R1_FB30_Pos (30U)
#define CAN_F7R1_FB30_Msk (0x1U << CAN_F7R1_FB30_Pos)
#define CAN_F7R1_FB30 CAN_F7R1_FB30_Msk
#define CAN_F7R1_FB31_Pos (31U)
#define CAN_F7R1_FB31_Msk (0x1U << CAN_F7R1_FB31_Pos)
#define CAN_F7R1_FB31 CAN_F7R1_FB31_Msk


#define CAN_F8R1_FB0_Pos (0U)
#define CAN_F8R1_FB0_Msk (0x1U << CAN_F8R1_FB0_Pos)
#define CAN_F8R1_FB0 CAN_F8R1_FB0_Msk
#define CAN_F8R1_FB1_Pos (1U)
#define CAN_F8R1_FB1_Msk (0x1U << CAN_F8R1_FB1_Pos)
#define CAN_F8R1_FB1 CAN_F8R1_FB1_Msk
#define CAN_F8R1_FB2_Pos (2U)
#define CAN_F8R1_FB2_Msk (0x1U << CAN_F8R1_FB2_Pos)
#define CAN_F8R1_FB2 CAN_F8R1_FB2_Msk
#define CAN_F8R1_FB3_Pos (3U)
#define CAN_F8R1_FB3_Msk (0x1U << CAN_F8R1_FB3_Pos)
#define CAN_F8R1_FB3 CAN_F8R1_FB3_Msk
#define CAN_F8R1_FB4_Pos (4U)
#define CAN_F8R1_FB4_Msk (0x1U << CAN_F8R1_FB4_Pos)
#define CAN_F8R1_FB4 CAN_F8R1_FB4_Msk
#define CAN_F8R1_FB5_Pos (5U)
#define CAN_F8R1_FB5_Msk (0x1U << CAN_F8R1_FB5_Pos)
#define CAN_F8R1_FB5 CAN_F8R1_FB5_Msk
#define CAN_F8R1_FB6_Pos (6U)
#define CAN_F8R1_FB6_Msk (0x1U << CAN_F8R1_FB6_Pos)
#define CAN_F8R1_FB6 CAN_F8R1_FB6_Msk
#define CAN_F8R1_FB7_Pos (7U)
#define CAN_F8R1_FB7_Msk (0x1U << CAN_F8R1_FB7_Pos)
#define CAN_F8R1_FB7 CAN_F8R1_FB7_Msk
#define CAN_F8R1_FB8_Pos (8U)
#define CAN_F8R1_FB8_Msk (0x1U << CAN_F8R1_FB8_Pos)
#define CAN_F8R1_FB8 CAN_F8R1_FB8_Msk
#define CAN_F8R1_FB9_Pos (9U)
#define CAN_F8R1_FB9_Msk (0x1U << CAN_F8R1_FB9_Pos)
#define CAN_F8R1_FB9 CAN_F8R1_FB9_Msk
#define CAN_F8R1_FB10_Pos (10U)
#define CAN_F8R1_FB10_Msk (0x1U << CAN_F8R1_FB10_Pos)
#define CAN_F8R1_FB10 CAN_F8R1_FB10_Msk
#define CAN_F8R1_FB11_Pos (11U)
#define CAN_F8R1_FB11_Msk (0x1U << CAN_F8R1_FB11_Pos)
#define CAN_F8R1_FB11 CAN_F8R1_FB11_Msk
#define CAN_F8R1_FB12_Pos (12U)
#define CAN_F8R1_FB12_Msk (0x1U << CAN_F8R1_FB12_Pos)
#define CAN_F8R1_FB12 CAN_F8R1_FB12_Msk
#define CAN_F8R1_FB13_Pos (13U)
#define CAN_F8R1_FB13_Msk (0x1U << CAN_F8R1_FB13_Pos)
#define CAN_F8R1_FB13 CAN_F8R1_FB13_Msk
#define CAN_F8R1_FB14_Pos (14U)
#define CAN_F8R1_FB14_Msk (0x1U << CAN_F8R1_FB14_Pos)
#define CAN_F8R1_FB14 CAN_F8R1_FB14_Msk
#define CAN_F8R1_FB15_Pos (15U)
#define CAN_F8R1_FB15_Msk (0x1U << CAN_F8R1_FB15_Pos)
#define CAN_F8R1_FB15 CAN_F8R1_FB15_Msk
#define CAN_F8R1_FB16_Pos (16U)
#define CAN_F8R1_FB16_Msk (0x1U << CAN_F8R1_FB16_Pos)
#define CAN_F8R1_FB16 CAN_F8R1_FB16_Msk
#define CAN_F8R1_FB17_Pos (17U)
#define CAN_F8R1_FB17_Msk (0x1U << CAN_F8R1_FB17_Pos)
#define CAN_F8R1_FB17 CAN_F8R1_FB17_Msk
#define CAN_F8R1_FB18_Pos (18U)
#define CAN_F8R1_FB18_Msk (0x1U << CAN_F8R1_FB18_Pos)
#define CAN_F8R1_FB18 CAN_F8R1_FB18_Msk
#define CAN_F8R1_FB19_Pos (19U)
#define CAN_F8R1_FB19_Msk (0x1U << CAN_F8R1_FB19_Pos)
#define CAN_F8R1_FB19 CAN_F8R1_FB19_Msk
#define CAN_F8R1_FB20_Pos (20U)
#define CAN_F8R1_FB20_Msk (0x1U << CAN_F8R1_FB20_Pos)
#define CAN_F8R1_FB20 CAN_F8R1_FB20_Msk
#define CAN_F8R1_FB21_Pos (21U)
#define CAN_F8R1_FB21_Msk (0x1U << CAN_F8R1_FB21_Pos)
#define CAN_F8R1_FB21 CAN_F8R1_FB21_Msk
#define CAN_F8R1_FB22_Pos (22U)
#define CAN_F8R1_FB22_Msk (0x1U << CAN_F8R1_FB22_Pos)
#define CAN_F8R1_FB22 CAN_F8R1_FB22_Msk
#define CAN_F8R1_FB23_Pos (23U)
#define CAN_F8R1_FB23_Msk (0x1U << CAN_F8R1_FB23_Pos)
#define CAN_F8R1_FB23 CAN_F8R1_FB23_Msk
#define CAN_F8R1_FB24_Pos (24U)
#define CAN_F8R1_FB24_Msk (0x1U << CAN_F8R1_FB24_Pos)
#define CAN_F8R1_FB24 CAN_F8R1_FB24_Msk
#define CAN_F8R1_FB25_Pos (25U)
#define CAN_F8R1_FB25_Msk (0x1U << CAN_F8R1_FB25_Pos)
#define CAN_F8R1_FB25 CAN_F8R1_FB25_Msk
#define CAN_F8R1_FB26_Pos (26U)
#define CAN_F8R1_FB26_Msk (0x1U << CAN_F8R1_FB26_Pos)
#define CAN_F8R1_FB26 CAN_F8R1_FB26_Msk
#define CAN_F8R1_FB27_Pos (27U)
#define CAN_F8R1_FB27_Msk (0x1U << CAN_F8R1_FB27_Pos)
#define CAN_F8R1_FB27 CAN_F8R1_FB27_Msk
#define CAN_F8R1_FB28_Pos (28U)
#define CAN_F8R1_FB28_Msk (0x1U << CAN_F8R1_FB28_Pos)
#define CAN_F8R1_FB28 CAN_F8R1_FB28_Msk
#define CAN_F8R1_FB29_Pos (29U)
#define CAN_F8R1_FB29_Msk (0x1U << CAN_F8R1_FB29_Pos)
#define CAN_F8R1_FB29 CAN_F8R1_FB29_Msk
#define CAN_F8R1_FB30_Pos (30U)
#define CAN_F8R1_FB30_Msk (0x1U << CAN_F8R1_FB30_Pos)
#define CAN_F8R1_FB30 CAN_F8R1_FB30_Msk
#define CAN_F8R1_FB31_Pos (31U)
#define CAN_F8R1_FB31_Msk (0x1U << CAN_F8R1_FB31_Pos)
#define CAN_F8R1_FB31 CAN_F8R1_FB31_Msk


#define CAN_F9R1_FB0_Pos (0U)
#define CAN_F9R1_FB0_Msk (0x1U << CAN_F9R1_FB0_Pos)
#define CAN_F9R1_FB0 CAN_F9R1_FB0_Msk
#define CAN_F9R1_FB1_Pos (1U)
#define CAN_F9R1_FB1_Msk (0x1U << CAN_F9R1_FB1_Pos)
#define CAN_F9R1_FB1 CAN_F9R1_FB1_Msk
#define CAN_F9R1_FB2_Pos (2U)
#define CAN_F9R1_FB2_Msk (0x1U << CAN_F9R1_FB2_Pos)
#define CAN_F9R1_FB2 CAN_F9R1_FB2_Msk
#define CAN_F9R1_FB3_Pos (3U)
#define CAN_F9R1_FB3_Msk (0x1U << CAN_F9R1_FB3_Pos)
#define CAN_F9R1_FB3 CAN_F9R1_FB3_Msk
#define CAN_F9R1_FB4_Pos (4U)
#define CAN_F9R1_FB4_Msk (0x1U << CAN_F9R1_FB4_Pos)
#define CAN_F9R1_FB4 CAN_F9R1_FB4_Msk
#define CAN_F9R1_FB5_Pos (5U)
#define CAN_F9R1_FB5_Msk (0x1U << CAN_F9R1_FB5_Pos)
#define CAN_F9R1_FB5 CAN_F9R1_FB5_Msk
#define CAN_F9R1_FB6_Pos (6U)
#define CAN_F9R1_FB6_Msk (0x1U << CAN_F9R1_FB6_Pos)
#define CAN_F9R1_FB6 CAN_F9R1_FB6_Msk
#define CAN_F9R1_FB7_Pos (7U)
#define CAN_F9R1_FB7_Msk (0x1U << CAN_F9R1_FB7_Pos)
#define CAN_F9R1_FB7 CAN_F9R1_FB7_Msk
#define CAN_F9R1_FB8_Pos (8U)
#define CAN_F9R1_FB8_Msk (0x1U << CAN_F9R1_FB8_Pos)
#define CAN_F9R1_FB8 CAN_F9R1_FB8_Msk
#define CAN_F9R1_FB9_Pos (9U)
#define CAN_F9R1_FB9_Msk (0x1U << CAN_F9R1_FB9_Pos)
#define CAN_F9R1_FB9 CAN_F9R1_FB9_Msk
#define CAN_F9R1_FB10_Pos (10U)
#define CAN_F9R1_FB10_Msk (0x1U << CAN_F9R1_FB10_Pos)
#define CAN_F9R1_FB10 CAN_F9R1_FB10_Msk
#define CAN_F9R1_FB11_Pos (11U)
#define CAN_F9R1_FB11_Msk (0x1U << CAN_F9R1_FB11_Pos)
#define CAN_F9R1_FB11 CAN_F9R1_FB11_Msk
#define CAN_F9R1_FB12_Pos (12U)
#define CAN_F9R1_FB12_Msk (0x1U << CAN_F9R1_FB12_Pos)
#define CAN_F9R1_FB12 CAN_F9R1_FB12_Msk
#define CAN_F9R1_FB13_Pos (13U)
#define CAN_F9R1_FB13_Msk (0x1U << CAN_F9R1_FB13_Pos)
#define CAN_F9R1_FB13 CAN_F9R1_FB13_Msk
#define CAN_F9R1_FB14_Pos (14U)
#define CAN_F9R1_FB14_Msk (0x1U << CAN_F9R1_FB14_Pos)
#define CAN_F9R1_FB14 CAN_F9R1_FB14_Msk
#define CAN_F9R1_FB15_Pos (15U)
#define CAN_F9R1_FB15_Msk (0x1U << CAN_F9R1_FB15_Pos)
#define CAN_F9R1_FB15 CAN_F9R1_FB15_Msk
#define CAN_F9R1_FB16_Pos (16U)
#define CAN_F9R1_FB16_Msk (0x1U << CAN_F9R1_FB16_Pos)
#define CAN_F9R1_FB16 CAN_F9R1_FB16_Msk
#define CAN_F9R1_FB17_Pos (17U)
#define CAN_F9R1_FB17_Msk (0x1U << CAN_F9R1_FB17_Pos)
#define CAN_F9R1_FB17 CAN_F9R1_FB17_Msk
#define CAN_F9R1_FB18_Pos (18U)
#define CAN_F9R1_FB18_Msk (0x1U << CAN_F9R1_FB18_Pos)
#define CAN_F9R1_FB18 CAN_F9R1_FB18_Msk
#define CAN_F9R1_FB19_Pos (19U)
#define CAN_F9R1_FB19_Msk (0x1U << CAN_F9R1_FB19_Pos)
#define CAN_F9R1_FB19 CAN_F9R1_FB19_Msk
#define CAN_F9R1_FB20_Pos (20U)
#define CAN_F9R1_FB20_Msk (0x1U << CAN_F9R1_FB20_Pos)
#define CAN_F9R1_FB20 CAN_F9R1_FB20_Msk
#define CAN_F9R1_FB21_Pos (21U)
#define CAN_F9R1_FB21_Msk (0x1U << CAN_F9R1_FB21_Pos)
#define CAN_F9R1_FB21 CAN_F9R1_FB21_Msk
#define CAN_F9R1_FB22_Pos (22U)
#define CAN_F9R1_FB22_Msk (0x1U << CAN_F9R1_FB22_Pos)
#define CAN_F9R1_FB22 CAN_F9R1_FB22_Msk
#define CAN_F9R1_FB23_Pos (23U)
#define CAN_F9R1_FB23_Msk (0x1U << CAN_F9R1_FB23_Pos)
#define CAN_F9R1_FB23 CAN_F9R1_FB23_Msk
#define CAN_F9R1_FB24_Pos (24U)
#define CAN_F9R1_FB24_Msk (0x1U << CAN_F9R1_FB24_Pos)
#define CAN_F9R1_FB24 CAN_F9R1_FB24_Msk
#define CAN_F9R1_FB25_Pos (25U)
#define CAN_F9R1_FB25_Msk (0x1U << CAN_F9R1_FB25_Pos)
#define CAN_F9R1_FB25 CAN_F9R1_FB25_Msk
#define CAN_F9R1_FB26_Pos (26U)
#define CAN_F9R1_FB26_Msk (0x1U << CAN_F9R1_FB26_Pos)
#define CAN_F9R1_FB26 CAN_F9R1_FB26_Msk
#define CAN_F9R1_FB27_Pos (27U)
#define CAN_F9R1_FB27_Msk (0x1U << CAN_F9R1_FB27_Pos)
#define CAN_F9R1_FB27 CAN_F9R1_FB27_Msk
#define CAN_F9R1_FB28_Pos (28U)
#define CAN_F9R1_FB28_Msk (0x1U << CAN_F9R1_FB28_Pos)
#define CAN_F9R1_FB28 CAN_F9R1_FB28_Msk
#define CAN_F9R1_FB29_Pos (29U)
#define CAN_F9R1_FB29_Msk (0x1U << CAN_F9R1_FB29_Pos)
#define CAN_F9R1_FB29 CAN_F9R1_FB29_Msk
#define CAN_F9R1_FB30_Pos (30U)
#define CAN_F9R1_FB30_Msk (0x1U << CAN_F9R1_FB30_Pos)
#define CAN_F9R1_FB30 CAN_F9R1_FB30_Msk
#define CAN_F9R1_FB31_Pos (31U)
#define CAN_F9R1_FB31_Msk (0x1U << CAN_F9R1_FB31_Pos)
#define CAN_F9R1_FB31 CAN_F9R1_FB31_Msk


#define CAN_F10R1_FB0_Pos (0U)
#define CAN_F10R1_FB0_Msk (0x1U << CAN_F10R1_FB0_Pos)
#define CAN_F10R1_FB0 CAN_F10R1_FB0_Msk
#define CAN_F10R1_FB1_Pos (1U)
#define CAN_F10R1_FB1_Msk (0x1U << CAN_F10R1_FB1_Pos)
#define CAN_F10R1_FB1 CAN_F10R1_FB1_Msk
#define CAN_F10R1_FB2_Pos (2U)
#define CAN_F10R1_FB2_Msk (0x1U << CAN_F10R1_FB2_Pos)
#define CAN_F10R1_FB2 CAN_F10R1_FB2_Msk
#define CAN_F10R1_FB3_Pos (3U)
#define CAN_F10R1_FB3_Msk (0x1U << CAN_F10R1_FB3_Pos)
#define CAN_F10R1_FB3 CAN_F10R1_FB3_Msk
#define CAN_F10R1_FB4_Pos (4U)
#define CAN_F10R1_FB4_Msk (0x1U << CAN_F10R1_FB4_Pos)
#define CAN_F10R1_FB4 CAN_F10R1_FB4_Msk
#define CAN_F10R1_FB5_Pos (5U)
#define CAN_F10R1_FB5_Msk (0x1U << CAN_F10R1_FB5_Pos)
#define CAN_F10R1_FB5 CAN_F10R1_FB5_Msk
#define CAN_F10R1_FB6_Pos (6U)
#define CAN_F10R1_FB6_Msk (0x1U << CAN_F10R1_FB6_Pos)
#define CAN_F10R1_FB6 CAN_F10R1_FB6_Msk
#define CAN_F10R1_FB7_Pos (7U)
#define CAN_F10R1_FB7_Msk (0x1U << CAN_F10R1_FB7_Pos)
#define CAN_F10R1_FB7 CAN_F10R1_FB7_Msk
#define CAN_F10R1_FB8_Pos (8U)
#define CAN_F10R1_FB8_Msk (0x1U << CAN_F10R1_FB8_Pos)
#define CAN_F10R1_FB8 CAN_F10R1_FB8_Msk
#define CAN_F10R1_FB9_Pos (9U)
#define CAN_F10R1_FB9_Msk (0x1U << CAN_F10R1_FB9_Pos)
#define CAN_F10R1_FB9 CAN_F10R1_FB9_Msk
#define CAN_F10R1_FB10_Pos (10U)
#define CAN_F10R1_FB10_Msk (0x1U << CAN_F10R1_FB10_Pos)
#define CAN_F10R1_FB10 CAN_F10R1_FB10_Msk
#define CAN_F10R1_FB11_Pos (11U)
#define CAN_F10R1_FB11_Msk (0x1U << CAN_F10R1_FB11_Pos)
#define CAN_F10R1_FB11 CAN_F10R1_FB11_Msk
#define CAN_F10R1_FB12_Pos (12U)
#define CAN_F10R1_FB12_Msk (0x1U << CAN_F10R1_FB12_Pos)
#define CAN_F10R1_FB12 CAN_F10R1_FB12_Msk
#define CAN_F10R1_FB13_Pos (13U)
#define CAN_F10R1_FB13_Msk (0x1U << CAN_F10R1_FB13_Pos)
#define CAN_F10R1_FB13 CAN_F10R1_FB13_Msk
#define CAN_F10R1_FB14_Pos (14U)
#define CAN_F10R1_FB14_Msk (0x1U << CAN_F10R1_FB14_Pos)
#define CAN_F10R1_FB14 CAN_F10R1_FB14_Msk
#define CAN_F10R1_FB15_Pos (15U)
#define CAN_F10R1_FB15_Msk (0x1U << CAN_F10R1_FB15_Pos)
#define CAN_F10R1_FB15 CAN_F10R1_FB15_Msk
#define CAN_F10R1_FB16_Pos (16U)
#define CAN_F10R1_FB16_Msk (0x1U << CAN_F10R1_FB16_Pos)
#define CAN_F10R1_FB16 CAN_F10R1_FB16_Msk
#define CAN_F10R1_FB17_Pos (17U)
#define CAN_F10R1_FB17_Msk (0x1U << CAN_F10R1_FB17_Pos)
#define CAN_F10R1_FB17 CAN_F10R1_FB17_Msk
#define CAN_F10R1_FB18_Pos (18U)
#define CAN_F10R1_FB18_Msk (0x1U << CAN_F10R1_FB18_Pos)
#define CAN_F10R1_FB18 CAN_F10R1_FB18_Msk
#define CAN_F10R1_FB19_Pos (19U)
#define CAN_F10R1_FB19_Msk (0x1U << CAN_F10R1_FB19_Pos)
#define CAN_F10R1_FB19 CAN_F10R1_FB19_Msk
#define CAN_F10R1_FB20_Pos (20U)
#define CAN_F10R1_FB20_Msk (0x1U << CAN_F10R1_FB20_Pos)
#define CAN_F10R1_FB20 CAN_F10R1_FB20_Msk
#define CAN_F10R1_FB21_Pos (21U)
#define CAN_F10R1_FB21_Msk (0x1U << CAN_F10R1_FB21_Pos)
#define CAN_F10R1_FB21 CAN_F10R1_FB21_Msk
#define CAN_F10R1_FB22_Pos (22U)
#define CAN_F10R1_FB22_Msk (0x1U << CAN_F10R1_FB22_Pos)
#define CAN_F10R1_FB22 CAN_F10R1_FB22_Msk
#define CAN_F10R1_FB23_Pos (23U)
#define CAN_F10R1_FB23_Msk (0x1U << CAN_F10R1_FB23_Pos)
#define CAN_F10R1_FB23 CAN_F10R1_FB23_Msk
#define CAN_F10R1_FB24_Pos (24U)
#define CAN_F10R1_FB24_Msk (0x1U << CAN_F10R1_FB24_Pos)
#define CAN_F10R1_FB24 CAN_F10R1_FB24_Msk
#define CAN_F10R1_FB25_Pos (25U)
#define CAN_F10R1_FB25_Msk (0x1U << CAN_F10R1_FB25_Pos)
#define CAN_F10R1_FB25 CAN_F10R1_FB25_Msk
#define CAN_F10R1_FB26_Pos (26U)
#define CAN_F10R1_FB26_Msk (0x1U << CAN_F10R1_FB26_Pos)
#define CAN_F10R1_FB26 CAN_F10R1_FB26_Msk
#define CAN_F10R1_FB27_Pos (27U)
#define CAN_F10R1_FB27_Msk (0x1U << CAN_F10R1_FB27_Pos)
#define CAN_F10R1_FB27 CAN_F10R1_FB27_Msk
#define CAN_F10R1_FB28_Pos (28U)
#define CAN_F10R1_FB28_Msk (0x1U << CAN_F10R1_FB28_Pos)
#define CAN_F10R1_FB28 CAN_F10R1_FB28_Msk
#define CAN_F10R1_FB29_Pos (29U)
#define CAN_F10R1_FB29_Msk (0x1U << CAN_F10R1_FB29_Pos)
#define CAN_F10R1_FB29 CAN_F10R1_FB29_Msk
#define CAN_F10R1_FB30_Pos (30U)
#define CAN_F10R1_FB30_Msk (0x1U << CAN_F10R1_FB30_Pos)
#define CAN_F10R1_FB30 CAN_F10R1_FB30_Msk
#define CAN_F10R1_FB31_Pos (31U)
#define CAN_F10R1_FB31_Msk (0x1U << CAN_F10R1_FB31_Pos)
#define CAN_F10R1_FB31 CAN_F10R1_FB31_Msk


#define CAN_F11R1_FB0_Pos (0U)
#define CAN_F11R1_FB0_Msk (0x1U << CAN_F11R1_FB0_Pos)
#define CAN_F11R1_FB0 CAN_F11R1_FB0_Msk
#define CAN_F11R1_FB1_Pos (1U)
#define CAN_F11R1_FB1_Msk (0x1U << CAN_F11R1_FB1_Pos)
#define CAN_F11R1_FB1 CAN_F11R1_FB1_Msk
#define CAN_F11R1_FB2_Pos (2U)
#define CAN_F11R1_FB2_Msk (0x1U << CAN_F11R1_FB2_Pos)
#define CAN_F11R1_FB2 CAN_F11R1_FB2_Msk
#define CAN_F11R1_FB3_Pos (3U)
#define CAN_F11R1_FB3_Msk (0x1U << CAN_F11R1_FB3_Pos)
#define CAN_F11R1_FB3 CAN_F11R1_FB3_Msk
#define CAN_F11R1_FB4_Pos (4U)
#define CAN_F11R1_FB4_Msk (0x1U << CAN_F11R1_FB4_Pos)
#define CAN_F11R1_FB4 CAN_F11R1_FB4_Msk
#define CAN_F11R1_FB5_Pos (5U)
#define CAN_F11R1_FB5_Msk (0x1U << CAN_F11R1_FB5_Pos)
#define CAN_F11R1_FB5 CAN_F11R1_FB5_Msk
#define CAN_F11R1_FB6_Pos (6U)
#define CAN_F11R1_FB6_Msk (0x1U << CAN_F11R1_FB6_Pos)
#define CAN_F11R1_FB6 CAN_F11R1_FB6_Msk
#define CAN_F11R1_FB7_Pos (7U)
#define CAN_F11R1_FB7_Msk (0x1U << CAN_F11R1_FB7_Pos)
#define CAN_F11R1_FB7 CAN_F11R1_FB7_Msk
#define CAN_F11R1_FB8_Pos (8U)
#define CAN_F11R1_FB8_Msk (0x1U << CAN_F11R1_FB8_Pos)
#define CAN_F11R1_FB8 CAN_F11R1_FB8_Msk
#define CAN_F11R1_FB9_Pos (9U)
#define CAN_F11R1_FB9_Msk (0x1U << CAN_F11R1_FB9_Pos)
#define CAN_F11R1_FB9 CAN_F11R1_FB9_Msk
#define CAN_F11R1_FB10_Pos (10U)
#define CAN_F11R1_FB10_Msk (0x1U << CAN_F11R1_FB10_Pos)
#define CAN_F11R1_FB10 CAN_F11R1_FB10_Msk
#define CAN_F11R1_FB11_Pos (11U)
#define CAN_F11R1_FB11_Msk (0x1U << CAN_F11R1_FB11_Pos)
#define CAN_F11R1_FB11 CAN_F11R1_FB11_Msk
#define CAN_F11R1_FB12_Pos (12U)
#define CAN_F11R1_FB12_Msk (0x1U << CAN_F11R1_FB12_Pos)
#define CAN_F11R1_FB12 CAN_F11R1_FB12_Msk
#define CAN_F11R1_FB13_Pos (13U)
#define CAN_F11R1_FB13_Msk (0x1U << CAN_F11R1_FB13_Pos)
#define CAN_F11R1_FB13 CAN_F11R1_FB13_Msk
#define CAN_F11R1_FB14_Pos (14U)
#define CAN_F11R1_FB14_Msk (0x1U << CAN_F11R1_FB14_Pos)
#define CAN_F11R1_FB14 CAN_F11R1_FB14_Msk
#define CAN_F11R1_FB15_Pos (15U)
#define CAN_F11R1_FB15_Msk (0x1U << CAN_F11R1_FB15_Pos)
#define CAN_F11R1_FB15 CAN_F11R1_FB15_Msk
#define CAN_F11R1_FB16_Pos (16U)
#define CAN_F11R1_FB16_Msk (0x1U << CAN_F11R1_FB16_Pos)
#define CAN_F11R1_FB16 CAN_F11R1_FB16_Msk
#define CAN_F11R1_FB17_Pos (17U)
#define CAN_F11R1_FB17_Msk (0x1U << CAN_F11R1_FB17_Pos)
#define CAN_F11R1_FB17 CAN_F11R1_FB17_Msk
#define CAN_F11R1_FB18_Pos (18U)
#define CAN_F11R1_FB18_Msk (0x1U << CAN_F11R1_FB18_Pos)
#define CAN_F11R1_FB18 CAN_F11R1_FB18_Msk
#define CAN_F11R1_FB19_Pos (19U)
#define CAN_F11R1_FB19_Msk (0x1U << CAN_F11R1_FB19_Pos)
#define CAN_F11R1_FB19 CAN_F11R1_FB19_Msk
#define CAN_F11R1_FB20_Pos (20U)
#define CAN_F11R1_FB20_Msk (0x1U << CAN_F11R1_FB20_Pos)
#define CAN_F11R1_FB20 CAN_F11R1_FB20_Msk
#define CAN_F11R1_FB21_Pos (21U)
#define CAN_F11R1_FB21_Msk (0x1U << CAN_F11R1_FB21_Pos)
#define CAN_F11R1_FB21 CAN_F11R1_FB21_Msk
#define CAN_F11R1_FB22_Pos (22U)
#define CAN_F11R1_FB22_Msk (0x1U << CAN_F11R1_FB22_Pos)
#define CAN_F11R1_FB22 CAN_F11R1_FB22_Msk
#define CAN_F11R1_FB23_Pos (23U)
#define CAN_F11R1_FB23_Msk (0x1U << CAN_F11R1_FB23_Pos)
#define CAN_F11R1_FB23 CAN_F11R1_FB23_Msk
#define CAN_F11R1_FB24_Pos (24U)
#define CAN_F11R1_FB24_Msk (0x1U << CAN_F11R1_FB24_Pos)
#define CAN_F11R1_FB24 CAN_F11R1_FB24_Msk
#define CAN_F11R1_FB25_Pos (25U)
#define CAN_F11R1_FB25_Msk (0x1U << CAN_F11R1_FB25_Pos)
#define CAN_F11R1_FB25 CAN_F11R1_FB25_Msk
#define CAN_F11R1_FB26_Pos (26U)
#define CAN_F11R1_FB26_Msk (0x1U << CAN_F11R1_FB26_Pos)
#define CAN_F11R1_FB26 CAN_F11R1_FB26_Msk
#define CAN_F11R1_FB27_Pos (27U)
#define CAN_F11R1_FB27_Msk (0x1U << CAN_F11R1_FB27_Pos)
#define CAN_F11R1_FB27 CAN_F11R1_FB27_Msk
#define CAN_F11R1_FB28_Pos (28U)
#define CAN_F11R1_FB28_Msk (0x1U << CAN_F11R1_FB28_Pos)
#define CAN_F11R1_FB28 CAN_F11R1_FB28_Msk
#define CAN_F11R1_FB29_Pos (29U)
#define CAN_F11R1_FB29_Msk (0x1U << CAN_F11R1_FB29_Pos)
#define CAN_F11R1_FB29 CAN_F11R1_FB29_Msk
#define CAN_F11R1_FB30_Pos (30U)
#define CAN_F11R1_FB30_Msk (0x1U << CAN_F11R1_FB30_Pos)
#define CAN_F11R1_FB30 CAN_F11R1_FB30_Msk
#define CAN_F11R1_FB31_Pos (31U)
#define CAN_F11R1_FB31_Msk (0x1U << CAN_F11R1_FB31_Pos)
#define CAN_F11R1_FB31 CAN_F11R1_FB31_Msk


#define CAN_F12R1_FB0_Pos (0U)
#define CAN_F12R1_FB0_Msk (0x1U << CAN_F12R1_FB0_Pos)
#define CAN_F12R1_FB0 CAN_F12R1_FB0_Msk
#define CAN_F12R1_FB1_Pos (1U)
#define CAN_F12R1_FB1_Msk (0x1U << CAN_F12R1_FB1_Pos)
#define CAN_F12R1_FB1 CAN_F12R1_FB1_Msk
#define CAN_F12R1_FB2_Pos (2U)
#define CAN_F12R1_FB2_Msk (0x1U << CAN_F12R1_FB2_Pos)
#define CAN_F12R1_FB2 CAN_F12R1_FB2_Msk
#define CAN_F12R1_FB3_Pos (3U)
#define CAN_F12R1_FB3_Msk (0x1U << CAN_F12R1_FB3_Pos)
#define CAN_F12R1_FB3 CAN_F12R1_FB3_Msk
#define CAN_F12R1_FB4_Pos (4U)
#define CAN_F12R1_FB4_Msk (0x1U << CAN_F12R1_FB4_Pos)
#define CAN_F12R1_FB4 CAN_F12R1_FB4_Msk
#define CAN_F12R1_FB5_Pos (5U)
#define CAN_F12R1_FB5_Msk (0x1U << CAN_F12R1_FB5_Pos)
#define CAN_F12R1_FB5 CAN_F12R1_FB5_Msk
#define CAN_F12R1_FB6_Pos (6U)
#define CAN_F12R1_FB6_Msk (0x1U << CAN_F12R1_FB6_Pos)
#define CAN_F12R1_FB6 CAN_F12R1_FB6_Msk
#define CAN_F12R1_FB7_Pos (7U)
#define CAN_F12R1_FB7_Msk (0x1U << CAN_F12R1_FB7_Pos)
#define CAN_F12R1_FB7 CAN_F12R1_FB7_Msk
#define CAN_F12R1_FB8_Pos (8U)
#define CAN_F12R1_FB8_Msk (0x1U << CAN_F12R1_FB8_Pos)
#define CAN_F12R1_FB8 CAN_F12R1_FB8_Msk
#define CAN_F12R1_FB9_Pos (9U)
#define CAN_F12R1_FB9_Msk (0x1U << CAN_F12R1_FB9_Pos)
#define CAN_F12R1_FB9 CAN_F12R1_FB9_Msk
#define CAN_F12R1_FB10_Pos (10U)
#define CAN_F12R1_FB10_Msk (0x1U << CAN_F12R1_FB10_Pos)
#define CAN_F12R1_FB10 CAN_F12R1_FB10_Msk
#define CAN_F12R1_FB11_Pos (11U)
#define CAN_F12R1_FB11_Msk (0x1U << CAN_F12R1_FB11_Pos)
#define CAN_F12R1_FB11 CAN_F12R1_FB11_Msk
#define CAN_F12R1_FB12_Pos (12U)
#define CAN_F12R1_FB12_Msk (0x1U << CAN_F12R1_FB12_Pos)
#define CAN_F12R1_FB12 CAN_F12R1_FB12_Msk
#define CAN_F12R1_FB13_Pos (13U)
#define CAN_F12R1_FB13_Msk (0x1U << CAN_F12R1_FB13_Pos)
#define CAN_F12R1_FB13 CAN_F12R1_FB13_Msk
#define CAN_F12R1_FB14_Pos (14U)
#define CAN_F12R1_FB14_Msk (0x1U << CAN_F12R1_FB14_Pos)
#define CAN_F12R1_FB14 CAN_F12R1_FB14_Msk
#define CAN_F12R1_FB15_Pos (15U)
#define CAN_F12R1_FB15_Msk (0x1U << CAN_F12R1_FB15_Pos)
#define CAN_F12R1_FB15 CAN_F12R1_FB15_Msk
#define CAN_F12R1_FB16_Pos (16U)
#define CAN_F12R1_FB16_Msk (0x1U << CAN_F12R1_FB16_Pos)
#define CAN_F12R1_FB16 CAN_F12R1_FB16_Msk
#define CAN_F12R1_FB17_Pos (17U)
#define CAN_F12R1_FB17_Msk (0x1U << CAN_F12R1_FB17_Pos)
#define CAN_F12R1_FB17 CAN_F12R1_FB17_Msk
#define CAN_F12R1_FB18_Pos (18U)
#define CAN_F12R1_FB18_Msk (0x1U << CAN_F12R1_FB18_Pos)
#define CAN_F12R1_FB18 CAN_F12R1_FB18_Msk
#define CAN_F12R1_FB19_Pos (19U)
#define CAN_F12R1_FB19_Msk (0x1U << CAN_F12R1_FB19_Pos)
#define CAN_F12R1_FB19 CAN_F12R1_FB19_Msk
#define CAN_F12R1_FB20_Pos (20U)
#define CAN_F12R1_FB20_Msk (0x1U << CAN_F12R1_FB20_Pos)
#define CAN_F12R1_FB20 CAN_F12R1_FB20_Msk
#define CAN_F12R1_FB21_Pos (21U)
#define CAN_F12R1_FB21_Msk (0x1U << CAN_F12R1_FB21_Pos)
#define CAN_F12R1_FB21 CAN_F12R1_FB21_Msk
#define CAN_F12R1_FB22_Pos (22U)
#define CAN_F12R1_FB22_Msk (0x1U << CAN_F12R1_FB22_Pos)
#define CAN_F12R1_FB22 CAN_F12R1_FB22_Msk
#define CAN_F12R1_FB23_Pos (23U)
#define CAN_F12R1_FB23_Msk (0x1U << CAN_F12R1_FB23_Pos)
#define CAN_F12R1_FB23 CAN_F12R1_FB23_Msk
#define CAN_F12R1_FB24_Pos (24U)
#define CAN_F12R1_FB24_Msk (0x1U << CAN_F12R1_FB24_Pos)
#define CAN_F12R1_FB24 CAN_F12R1_FB24_Msk
#define CAN_F12R1_FB25_Pos (25U)
#define CAN_F12R1_FB25_Msk (0x1U << CAN_F12R1_FB25_Pos)
#define CAN_F12R1_FB25 CAN_F12R1_FB25_Msk
#define CAN_F12R1_FB26_Pos (26U)
#define CAN_F12R1_FB26_Msk (0x1U << CAN_F12R1_FB26_Pos)
#define CAN_F12R1_FB26 CAN_F12R1_FB26_Msk
#define CAN_F12R1_FB27_Pos (27U)
#define CAN_F12R1_FB27_Msk (0x1U << CAN_F12R1_FB27_Pos)
#define CAN_F12R1_FB27 CAN_F12R1_FB27_Msk
#define CAN_F12R1_FB28_Pos (28U)
#define CAN_F12R1_FB28_Msk (0x1U << CAN_F12R1_FB28_Pos)
#define CAN_F12R1_FB28 CAN_F12R1_FB28_Msk
#define CAN_F12R1_FB29_Pos (29U)
#define CAN_F12R1_FB29_Msk (0x1U << CAN_F12R1_FB29_Pos)
#define CAN_F12R1_FB29 CAN_F12R1_FB29_Msk
#define CAN_F12R1_FB30_Pos (30U)
#define CAN_F12R1_FB30_Msk (0x1U << CAN_F12R1_FB30_Pos)
#define CAN_F12R1_FB30 CAN_F12R1_FB30_Msk
#define CAN_F12R1_FB31_Pos (31U)
#define CAN_F12R1_FB31_Msk (0x1U << CAN_F12R1_FB31_Pos)
#define CAN_F12R1_FB31 CAN_F12R1_FB31_Msk


#define CAN_F13R1_FB0_Pos (0U)
#define CAN_F13R1_FB0_Msk (0x1U << CAN_F13R1_FB0_Pos)
#define CAN_F13R1_FB0 CAN_F13R1_FB0_Msk
#define CAN_F13R1_FB1_Pos (1U)
#define CAN_F13R1_FB1_Msk (0x1U << CAN_F13R1_FB1_Pos)
#define CAN_F13R1_FB1 CAN_F13R1_FB1_Msk
#define CAN_F13R1_FB2_Pos (2U)
#define CAN_F13R1_FB2_Msk (0x1U << CAN_F13R1_FB2_Pos)
#define CAN_F13R1_FB2 CAN_F13R1_FB2_Msk
#define CAN_F13R1_FB3_Pos (3U)
#define CAN_F13R1_FB3_Msk (0x1U << CAN_F13R1_FB3_Pos)
#define CAN_F13R1_FB3 CAN_F13R1_FB3_Msk
#define CAN_F13R1_FB4_Pos (4U)
#define CAN_F13R1_FB4_Msk (0x1U << CAN_F13R1_FB4_Pos)
#define CAN_F13R1_FB4 CAN_F13R1_FB4_Msk
#define CAN_F13R1_FB5_Pos (5U)
#define CAN_F13R1_FB5_Msk (0x1U << CAN_F13R1_FB5_Pos)
#define CAN_F13R1_FB5 CAN_F13R1_FB5_Msk
#define CAN_F13R1_FB6_Pos (6U)
#define CAN_F13R1_FB6_Msk (0x1U << CAN_F13R1_FB6_Pos)
#define CAN_F13R1_FB6 CAN_F13R1_FB6_Msk
#define CAN_F13R1_FB7_Pos (7U)
#define CAN_F13R1_FB7_Msk (0x1U << CAN_F13R1_FB7_Pos)
#define CAN_F13R1_FB7 CAN_F13R1_FB7_Msk
#define CAN_F13R1_FB8_Pos (8U)
#define CAN_F13R1_FB8_Msk (0x1U << CAN_F13R1_FB8_Pos)
#define CAN_F13R1_FB8 CAN_F13R1_FB8_Msk
#define CAN_F13R1_FB9_Pos (9U)
#define CAN_F13R1_FB9_Msk (0x1U << CAN_F13R1_FB9_Pos)
#define CAN_F13R1_FB9 CAN_F13R1_FB9_Msk
#define CAN_F13R1_FB10_Pos (10U)
#define CAN_F13R1_FB10_Msk (0x1U << CAN_F13R1_FB10_Pos)
#define CAN_F13R1_FB10 CAN_F13R1_FB10_Msk
#define CAN_F13R1_FB11_Pos (11U)
#define CAN_F13R1_FB11_Msk (0x1U << CAN_F13R1_FB11_Pos)
#define CAN_F13R1_FB11 CAN_F13R1_FB11_Msk
#define CAN_F13R1_FB12_Pos (12U)
#define CAN_F13R1_FB12_Msk (0x1U << CAN_F13R1_FB12_Pos)
#define CAN_F13R1_FB12 CAN_F13R1_FB12_Msk
#define CAN_F13R1_FB13_Pos (13U)
#define CAN_F13R1_FB13_Msk (0x1U << CAN_F13R1_FB13_Pos)
#define CAN_F13R1_FB13 CAN_F13R1_FB13_Msk
#define CAN_F13R1_FB14_Pos (14U)
#define CAN_F13R1_FB14_Msk (0x1U << CAN_F13R1_FB14_Pos)
#define CAN_F13R1_FB14 CAN_F13R1_FB14_Msk
#define CAN_F13R1_FB15_Pos (15U)
#define CAN_F13R1_FB15_Msk (0x1U << CAN_F13R1_FB15_Pos)
#define CAN_F13R1_FB15 CAN_F13R1_FB15_Msk
#define CAN_F13R1_FB16_Pos (16U)
#define CAN_F13R1_FB16_Msk (0x1U << CAN_F13R1_FB16_Pos)
#define CAN_F13R1_FB16 CAN_F13R1_FB16_Msk
#define CAN_F13R1_FB17_Pos (17U)
#define CAN_F13R1_FB17_Msk (0x1U << CAN_F13R1_FB17_Pos)
#define CAN_F13R1_FB17 CAN_F13R1_FB17_Msk
#define CAN_F13R1_FB18_Pos (18U)
#define CAN_F13R1_FB18_Msk (0x1U << CAN_F13R1_FB18_Pos)
#define CAN_F13R1_FB18 CAN_F13R1_FB18_Msk
#define CAN_F13R1_FB19_Pos (19U)
#define CAN_F13R1_FB19_Msk (0x1U << CAN_F13R1_FB19_Pos)
#define CAN_F13R1_FB19 CAN_F13R1_FB19_Msk
#define CAN_F13R1_FB20_Pos (20U)
#define CAN_F13R1_FB20_Msk (0x1U << CAN_F13R1_FB20_Pos)
#define CAN_F13R1_FB20 CAN_F13R1_FB20_Msk
#define CAN_F13R1_FB21_Pos (21U)
#define CAN_F13R1_FB21_Msk (0x1U << CAN_F13R1_FB21_Pos)
#define CAN_F13R1_FB21 CAN_F13R1_FB21_Msk
#define CAN_F13R1_FB22_Pos (22U)
#define CAN_F13R1_FB22_Msk (0x1U << CAN_F13R1_FB22_Pos)
#define CAN_F13R1_FB22 CAN_F13R1_FB22_Msk
#define CAN_F13R1_FB23_Pos (23U)
#define CAN_F13R1_FB23_Msk (0x1U << CAN_F13R1_FB23_Pos)
#define CAN_F13R1_FB23 CAN_F13R1_FB23_Msk
#define CAN_F13R1_FB24_Pos (24U)
#define CAN_F13R1_FB24_Msk (0x1U << CAN_F13R1_FB24_Pos)
#define CAN_F13R1_FB24 CAN_F13R1_FB24_Msk
#define CAN_F13R1_FB25_Pos (25U)
#define CAN_F13R1_FB25_Msk (0x1U << CAN_F13R1_FB25_Pos)
#define CAN_F13R1_FB25 CAN_F13R1_FB25_Msk
#define CAN_F13R1_FB26_Pos (26U)
#define CAN_F13R1_FB26_Msk (0x1U << CAN_F13R1_FB26_Pos)
#define CAN_F13R1_FB26 CAN_F13R1_FB26_Msk
#define CAN_F13R1_FB27_Pos (27U)
#define CAN_F13R1_FB27_Msk (0x1U << CAN_F13R1_FB27_Pos)
#define CAN_F13R1_FB27 CAN_F13R1_FB27_Msk
#define CAN_F13R1_FB28_Pos (28U)
#define CAN_F13R1_FB28_Msk (0x1U << CAN_F13R1_FB28_Pos)
#define CAN_F13R1_FB28 CAN_F13R1_FB28_Msk
#define CAN_F13R1_FB29_Pos (29U)
#define CAN_F13R1_FB29_Msk (0x1U << CAN_F13R1_FB29_Pos)
#define CAN_F13R1_FB29 CAN_F13R1_FB29_Msk
#define CAN_F13R1_FB30_Pos (30U)
#define CAN_F13R1_FB30_Msk (0x1U << CAN_F13R1_FB30_Pos)
#define CAN_F13R1_FB30 CAN_F13R1_FB30_Msk
#define CAN_F13R1_FB31_Pos (31U)
#define CAN_F13R1_FB31_Msk (0x1U << CAN_F13R1_FB31_Pos)
#define CAN_F13R1_FB31 CAN_F13R1_FB31_Msk


#define CAN_F0R2_FB0_Pos (0U)
#define CAN_F0R2_FB0_Msk (0x1U << CAN_F0R2_FB0_Pos)
#define CAN_F0R2_FB0 CAN_F0R2_FB0_Msk
#define CAN_F0R2_FB1_Pos (1U)
#define CAN_F0R2_FB1_Msk (0x1U << CAN_F0R2_FB1_Pos)
#define CAN_F0R2_FB1 CAN_F0R2_FB1_Msk
#define CAN_F0R2_FB2_Pos (2U)
#define CAN_F0R2_FB2_Msk (0x1U << CAN_F0R2_FB2_Pos)
#define CAN_F0R2_FB2 CAN_F0R2_FB2_Msk
#define CAN_F0R2_FB3_Pos (3U)
#define CAN_F0R2_FB3_Msk (0x1U << CAN_F0R2_FB3_Pos)
#define CAN_F0R2_FB3 CAN_F0R2_FB3_Msk
#define CAN_F0R2_FB4_Pos (4U)
#define CAN_F0R2_FB4_Msk (0x1U << CAN_F0R2_FB4_Pos)
#define CAN_F0R2_FB4 CAN_F0R2_FB4_Msk
#define CAN_F0R2_FB5_Pos (5U)
#define CAN_F0R2_FB5_Msk (0x1U << CAN_F0R2_FB5_Pos)
#define CAN_F0R2_FB5 CAN_F0R2_FB5_Msk
#define CAN_F0R2_FB6_Pos (6U)
#define CAN_F0R2_FB6_Msk (0x1U << CAN_F0R2_FB6_Pos)
#define CAN_F0R2_FB6 CAN_F0R2_FB6_Msk
#define CAN_F0R2_FB7_Pos (7U)
#define CAN_F0R2_FB7_Msk (0x1U << CAN_F0R2_FB7_Pos)
#define CAN_F0R2_FB7 CAN_F0R2_FB7_Msk
#define CAN_F0R2_FB8_Pos (8U)
#define CAN_F0R2_FB8_Msk (0x1U << CAN_F0R2_FB8_Pos)
#define CAN_F0R2_FB8 CAN_F0R2_FB8_Msk
#define CAN_F0R2_FB9_Pos (9U)
#define CAN_F0R2_FB9_Msk (0x1U << CAN_F0R2_FB9_Pos)
#define CAN_F0R2_FB9 CAN_F0R2_FB9_Msk
#define CAN_F0R2_FB10_Pos (10U)
#define CAN_F0R2_FB10_Msk (0x1U << CAN_F0R2_FB10_Pos)
#define CAN_F0R2_FB10 CAN_F0R2_FB10_Msk
#define CAN_F0R2_FB11_Pos (11U)
#define CAN_F0R2_FB11_Msk (0x1U << CAN_F0R2_FB11_Pos)
#define CAN_F0R2_FB11 CAN_F0R2_FB11_Msk
#define CAN_F0R2_FB12_Pos (12U)
#define CAN_F0R2_FB12_Msk (0x1U << CAN_F0R2_FB12_Pos)
#define CAN_F0R2_FB12 CAN_F0R2_FB12_Msk
#define CAN_F0R2_FB13_Pos (13U)
#define CAN_F0R2_FB13_Msk (0x1U << CAN_F0R2_FB13_Pos)
#define CAN_F0R2_FB13 CAN_F0R2_FB13_Msk
#define CAN_F0R2_FB14_Pos (14U)
#define CAN_F0R2_FB14_Msk (0x1U << CAN_F0R2_FB14_Pos)
#define CAN_F0R2_FB14 CAN_F0R2_FB14_Msk
#define CAN_F0R2_FB15_Pos (15U)
#define CAN_F0R2_FB15_Msk (0x1U << CAN_F0R2_FB15_Pos)
#define CAN_F0R2_FB15 CAN_F0R2_FB15_Msk
#define CAN_F0R2_FB16_Pos (16U)
#define CAN_F0R2_FB16_Msk (0x1U << CAN_F0R2_FB16_Pos)
#define CAN_F0R2_FB16 CAN_F0R2_FB16_Msk
#define CAN_F0R2_FB17_Pos (17U)
#define CAN_F0R2_FB17_Msk (0x1U << CAN_F0R2_FB17_Pos)
#define CAN_F0R2_FB17 CAN_F0R2_FB17_Msk
#define CAN_F0R2_FB18_Pos (18U)
#define CAN_F0R2_FB18_Msk (0x1U << CAN_F0R2_FB18_Pos)
#define CAN_F0R2_FB18 CAN_F0R2_FB18_Msk
#define CAN_F0R2_FB19_Pos (19U)
#define CAN_F0R2_FB19_Msk (0x1U << CAN_F0R2_FB19_Pos)
#define CAN_F0R2_FB19 CAN_F0R2_FB19_Msk
#define CAN_F0R2_FB20_Pos (20U)
#define CAN_F0R2_FB20_Msk (0x1U << CAN_F0R2_FB20_Pos)
#define CAN_F0R2_FB20 CAN_F0R2_FB20_Msk
#define CAN_F0R2_FB21_Pos (21U)
#define CAN_F0R2_FB21_Msk (0x1U << CAN_F0R2_FB21_Pos)
#define CAN_F0R2_FB21 CAN_F0R2_FB21_Msk
#define CAN_F0R2_FB22_Pos (22U)
#define CAN_F0R2_FB22_Msk (0x1U << CAN_F0R2_FB22_Pos)
#define CAN_F0R2_FB22 CAN_F0R2_FB22_Msk
#define CAN_F0R2_FB23_Pos (23U)
#define CAN_F0R2_FB23_Msk (0x1U << CAN_F0R2_FB23_Pos)
#define CAN_F0R2_FB23 CAN_F0R2_FB23_Msk
#define CAN_F0R2_FB24_Pos (24U)
#define CAN_F0R2_FB24_Msk (0x1U << CAN_F0R2_FB24_Pos)
#define CAN_F0R2_FB24 CAN_F0R2_FB24_Msk
#define CAN_F0R2_FB25_Pos (25U)
#define CAN_F0R2_FB25_Msk (0x1U << CAN_F0R2_FB25_Pos)
#define CAN_F0R2_FB25 CAN_F0R2_FB25_Msk
#define CAN_F0R2_FB26_Pos (26U)
#define CAN_F0R2_FB26_Msk (0x1U << CAN_F0R2_FB26_Pos)
#define CAN_F0R2_FB26 CAN_F0R2_FB26_Msk
#define CAN_F0R2_FB27_Pos (27U)
#define CAN_F0R2_FB27_Msk (0x1U << CAN_F0R2_FB27_Pos)
#define CAN_F0R2_FB27 CAN_F0R2_FB27_Msk
#define CAN_F0R2_FB28_Pos (28U)
#define CAN_F0R2_FB28_Msk (0x1U << CAN_F0R2_FB28_Pos)
#define CAN_F0R2_FB28 CAN_F0R2_FB28_Msk
#define CAN_F0R2_FB29_Pos (29U)
#define CAN_F0R2_FB29_Msk (0x1U << CAN_F0R2_FB29_Pos)
#define CAN_F0R2_FB29 CAN_F0R2_FB29_Msk
#define CAN_F0R2_FB30_Pos (30U)
#define CAN_F0R2_FB30_Msk (0x1U << CAN_F0R2_FB30_Pos)
#define CAN_F0R2_FB30 CAN_F0R2_FB30_Msk
#define CAN_F0R2_FB31_Pos (31U)
#define CAN_F0R2_FB31_Msk (0x1U << CAN_F0R2_FB31_Pos)
#define CAN_F0R2_FB31 CAN_F0R2_FB31_Msk


#define CAN_F1R2_FB0_Pos (0U)
#define CAN_F1R2_FB0_Msk (0x1U << CAN_F1R2_FB0_Pos)
#define CAN_F1R2_FB0 CAN_F1R2_FB0_Msk
#define CAN_F1R2_FB1_Pos (1U)
#define CAN_F1R2_FB1_Msk (0x1U << CAN_F1R2_FB1_Pos)
#define CAN_F1R2_FB1 CAN_F1R2_FB1_Msk
#define CAN_F1R2_FB2_Pos (2U)
#define CAN_F1R2_FB2_Msk (0x1U << CAN_F1R2_FB2_Pos)
#define CAN_F1R2_FB2 CAN_F1R2_FB2_Msk
#define CAN_F1R2_FB3_Pos (3U)
#define CAN_F1R2_FB3_Msk (0x1U << CAN_F1R2_FB3_Pos)
#define CAN_F1R2_FB3 CAN_F1R2_FB3_Msk
#define CAN_F1R2_FB4_Pos (4U)
#define CAN_F1R2_FB4_Msk (0x1U << CAN_F1R2_FB4_Pos)
#define CAN_F1R2_FB4 CAN_F1R2_FB4_Msk
#define CAN_F1R2_FB5_Pos (5U)
#define CAN_F1R2_FB5_Msk (0x1U << CAN_F1R2_FB5_Pos)
#define CAN_F1R2_FB5 CAN_F1R2_FB5_Msk
#define CAN_F1R2_FB6_Pos (6U)
#define CAN_F1R2_FB6_Msk (0x1U << CAN_F1R2_FB6_Pos)
#define CAN_F1R2_FB6 CAN_F1R2_FB6_Msk
#define CAN_F1R2_FB7_Pos (7U)
#define CAN_F1R2_FB7_Msk (0x1U << CAN_F1R2_FB7_Pos)
#define CAN_F1R2_FB7 CAN_F1R2_FB7_Msk
#define CAN_F1R2_FB8_Pos (8U)
#define CAN_F1R2_FB8_Msk (0x1U << CAN_F1R2_FB8_Pos)
#define CAN_F1R2_FB8 CAN_F1R2_FB8_Msk
#define CAN_F1R2_FB9_Pos (9U)
#define CAN_F1R2_FB9_Msk (0x1U << CAN_F1R2_FB9_Pos)
#define CAN_F1R2_FB9 CAN_F1R2_FB9_Msk
#define CAN_F1R2_FB10_Pos (10U)
#define CAN_F1R2_FB10_Msk (0x1U << CAN_F1R2_FB10_Pos)
#define CAN_F1R2_FB10 CAN_F1R2_FB10_Msk
#define CAN_F1R2_FB11_Pos (11U)
#define CAN_F1R2_FB11_Msk (0x1U << CAN_F1R2_FB11_Pos)
#define CAN_F1R2_FB11 CAN_F1R2_FB11_Msk
#define CAN_F1R2_FB12_Pos (12U)
#define CAN_F1R2_FB12_Msk (0x1U << CAN_F1R2_FB12_Pos)
#define CAN_F1R2_FB12 CAN_F1R2_FB12_Msk
#define CAN_F1R2_FB13_Pos (13U)
#define CAN_F1R2_FB13_Msk (0x1U << CAN_F1R2_FB13_Pos)
#define CAN_F1R2_FB13 CAN_F1R2_FB13_Msk
#define CAN_F1R2_FB14_Pos (14U)
#define CAN_F1R2_FB14_Msk (0x1U << CAN_F1R2_FB14_Pos)
#define CAN_F1R2_FB14 CAN_F1R2_FB14_Msk
#define CAN_F1R2_FB15_Pos (15U)
#define CAN_F1R2_FB15_Msk (0x1U << CAN_F1R2_FB15_Pos)
#define CAN_F1R2_FB15 CAN_F1R2_FB15_Msk
#define CAN_F1R2_FB16_Pos (16U)
#define CAN_F1R2_FB16_Msk (0x1U << CAN_F1R2_FB16_Pos)
#define CAN_F1R2_FB16 CAN_F1R2_FB16_Msk
#define CAN_F1R2_FB17_Pos (17U)
#define CAN_F1R2_FB17_Msk (0x1U << CAN_F1R2_FB17_Pos)
#define CAN_F1R2_FB17 CAN_F1R2_FB17_Msk
#define CAN_F1R2_FB18_Pos (18U)
#define CAN_F1R2_FB18_Msk (0x1U << CAN_F1R2_FB18_Pos)
#define CAN_F1R2_FB18 CAN_F1R2_FB18_Msk
#define CAN_F1R2_FB19_Pos (19U)
#define CAN_F1R2_FB19_Msk (0x1U << CAN_F1R2_FB19_Pos)
#define CAN_F1R2_FB19 CAN_F1R2_FB19_Msk
#define CAN_F1R2_FB20_Pos (20U)
#define CAN_F1R2_FB20_Msk (0x1U << CAN_F1R2_FB20_Pos)
#define CAN_F1R2_FB20 CAN_F1R2_FB20_Msk
#define CAN_F1R2_FB21_Pos (21U)
#define CAN_F1R2_FB21_Msk (0x1U << CAN_F1R2_FB21_Pos)
#define CAN_F1R2_FB21 CAN_F1R2_FB21_Msk
#define CAN_F1R2_FB22_Pos (22U)
#define CAN_F1R2_FB22_Msk (0x1U << CAN_F1R2_FB22_Pos)
#define CAN_F1R2_FB22 CAN_F1R2_FB22_Msk
#define CAN_F1R2_FB23_Pos (23U)
#define CAN_F1R2_FB23_Msk (0x1U << CAN_F1R2_FB23_Pos)
#define CAN_F1R2_FB23 CAN_F1R2_FB23_Msk
#define CAN_F1R2_FB24_Pos (24U)
#define CAN_F1R2_FB24_Msk (0x1U << CAN_F1R2_FB24_Pos)
#define CAN_F1R2_FB24 CAN_F1R2_FB24_Msk
#define CAN_F1R2_FB25_Pos (25U)
#define CAN_F1R2_FB25_Msk (0x1U << CAN_F1R2_FB25_Pos)
#define CAN_F1R2_FB25 CAN_F1R2_FB25_Msk
#define CAN_F1R2_FB26_Pos (26U)
#define CAN_F1R2_FB26_Msk (0x1U << CAN_F1R2_FB26_Pos)
#define CAN_F1R2_FB26 CAN_F1R2_FB26_Msk
#define CAN_F1R2_FB27_Pos (27U)
#define CAN_F1R2_FB27_Msk (0x1U << CAN_F1R2_FB27_Pos)
#define CAN_F1R2_FB27 CAN_F1R2_FB27_Msk
#define CAN_F1R2_FB28_Pos (28U)
#define CAN_F1R2_FB28_Msk (0x1U << CAN_F1R2_FB28_Pos)
#define CAN_F1R2_FB28 CAN_F1R2_FB28_Msk
#define CAN_F1R2_FB29_Pos (29U)
#define CAN_F1R2_FB29_Msk (0x1U << CAN_F1R2_FB29_Pos)
#define CAN_F1R2_FB29 CAN_F1R2_FB29_Msk
#define CAN_F1R2_FB30_Pos (30U)
#define CAN_F1R2_FB30_Msk (0x1U << CAN_F1R2_FB30_Pos)
#define CAN_F1R2_FB30 CAN_F1R2_FB30_Msk
#define CAN_F1R2_FB31_Pos (31U)
#define CAN_F1R2_FB31_Msk (0x1U << CAN_F1R2_FB31_Pos)
#define CAN_F1R2_FB31 CAN_F1R2_FB31_Msk


#define CAN_F2R2_FB0_Pos (0U)
#define CAN_F2R2_FB0_Msk (0x1U << CAN_F2R2_FB0_Pos)
#define CAN_F2R2_FB0 CAN_F2R2_FB0_Msk
#define CAN_F2R2_FB1_Pos (1U)
#define CAN_F2R2_FB1_Msk (0x1U << CAN_F2R2_FB1_Pos)
#define CAN_F2R2_FB1 CAN_F2R2_FB1_Msk
#define CAN_F2R2_FB2_Pos (2U)
#define CAN_F2R2_FB2_Msk (0x1U << CAN_F2R2_FB2_Pos)
#define CAN_F2R2_FB2 CAN_F2R2_FB2_Msk
#define CAN_F2R2_FB3_Pos (3U)
#define CAN_F2R2_FB3_Msk (0x1U << CAN_F2R2_FB3_Pos)
#define CAN_F2R2_FB3 CAN_F2R2_FB3_Msk
#define CAN_F2R2_FB4_Pos (4U)
#define CAN_F2R2_FB4_Msk (0x1U << CAN_F2R2_FB4_Pos)
#define CAN_F2R2_FB4 CAN_F2R2_FB4_Msk
#define CAN_F2R2_FB5_Pos (5U)
#define CAN_F2R2_FB5_Msk (0x1U << CAN_F2R2_FB5_Pos)
#define CAN_F2R2_FB5 CAN_F2R2_FB5_Msk
#define CAN_F2R2_FB6_Pos (6U)
#define CAN_F2R2_FB6_Msk (0x1U << CAN_F2R2_FB6_Pos)
#define CAN_F2R2_FB6 CAN_F2R2_FB6_Msk
#define CAN_F2R2_FB7_Pos (7U)
#define CAN_F2R2_FB7_Msk (0x1U << CAN_F2R2_FB7_Pos)
#define CAN_F2R2_FB7 CAN_F2R2_FB7_Msk
#define CAN_F2R2_FB8_Pos (8U)
#define CAN_F2R2_FB8_Msk (0x1U << CAN_F2R2_FB8_Pos)
#define CAN_F2R2_FB8 CAN_F2R2_FB8_Msk
#define CAN_F2R2_FB9_Pos (9U)
#define CAN_F2R2_FB9_Msk (0x1U << CAN_F2R2_FB9_Pos)
#define CAN_F2R2_FB9 CAN_F2R2_FB9_Msk
#define CAN_F2R2_FB10_Pos (10U)
#define CAN_F2R2_FB10_Msk (0x1U << CAN_F2R2_FB10_Pos)
#define CAN_F2R2_FB10 CAN_F2R2_FB10_Msk
#define CAN_F2R2_FB11_Pos (11U)
#define CAN_F2R2_FB11_Msk (0x1U << CAN_F2R2_FB11_Pos)
#define CAN_F2R2_FB11 CAN_F2R2_FB11_Msk
#define CAN_F2R2_FB12_Pos (12U)
#define CAN_F2R2_FB12_Msk (0x1U << CAN_F2R2_FB12_Pos)
#define CAN_F2R2_FB12 CAN_F2R2_FB12_Msk
#define CAN_F2R2_FB13_Pos (13U)
#define CAN_F2R2_FB13_Msk (0x1U << CAN_F2R2_FB13_Pos)
#define CAN_F2R2_FB13 CAN_F2R2_FB13_Msk
#define CAN_F2R2_FB14_Pos (14U)
#define CAN_F2R2_FB14_Msk (0x1U << CAN_F2R2_FB14_Pos)
#define CAN_F2R2_FB14 CAN_F2R2_FB14_Msk
#define CAN_F2R2_FB15_Pos (15U)
#define CAN_F2R2_FB15_Msk (0x1U << CAN_F2R2_FB15_Pos)
#define CAN_F2R2_FB15 CAN_F2R2_FB15_Msk
#define CAN_F2R2_FB16_Pos (16U)
#define CAN_F2R2_FB16_Msk (0x1U << CAN_F2R2_FB16_Pos)
#define CAN_F2R2_FB16 CAN_F2R2_FB16_Msk
#define CAN_F2R2_FB17_Pos (17U)
#define CAN_F2R2_FB17_Msk (0x1U << CAN_F2R2_FB17_Pos)
#define CAN_F2R2_FB17 CAN_F2R2_FB17_Msk
#define CAN_F2R2_FB18_Pos (18U)
#define CAN_F2R2_FB18_Msk (0x1U << CAN_F2R2_FB18_Pos)
#define CAN_F2R2_FB18 CAN_F2R2_FB18_Msk
#define CAN_F2R2_FB19_Pos (19U)
#define CAN_F2R2_FB19_Msk (0x1U << CAN_F2R2_FB19_Pos)
#define CAN_F2R2_FB19 CAN_F2R2_FB19_Msk
#define CAN_F2R2_FB20_Pos (20U)
#define CAN_F2R2_FB20_Msk (0x1U << CAN_F2R2_FB20_Pos)
#define CAN_F2R2_FB20 CAN_F2R2_FB20_Msk
#define CAN_F2R2_FB21_Pos (21U)
#define CAN_F2R2_FB21_Msk (0x1U << CAN_F2R2_FB21_Pos)
#define CAN_F2R2_FB21 CAN_F2R2_FB21_Msk
#define CAN_F2R2_FB22_Pos (22U)
#define CAN_F2R2_FB22_Msk (0x1U << CAN_F2R2_FB22_Pos)
#define CAN_F2R2_FB22 CAN_F2R2_FB22_Msk
#define CAN_F2R2_FB23_Pos (23U)
#define CAN_F2R2_FB23_Msk (0x1U << CAN_F2R2_FB23_Pos)
#define CAN_F2R2_FB23 CAN_F2R2_FB23_Msk
#define CAN_F2R2_FB24_Pos (24U)
#define CAN_F2R2_FB24_Msk (0x1U << CAN_F2R2_FB24_Pos)
#define CAN_F2R2_FB24 CAN_F2R2_FB24_Msk
#define CAN_F2R2_FB25_Pos (25U)
#define CAN_F2R2_FB25_Msk (0x1U << CAN_F2R2_FB25_Pos)
#define CAN_F2R2_FB25 CAN_F2R2_FB25_Msk
#define CAN_F2R2_FB26_Pos (26U)
#define CAN_F2R2_FB26_Msk (0x1U << CAN_F2R2_FB26_Pos)
#define CAN_F2R2_FB26 CAN_F2R2_FB26_Msk
#define CAN_F2R2_FB27_Pos (27U)
#define CAN_F2R2_FB27_Msk (0x1U << CAN_F2R2_FB27_Pos)
#define CAN_F2R2_FB27 CAN_F2R2_FB27_Msk
#define CAN_F2R2_FB28_Pos (28U)
#define CAN_F2R2_FB28_Msk (0x1U << CAN_F2R2_FB28_Pos)
#define CAN_F2R2_FB28 CAN_F2R2_FB28_Msk
#define CAN_F2R2_FB29_Pos (29U)
#define CAN_F2R2_FB29_Msk (0x1U << CAN_F2R2_FB29_Pos)
#define CAN_F2R2_FB29 CAN_F2R2_FB29_Msk
#define CAN_F2R2_FB30_Pos (30U)
#define CAN_F2R2_FB30_Msk (0x1U << CAN_F2R2_FB30_Pos)
#define CAN_F2R2_FB30 CAN_F2R2_FB30_Msk
#define CAN_F2R2_FB31_Pos (31U)
#define CAN_F2R2_FB31_Msk (0x1U << CAN_F2R2_FB31_Pos)
#define CAN_F2R2_FB31 CAN_F2R2_FB31_Msk


#define CAN_F3R2_FB0_Pos (0U)
#define CAN_F3R2_FB0_Msk (0x1U << CAN_F3R2_FB0_Pos)
#define CAN_F3R2_FB0 CAN_F3R2_FB0_Msk
#define CAN_F3R2_FB1_Pos (1U)
#define CAN_F3R2_FB1_Msk (0x1U << CAN_F3R2_FB1_Pos)
#define CAN_F3R2_FB1 CAN_F3R2_FB1_Msk
#define CAN_F3R2_FB2_Pos (2U)
#define CAN_F3R2_FB2_Msk (0x1U << CAN_F3R2_FB2_Pos)
#define CAN_F3R2_FB2 CAN_F3R2_FB2_Msk
#define CAN_F3R2_FB3_Pos (3U)
#define CAN_F3R2_FB3_Msk (0x1U << CAN_F3R2_FB3_Pos)
#define CAN_F3R2_FB3 CAN_F3R2_FB3_Msk
#define CAN_F3R2_FB4_Pos (4U)
#define CAN_F3R2_FB4_Msk (0x1U << CAN_F3R2_FB4_Pos)
#define CAN_F3R2_FB4 CAN_F3R2_FB4_Msk
#define CAN_F3R2_FB5_Pos (5U)
#define CAN_F3R2_FB5_Msk (0x1U << CAN_F3R2_FB5_Pos)
#define CAN_F3R2_FB5 CAN_F3R2_FB5_Msk
#define CAN_F3R2_FB6_Pos (6U)
#define CAN_F3R2_FB6_Msk (0x1U << CAN_F3R2_FB6_Pos)
#define CAN_F3R2_FB6 CAN_F3R2_FB6_Msk
#define CAN_F3R2_FB7_Pos (7U)
#define CAN_F3R2_FB7_Msk (0x1U << CAN_F3R2_FB7_Pos)
#define CAN_F3R2_FB7 CAN_F3R2_FB7_Msk
#define CAN_F3R2_FB8_Pos (8U)
#define CAN_F3R2_FB8_Msk (0x1U << CAN_F3R2_FB8_Pos)
#define CAN_F3R2_FB8 CAN_F3R2_FB8_Msk
#define CAN_F3R2_FB9_Pos (9U)
#define CAN_F3R2_FB9_Msk (0x1U << CAN_F3R2_FB9_Pos)
#define CAN_F3R2_FB9 CAN_F3R2_FB9_Msk
#define CAN_F3R2_FB10_Pos (10U)
#define CAN_F3R2_FB10_Msk (0x1U << CAN_F3R2_FB10_Pos)
#define CAN_F3R2_FB10 CAN_F3R2_FB10_Msk
#define CAN_F3R2_FB11_Pos (11U)
#define CAN_F3R2_FB11_Msk (0x1U << CAN_F3R2_FB11_Pos)
#define CAN_F3R2_FB11 CAN_F3R2_FB11_Msk
#define CAN_F3R2_FB12_Pos (12U)
#define CAN_F3R2_FB12_Msk (0x1U << CAN_F3R2_FB12_Pos)
#define CAN_F3R2_FB12 CAN_F3R2_FB12_Msk
#define CAN_F3R2_FB13_Pos (13U)
#define CAN_F3R2_FB13_Msk (0x1U << CAN_F3R2_FB13_Pos)
#define CAN_F3R2_FB13 CAN_F3R2_FB13_Msk
#define CAN_F3R2_FB14_Pos (14U)
#define CAN_F3R2_FB14_Msk (0x1U << CAN_F3R2_FB14_Pos)
#define CAN_F3R2_FB14 CAN_F3R2_FB14_Msk
#define CAN_F3R2_FB15_Pos (15U)
#define CAN_F3R2_FB15_Msk (0x1U << CAN_F3R2_FB15_Pos)
#define CAN_F3R2_FB15 CAN_F3R2_FB15_Msk
#define CAN_F3R2_FB16_Pos (16U)
#define CAN_F3R2_FB16_Msk (0x1U << CAN_F3R2_FB16_Pos)
#define CAN_F3R2_FB16 CAN_F3R2_FB16_Msk
#define CAN_F3R2_FB17_Pos (17U)
#define CAN_F3R2_FB17_Msk (0x1U << CAN_F3R2_FB17_Pos)
#define CAN_F3R2_FB17 CAN_F3R2_FB17_Msk
#define CAN_F3R2_FB18_Pos (18U)
#define CAN_F3R2_FB18_Msk (0x1U << CAN_F3R2_FB18_Pos)
#define CAN_F3R2_FB18 CAN_F3R2_FB18_Msk
#define CAN_F3R2_FB19_Pos (19U)
#define CAN_F3R2_FB19_Msk (0x1U << CAN_F3R2_FB19_Pos)
#define CAN_F3R2_FB19 CAN_F3R2_FB19_Msk
#define CAN_F3R2_FB20_Pos (20U)
#define CAN_F3R2_FB20_Msk (0x1U << CAN_F3R2_FB20_Pos)
#define CAN_F3R2_FB20 CAN_F3R2_FB20_Msk
#define CAN_F3R2_FB21_Pos (21U)
#define CAN_F3R2_FB21_Msk (0x1U << CAN_F3R2_FB21_Pos)
#define CAN_F3R2_FB21 CAN_F3R2_FB21_Msk
#define CAN_F3R2_FB22_Pos (22U)
#define CAN_F3R2_FB22_Msk (0x1U << CAN_F3R2_FB22_Pos)
#define CAN_F3R2_FB22 CAN_F3R2_FB22_Msk
#define CAN_F3R2_FB23_Pos (23U)
#define CAN_F3R2_FB23_Msk (0x1U << CAN_F3R2_FB23_Pos)
#define CAN_F3R2_FB23 CAN_F3R2_FB23_Msk
#define CAN_F3R2_FB24_Pos (24U)
#define CAN_F3R2_FB24_Msk (0x1U << CAN_F3R2_FB24_Pos)
#define CAN_F3R2_FB24 CAN_F3R2_FB24_Msk
#define CAN_F3R2_FB25_Pos (25U)
#define CAN_F3R2_FB25_Msk (0x1U << CAN_F3R2_FB25_Pos)
#define CAN_F3R2_FB25 CAN_F3R2_FB25_Msk
#define CAN_F3R2_FB26_Pos (26U)
#define CAN_F3R2_FB26_Msk (0x1U << CAN_F3R2_FB26_Pos)
#define CAN_F3R2_FB26 CAN_F3R2_FB26_Msk
#define CAN_F3R2_FB27_Pos (27U)
#define CAN_F3R2_FB27_Msk (0x1U << CAN_F3R2_FB27_Pos)
#define CAN_F3R2_FB27 CAN_F3R2_FB27_Msk
#define CAN_F3R2_FB28_Pos (28U)
#define CAN_F3R2_FB28_Msk (0x1U << CAN_F3R2_FB28_Pos)
#define CAN_F3R2_FB28 CAN_F3R2_FB28_Msk
#define CAN_F3R2_FB29_Pos (29U)
#define CAN_F3R2_FB29_Msk (0x1U << CAN_F3R2_FB29_Pos)
#define CAN_F3R2_FB29 CAN_F3R2_FB29_Msk
#define CAN_F3R2_FB30_Pos (30U)
#define CAN_F3R2_FB30_Msk (0x1U << CAN_F3R2_FB30_Pos)
#define CAN_F3R2_FB30 CAN_F3R2_FB30_Msk
#define CAN_F3R2_FB31_Pos (31U)
#define CAN_F3R2_FB31_Msk (0x1U << CAN_F3R2_FB31_Pos)
#define CAN_F3R2_FB31 CAN_F3R2_FB31_Msk


#define CAN_F4R2_FB0_Pos (0U)
#define CAN_F4R2_FB0_Msk (0x1U << CAN_F4R2_FB0_Pos)
#define CAN_F4R2_FB0 CAN_F4R2_FB0_Msk
#define CAN_F4R2_FB1_Pos (1U)
#define CAN_F4R2_FB1_Msk (0x1U << CAN_F4R2_FB1_Pos)
#define CAN_F4R2_FB1 CAN_F4R2_FB1_Msk
#define CAN_F4R2_FB2_Pos (2U)
#define CAN_F4R2_FB2_Msk (0x1U << CAN_F4R2_FB2_Pos)
#define CAN_F4R2_FB2 CAN_F4R2_FB2_Msk
#define CAN_F4R2_FB3_Pos (3U)
#define CAN_F4R2_FB3_Msk (0x1U << CAN_F4R2_FB3_Pos)
#define CAN_F4R2_FB3 CAN_F4R2_FB3_Msk
#define CAN_F4R2_FB4_Pos (4U)
#define CAN_F4R2_FB4_Msk (0x1U << CAN_F4R2_FB4_Pos)
#define CAN_F4R2_FB4 CAN_F4R2_FB4_Msk
#define CAN_F4R2_FB5_Pos (5U)
#define CAN_F4R2_FB5_Msk (0x1U << CAN_F4R2_FB5_Pos)
#define CAN_F4R2_FB5 CAN_F4R2_FB5_Msk
#define CAN_F4R2_FB6_Pos (6U)
#define CAN_F4R2_FB6_Msk (0x1U << CAN_F4R2_FB6_Pos)
#define CAN_F4R2_FB6 CAN_F4R2_FB6_Msk
#define CAN_F4R2_FB7_Pos (7U)
#define CAN_F4R2_FB7_Msk (0x1U << CAN_F4R2_FB7_Pos)
#define CAN_F4R2_FB7 CAN_F4R2_FB7_Msk
#define CAN_F4R2_FB8_Pos (8U)
#define CAN_F4R2_FB8_Msk (0x1U << CAN_F4R2_FB8_Pos)
#define CAN_F4R2_FB8 CAN_F4R2_FB8_Msk
#define CAN_F4R2_FB9_Pos (9U)
#define CAN_F4R2_FB9_Msk (0x1U << CAN_F4R2_FB9_Pos)
#define CAN_F4R2_FB9 CAN_F4R2_FB9_Msk
#define CAN_F4R2_FB10_Pos (10U)
#define CAN_F4R2_FB10_Msk (0x1U << CAN_F4R2_FB10_Pos)
#define CAN_F4R2_FB10 CAN_F4R2_FB10_Msk
#define CAN_F4R2_FB11_Pos (11U)
#define CAN_F4R2_FB11_Msk (0x1U << CAN_F4R2_FB11_Pos)
#define CAN_F4R2_FB11 CAN_F4R2_FB11_Msk
#define CAN_F4R2_FB12_Pos (12U)
#define CAN_F4R2_FB12_Msk (0x1U << CAN_F4R2_FB12_Pos)
#define CAN_F4R2_FB12 CAN_F4R2_FB12_Msk
#define CAN_F4R2_FB13_Pos (13U)
#define CAN_F4R2_FB13_Msk (0x1U << CAN_F4R2_FB13_Pos)
#define CAN_F4R2_FB13 CAN_F4R2_FB13_Msk
#define CAN_F4R2_FB14_Pos (14U)
#define CAN_F4R2_FB14_Msk (0x1U << CAN_F4R2_FB14_Pos)
#define CAN_F4R2_FB14 CAN_F4R2_FB14_Msk
#define CAN_F4R2_FB15_Pos (15U)
#define CAN_F4R2_FB15_Msk (0x1U << CAN_F4R2_FB15_Pos)
#define CAN_F4R2_FB15 CAN_F4R2_FB15_Msk
#define CAN_F4R2_FB16_Pos (16U)
#define CAN_F4R2_FB16_Msk (0x1U << CAN_F4R2_FB16_Pos)
#define CAN_F4R2_FB16 CAN_F4R2_FB16_Msk
#define CAN_F4R2_FB17_Pos (17U)
#define CAN_F4R2_FB17_Msk (0x1U << CAN_F4R2_FB17_Pos)
#define CAN_F4R2_FB17 CAN_F4R2_FB17_Msk
#define CAN_F4R2_FB18_Pos (18U)
#define CAN_F4R2_FB18_Msk (0x1U << CAN_F4R2_FB18_Pos)
#define CAN_F4R2_FB18 CAN_F4R2_FB18_Msk
#define CAN_F4R2_FB19_Pos (19U)
#define CAN_F4R2_FB19_Msk (0x1U << CAN_F4R2_FB19_Pos)
#define CAN_F4R2_FB19 CAN_F4R2_FB19_Msk
#define CAN_F4R2_FB20_Pos (20U)
#define CAN_F4R2_FB20_Msk (0x1U << CAN_F4R2_FB20_Pos)
#define CAN_F4R2_FB20 CAN_F4R2_FB20_Msk
#define CAN_F4R2_FB21_Pos (21U)
#define CAN_F4R2_FB21_Msk (0x1U << CAN_F4R2_FB21_Pos)
#define CAN_F4R2_FB21 CAN_F4R2_FB21_Msk
#define CAN_F4R2_FB22_Pos (22U)
#define CAN_F4R2_FB22_Msk (0x1U << CAN_F4R2_FB22_Pos)
#define CAN_F4R2_FB22 CAN_F4R2_FB22_Msk
#define CAN_F4R2_FB23_Pos (23U)
#define CAN_F4R2_FB23_Msk (0x1U << CAN_F4R2_FB23_Pos)
#define CAN_F4R2_FB23 CAN_F4R2_FB23_Msk
#define CAN_F4R2_FB24_Pos (24U)
#define CAN_F4R2_FB24_Msk (0x1U << CAN_F4R2_FB24_Pos)
#define CAN_F4R2_FB24 CAN_F4R2_FB24_Msk
#define CAN_F4R2_FB25_Pos (25U)
#define CAN_F4R2_FB25_Msk (0x1U << CAN_F4R2_FB25_Pos)
#define CAN_F4R2_FB25 CAN_F4R2_FB25_Msk
#define CAN_F4R2_FB26_Pos (26U)
#define CAN_F4R2_FB26_Msk (0x1U << CAN_F4R2_FB26_Pos)
#define CAN_F4R2_FB26 CAN_F4R2_FB26_Msk
#define CAN_F4R2_FB27_Pos (27U)
#define CAN_F4R2_FB27_Msk (0x1U << CAN_F4R2_FB27_Pos)
#define CAN_F4R2_FB27 CAN_F4R2_FB27_Msk
#define CAN_F4R2_FB28_Pos (28U)
#define CAN_F4R2_FB28_Msk (0x1U << CAN_F4R2_FB28_Pos)
#define CAN_F4R2_FB28 CAN_F4R2_FB28_Msk
#define CAN_F4R2_FB29_Pos (29U)
#define CAN_F4R2_FB29_Msk (0x1U << CAN_F4R2_FB29_Pos)
#define CAN_F4R2_FB29 CAN_F4R2_FB29_Msk
#define CAN_F4R2_FB30_Pos (30U)
#define CAN_F4R2_FB30_Msk (0x1U << CAN_F4R2_FB30_Pos)
#define CAN_F4R2_FB30 CAN_F4R2_FB30_Msk
#define CAN_F4R2_FB31_Pos (31U)
#define CAN_F4R2_FB31_Msk (0x1U << CAN_F4R2_FB31_Pos)
#define CAN_F4R2_FB31 CAN_F4R2_FB31_Msk


#define CAN_F5R2_FB0_Pos (0U)
#define CAN_F5R2_FB0_Msk (0x1U << CAN_F5R2_FB0_Pos)
#define CAN_F5R2_FB0 CAN_F5R2_FB0_Msk
#define CAN_F5R2_FB1_Pos (1U)
#define CAN_F5R2_FB1_Msk (0x1U << CAN_F5R2_FB1_Pos)
#define CAN_F5R2_FB1 CAN_F5R2_FB1_Msk
#define CAN_F5R2_FB2_Pos (2U)
#define CAN_F5R2_FB2_Msk (0x1U << CAN_F5R2_FB2_Pos)
#define CAN_F5R2_FB2 CAN_F5R2_FB2_Msk
#define CAN_F5R2_FB3_Pos (3U)
#define CAN_F5R2_FB3_Msk (0x1U << CAN_F5R2_FB3_Pos)
#define CAN_F5R2_FB3 CAN_F5R2_FB3_Msk
#define CAN_F5R2_FB4_Pos (4U)
#define CAN_F5R2_FB4_Msk (0x1U << CAN_F5R2_FB4_Pos)
#define CAN_F5R2_FB4 CAN_F5R2_FB4_Msk
#define CAN_F5R2_FB5_Pos (5U)
#define CAN_F5R2_FB5_Msk (0x1U << CAN_F5R2_FB5_Pos)
#define CAN_F5R2_FB5 CAN_F5R2_FB5_Msk
#define CAN_F5R2_FB6_Pos (6U)
#define CAN_F5R2_FB6_Msk (0x1U << CAN_F5R2_FB6_Pos)
#define CAN_F5R2_FB6 CAN_F5R2_FB6_Msk
#define CAN_F5R2_FB7_Pos (7U)
#define CAN_F5R2_FB7_Msk (0x1U << CAN_F5R2_FB7_Pos)
#define CAN_F5R2_FB7 CAN_F5R2_FB7_Msk
#define CAN_F5R2_FB8_Pos (8U)
#define CAN_F5R2_FB8_Msk (0x1U << CAN_F5R2_FB8_Pos)
#define CAN_F5R2_FB8 CAN_F5R2_FB8_Msk
#define CAN_F5R2_FB9_Pos (9U)
#define CAN_F5R2_FB9_Msk (0x1U << CAN_F5R2_FB9_Pos)
#define CAN_F5R2_FB9 CAN_F5R2_FB9_Msk
#define CAN_F5R2_FB10_Pos (10U)
#define CAN_F5R2_FB10_Msk (0x1U << CAN_F5R2_FB10_Pos)
#define CAN_F5R2_FB10 CAN_F5R2_FB10_Msk
#define CAN_F5R2_FB11_Pos (11U)
#define CAN_F5R2_FB11_Msk (0x1U << CAN_F5R2_FB11_Pos)
#define CAN_F5R2_FB11 CAN_F5R2_FB11_Msk
#define CAN_F5R2_FB12_Pos (12U)
#define CAN_F5R2_FB12_Msk (0x1U << CAN_F5R2_FB12_Pos)
#define CAN_F5R2_FB12 CAN_F5R2_FB12_Msk
#define CAN_F5R2_FB13_Pos (13U)
#define CAN_F5R2_FB13_Msk (0x1U << CAN_F5R2_FB13_Pos)
#define CAN_F5R2_FB13 CAN_F5R2_FB13_Msk
#define CAN_F5R2_FB14_Pos (14U)
#define CAN_F5R2_FB14_Msk (0x1U << CAN_F5R2_FB14_Pos)
#define CAN_F5R2_FB14 CAN_F5R2_FB14_Msk
#define CAN_F5R2_FB15_Pos (15U)
#define CAN_F5R2_FB15_Msk (0x1U << CAN_F5R2_FB15_Pos)
#define CAN_F5R2_FB15 CAN_F5R2_FB15_Msk
#define CAN_F5R2_FB16_Pos (16U)
#define CAN_F5R2_FB16_Msk (0x1U << CAN_F5R2_FB16_Pos)
#define CAN_F5R2_FB16 CAN_F5R2_FB16_Msk
#define CAN_F5R2_FB17_Pos (17U)
#define CAN_F5R2_FB17_Msk (0x1U << CAN_F5R2_FB17_Pos)
#define CAN_F5R2_FB17 CAN_F5R2_FB17_Msk
#define CAN_F5R2_FB18_Pos (18U)
#define CAN_F5R2_FB18_Msk (0x1U << CAN_F5R2_FB18_Pos)
#define CAN_F5R2_FB18 CAN_F5R2_FB18_Msk
#define CAN_F5R2_FB19_Pos (19U)
#define CAN_F5R2_FB19_Msk (0x1U << CAN_F5R2_FB19_Pos)
#define CAN_F5R2_FB19 CAN_F5R2_FB19_Msk
#define CAN_F5R2_FB20_Pos (20U)
#define CAN_F5R2_FB20_Msk (0x1U << CAN_F5R2_FB20_Pos)
#define CAN_F5R2_FB20 CAN_F5R2_FB20_Msk
#define CAN_F5R2_FB21_Pos (21U)
#define CAN_F5R2_FB21_Msk (0x1U << CAN_F5R2_FB21_Pos)
#define CAN_F5R2_FB21 CAN_F5R2_FB21_Msk
#define CAN_F5R2_FB22_Pos (22U)
#define CAN_F5R2_FB22_Msk (0x1U << CAN_F5R2_FB22_Pos)
#define CAN_F5R2_FB22 CAN_F5R2_FB22_Msk
#define CAN_F5R2_FB23_Pos (23U)
#define CAN_F5R2_FB23_Msk (0x1U << CAN_F5R2_FB23_Pos)
#define CAN_F5R2_FB23 CAN_F5R2_FB23_Msk
#define CAN_F5R2_FB24_Pos (24U)
#define CAN_F5R2_FB24_Msk (0x1U << CAN_F5R2_FB24_Pos)
#define CAN_F5R2_FB24 CAN_F5R2_FB24_Msk
#define CAN_F5R2_FB25_Pos (25U)
#define CAN_F5R2_FB25_Msk (0x1U << CAN_F5R2_FB25_Pos)
#define CAN_F5R2_FB25 CAN_F5R2_FB25_Msk
#define CAN_F5R2_FB26_Pos (26U)
#define CAN_F5R2_FB26_Msk (0x1U << CAN_F5R2_FB26_Pos)
#define CAN_F5R2_FB26 CAN_F5R2_FB26_Msk
#define CAN_F5R2_FB27_Pos (27U)
#define CAN_F5R2_FB27_Msk (0x1U << CAN_F5R2_FB27_Pos)
#define CAN_F5R2_FB27 CAN_F5R2_FB27_Msk
#define CAN_F5R2_FB28_Pos (28U)
#define CAN_F5R2_FB28_Msk (0x1U << CAN_F5R2_FB28_Pos)
#define CAN_F5R2_FB28 CAN_F5R2_FB28_Msk
#define CAN_F5R2_FB29_Pos (29U)
#define CAN_F5R2_FB29_Msk (0x1U << CAN_F5R2_FB29_Pos)
#define CAN_F5R2_FB29 CAN_F5R2_FB29_Msk
#define CAN_F5R2_FB30_Pos (30U)
#define CAN_F5R2_FB30_Msk (0x1U << CAN_F5R2_FB30_Pos)
#define CAN_F5R2_FB30 CAN_F5R2_FB30_Msk
#define CAN_F5R2_FB31_Pos (31U)
#define CAN_F5R2_FB31_Msk (0x1U << CAN_F5R2_FB31_Pos)
#define CAN_F5R2_FB31 CAN_F5R2_FB31_Msk


#define CAN_F6R2_FB0_Pos (0U)
#define CAN_F6R2_FB0_Msk (0x1U << CAN_F6R2_FB0_Pos)
#define CAN_F6R2_FB0 CAN_F6R2_FB0_Msk
#define CAN_F6R2_FB1_Pos (1U)
#define CAN_F6R2_FB1_Msk (0x1U << CAN_F6R2_FB1_Pos)
#define CAN_F6R2_FB1 CAN_F6R2_FB1_Msk
#define CAN_F6R2_FB2_Pos (2U)
#define CAN_F6R2_FB2_Msk (0x1U << CAN_F6R2_FB2_Pos)
#define CAN_F6R2_FB2 CAN_F6R2_FB2_Msk
#define CAN_F6R2_FB3_Pos (3U)
#define CAN_F6R2_FB3_Msk (0x1U << CAN_F6R2_FB3_Pos)
#define CAN_F6R2_FB3 CAN_F6R2_FB3_Msk
#define CAN_F6R2_FB4_Pos (4U)
#define CAN_F6R2_FB4_Msk (0x1U << CAN_F6R2_FB4_Pos)
#define CAN_F6R2_FB4 CAN_F6R2_FB4_Msk
#define CAN_F6R2_FB5_Pos (5U)
#define CAN_F6R2_FB5_Msk (0x1U << CAN_F6R2_FB5_Pos)
#define CAN_F6R2_FB5 CAN_F6R2_FB5_Msk
#define CAN_F6R2_FB6_Pos (6U)
#define CAN_F6R2_FB6_Msk (0x1U << CAN_F6R2_FB6_Pos)
#define CAN_F6R2_FB6 CAN_F6R2_FB6_Msk
#define CAN_F6R2_FB7_Pos (7U)
#define CAN_F6R2_FB7_Msk (0x1U << CAN_F6R2_FB7_Pos)
#define CAN_F6R2_FB7 CAN_F6R2_FB7_Msk
#define CAN_F6R2_FB8_Pos (8U)
#define CAN_F6R2_FB8_Msk (0x1U << CAN_F6R2_FB8_Pos)
#define CAN_F6R2_FB8 CAN_F6R2_FB8_Msk
#define CAN_F6R2_FB9_Pos (9U)
#define CAN_F6R2_FB9_Msk (0x1U << CAN_F6R2_FB9_Pos)
#define CAN_F6R2_FB9 CAN_F6R2_FB9_Msk
#define CAN_F6R2_FB10_Pos (10U)
#define CAN_F6R2_FB10_Msk (0x1U << CAN_F6R2_FB10_Pos)
#define CAN_F6R2_FB10 CAN_F6R2_FB10_Msk
#define CAN_F6R2_FB11_Pos (11U)
#define CAN_F6R2_FB11_Msk (0x1U << CAN_F6R2_FB11_Pos)
#define CAN_F6R2_FB11 CAN_F6R2_FB11_Msk
#define CAN_F6R2_FB12_Pos (12U)
#define CAN_F6R2_FB12_Msk (0x1U << CAN_F6R2_FB12_Pos)
#define CAN_F6R2_FB12 CAN_F6R2_FB12_Msk
#define CAN_F6R2_FB13_Pos (13U)
#define CAN_F6R2_FB13_Msk (0x1U << CAN_F6R2_FB13_Pos)
#define CAN_F6R2_FB13 CAN_F6R2_FB13_Msk
#define CAN_F6R2_FB14_Pos (14U)
#define CAN_F6R2_FB14_Msk (0x1U << CAN_F6R2_FB14_Pos)
#define CAN_F6R2_FB14 CAN_F6R2_FB14_Msk
#define CAN_F6R2_FB15_Pos (15U)
#define CAN_F6R2_FB15_Msk (0x1U << CAN_F6R2_FB15_Pos)
#define CAN_F6R2_FB15 CAN_F6R2_FB15_Msk
#define CAN_F6R2_FB16_Pos (16U)
#define CAN_F6R2_FB16_Msk (0x1U << CAN_F6R2_FB16_Pos)
#define CAN_F6R2_FB16 CAN_F6R2_FB16_Msk
#define CAN_F6R2_FB17_Pos (17U)
#define CAN_F6R2_FB17_Msk (0x1U << CAN_F6R2_FB17_Pos)
#define CAN_F6R2_FB17 CAN_F6R2_FB17_Msk
#define CAN_F6R2_FB18_Pos (18U)
#define CAN_F6R2_FB18_Msk (0x1U << CAN_F6R2_FB18_Pos)
#define CAN_F6R2_FB18 CAN_F6R2_FB18_Msk
#define CAN_F6R2_FB19_Pos (19U)
#define CAN_F6R2_FB19_Msk (0x1U << CAN_F6R2_FB19_Pos)
#define CAN_F6R2_FB19 CAN_F6R2_FB19_Msk
#define CAN_F6R2_FB20_Pos (20U)
#define CAN_F6R2_FB20_Msk (0x1U << CAN_F6R2_FB20_Pos)
#define CAN_F6R2_FB20 CAN_F6R2_FB20_Msk
#define CAN_F6R2_FB21_Pos (21U)
#define CAN_F6R2_FB21_Msk (0x1U << CAN_F6R2_FB21_Pos)
#define CAN_F6R2_FB21 CAN_F6R2_FB21_Msk
#define CAN_F6R2_FB22_Pos (22U)
#define CAN_F6R2_FB22_Msk (0x1U << CAN_F6R2_FB22_Pos)
#define CAN_F6R2_FB22 CAN_F6R2_FB22_Msk
#define CAN_F6R2_FB23_Pos (23U)
#define CAN_F6R2_FB23_Msk (0x1U << CAN_F6R2_FB23_Pos)
#define CAN_F6R2_FB23 CAN_F6R2_FB23_Msk
#define CAN_F6R2_FB24_Pos (24U)
#define CAN_F6R2_FB24_Msk (0x1U << CAN_F6R2_FB24_Pos)
#define CAN_F6R2_FB24 CAN_F6R2_FB24_Msk
#define CAN_F6R2_FB25_Pos (25U)
#define CAN_F6R2_FB25_Msk (0x1U << CAN_F6R2_FB25_Pos)
#define CAN_F6R2_FB25 CAN_F6R2_FB25_Msk
#define CAN_F6R2_FB26_Pos (26U)
#define CAN_F6R2_FB26_Msk (0x1U << CAN_F6R2_FB26_Pos)
#define CAN_F6R2_FB26 CAN_F6R2_FB26_Msk
#define CAN_F6R2_FB27_Pos (27U)
#define CAN_F6R2_FB27_Msk (0x1U << CAN_F6R2_FB27_Pos)
#define CAN_F6R2_FB27 CAN_F6R2_FB27_Msk
#define CAN_F6R2_FB28_Pos (28U)
#define CAN_F6R2_FB28_Msk (0x1U << CAN_F6R2_FB28_Pos)
#define CAN_F6R2_FB28 CAN_F6R2_FB28_Msk
#define CAN_F6R2_FB29_Pos (29U)
#define CAN_F6R2_FB29_Msk (0x1U << CAN_F6R2_FB29_Pos)
#define CAN_F6R2_FB29 CAN_F6R2_FB29_Msk
#define CAN_F6R2_FB30_Pos (30U)
#define CAN_F6R2_FB30_Msk (0x1U << CAN_F6R2_FB30_Pos)
#define CAN_F6R2_FB30 CAN_F6R2_FB30_Msk
#define CAN_F6R2_FB31_Pos (31U)
#define CAN_F6R2_FB31_Msk (0x1U << CAN_F6R2_FB31_Pos)
#define CAN_F6R2_FB31 CAN_F6R2_FB31_Msk


#define CAN_F7R2_FB0_Pos (0U)
#define CAN_F7R2_FB0_Msk (0x1U << CAN_F7R2_FB0_Pos)
#define CAN_F7R2_FB0 CAN_F7R2_FB0_Msk
#define CAN_F7R2_FB1_Pos (1U)
#define CAN_F7R2_FB1_Msk (0x1U << CAN_F7R2_FB1_Pos)
#define CAN_F7R2_FB1 CAN_F7R2_FB1_Msk
#define CAN_F7R2_FB2_Pos (2U)
#define CAN_F7R2_FB2_Msk (0x1U << CAN_F7R2_FB2_Pos)
#define CAN_F7R2_FB2 CAN_F7R2_FB2_Msk
#define CAN_F7R2_FB3_Pos (3U)
#define CAN_F7R2_FB3_Msk (0x1U << CAN_F7R2_FB3_Pos)
#define CAN_F7R2_FB3 CAN_F7R2_FB3_Msk
#define CAN_F7R2_FB4_Pos (4U)
#define CAN_F7R2_FB4_Msk (0x1U << CAN_F7R2_FB4_Pos)
#define CAN_F7R2_FB4 CAN_F7R2_FB4_Msk
#define CAN_F7R2_FB5_Pos (5U)
#define CAN_F7R2_FB5_Msk (0x1U << CAN_F7R2_FB5_Pos)
#define CAN_F7R2_FB5 CAN_F7R2_FB5_Msk
#define CAN_F7R2_FB6_Pos (6U)
#define CAN_F7R2_FB6_Msk (0x1U << CAN_F7R2_FB6_Pos)
#define CAN_F7R2_FB6 CAN_F7R2_FB6_Msk
#define CAN_F7R2_FB7_Pos (7U)
#define CAN_F7R2_FB7_Msk (0x1U << CAN_F7R2_FB7_Pos)
#define CAN_F7R2_FB7 CAN_F7R2_FB7_Msk
#define CAN_F7R2_FB8_Pos (8U)
#define CAN_F7R2_FB8_Msk (0x1U << CAN_F7R2_FB8_Pos)
#define CAN_F7R2_FB8 CAN_F7R2_FB8_Msk
#define CAN_F7R2_FB9_Pos (9U)
#define CAN_F7R2_FB9_Msk (0x1U << CAN_F7R2_FB9_Pos)
#define CAN_F7R2_FB9 CAN_F7R2_FB9_Msk
#define CAN_F7R2_FB10_Pos (10U)
#define CAN_F7R2_FB10_Msk (0x1U << CAN_F7R2_FB10_Pos)
#define CAN_F7R2_FB10 CAN_F7R2_FB10_Msk
#define CAN_F7R2_FB11_Pos (11U)
#define CAN_F7R2_FB11_Msk (0x1U << CAN_F7R2_FB11_Pos)
#define CAN_F7R2_FB11 CAN_F7R2_FB11_Msk
#define CAN_F7R2_FB12_Pos (12U)
#define CAN_F7R2_FB12_Msk (0x1U << CAN_F7R2_FB12_Pos)
#define CAN_F7R2_FB12 CAN_F7R2_FB12_Msk
#define CAN_F7R2_FB13_Pos (13U)
#define CAN_F7R2_FB13_Msk (0x1U << CAN_F7R2_FB13_Pos)
#define CAN_F7R2_FB13 CAN_F7R2_FB13_Msk
#define CAN_F7R2_FB14_Pos (14U)
#define CAN_F7R2_FB14_Msk (0x1U << CAN_F7R2_FB14_Pos)
#define CAN_F7R2_FB14 CAN_F7R2_FB14_Msk
#define CAN_F7R2_FB15_Pos (15U)
#define CAN_F7R2_FB15_Msk (0x1U << CAN_F7R2_FB15_Pos)
#define CAN_F7R2_FB15 CAN_F7R2_FB15_Msk
#define CAN_F7R2_FB16_Pos (16U)
#define CAN_F7R2_FB16_Msk (0x1U << CAN_F7R2_FB16_Pos)
#define CAN_F7R2_FB16 CAN_F7R2_FB16_Msk
#define CAN_F7R2_FB17_Pos (17U)
#define CAN_F7R2_FB17_Msk (0x1U << CAN_F7R2_FB17_Pos)
#define CAN_F7R2_FB17 CAN_F7R2_FB17_Msk
#define CAN_F7R2_FB18_Pos (18U)
#define CAN_F7R2_FB18_Msk (0x1U << CAN_F7R2_FB18_Pos)
#define CAN_F7R2_FB18 CAN_F7R2_FB18_Msk
#define CAN_F7R2_FB19_Pos (19U)
#define CAN_F7R2_FB19_Msk (0x1U << CAN_F7R2_FB19_Pos)
#define CAN_F7R2_FB19 CAN_F7R2_FB19_Msk
#define CAN_F7R2_FB20_Pos (20U)
#define CAN_F7R2_FB20_Msk (0x1U << CAN_F7R2_FB20_Pos)
#define CAN_F7R2_FB20 CAN_F7R2_FB20_Msk
#define CAN_F7R2_FB21_Pos (21U)
#define CAN_F7R2_FB21_Msk (0x1U << CAN_F7R2_FB21_Pos)
#define CAN_F7R2_FB21 CAN_F7R2_FB21_Msk
#define CAN_F7R2_FB22_Pos (22U)
#define CAN_F7R2_FB22_Msk (0x1U << CAN_F7R2_FB22_Pos)
#define CAN_F7R2_FB22 CAN_F7R2_FB22_Msk
#define CAN_F7R2_FB23_Pos (23U)
#define CAN_F7R2_FB23_Msk (0x1U << CAN_F7R2_FB23_Pos)
#define CAN_F7R2_FB23 CAN_F7R2_FB23_Msk
#define CAN_F7R2_FB24_Pos (24U)
#define CAN_F7R2_FB24_Msk (0x1U << CAN_F7R2_FB24_Pos)
#define CAN_F7R2_FB24 CAN_F7R2_FB24_Msk
#define CAN_F7R2_FB25_Pos (25U)
#define CAN_F7R2_FB25_Msk (0x1U << CAN_F7R2_FB25_Pos)
#define CAN_F7R2_FB25 CAN_F7R2_FB25_Msk
#define CAN_F7R2_FB26_Pos (26U)
#define CAN_F7R2_FB26_Msk (0x1U << CAN_F7R2_FB26_Pos)
#define CAN_F7R2_FB26 CAN_F7R2_FB26_Msk
#define CAN_F7R2_FB27_Pos (27U)
#define CAN_F7R2_FB27_Msk (0x1U << CAN_F7R2_FB27_Pos)
#define CAN_F7R2_FB27 CAN_F7R2_FB27_Msk
#define CAN_F7R2_FB28_Pos (28U)
#define CAN_F7R2_FB28_Msk (0x1U << CAN_F7R2_FB28_Pos)
#define CAN_F7R2_FB28 CAN_F7R2_FB28_Msk
#define CAN_F7R2_FB29_Pos (29U)
#define CAN_F7R2_FB29_Msk (0x1U << CAN_F7R2_FB29_Pos)
#define CAN_F7R2_FB29 CAN_F7R2_FB29_Msk
#define CAN_F7R2_FB30_Pos (30U)
#define CAN_F7R2_FB30_Msk (0x1U << CAN_F7R2_FB30_Pos)
#define CAN_F7R2_FB30 CAN_F7R2_FB30_Msk
#define CAN_F7R2_FB31_Pos (31U)
#define CAN_F7R2_FB31_Msk (0x1U << CAN_F7R2_FB31_Pos)
#define CAN_F7R2_FB31 CAN_F7R2_FB31_Msk


#define CAN_F8R2_FB0_Pos (0U)
#define CAN_F8R2_FB0_Msk (0x1U << CAN_F8R2_FB0_Pos)
#define CAN_F8R2_FB0 CAN_F8R2_FB0_Msk
#define CAN_F8R2_FB1_Pos (1U)
#define CAN_F8R2_FB1_Msk (0x1U << CAN_F8R2_FB1_Pos)
#define CAN_F8R2_FB1 CAN_F8R2_FB1_Msk
#define CAN_F8R2_FB2_Pos (2U)
#define CAN_F8R2_FB2_Msk (0x1U << CAN_F8R2_FB2_Pos)
#define CAN_F8R2_FB2 CAN_F8R2_FB2_Msk
#define CAN_F8R2_FB3_Pos (3U)
#define CAN_F8R2_FB3_Msk (0x1U << CAN_F8R2_FB3_Pos)
#define CAN_F8R2_FB3 CAN_F8R2_FB3_Msk
#define CAN_F8R2_FB4_Pos (4U)
#define CAN_F8R2_FB4_Msk (0x1U << CAN_F8R2_FB4_Pos)
#define CAN_F8R2_FB4 CAN_F8R2_FB4_Msk
#define CAN_F8R2_FB5_Pos (5U)
#define CAN_F8R2_FB5_Msk (0x1U << CAN_F8R2_FB5_Pos)
#define CAN_F8R2_FB5 CAN_F8R2_FB5_Msk
#define CAN_F8R2_FB6_Pos (6U)
#define CAN_F8R2_FB6_Msk (0x1U << CAN_F8R2_FB6_Pos)
#define CAN_F8R2_FB6 CAN_F8R2_FB6_Msk
#define CAN_F8R2_FB7_Pos (7U)
#define CAN_F8R2_FB7_Msk (0x1U << CAN_F8R2_FB7_Pos)
#define CAN_F8R2_FB7 CAN_F8R2_FB7_Msk
#define CAN_F8R2_FB8_Pos (8U)
#define CAN_F8R2_FB8_Msk (0x1U << CAN_F8R2_FB8_Pos)
#define CAN_F8R2_FB8 CAN_F8R2_FB8_Msk
#define CAN_F8R2_FB9_Pos (9U)
#define CAN_F8R2_FB9_Msk (0x1U << CAN_F8R2_FB9_Pos)
#define CAN_F8R2_FB9 CAN_F8R2_FB9_Msk
#define CAN_F8R2_FB10_Pos (10U)
#define CAN_F8R2_FB10_Msk (0x1U << CAN_F8R2_FB10_Pos)
#define CAN_F8R2_FB10 CAN_F8R2_FB10_Msk
#define CAN_F8R2_FB11_Pos (11U)
#define CAN_F8R2_FB11_Msk (0x1U << CAN_F8R2_FB11_Pos)
#define CAN_F8R2_FB11 CAN_F8R2_FB11_Msk
#define CAN_F8R2_FB12_Pos (12U)
#define CAN_F8R2_FB12_Msk (0x1U << CAN_F8R2_FB12_Pos)
#define CAN_F8R2_FB12 CAN_F8R2_FB12_Msk
#define CAN_F8R2_FB13_Pos (13U)
#define CAN_F8R2_FB13_Msk (0x1U << CAN_F8R2_FB13_Pos)
#define CAN_F8R2_FB13 CAN_F8R2_FB13_Msk
#define CAN_F8R2_FB14_Pos (14U)
#define CAN_F8R2_FB14_Msk (0x1U << CAN_F8R2_FB14_Pos)
#define CAN_F8R2_FB14 CAN_F8R2_FB14_Msk
#define CAN_F8R2_FB15_Pos (15U)
#define CAN_F8R2_FB15_Msk (0x1U << CAN_F8R2_FB15_Pos)
#define CAN_F8R2_FB15 CAN_F8R2_FB15_Msk
#define CAN_F8R2_FB16_Pos (16U)
#define CAN_F8R2_FB16_Msk (0x1U << CAN_F8R2_FB16_Pos)
#define CAN_F8R2_FB16 CAN_F8R2_FB16_Msk
#define CAN_F8R2_FB17_Pos (17U)
#define CAN_F8R2_FB17_Msk (0x1U << CAN_F8R2_FB17_Pos)
#define CAN_F8R2_FB17 CAN_F8R2_FB17_Msk
#define CAN_F8R2_FB18_Pos (18U)
#define CAN_F8R2_FB18_Msk (0x1U << CAN_F8R2_FB18_Pos)
#define CAN_F8R2_FB18 CAN_F8R2_FB18_Msk
#define CAN_F8R2_FB19_Pos (19U)
#define CAN_F8R2_FB19_Msk (0x1U << CAN_F8R2_FB19_Pos)
#define CAN_F8R2_FB19 CAN_F8R2_FB19_Msk
#define CAN_F8R2_FB20_Pos (20U)
#define CAN_F8R2_FB20_Msk (0x1U << CAN_F8R2_FB20_Pos)
#define CAN_F8R2_FB20 CAN_F8R2_FB20_Msk
#define CAN_F8R2_FB21_Pos (21U)
#define CAN_F8R2_FB21_Msk (0x1U << CAN_F8R2_FB21_Pos)
#define CAN_F8R2_FB21 CAN_F8R2_FB21_Msk
#define CAN_F8R2_FB22_Pos (22U)
#define CAN_F8R2_FB22_Msk (0x1U << CAN_F8R2_FB22_Pos)
#define CAN_F8R2_FB22 CAN_F8R2_FB22_Msk
#define CAN_F8R2_FB23_Pos (23U)
#define CAN_F8R2_FB23_Msk (0x1U << CAN_F8R2_FB23_Pos)
#define CAN_F8R2_FB23 CAN_F8R2_FB23_Msk
#define CAN_F8R2_FB24_Pos (24U)
#define CAN_F8R2_FB24_Msk (0x1U << CAN_F8R2_FB24_Pos)
#define CAN_F8R2_FB24 CAN_F8R2_FB24_Msk
#define CAN_F8R2_FB25_Pos (25U)
#define CAN_F8R2_FB25_Msk (0x1U << CAN_F8R2_FB25_Pos)
#define CAN_F8R2_FB25 CAN_F8R2_FB25_Msk
#define CAN_F8R2_FB26_Pos (26U)
#define CAN_F8R2_FB26_Msk (0x1U << CAN_F8R2_FB26_Pos)
#define CAN_F8R2_FB26 CAN_F8R2_FB26_Msk
#define CAN_F8R2_FB27_Pos (27U)
#define CAN_F8R2_FB27_Msk (0x1U << CAN_F8R2_FB27_Pos)
#define CAN_F8R2_FB27 CAN_F8R2_FB27_Msk
#define CAN_F8R2_FB28_Pos (28U)
#define CAN_F8R2_FB28_Msk (0x1U << CAN_F8R2_FB28_Pos)
#define CAN_F8R2_FB28 CAN_F8R2_FB28_Msk
#define CAN_F8R2_FB29_Pos (29U)
#define CAN_F8R2_FB29_Msk (0x1U << CAN_F8R2_FB29_Pos)
#define CAN_F8R2_FB29 CAN_F8R2_FB29_Msk
#define CAN_F8R2_FB30_Pos (30U)
#define CAN_F8R2_FB30_Msk (0x1U << CAN_F8R2_FB30_Pos)
#define CAN_F8R2_FB30 CAN_F8R2_FB30_Msk
#define CAN_F8R2_FB31_Pos (31U)
#define CAN_F8R2_FB31_Msk (0x1U << CAN_F8R2_FB31_Pos)
#define CAN_F8R2_FB31 CAN_F8R2_FB31_Msk


#define CAN_F9R2_FB0_Pos (0U)
#define CAN_F9R2_FB0_Msk (0x1U << CAN_F9R2_FB0_Pos)
#define CAN_F9R2_FB0 CAN_F9R2_FB0_Msk
#define CAN_F9R2_FB1_Pos (1U)
#define CAN_F9R2_FB1_Msk (0x1U << CAN_F9R2_FB1_Pos)
#define CAN_F9R2_FB1 CAN_F9R2_FB1_Msk
#define CAN_F9R2_FB2_Pos (2U)
#define CAN_F9R2_FB2_Msk (0x1U << CAN_F9R2_FB2_Pos)
#define CAN_F9R2_FB2 CAN_F9R2_FB2_Msk
#define CAN_F9R2_FB3_Pos (3U)
#define CAN_F9R2_FB3_Msk (0x1U << CAN_F9R2_FB3_Pos)
#define CAN_F9R2_FB3 CAN_F9R2_FB3_Msk
#define CAN_F9R2_FB4_Pos (4U)
#define CAN_F9R2_FB4_Msk (0x1U << CAN_F9R2_FB4_Pos)
#define CAN_F9R2_FB4 CAN_F9R2_FB4_Msk
#define CAN_F9R2_FB5_Pos (5U)
#define CAN_F9R2_FB5_Msk (0x1U << CAN_F9R2_FB5_Pos)
#define CAN_F9R2_FB5 CAN_F9R2_FB5_Msk
#define CAN_F9R2_FB6_Pos (6U)
#define CAN_F9R2_FB6_Msk (0x1U << CAN_F9R2_FB6_Pos)
#define CAN_F9R2_FB6 CAN_F9R2_FB6_Msk
#define CAN_F9R2_FB7_Pos (7U)
#define CAN_F9R2_FB7_Msk (0x1U << CAN_F9R2_FB7_Pos)
#define CAN_F9R2_FB7 CAN_F9R2_FB7_Msk
#define CAN_F9R2_FB8_Pos (8U)
#define CAN_F9R2_FB8_Msk (0x1U << CAN_F9R2_FB8_Pos)
#define CAN_F9R2_FB8 CAN_F9R2_FB8_Msk
#define CAN_F9R2_FB9_Pos (9U)
#define CAN_F9R2_FB9_Msk (0x1U << CAN_F9R2_FB9_Pos)
#define CAN_F9R2_FB9 CAN_F9R2_FB9_Msk
#define CAN_F9R2_FB10_Pos (10U)
#define CAN_F9R2_FB10_Msk (0x1U << CAN_F9R2_FB10_Pos)
#define CAN_F9R2_FB10 CAN_F9R2_FB10_Msk
#define CAN_F9R2_FB11_Pos (11U)
#define CAN_F9R2_FB11_Msk (0x1U << CAN_F9R2_FB11_Pos)
#define CAN_F9R2_FB11 CAN_F9R2_FB11_Msk
#define CAN_F9R2_FB12_Pos (12U)
#define CAN_F9R2_FB12_Msk (0x1U << CAN_F9R2_FB12_Pos)
#define CAN_F9R2_FB12 CAN_F9R2_FB12_Msk
#define CAN_F9R2_FB13_Pos (13U)
#define CAN_F9R2_FB13_Msk (0x1U << CAN_F9R2_FB13_Pos)
#define CAN_F9R2_FB13 CAN_F9R2_FB13_Msk
#define CAN_F9R2_FB14_Pos (14U)
#define CAN_F9R2_FB14_Msk (0x1U << CAN_F9R2_FB14_Pos)
#define CAN_F9R2_FB14 CAN_F9R2_FB14_Msk
#define CAN_F9R2_FB15_Pos (15U)
#define CAN_F9R2_FB15_Msk (0x1U << CAN_F9R2_FB15_Pos)
#define CAN_F9R2_FB15 CAN_F9R2_FB15_Msk
#define CAN_F9R2_FB16_Pos (16U)
#define CAN_F9R2_FB16_Msk (0x1U << CAN_F9R2_FB16_Pos)
#define CAN_F9R2_FB16 CAN_F9R2_FB16_Msk
#define CAN_F9R2_FB17_Pos (17U)
#define CAN_F9R2_FB17_Msk (0x1U << CAN_F9R2_FB17_Pos)
#define CAN_F9R2_FB17 CAN_F9R2_FB17_Msk
#define CAN_F9R2_FB18_Pos (18U)
#define CAN_F9R2_FB18_Msk (0x1U << CAN_F9R2_FB18_Pos)
#define CAN_F9R2_FB18 CAN_F9R2_FB18_Msk
#define CAN_F9R2_FB19_Pos (19U)
#define CAN_F9R2_FB19_Msk (0x1U << CAN_F9R2_FB19_Pos)
#define CAN_F9R2_FB19 CAN_F9R2_FB19_Msk
#define CAN_F9R2_FB20_Pos (20U)
#define CAN_F9R2_FB20_Msk (0x1U << CAN_F9R2_FB20_Pos)
#define CAN_F9R2_FB20 CAN_F9R2_FB20_Msk
#define CAN_F9R2_FB21_Pos (21U)
#define CAN_F9R2_FB21_Msk (0x1U << CAN_F9R2_FB21_Pos)
#define CAN_F9R2_FB21 CAN_F9R2_FB21_Msk
#define CAN_F9R2_FB22_Pos (22U)
#define CAN_F9R2_FB22_Msk (0x1U << CAN_F9R2_FB22_Pos)
#define CAN_F9R2_FB22 CAN_F9R2_FB22_Msk
#define CAN_F9R2_FB23_Pos (23U)
#define CAN_F9R2_FB23_Msk (0x1U << CAN_F9R2_FB23_Pos)
#define CAN_F9R2_FB23 CAN_F9R2_FB23_Msk
#define CAN_F9R2_FB24_Pos (24U)
#define CAN_F9R2_FB24_Msk (0x1U << CAN_F9R2_FB24_Pos)
#define CAN_F9R2_FB24 CAN_F9R2_FB24_Msk
#define CAN_F9R2_FB25_Pos (25U)
#define CAN_F9R2_FB25_Msk (0x1U << CAN_F9R2_FB25_Pos)
#define CAN_F9R2_FB25 CAN_F9R2_FB25_Msk
#define CAN_F9R2_FB26_Pos (26U)
#define CAN_F9R2_FB26_Msk (0x1U << CAN_F9R2_FB26_Pos)
#define CAN_F9R2_FB26 CAN_F9R2_FB26_Msk
#define CAN_F9R2_FB27_Pos (27U)
#define CAN_F9R2_FB27_Msk (0x1U << CAN_F9R2_FB27_Pos)
#define CAN_F9R2_FB27 CAN_F9R2_FB27_Msk
#define CAN_F9R2_FB28_Pos (28U)
#define CAN_F9R2_FB28_Msk (0x1U << CAN_F9R2_FB28_Pos)
#define CAN_F9R2_FB28 CAN_F9R2_FB28_Msk
#define CAN_F9R2_FB29_Pos (29U)
#define CAN_F9R2_FB29_Msk (0x1U << CAN_F9R2_FB29_Pos)
#define CAN_F9R2_FB29 CAN_F9R2_FB29_Msk
#define CAN_F9R2_FB30_Pos (30U)
#define CAN_F9R2_FB30_Msk (0x1U << CAN_F9R2_FB30_Pos)
#define CAN_F9R2_FB30 CAN_F9R2_FB30_Msk
#define CAN_F9R2_FB31_Pos (31U)
#define CAN_F9R2_FB31_Msk (0x1U << CAN_F9R2_FB31_Pos)
#define CAN_F9R2_FB31 CAN_F9R2_FB31_Msk


#define CAN_F10R2_FB0_Pos (0U)
#define CAN_F10R2_FB0_Msk (0x1U << CAN_F10R2_FB0_Pos)
#define CAN_F10R2_FB0 CAN_F10R2_FB0_Msk
#define CAN_F10R2_FB1_Pos (1U)
#define CAN_F10R2_FB1_Msk (0x1U << CAN_F10R2_FB1_Pos)
#define CAN_F10R2_FB1 CAN_F10R2_FB1_Msk
#define CAN_F10R2_FB2_Pos (2U)
#define CAN_F10R2_FB2_Msk (0x1U << CAN_F10R2_FB2_Pos)
#define CAN_F10R2_FB2 CAN_F10R2_FB2_Msk
#define CAN_F10R2_FB3_Pos (3U)
#define CAN_F10R2_FB3_Msk (0x1U << CAN_F10R2_FB3_Pos)
#define CAN_F10R2_FB3 CAN_F10R2_FB3_Msk
#define CAN_F10R2_FB4_Pos (4U)
#define CAN_F10R2_FB4_Msk (0x1U << CAN_F10R2_FB4_Pos)
#define CAN_F10R2_FB4 CAN_F10R2_FB4_Msk
#define CAN_F10R2_FB5_Pos (5U)
#define CAN_F10R2_FB5_Msk (0x1U << CAN_F10R2_FB5_Pos)
#define CAN_F10R2_FB5 CAN_F10R2_FB5_Msk
#define CAN_F10R2_FB6_Pos (6U)
#define CAN_F10R2_FB6_Msk (0x1U << CAN_F10R2_FB6_Pos)
#define CAN_F10R2_FB6 CAN_F10R2_FB6_Msk
#define CAN_F10R2_FB7_Pos (7U)
#define CAN_F10R2_FB7_Msk (0x1U << CAN_F10R2_FB7_Pos)
#define CAN_F10R2_FB7 CAN_F10R2_FB7_Msk
#define CAN_F10R2_FB8_Pos (8U)
#define CAN_F10R2_FB8_Msk (0x1U << CAN_F10R2_FB8_Pos)
#define CAN_F10R2_FB8 CAN_F10R2_FB8_Msk
#define CAN_F10R2_FB9_Pos (9U)
#define CAN_F10R2_FB9_Msk (0x1U << CAN_F10R2_FB9_Pos)
#define CAN_F10R2_FB9 CAN_F10R2_FB9_Msk
#define CAN_F10R2_FB10_Pos (10U)
#define CAN_F10R2_FB10_Msk (0x1U << CAN_F10R2_FB10_Pos)
#define CAN_F10R2_FB10 CAN_F10R2_FB10_Msk
#define CAN_F10R2_FB11_Pos (11U)
#define CAN_F10R2_FB11_Msk (0x1U << CAN_F10R2_FB11_Pos)
#define CAN_F10R2_FB11 CAN_F10R2_FB11_Msk
#define CAN_F10R2_FB12_Pos (12U)
#define CAN_F10R2_FB12_Msk (0x1U << CAN_F10R2_FB12_Pos)
#define CAN_F10R2_FB12 CAN_F10R2_FB12_Msk
#define CAN_F10R2_FB13_Pos (13U)
#define CAN_F10R2_FB13_Msk (0x1U << CAN_F10R2_FB13_Pos)
#define CAN_F10R2_FB13 CAN_F10R2_FB13_Msk
#define CAN_F10R2_FB14_Pos (14U)
#define CAN_F10R2_FB14_Msk (0x1U << CAN_F10R2_FB14_Pos)
#define CAN_F10R2_FB14 CAN_F10R2_FB14_Msk
#define CAN_F10R2_FB15_Pos (15U)
#define CAN_F10R2_FB15_Msk (0x1U << CAN_F10R2_FB15_Pos)
#define CAN_F10R2_FB15 CAN_F10R2_FB15_Msk
#define CAN_F10R2_FB16_Pos (16U)
#define CAN_F10R2_FB16_Msk (0x1U << CAN_F10R2_FB16_Pos)
#define CAN_F10R2_FB16 CAN_F10R2_FB16_Msk
#define CAN_F10R2_FB17_Pos (17U)
#define CAN_F10R2_FB17_Msk (0x1U << CAN_F10R2_FB17_Pos)
#define CAN_F10R2_FB17 CAN_F10R2_FB17_Msk
#define CAN_F10R2_FB18_Pos (18U)
#define CAN_F10R2_FB18_Msk (0x1U << CAN_F10R2_FB18_Pos)
#define CAN_F10R2_FB18 CAN_F10R2_FB18_Msk
#define CAN_F10R2_FB19_Pos (19U)
#define CAN_F10R2_FB19_Msk (0x1U << CAN_F10R2_FB19_Pos)
#define CAN_F10R2_FB19 CAN_F10R2_FB19_Msk
#define CAN_F10R2_FB20_Pos (20U)
#define CAN_F10R2_FB20_Msk (0x1U << CAN_F10R2_FB20_Pos)
#define CAN_F10R2_FB20 CAN_F10R2_FB20_Msk
#define CAN_F10R2_FB21_Pos (21U)
#define CAN_F10R2_FB21_Msk (0x1U << CAN_F10R2_FB21_Pos)
#define CAN_F10R2_FB21 CAN_F10R2_FB21_Msk
#define CAN_F10R2_FB22_Pos (22U)
#define CAN_F10R2_FB22_Msk (0x1U << CAN_F10R2_FB22_Pos)
#define CAN_F10R2_FB22 CAN_F10R2_FB22_Msk
#define CAN_F10R2_FB23_Pos (23U)
#define CAN_F10R2_FB23_Msk (0x1U << CAN_F10R2_FB23_Pos)
#define CAN_F10R2_FB23 CAN_F10R2_FB23_Msk
#define CAN_F10R2_FB24_Pos (24U)
#define CAN_F10R2_FB24_Msk (0x1U << CAN_F10R2_FB24_Pos)
#define CAN_F10R2_FB24 CAN_F10R2_FB24_Msk
#define CAN_F10R2_FB25_Pos (25U)
#define CAN_F10R2_FB25_Msk (0x1U << CAN_F10R2_FB25_Pos)
#define CAN_F10R2_FB25 CAN_F10R2_FB25_Msk
#define CAN_F10R2_FB26_Pos (26U)
#define CAN_F10R2_FB26_Msk (0x1U << CAN_F10R2_FB26_Pos)
#define CAN_F10R2_FB26 CAN_F10R2_FB26_Msk
#define CAN_F10R2_FB27_Pos (27U)
#define CAN_F10R2_FB27_Msk (0x1U << CAN_F10R2_FB27_Pos)
#define CAN_F10R2_FB27 CAN_F10R2_FB27_Msk
#define CAN_F10R2_FB28_Pos (28U)
#define CAN_F10R2_FB28_Msk (0x1U << CAN_F10R2_FB28_Pos)
#define CAN_F10R2_FB28 CAN_F10R2_FB28_Msk
#define CAN_F10R2_FB29_Pos (29U)
#define CAN_F10R2_FB29_Msk (0x1U << CAN_F10R2_FB29_Pos)
#define CAN_F10R2_FB29 CAN_F10R2_FB29_Msk
#define CAN_F10R2_FB30_Pos (30U)
#define CAN_F10R2_FB30_Msk (0x1U << CAN_F10R2_FB30_Pos)
#define CAN_F10R2_FB30 CAN_F10R2_FB30_Msk
#define CAN_F10R2_FB31_Pos (31U)
#define CAN_F10R2_FB31_Msk (0x1U << CAN_F10R2_FB31_Pos)
#define CAN_F10R2_FB31 CAN_F10R2_FB31_Msk


#define CAN_F11R2_FB0_Pos (0U)
#define CAN_F11R2_FB0_Msk (0x1U << CAN_F11R2_FB0_Pos)
#define CAN_F11R2_FB0 CAN_F11R2_FB0_Msk
#define CAN_F11R2_FB1_Pos (1U)
#define CAN_F11R2_FB1_Msk (0x1U << CAN_F11R2_FB1_Pos)
#define CAN_F11R2_FB1 CAN_F11R2_FB1_Msk
#define CAN_F11R2_FB2_Pos (2U)
#define CAN_F11R2_FB2_Msk (0x1U << CAN_F11R2_FB2_Pos)
#define CAN_F11R2_FB2 CAN_F11R2_FB2_Msk
#define CAN_F11R2_FB3_Pos (3U)
#define CAN_F11R2_FB3_Msk (0x1U << CAN_F11R2_FB3_Pos)
#define CAN_F11R2_FB3 CAN_F11R2_FB3_Msk
#define CAN_F11R2_FB4_Pos (4U)
#define CAN_F11R2_FB4_Msk (0x1U << CAN_F11R2_FB4_Pos)
#define CAN_F11R2_FB4 CAN_F11R2_FB4_Msk
#define CAN_F11R2_FB5_Pos (5U)
#define CAN_F11R2_FB5_Msk (0x1U << CAN_F11R2_FB5_Pos)
#define CAN_F11R2_FB5 CAN_F11R2_FB5_Msk
#define CAN_F11R2_FB6_Pos (6U)
#define CAN_F11R2_FB6_Msk (0x1U << CAN_F11R2_FB6_Pos)
#define CAN_F11R2_FB6 CAN_F11R2_FB6_Msk
#define CAN_F11R2_FB7_Pos (7U)
#define CAN_F11R2_FB7_Msk (0x1U << CAN_F11R2_FB7_Pos)
#define CAN_F11R2_FB7 CAN_F11R2_FB7_Msk
#define CAN_F11R2_FB8_Pos (8U)
#define CAN_F11R2_FB8_Msk (0x1U << CAN_F11R2_FB8_Pos)
#define CAN_F11R2_FB8 CAN_F11R2_FB8_Msk
#define CAN_F11R2_FB9_Pos (9U)
#define CAN_F11R2_FB9_Msk (0x1U << CAN_F11R2_FB9_Pos)
#define CAN_F11R2_FB9 CAN_F11R2_FB9_Msk
#define CAN_F11R2_FB10_Pos (10U)
#define CAN_F11R2_FB10_Msk (0x1U << CAN_F11R2_FB10_Pos)
#define CAN_F11R2_FB10 CAN_F11R2_FB10_Msk
#define CAN_F11R2_FB11_Pos (11U)
#define CAN_F11R2_FB11_Msk (0x1U << CAN_F11R2_FB11_Pos)
#define CAN_F11R2_FB11 CAN_F11R2_FB11_Msk
#define CAN_F11R2_FB12_Pos (12U)
#define CAN_F11R2_FB12_Msk (0x1U << CAN_F11R2_FB12_Pos)
#define CAN_F11R2_FB12 CAN_F11R2_FB12_Msk
#define CAN_F11R2_FB13_Pos (13U)
#define CAN_F11R2_FB13_Msk (0x1U << CAN_F11R2_FB13_Pos)
#define CAN_F11R2_FB13 CAN_F11R2_FB13_Msk
#define CAN_F11R2_FB14_Pos (14U)
#define CAN_F11R2_FB14_Msk (0x1U << CAN_F11R2_FB14_Pos)
#define CAN_F11R2_FB14 CAN_F11R2_FB14_Msk
#define CAN_F11R2_FB15_Pos (15U)
#define CAN_F11R2_FB15_Msk (0x1U << CAN_F11R2_FB15_Pos)
#define CAN_F11R2_FB15 CAN_F11R2_FB15_Msk
#define CAN_F11R2_FB16_Pos (16U)
#define CAN_F11R2_FB16_Msk (0x1U << CAN_F11R2_FB16_Pos)
#define CAN_F11R2_FB16 CAN_F11R2_FB16_Msk
#define CAN_F11R2_FB17_Pos (17U)
#define CAN_F11R2_FB17_Msk (0x1U << CAN_F11R2_FB17_Pos)
#define CAN_F11R2_FB17 CAN_F11R2_FB17_Msk
#define CAN_F11R2_FB18_Pos (18U)
#define CAN_F11R2_FB18_Msk (0x1U << CAN_F11R2_FB18_Pos)
#define CAN_F11R2_FB18 CAN_F11R2_FB18_Msk
#define CAN_F11R2_FB19_Pos (19U)
#define CAN_F11R2_FB19_Msk (0x1U << CAN_F11R2_FB19_Pos)
#define CAN_F11R2_FB19 CAN_F11R2_FB19_Msk
#define CAN_F11R2_FB20_Pos (20U)
#define CAN_F11R2_FB20_Msk (0x1U << CAN_F11R2_FB20_Pos)
#define CAN_F11R2_FB20 CAN_F11R2_FB20_Msk
#define CAN_F11R2_FB21_Pos (21U)
#define CAN_F11R2_FB21_Msk (0x1U << CAN_F11R2_FB21_Pos)
#define CAN_F11R2_FB21 CAN_F11R2_FB21_Msk
#define CAN_F11R2_FB22_Pos (22U)
#define CAN_F11R2_FB22_Msk (0x1U << CAN_F11R2_FB22_Pos)
#define CAN_F11R2_FB22 CAN_F11R2_FB22_Msk
#define CAN_F11R2_FB23_Pos (23U)
#define CAN_F11R2_FB23_Msk (0x1U << CAN_F11R2_FB23_Pos)
#define CAN_F11R2_FB23 CAN_F11R2_FB23_Msk
#define CAN_F11R2_FB24_Pos (24U)
#define CAN_F11R2_FB24_Msk (0x1U << CAN_F11R2_FB24_Pos)
#define CAN_F11R2_FB24 CAN_F11R2_FB24_Msk
#define CAN_F11R2_FB25_Pos (25U)
#define CAN_F11R2_FB25_Msk (0x1U << CAN_F11R2_FB25_Pos)
#define CAN_F11R2_FB25 CAN_F11R2_FB25_Msk
#define CAN_F11R2_FB26_Pos (26U)
#define CAN_F11R2_FB26_Msk (0x1U << CAN_F11R2_FB26_Pos)
#define CAN_F11R2_FB26 CAN_F11R2_FB26_Msk
#define CAN_F11R2_FB27_Pos (27U)
#define CAN_F11R2_FB27_Msk (0x1U << CAN_F11R2_FB27_Pos)
#define CAN_F11R2_FB27 CAN_F11R2_FB27_Msk
#define CAN_F11R2_FB28_Pos (28U)
#define CAN_F11R2_FB28_Msk (0x1U << CAN_F11R2_FB28_Pos)
#define CAN_F11R2_FB28 CAN_F11R2_FB28_Msk
#define CAN_F11R2_FB29_Pos (29U)
#define CAN_F11R2_FB29_Msk (0x1U << CAN_F11R2_FB29_Pos)
#define CAN_F11R2_FB29 CAN_F11R2_FB29_Msk
#define CAN_F11R2_FB30_Pos (30U)
#define CAN_F11R2_FB30_Msk (0x1U << CAN_F11R2_FB30_Pos)
#define CAN_F11R2_FB30 CAN_F11R2_FB30_Msk
#define CAN_F11R2_FB31_Pos (31U)
#define CAN_F11R2_FB31_Msk (0x1U << CAN_F11R2_FB31_Pos)
#define CAN_F11R2_FB31 CAN_F11R2_FB31_Msk


#define CAN_F12R2_FB0_Pos (0U)
#define CAN_F12R2_FB0_Msk (0x1U << CAN_F12R2_FB0_Pos)
#define CAN_F12R2_FB0 CAN_F12R2_FB0_Msk
#define CAN_F12R2_FB1_Pos (1U)
#define CAN_F12R2_FB1_Msk (0x1U << CAN_F12R2_FB1_Pos)
#define CAN_F12R2_FB1 CAN_F12R2_FB1_Msk
#define CAN_F12R2_FB2_Pos (2U)
#define CAN_F12R2_FB2_Msk (0x1U << CAN_F12R2_FB2_Pos)
#define CAN_F12R2_FB2 CAN_F12R2_FB2_Msk
#define CAN_F12R2_FB3_Pos (3U)
#define CAN_F12R2_FB3_Msk (0x1U << CAN_F12R2_FB3_Pos)
#define CAN_F12R2_FB3 CAN_F12R2_FB3_Msk
#define CAN_F12R2_FB4_Pos (4U)
#define CAN_F12R2_FB4_Msk (0x1U << CAN_F12R2_FB4_Pos)
#define CAN_F12R2_FB4 CAN_F12R2_FB4_Msk
#define CAN_F12R2_FB5_Pos (5U)
#define CAN_F12R2_FB5_Msk (0x1U << CAN_F12R2_FB5_Pos)
#define CAN_F12R2_FB5 CAN_F12R2_FB5_Msk
#define CAN_F12R2_FB6_Pos (6U)
#define CAN_F12R2_FB6_Msk (0x1U << CAN_F12R2_FB6_Pos)
#define CAN_F12R2_FB6 CAN_F12R2_FB6_Msk
#define CAN_F12R2_FB7_Pos (7U)
#define CAN_F12R2_FB7_Msk (0x1U << CAN_F12R2_FB7_Pos)
#define CAN_F12R2_FB7 CAN_F12R2_FB7_Msk
#define CAN_F12R2_FB8_Pos (8U)
#define CAN_F12R2_FB8_Msk (0x1U << CAN_F12R2_FB8_Pos)
#define CAN_F12R2_FB8 CAN_F12R2_FB8_Msk
#define CAN_F12R2_FB9_Pos (9U)
#define CAN_F12R2_FB9_Msk (0x1U << CAN_F12R2_FB9_Pos)
#define CAN_F12R2_FB9 CAN_F12R2_FB9_Msk
#define CAN_F12R2_FB10_Pos (10U)
#define CAN_F12R2_FB10_Msk (0x1U << CAN_F12R2_FB10_Pos)
#define CAN_F12R2_FB10 CAN_F12R2_FB10_Msk
#define CAN_F12R2_FB11_Pos (11U)
#define CAN_F12R2_FB11_Msk (0x1U << CAN_F12R2_FB11_Pos)
#define CAN_F12R2_FB11 CAN_F12R2_FB11_Msk
#define CAN_F12R2_FB12_Pos (12U)
#define CAN_F12R2_FB12_Msk (0x1U << CAN_F12R2_FB12_Pos)
#define CAN_F12R2_FB12 CAN_F12R2_FB12_Msk
#define CAN_F12R2_FB13_Pos (13U)
#define CAN_F12R2_FB13_Msk (0x1U << CAN_F12R2_FB13_Pos)
#define CAN_F12R2_FB13 CAN_F12R2_FB13_Msk
#define CAN_F12R2_FB14_Pos (14U)
#define CAN_F12R2_FB14_Msk (0x1U << CAN_F12R2_FB14_Pos)
#define CAN_F12R2_FB14 CAN_F12R2_FB14_Msk
#define CAN_F12R2_FB15_Pos (15U)
#define CAN_F12R2_FB15_Msk (0x1U << CAN_F12R2_FB15_Pos)
#define CAN_F12R2_FB15 CAN_F12R2_FB15_Msk
#define CAN_F12R2_FB16_Pos (16U)
#define CAN_F12R2_FB16_Msk (0x1U << CAN_F12R2_FB16_Pos)
#define CAN_F12R2_FB16 CAN_F12R2_FB16_Msk
#define CAN_F12R2_FB17_Pos (17U)
#define CAN_F12R2_FB17_Msk (0x1U << CAN_F12R2_FB17_Pos)
#define CAN_F12R2_FB17 CAN_F12R2_FB17_Msk
#define CAN_F12R2_FB18_Pos (18U)
#define CAN_F12R2_FB18_Msk (0x1U << CAN_F12R2_FB18_Pos)
#define CAN_F12R2_FB18 CAN_F12R2_FB18_Msk
#define CAN_F12R2_FB19_Pos (19U)
#define CAN_F12R2_FB19_Msk (0x1U << CAN_F12R2_FB19_Pos)
#define CAN_F12R2_FB19 CAN_F12R2_FB19_Msk
#define CAN_F12R2_FB20_Pos (20U)
#define CAN_F12R2_FB20_Msk (0x1U << CAN_F12R2_FB20_Pos)
#define CAN_F12R2_FB20 CAN_F12R2_FB20_Msk
#define CAN_F12R2_FB21_Pos (21U)
#define CAN_F12R2_FB21_Msk (0x1U << CAN_F12R2_FB21_Pos)
#define CAN_F12R2_FB21 CAN_F12R2_FB21_Msk
#define CAN_F12R2_FB22_Pos (22U)
#define CAN_F12R2_FB22_Msk (0x1U << CAN_F12R2_FB22_Pos)
#define CAN_F12R2_FB22 CAN_F12R2_FB22_Msk
#define CAN_F12R2_FB23_Pos (23U)
#define CAN_F12R2_FB23_Msk (0x1U << CAN_F12R2_FB23_Pos)
#define CAN_F12R2_FB23 CAN_F12R2_FB23_Msk
#define CAN_F12R2_FB24_Pos (24U)
#define CAN_F12R2_FB24_Msk (0x1U << CAN_F12R2_FB24_Pos)
#define CAN_F12R2_FB24 CAN_F12R2_FB24_Msk
#define CAN_F12R2_FB25_Pos (25U)
#define CAN_F12R2_FB25_Msk (0x1U << CAN_F12R2_FB25_Pos)
#define CAN_F12R2_FB25 CAN_F12R2_FB25_Msk
#define CAN_F12R2_FB26_Pos (26U)
#define CAN_F12R2_FB26_Msk (0x1U << CAN_F12R2_FB26_Pos)
#define CAN_F12R2_FB26 CAN_F12R2_FB26_Msk
#define CAN_F12R2_FB27_Pos (27U)
#define CAN_F12R2_FB27_Msk (0x1U << CAN_F12R2_FB27_Pos)
#define CAN_F12R2_FB27 CAN_F12R2_FB27_Msk
#define CAN_F12R2_FB28_Pos (28U)
#define CAN_F12R2_FB28_Msk (0x1U << CAN_F12R2_FB28_Pos)
#define CAN_F12R2_FB28 CAN_F12R2_FB28_Msk
#define CAN_F12R2_FB29_Pos (29U)
#define CAN_F12R2_FB29_Msk (0x1U << CAN_F12R2_FB29_Pos)
#define CAN_F12R2_FB29 CAN_F12R2_FB29_Msk
#define CAN_F12R2_FB30_Pos (30U)
#define CAN_F12R2_FB30_Msk (0x1U << CAN_F12R2_FB30_Pos)
#define CAN_F12R2_FB30 CAN_F12R2_FB30_Msk
#define CAN_F12R2_FB31_Pos (31U)
#define CAN_F12R2_FB31_Msk (0x1U << CAN_F12R2_FB31_Pos)
#define CAN_F12R2_FB31 CAN_F12R2_FB31_Msk


#define CAN_F13R2_FB0_Pos (0U)
#define CAN_F13R2_FB0_Msk (0x1U << CAN_F13R2_FB0_Pos)
#define CAN_F13R2_FB0 CAN_F13R2_FB0_Msk
#define CAN_F13R2_FB1_Pos (1U)
#define CAN_F13R2_FB1_Msk (0x1U << CAN_F13R2_FB1_Pos)
#define CAN_F13R2_FB1 CAN_F13R2_FB1_Msk
#define CAN_F13R2_FB2_Pos (2U)
#define CAN_F13R2_FB2_Msk (0x1U << CAN_F13R2_FB2_Pos)
#define CAN_F13R2_FB2 CAN_F13R2_FB2_Msk
#define CAN_F13R2_FB3_Pos (3U)
#define CAN_F13R2_FB3_Msk (0x1U << CAN_F13R2_FB3_Pos)
#define CAN_F13R2_FB3 CAN_F13R2_FB3_Msk
#define CAN_F13R2_FB4_Pos (4U)
#define CAN_F13R2_FB4_Msk (0x1U << CAN_F13R2_FB4_Pos)
#define CAN_F13R2_FB4 CAN_F13R2_FB4_Msk
#define CAN_F13R2_FB5_Pos (5U)
#define CAN_F13R2_FB5_Msk (0x1U << CAN_F13R2_FB5_Pos)
#define CAN_F13R2_FB5 CAN_F13R2_FB5_Msk
#define CAN_F13R2_FB6_Pos (6U)
#define CAN_F13R2_FB6_Msk (0x1U << CAN_F13R2_FB6_Pos)
#define CAN_F13R2_FB6 CAN_F13R2_FB6_Msk
#define CAN_F13R2_FB7_Pos (7U)
#define CAN_F13R2_FB7_Msk (0x1U << CAN_F13R2_FB7_Pos)
#define CAN_F13R2_FB7 CAN_F13R2_FB7_Msk
#define CAN_F13R2_FB8_Pos (8U)
#define CAN_F13R2_FB8_Msk (0x1U << CAN_F13R2_FB8_Pos)
#define CAN_F13R2_FB8 CAN_F13R2_FB8_Msk
#define CAN_F13R2_FB9_Pos (9U)
#define CAN_F13R2_FB9_Msk (0x1U << CAN_F13R2_FB9_Pos)
#define CAN_F13R2_FB9 CAN_F13R2_FB9_Msk
#define CAN_F13R2_FB10_Pos (10U)
#define CAN_F13R2_FB10_Msk (0x1U << CAN_F13R2_FB10_Pos)
#define CAN_F13R2_FB10 CAN_F13R2_FB10_Msk
#define CAN_F13R2_FB11_Pos (11U)
#define CAN_F13R2_FB11_Msk (0x1U << CAN_F13R2_FB11_Pos)
#define CAN_F13R2_FB11 CAN_F13R2_FB11_Msk
#define CAN_F13R2_FB12_Pos (12U)
#define CAN_F13R2_FB12_Msk (0x1U << CAN_F13R2_FB12_Pos)
#define CAN_F13R2_FB12 CAN_F13R2_FB12_Msk
#define CAN_F13R2_FB13_Pos (13U)
#define CAN_F13R2_FB13_Msk (0x1U << CAN_F13R2_FB13_Pos)
#define CAN_F13R2_FB13 CAN_F13R2_FB13_Msk
#define CAN_F13R2_FB14_Pos (14U)
#define CAN_F13R2_FB14_Msk (0x1U << CAN_F13R2_FB14_Pos)
#define CAN_F13R2_FB14 CAN_F13R2_FB14_Msk
#define CAN_F13R2_FB15_Pos (15U)
#define CAN_F13R2_FB15_Msk (0x1U << CAN_F13R2_FB15_Pos)
#define CAN_F13R2_FB15 CAN_F13R2_FB15_Msk
#define CAN_F13R2_FB16_Pos (16U)
#define CAN_F13R2_FB16_Msk (0x1U << CAN_F13R2_FB16_Pos)
#define CAN_F13R2_FB16 CAN_F13R2_FB16_Msk
#define CAN_F13R2_FB17_Pos (17U)
#define CAN_F13R2_FB17_Msk (0x1U << CAN_F13R2_FB17_Pos)
#define CAN_F13R2_FB17 CAN_F13R2_FB17_Msk
#define CAN_F13R2_FB18_Pos (18U)
#define CAN_F13R2_FB18_Msk (0x1U << CAN_F13R2_FB18_Pos)
#define CAN_F13R2_FB18 CAN_F13R2_FB18_Msk
#define CAN_F13R2_FB19_Pos (19U)
#define CAN_F13R2_FB19_Msk (0x1U << CAN_F13R2_FB19_Pos)
#define CAN_F13R2_FB19 CAN_F13R2_FB19_Msk
#define CAN_F13R2_FB20_Pos (20U)
#define CAN_F13R2_FB20_Msk (0x1U << CAN_F13R2_FB20_Pos)
#define CAN_F13R2_FB20 CAN_F13R2_FB20_Msk
#define CAN_F13R2_FB21_Pos (21U)
#define CAN_F13R2_FB21_Msk (0x1U << CAN_F13R2_FB21_Pos)
#define CAN_F13R2_FB21 CAN_F13R2_FB21_Msk
#define CAN_F13R2_FB22_Pos (22U)
#define CAN_F13R2_FB22_Msk (0x1U << CAN_F13R2_FB22_Pos)
#define CAN_F13R2_FB22 CAN_F13R2_FB22_Msk
#define CAN_F13R2_FB23_Pos (23U)
#define CAN_F13R2_FB23_Msk (0x1U << CAN_F13R2_FB23_Pos)
#define CAN_F13R2_FB23 CAN_F13R2_FB23_Msk
#define CAN_F13R2_FB24_Pos (24U)
#define CAN_F13R2_FB24_Msk (0x1U << CAN_F13R2_FB24_Pos)
#define CAN_F13R2_FB24 CAN_F13R2_FB24_Msk
#define CAN_F13R2_FB25_Pos (25U)
#define CAN_F13R2_FB25_Msk (0x1U << CAN_F13R2_FB25_Pos)
#define CAN_F13R2_FB25 CAN_F13R2_FB25_Msk
#define CAN_F13R2_FB26_Pos (26U)
#define CAN_F13R2_FB26_Msk (0x1U << CAN_F13R2_FB26_Pos)
#define CAN_F13R2_FB26 CAN_F13R2_FB26_Msk
#define CAN_F13R2_FB27_Pos (27U)
#define CAN_F13R2_FB27_Msk (0x1U << CAN_F13R2_FB27_Pos)
#define CAN_F13R2_FB27 CAN_F13R2_FB27_Msk
#define CAN_F13R2_FB28_Pos (28U)
#define CAN_F13R2_FB28_Msk (0x1U << CAN_F13R2_FB28_Pos)
#define CAN_F13R2_FB28 CAN_F13R2_FB28_Msk
#define CAN_F13R2_FB29_Pos (29U)
#define CAN_F13R2_FB29_Msk (0x1U << CAN_F13R2_FB29_Pos)
#define CAN_F13R2_FB29 CAN_F13R2_FB29_Msk
#define CAN_F13R2_FB30_Pos (30U)
#define CAN_F13R2_FB30_Msk (0x1U << CAN_F13R2_FB30_Pos)
#define CAN_F13R2_FB30 CAN_F13R2_FB30_Msk
#define CAN_F13R2_FB31_Pos (31U)
#define CAN_F13R2_FB31_Msk (0x1U << CAN_F13R2_FB31_Pos)
#define CAN_F13R2_FB31 CAN_F13R2_FB31_Msk







#define CRC_DR_DR_Pos (0U)
#define CRC_DR_DR_Msk (0xFFFFFFFFU << CRC_DR_DR_Pos)
#define CRC_DR_DR CRC_DR_DR_Msk


#define CRC_IDR_IDR ((uint8_t)0xFFU)


#define CRC_CR_RESET_Pos (0U)
#define CRC_CR_RESET_Msk (0x1U << CRC_CR_RESET_Pos)
#define CRC_CR_RESET CRC_CR_RESET_Msk
#define CRC_CR_POLYSIZE_Pos (3U)
#define CRC_CR_POLYSIZE_Msk (0x3U << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_POLYSIZE CRC_CR_POLYSIZE_Msk
#define CRC_CR_POLYSIZE_0 (0x1U << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_POLYSIZE_1 (0x2U << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_REV_IN_Pos (5U)
#define CRC_CR_REV_IN_Msk (0x3U << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_IN CRC_CR_REV_IN_Msk
#define CRC_CR_REV_IN_0 (0x1U << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_IN_1 (0x2U << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_OUT_Pos (7U)
#define CRC_CR_REV_OUT_Msk (0x1U << CRC_CR_REV_OUT_Pos)
#define CRC_CR_REV_OUT CRC_CR_REV_OUT_Msk


#define CRC_INIT_INIT_Pos (0U)
#define CRC_INIT_INIT_Msk (0xFFFFFFFFU << CRC_INIT_INIT_Pos)
#define CRC_INIT_INIT CRC_INIT_INIT_Msk


#define CRC_POL_POL_Pos (0U)
#define CRC_POL_POL_Msk (0xFFFFFFFFU << CRC_POL_POL_Pos)
#define CRC_POL_POL CRC_POL_POL_Msk
# 6605 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define DAC_CHANNEL2_SUPPORT 



#define DAC_CR_EN1_Pos (0U)
#define DAC_CR_EN1_Msk (0x1U << DAC_CR_EN1_Pos)
#define DAC_CR_EN1 DAC_CR_EN1_Msk
#define DAC_CR_BOFF1_Pos (1U)
#define DAC_CR_BOFF1_Msk (0x1U << DAC_CR_BOFF1_Pos)
#define DAC_CR_BOFF1 DAC_CR_BOFF1_Msk
#define DAC_CR_TEN1_Pos (2U)
#define DAC_CR_TEN1_Msk (0x1U << DAC_CR_TEN1_Pos)
#define DAC_CR_TEN1 DAC_CR_TEN1_Msk

#define DAC_CR_TSEL1_Pos (3U)
#define DAC_CR_TSEL1_Msk (0x7U << DAC_CR_TSEL1_Pos)
#define DAC_CR_TSEL1 DAC_CR_TSEL1_Msk
#define DAC_CR_TSEL1_0 (0x1U << DAC_CR_TSEL1_Pos)
#define DAC_CR_TSEL1_1 (0x2U << DAC_CR_TSEL1_Pos)
#define DAC_CR_TSEL1_2 (0x4U << DAC_CR_TSEL1_Pos)

#define DAC_CR_WAVE1_Pos (6U)
#define DAC_CR_WAVE1_Msk (0x3U << DAC_CR_WAVE1_Pos)
#define DAC_CR_WAVE1 DAC_CR_WAVE1_Msk
#define DAC_CR_WAVE1_0 (0x1U << DAC_CR_WAVE1_Pos)
#define DAC_CR_WAVE1_1 (0x2U << DAC_CR_WAVE1_Pos)

#define DAC_CR_MAMP1_Pos (8U)
#define DAC_CR_MAMP1_Msk (0xFU << DAC_CR_MAMP1_Pos)
#define DAC_CR_MAMP1 DAC_CR_MAMP1_Msk
#define DAC_CR_MAMP1_0 (0x1U << DAC_CR_MAMP1_Pos)
#define DAC_CR_MAMP1_1 (0x2U << DAC_CR_MAMP1_Pos)
#define DAC_CR_MAMP1_2 (0x4U << DAC_CR_MAMP1_Pos)
#define DAC_CR_MAMP1_3 (0x8U << DAC_CR_MAMP1_Pos)

#define DAC_CR_DMAEN1_Pos (12U)
#define DAC_CR_DMAEN1_Msk (0x1U << DAC_CR_DMAEN1_Pos)
#define DAC_CR_DMAEN1 DAC_CR_DMAEN1_Msk
#define DAC_CR_DMAUDRIE1_Pos (13U)
#define DAC_CR_DMAUDRIE1_Msk (0x1U << DAC_CR_DMAUDRIE1_Pos)
#define DAC_CR_DMAUDRIE1 DAC_CR_DMAUDRIE1_Msk
#define DAC_CR_EN2_Pos (16U)
#define DAC_CR_EN2_Msk (0x1U << DAC_CR_EN2_Pos)
#define DAC_CR_EN2 DAC_CR_EN2_Msk
#define DAC_CR_BOFF2_Pos (17U)
#define DAC_CR_BOFF2_Msk (0x1U << DAC_CR_BOFF2_Pos)
#define DAC_CR_BOFF2 DAC_CR_BOFF2_Msk
#define DAC_CR_TEN2_Pos (18U)
#define DAC_CR_TEN2_Msk (0x1U << DAC_CR_TEN2_Pos)
#define DAC_CR_TEN2 DAC_CR_TEN2_Msk

#define DAC_CR_TSEL2_Pos (19U)
#define DAC_CR_TSEL2_Msk (0x7U << DAC_CR_TSEL2_Pos)
#define DAC_CR_TSEL2 DAC_CR_TSEL2_Msk
#define DAC_CR_TSEL2_0 (0x1U << DAC_CR_TSEL2_Pos)
#define DAC_CR_TSEL2_1 (0x2U << DAC_CR_TSEL2_Pos)
#define DAC_CR_TSEL2_2 (0x4U << DAC_CR_TSEL2_Pos)

#define DAC_CR_WAVE2_Pos (22U)
#define DAC_CR_WAVE2_Msk (0x3U << DAC_CR_WAVE2_Pos)
#define DAC_CR_WAVE2 DAC_CR_WAVE2_Msk
#define DAC_CR_WAVE2_0 (0x1U << DAC_CR_WAVE2_Pos)
#define DAC_CR_WAVE2_1 (0x2U << DAC_CR_WAVE2_Pos)

#define DAC_CR_MAMP2_Pos (24U)
#define DAC_CR_MAMP2_Msk (0xFU << DAC_CR_MAMP2_Pos)
#define DAC_CR_MAMP2 DAC_CR_MAMP2_Msk
#define DAC_CR_MAMP2_0 (0x1U << DAC_CR_MAMP2_Pos)
#define DAC_CR_MAMP2_1 (0x2U << DAC_CR_MAMP2_Pos)
#define DAC_CR_MAMP2_2 (0x4U << DAC_CR_MAMP2_Pos)
#define DAC_CR_MAMP2_3 (0x8U << DAC_CR_MAMP2_Pos)

#define DAC_CR_DMAEN2_Pos (28U)
#define DAC_CR_DMAEN2_Msk (0x1U << DAC_CR_DMAEN2_Pos)
#define DAC_CR_DMAEN2 DAC_CR_DMAEN2_Msk
#define DAC_CR_DMAUDRIE2_Pos (29U)
#define DAC_CR_DMAUDRIE2_Msk (0x1U << DAC_CR_DMAUDRIE2_Pos)
#define DAC_CR_DMAUDRIE2 DAC_CR_DMAUDRIE2_Msk


#define DAC_SWTRIGR_SWTRIG1_Pos (0U)
#define DAC_SWTRIGR_SWTRIG1_Msk (0x1U << DAC_SWTRIGR_SWTRIG1_Pos)
#define DAC_SWTRIGR_SWTRIG1 DAC_SWTRIGR_SWTRIG1_Msk
#define DAC_SWTRIGR_SWTRIG2_Pos (1U)
#define DAC_SWTRIGR_SWTRIG2_Msk (0x1U << DAC_SWTRIGR_SWTRIG2_Pos)
#define DAC_SWTRIGR_SWTRIG2 DAC_SWTRIGR_SWTRIG2_Msk


#define DAC_DHR12R1_DACC1DHR_Pos (0U)
#define DAC_DHR12R1_DACC1DHR_Msk (0xFFFU << DAC_DHR12R1_DACC1DHR_Pos)
#define DAC_DHR12R1_DACC1DHR DAC_DHR12R1_DACC1DHR_Msk


#define DAC_DHR12L1_DACC1DHR_Pos (4U)
#define DAC_DHR12L1_DACC1DHR_Msk (0xFFFU << DAC_DHR12L1_DACC1DHR_Pos)
#define DAC_DHR12L1_DACC1DHR DAC_DHR12L1_DACC1DHR_Msk


#define DAC_DHR8R1_DACC1DHR_Pos (0U)
#define DAC_DHR8R1_DACC1DHR_Msk (0xFFU << DAC_DHR8R1_DACC1DHR_Pos)
#define DAC_DHR8R1_DACC1DHR DAC_DHR8R1_DACC1DHR_Msk


#define DAC_DHR12R2_DACC2DHR_Pos (0U)
#define DAC_DHR12R2_DACC2DHR_Msk (0xFFFU << DAC_DHR12R2_DACC2DHR_Pos)
#define DAC_DHR12R2_DACC2DHR DAC_DHR12R2_DACC2DHR_Msk


#define DAC_DHR12L2_DACC2DHR_Pos (4U)
#define DAC_DHR12L2_DACC2DHR_Msk (0xFFFU << DAC_DHR12L2_DACC2DHR_Pos)
#define DAC_DHR12L2_DACC2DHR DAC_DHR12L2_DACC2DHR_Msk


#define DAC_DHR8R2_DACC2DHR_Pos (0U)
#define DAC_DHR8R2_DACC2DHR_Msk (0xFFU << DAC_DHR8R2_DACC2DHR_Pos)
#define DAC_DHR8R2_DACC2DHR DAC_DHR8R2_DACC2DHR_Msk


#define DAC_DHR12RD_DACC1DHR_Pos (0U)
#define DAC_DHR12RD_DACC1DHR_Msk (0xFFFU << DAC_DHR12RD_DACC1DHR_Pos)
#define DAC_DHR12RD_DACC1DHR DAC_DHR12RD_DACC1DHR_Msk
#define DAC_DHR12RD_DACC2DHR_Pos (16U)
#define DAC_DHR12RD_DACC2DHR_Msk (0xFFFU << DAC_DHR12RD_DACC2DHR_Pos)
#define DAC_DHR12RD_DACC2DHR DAC_DHR12RD_DACC2DHR_Msk


#define DAC_DHR12LD_DACC1DHR_Pos (4U)
#define DAC_DHR12LD_DACC1DHR_Msk (0xFFFU << DAC_DHR12LD_DACC1DHR_Pos)
#define DAC_DHR12LD_DACC1DHR DAC_DHR12LD_DACC1DHR_Msk
#define DAC_DHR12LD_DACC2DHR_Pos (20U)
#define DAC_DHR12LD_DACC2DHR_Msk (0xFFFU << DAC_DHR12LD_DACC2DHR_Pos)
#define DAC_DHR12LD_DACC2DHR DAC_DHR12LD_DACC2DHR_Msk


#define DAC_DHR8RD_DACC1DHR_Pos (0U)
#define DAC_DHR8RD_DACC1DHR_Msk (0xFFU << DAC_DHR8RD_DACC1DHR_Pos)
#define DAC_DHR8RD_DACC1DHR DAC_DHR8RD_DACC1DHR_Msk
#define DAC_DHR8RD_DACC2DHR_Pos (8U)
#define DAC_DHR8RD_DACC2DHR_Msk (0xFFU << DAC_DHR8RD_DACC2DHR_Pos)
#define DAC_DHR8RD_DACC2DHR DAC_DHR8RD_DACC2DHR_Msk


#define DAC_DOR1_DACC1DOR_Pos (0U)
#define DAC_DOR1_DACC1DOR_Msk (0xFFFU << DAC_DOR1_DACC1DOR_Pos)
#define DAC_DOR1_DACC1DOR DAC_DOR1_DACC1DOR_Msk


#define DAC_DOR2_DACC2DOR_Pos (0U)
#define DAC_DOR2_DACC2DOR_Msk (0xFFFU << DAC_DOR2_DACC2DOR_Pos)
#define DAC_DOR2_DACC2DOR DAC_DOR2_DACC2DOR_Msk


#define DAC_SR_DMAUDR1_Pos (13U)
#define DAC_SR_DMAUDR1_Msk (0x1U << DAC_SR_DMAUDR1_Pos)
#define DAC_SR_DMAUDR1 DAC_SR_DMAUDR1_Msk
#define DAC_SR_DMAUDR2_Pos (29U)
#define DAC_SR_DMAUDR2_Msk (0x1U << DAC_SR_DMAUDR2_Pos)
#define DAC_SR_DMAUDR2 DAC_SR_DMAUDR2_Msk







#define DBGMCU_IDCODE_DEV_ID_Pos (0U)
#define DBGMCU_IDCODE_DEV_ID_Msk (0xFFFU << DBGMCU_IDCODE_DEV_ID_Pos)
#define DBGMCU_IDCODE_DEV_ID DBGMCU_IDCODE_DEV_ID_Msk
#define DBGMCU_IDCODE_REV_ID_Pos (16U)
#define DBGMCU_IDCODE_REV_ID_Msk (0xFFFFU << DBGMCU_IDCODE_REV_ID_Pos)
#define DBGMCU_IDCODE_REV_ID DBGMCU_IDCODE_REV_ID_Msk


#define DBGMCU_CR_DBG_SLEEP_Pos (0U)
#define DBGMCU_CR_DBG_SLEEP_Msk (0x1U << DBGMCU_CR_DBG_SLEEP_Pos)
#define DBGMCU_CR_DBG_SLEEP DBGMCU_CR_DBG_SLEEP_Msk
#define DBGMCU_CR_DBG_STOP_Pos (1U)
#define DBGMCU_CR_DBG_STOP_Msk (0x1U << DBGMCU_CR_DBG_STOP_Pos)
#define DBGMCU_CR_DBG_STOP DBGMCU_CR_DBG_STOP_Msk
#define DBGMCU_CR_DBG_STANDBY_Pos (2U)
#define DBGMCU_CR_DBG_STANDBY_Msk (0x1U << DBGMCU_CR_DBG_STANDBY_Pos)
#define DBGMCU_CR_DBG_STANDBY DBGMCU_CR_DBG_STANDBY_Msk
#define DBGMCU_CR_TRACE_IOEN_Pos (5U)
#define DBGMCU_CR_TRACE_IOEN_Msk (0x1U << DBGMCU_CR_TRACE_IOEN_Pos)
#define DBGMCU_CR_TRACE_IOEN DBGMCU_CR_TRACE_IOEN_Msk

#define DBGMCU_CR_TRACE_MODE_Pos (6U)
#define DBGMCU_CR_TRACE_MODE_Msk (0x3U << DBGMCU_CR_TRACE_MODE_Pos)
#define DBGMCU_CR_TRACE_MODE DBGMCU_CR_TRACE_MODE_Msk
#define DBGMCU_CR_TRACE_MODE_0 (0x1U << DBGMCU_CR_TRACE_MODE_Pos)
#define DBGMCU_CR_TRACE_MODE_1 (0x2U << DBGMCU_CR_TRACE_MODE_Pos)


#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos (0U)
#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_TIM2_STOP DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos (1U)
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos (2U)
#define DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_TIM4_STOP DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos (4U)
#define DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_TIM6_STOP DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos (5U)
#define DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_TIM7_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_TIM7_STOP DBGMCU_APB1_FZ_DBG_TIM7_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos (10U)
#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_RTC_STOP DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos (11U)
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos (12U)
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos (21U)
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk (0x1U << DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos)
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos (22U)
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk (0x1U << DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos)
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk
#define DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos (25U)
#define DBGMCU_APB1_FZ_DBG_CAN_STOP_Msk (0x1U << DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos)
#define DBGMCU_APB1_FZ_DBG_CAN_STOP DBGMCU_APB1_FZ_DBG_CAN_STOP_Msk


#define DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos (0U)
#define DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk (0x1U << DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos)
#define DBGMCU_APB2_FZ_DBG_TIM1_STOP DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk
#define DBGMCU_APB2_FZ_DBG_TIM8_STOP_Pos (1U)
#define DBGMCU_APB2_FZ_DBG_TIM8_STOP_Msk (0x1U << DBGMCU_APB2_FZ_DBG_TIM8_STOP_Pos)
#define DBGMCU_APB2_FZ_DBG_TIM8_STOP DBGMCU_APB2_FZ_DBG_TIM8_STOP_Msk
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos (2U)
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP_Msk (0x1U << DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos)
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP DBGMCU_APB2_FZ_DBG_TIM15_STOP_Msk
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos (3U)
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP_Msk (0x1U << DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos)
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP DBGMCU_APB2_FZ_DBG_TIM16_STOP_Msk
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos (4U)
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP_Msk (0x1U << DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos)
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP DBGMCU_APB2_FZ_DBG_TIM17_STOP_Msk







#define DMA_ISR_GIF1_Pos (0U)
#define DMA_ISR_GIF1_Msk (0x1U << DMA_ISR_GIF1_Pos)
#define DMA_ISR_GIF1 DMA_ISR_GIF1_Msk
#define DMA_ISR_TCIF1_Pos (1U)
#define DMA_ISR_TCIF1_Msk (0x1U << DMA_ISR_TCIF1_Pos)
#define DMA_ISR_TCIF1 DMA_ISR_TCIF1_Msk
#define DMA_ISR_HTIF1_Pos (2U)
#define DMA_ISR_HTIF1_Msk (0x1U << DMA_ISR_HTIF1_Pos)
#define DMA_ISR_HTIF1 DMA_ISR_HTIF1_Msk
#define DMA_ISR_TEIF1_Pos (3U)
#define DMA_ISR_TEIF1_Msk (0x1U << DMA_ISR_TEIF1_Pos)
#define DMA_ISR_TEIF1 DMA_ISR_TEIF1_Msk
#define DMA_ISR_GIF2_Pos (4U)
#define DMA_ISR_GIF2_Msk (0x1U << DMA_ISR_GIF2_Pos)
#define DMA_ISR_GIF2 DMA_ISR_GIF2_Msk
#define DMA_ISR_TCIF2_Pos (5U)
#define DMA_ISR_TCIF2_Msk (0x1U << DMA_ISR_TCIF2_Pos)
#define DMA_ISR_TCIF2 DMA_ISR_TCIF2_Msk
#define DMA_ISR_HTIF2_Pos (6U)
#define DMA_ISR_HTIF2_Msk (0x1U << DMA_ISR_HTIF2_Pos)
#define DMA_ISR_HTIF2 DMA_ISR_HTIF2_Msk
#define DMA_ISR_TEIF2_Pos (7U)
#define DMA_ISR_TEIF2_Msk (0x1U << DMA_ISR_TEIF2_Pos)
#define DMA_ISR_TEIF2 DMA_ISR_TEIF2_Msk
#define DMA_ISR_GIF3_Pos (8U)
#define DMA_ISR_GIF3_Msk (0x1U << DMA_ISR_GIF3_Pos)
#define DMA_ISR_GIF3 DMA_ISR_GIF3_Msk
#define DMA_ISR_TCIF3_Pos (9U)
#define DMA_ISR_TCIF3_Msk (0x1U << DMA_ISR_TCIF3_Pos)
#define DMA_ISR_TCIF3 DMA_ISR_TCIF3_Msk
#define DMA_ISR_HTIF3_Pos (10U)
#define DMA_ISR_HTIF3_Msk (0x1U << DMA_ISR_HTIF3_Pos)
#define DMA_ISR_HTIF3 DMA_ISR_HTIF3_Msk
#define DMA_ISR_TEIF3_Pos (11U)
#define DMA_ISR_TEIF3_Msk (0x1U << DMA_ISR_TEIF3_Pos)
#define DMA_ISR_TEIF3 DMA_ISR_TEIF3_Msk
#define DMA_ISR_GIF4_Pos (12U)
#define DMA_ISR_GIF4_Msk (0x1U << DMA_ISR_GIF4_Pos)
#define DMA_ISR_GIF4 DMA_ISR_GIF4_Msk
#define DMA_ISR_TCIF4_Pos (13U)
#define DMA_ISR_TCIF4_Msk (0x1U << DMA_ISR_TCIF4_Pos)
#define DMA_ISR_TCIF4 DMA_ISR_TCIF4_Msk
#define DMA_ISR_HTIF4_Pos (14U)
#define DMA_ISR_HTIF4_Msk (0x1U << DMA_ISR_HTIF4_Pos)
#define DMA_ISR_HTIF4 DMA_ISR_HTIF4_Msk
#define DMA_ISR_TEIF4_Pos (15U)
#define DMA_ISR_TEIF4_Msk (0x1U << DMA_ISR_TEIF4_Pos)
#define DMA_ISR_TEIF4 DMA_ISR_TEIF4_Msk
#define DMA_ISR_GIF5_Pos (16U)
#define DMA_ISR_GIF5_Msk (0x1U << DMA_ISR_GIF5_Pos)
#define DMA_ISR_GIF5 DMA_ISR_GIF5_Msk
#define DMA_ISR_TCIF5_Pos (17U)
#define DMA_ISR_TCIF5_Msk (0x1U << DMA_ISR_TCIF5_Pos)
#define DMA_ISR_TCIF5 DMA_ISR_TCIF5_Msk
#define DMA_ISR_HTIF5_Pos (18U)
#define DMA_ISR_HTIF5_Msk (0x1U << DMA_ISR_HTIF5_Pos)
#define DMA_ISR_HTIF5 DMA_ISR_HTIF5_Msk
#define DMA_ISR_TEIF5_Pos (19U)
#define DMA_ISR_TEIF5_Msk (0x1U << DMA_ISR_TEIF5_Pos)
#define DMA_ISR_TEIF5 DMA_ISR_TEIF5_Msk
#define DMA_ISR_GIF6_Pos (20U)
#define DMA_ISR_GIF6_Msk (0x1U << DMA_ISR_GIF6_Pos)
#define DMA_ISR_GIF6 DMA_ISR_GIF6_Msk
#define DMA_ISR_TCIF6_Pos (21U)
#define DMA_ISR_TCIF6_Msk (0x1U << DMA_ISR_TCIF6_Pos)
#define DMA_ISR_TCIF6 DMA_ISR_TCIF6_Msk
#define DMA_ISR_HTIF6_Pos (22U)
#define DMA_ISR_HTIF6_Msk (0x1U << DMA_ISR_HTIF6_Pos)
#define DMA_ISR_HTIF6 DMA_ISR_HTIF6_Msk
#define DMA_ISR_TEIF6_Pos (23U)
#define DMA_ISR_TEIF6_Msk (0x1U << DMA_ISR_TEIF6_Pos)
#define DMA_ISR_TEIF6 DMA_ISR_TEIF6_Msk
#define DMA_ISR_GIF7_Pos (24U)
#define DMA_ISR_GIF7_Msk (0x1U << DMA_ISR_GIF7_Pos)
#define DMA_ISR_GIF7 DMA_ISR_GIF7_Msk
#define DMA_ISR_TCIF7_Pos (25U)
#define DMA_ISR_TCIF7_Msk (0x1U << DMA_ISR_TCIF7_Pos)
#define DMA_ISR_TCIF7 DMA_ISR_TCIF7_Msk
#define DMA_ISR_HTIF7_Pos (26U)
#define DMA_ISR_HTIF7_Msk (0x1U << DMA_ISR_HTIF7_Pos)
#define DMA_ISR_HTIF7 DMA_ISR_HTIF7_Msk
#define DMA_ISR_TEIF7_Pos (27U)
#define DMA_ISR_TEIF7_Msk (0x1U << DMA_ISR_TEIF7_Pos)
#define DMA_ISR_TEIF7 DMA_ISR_TEIF7_Msk


#define DMA_IFCR_CGIF1_Pos (0U)
#define DMA_IFCR_CGIF1_Msk (0x1U << DMA_IFCR_CGIF1_Pos)
#define DMA_IFCR_CGIF1 DMA_IFCR_CGIF1_Msk
#define DMA_IFCR_CTCIF1_Pos (1U)
#define DMA_IFCR_CTCIF1_Msk (0x1U << DMA_IFCR_CTCIF1_Pos)
#define DMA_IFCR_CTCIF1 DMA_IFCR_CTCIF1_Msk
#define DMA_IFCR_CHTIF1_Pos (2U)
#define DMA_IFCR_CHTIF1_Msk (0x1U << DMA_IFCR_CHTIF1_Pos)
#define DMA_IFCR_CHTIF1 DMA_IFCR_CHTIF1_Msk
#define DMA_IFCR_CTEIF1_Pos (3U)
#define DMA_IFCR_CTEIF1_Msk (0x1U << DMA_IFCR_CTEIF1_Pos)
#define DMA_IFCR_CTEIF1 DMA_IFCR_CTEIF1_Msk
#define DMA_IFCR_CGIF2_Pos (4U)
#define DMA_IFCR_CGIF2_Msk (0x1U << DMA_IFCR_CGIF2_Pos)
#define DMA_IFCR_CGIF2 DMA_IFCR_CGIF2_Msk
#define DMA_IFCR_CTCIF2_Pos (5U)
#define DMA_IFCR_CTCIF2_Msk (0x1U << DMA_IFCR_CTCIF2_Pos)
#define DMA_IFCR_CTCIF2 DMA_IFCR_CTCIF2_Msk
#define DMA_IFCR_CHTIF2_Pos (6U)
#define DMA_IFCR_CHTIF2_Msk (0x1U << DMA_IFCR_CHTIF2_Pos)
#define DMA_IFCR_CHTIF2 DMA_IFCR_CHTIF2_Msk
#define DMA_IFCR_CTEIF2_Pos (7U)
#define DMA_IFCR_CTEIF2_Msk (0x1U << DMA_IFCR_CTEIF2_Pos)
#define DMA_IFCR_CTEIF2 DMA_IFCR_CTEIF2_Msk
#define DMA_IFCR_CGIF3_Pos (8U)
#define DMA_IFCR_CGIF3_Msk (0x1U << DMA_IFCR_CGIF3_Pos)
#define DMA_IFCR_CGIF3 DMA_IFCR_CGIF3_Msk
#define DMA_IFCR_CTCIF3_Pos (9U)
#define DMA_IFCR_CTCIF3_Msk (0x1U << DMA_IFCR_CTCIF3_Pos)
#define DMA_IFCR_CTCIF3 DMA_IFCR_CTCIF3_Msk
#define DMA_IFCR_CHTIF3_Pos (10U)
#define DMA_IFCR_CHTIF3_Msk (0x1U << DMA_IFCR_CHTIF3_Pos)
#define DMA_IFCR_CHTIF3 DMA_IFCR_CHTIF3_Msk
#define DMA_IFCR_CTEIF3_Pos (11U)
#define DMA_IFCR_CTEIF3_Msk (0x1U << DMA_IFCR_CTEIF3_Pos)
#define DMA_IFCR_CTEIF3 DMA_IFCR_CTEIF3_Msk
#define DMA_IFCR_CGIF4_Pos (12U)
#define DMA_IFCR_CGIF4_Msk (0x1U << DMA_IFCR_CGIF4_Pos)
#define DMA_IFCR_CGIF4 DMA_IFCR_CGIF4_Msk
#define DMA_IFCR_CTCIF4_Pos (13U)
#define DMA_IFCR_CTCIF4_Msk (0x1U << DMA_IFCR_CTCIF4_Pos)
#define DMA_IFCR_CTCIF4 DMA_IFCR_CTCIF4_Msk
#define DMA_IFCR_CHTIF4_Pos (14U)
#define DMA_IFCR_CHTIF4_Msk (0x1U << DMA_IFCR_CHTIF4_Pos)
#define DMA_IFCR_CHTIF4 DMA_IFCR_CHTIF4_Msk
#define DMA_IFCR_CTEIF4_Pos (15U)
#define DMA_IFCR_CTEIF4_Msk (0x1U << DMA_IFCR_CTEIF4_Pos)
#define DMA_IFCR_CTEIF4 DMA_IFCR_CTEIF4_Msk
#define DMA_IFCR_CGIF5_Pos (16U)
#define DMA_IFCR_CGIF5_Msk (0x1U << DMA_IFCR_CGIF5_Pos)
#define DMA_IFCR_CGIF5 DMA_IFCR_CGIF5_Msk
#define DMA_IFCR_CTCIF5_Pos (17U)
#define DMA_IFCR_CTCIF5_Msk (0x1U << DMA_IFCR_CTCIF5_Pos)
#define DMA_IFCR_CTCIF5 DMA_IFCR_CTCIF5_Msk
#define DMA_IFCR_CHTIF5_Pos (18U)
#define DMA_IFCR_CHTIF5_Msk (0x1U << DMA_IFCR_CHTIF5_Pos)
#define DMA_IFCR_CHTIF5 DMA_IFCR_CHTIF5_Msk
#define DMA_IFCR_CTEIF5_Pos (19U)
#define DMA_IFCR_CTEIF5_Msk (0x1U << DMA_IFCR_CTEIF5_Pos)
#define DMA_IFCR_CTEIF5 DMA_IFCR_CTEIF5_Msk
#define DMA_IFCR_CGIF6_Pos (20U)
#define DMA_IFCR_CGIF6_Msk (0x1U << DMA_IFCR_CGIF6_Pos)
#define DMA_IFCR_CGIF6 DMA_IFCR_CGIF6_Msk
#define DMA_IFCR_CTCIF6_Pos (21U)
#define DMA_IFCR_CTCIF6_Msk (0x1U << DMA_IFCR_CTCIF6_Pos)
#define DMA_IFCR_CTCIF6 DMA_IFCR_CTCIF6_Msk
#define DMA_IFCR_CHTIF6_Pos (22U)
#define DMA_IFCR_CHTIF6_Msk (0x1U << DMA_IFCR_CHTIF6_Pos)
#define DMA_IFCR_CHTIF6 DMA_IFCR_CHTIF6_Msk
#define DMA_IFCR_CTEIF6_Pos (23U)
#define DMA_IFCR_CTEIF6_Msk (0x1U << DMA_IFCR_CTEIF6_Pos)
#define DMA_IFCR_CTEIF6 DMA_IFCR_CTEIF6_Msk
#define DMA_IFCR_CGIF7_Pos (24U)
#define DMA_IFCR_CGIF7_Msk (0x1U << DMA_IFCR_CGIF7_Pos)
#define DMA_IFCR_CGIF7 DMA_IFCR_CGIF7_Msk
#define DMA_IFCR_CTCIF7_Pos (25U)
#define DMA_IFCR_CTCIF7_Msk (0x1U << DMA_IFCR_CTCIF7_Pos)
#define DMA_IFCR_CTCIF7 DMA_IFCR_CTCIF7_Msk
#define DMA_IFCR_CHTIF7_Pos (26U)
#define DMA_IFCR_CHTIF7_Msk (0x1U << DMA_IFCR_CHTIF7_Pos)
#define DMA_IFCR_CHTIF7 DMA_IFCR_CHTIF7_Msk
#define DMA_IFCR_CTEIF7_Pos (27U)
#define DMA_IFCR_CTEIF7_Msk (0x1U << DMA_IFCR_CTEIF7_Pos)
#define DMA_IFCR_CTEIF7 DMA_IFCR_CTEIF7_Msk


#define DMA_CCR_EN_Pos (0U)
#define DMA_CCR_EN_Msk (0x1U << DMA_CCR_EN_Pos)
#define DMA_CCR_EN DMA_CCR_EN_Msk
#define DMA_CCR_TCIE_Pos (1U)
#define DMA_CCR_TCIE_Msk (0x1U << DMA_CCR_TCIE_Pos)
#define DMA_CCR_TCIE DMA_CCR_TCIE_Msk
#define DMA_CCR_HTIE_Pos (2U)
#define DMA_CCR_HTIE_Msk (0x1U << DMA_CCR_HTIE_Pos)
#define DMA_CCR_HTIE DMA_CCR_HTIE_Msk
#define DMA_CCR_TEIE_Pos (3U)
#define DMA_CCR_TEIE_Msk (0x1U << DMA_CCR_TEIE_Pos)
#define DMA_CCR_TEIE DMA_CCR_TEIE_Msk
#define DMA_CCR_DIR_Pos (4U)
#define DMA_CCR_DIR_Msk (0x1U << DMA_CCR_DIR_Pos)
#define DMA_CCR_DIR DMA_CCR_DIR_Msk
#define DMA_CCR_CIRC_Pos (5U)
#define DMA_CCR_CIRC_Msk (0x1U << DMA_CCR_CIRC_Pos)
#define DMA_CCR_CIRC DMA_CCR_CIRC_Msk
#define DMA_CCR_PINC_Pos (6U)
#define DMA_CCR_PINC_Msk (0x1U << DMA_CCR_PINC_Pos)
#define DMA_CCR_PINC DMA_CCR_PINC_Msk
#define DMA_CCR_MINC_Pos (7U)
#define DMA_CCR_MINC_Msk (0x1U << DMA_CCR_MINC_Pos)
#define DMA_CCR_MINC DMA_CCR_MINC_Msk

#define DMA_CCR_PSIZE_Pos (8U)
#define DMA_CCR_PSIZE_Msk (0x3U << DMA_CCR_PSIZE_Pos)
#define DMA_CCR_PSIZE DMA_CCR_PSIZE_Msk
#define DMA_CCR_PSIZE_0 (0x1U << DMA_CCR_PSIZE_Pos)
#define DMA_CCR_PSIZE_1 (0x2U << DMA_CCR_PSIZE_Pos)

#define DMA_CCR_MSIZE_Pos (10U)
#define DMA_CCR_MSIZE_Msk (0x3U << DMA_CCR_MSIZE_Pos)
#define DMA_CCR_MSIZE DMA_CCR_MSIZE_Msk
#define DMA_CCR_MSIZE_0 (0x1U << DMA_CCR_MSIZE_Pos)
#define DMA_CCR_MSIZE_1 (0x2U << DMA_CCR_MSIZE_Pos)

#define DMA_CCR_PL_Pos (12U)
#define DMA_CCR_PL_Msk (0x3U << DMA_CCR_PL_Pos)
#define DMA_CCR_PL DMA_CCR_PL_Msk
#define DMA_CCR_PL_0 (0x1U << DMA_CCR_PL_Pos)
#define DMA_CCR_PL_1 (0x2U << DMA_CCR_PL_Pos)

#define DMA_CCR_MEM2MEM_Pos (14U)
#define DMA_CCR_MEM2MEM_Msk (0x1U << DMA_CCR_MEM2MEM_Pos)
#define DMA_CCR_MEM2MEM DMA_CCR_MEM2MEM_Msk


#define DMA_CNDTR_NDT_Pos (0U)
#define DMA_CNDTR_NDT_Msk (0xFFFFU << DMA_CNDTR_NDT_Pos)
#define DMA_CNDTR_NDT DMA_CNDTR_NDT_Msk


#define DMA_CPAR_PA_Pos (0U)
#define DMA_CPAR_PA_Msk (0xFFFFFFFFU << DMA_CPAR_PA_Pos)
#define DMA_CPAR_PA DMA_CPAR_PA_Msk


#define DMA_CMAR_MA_Pos (0U)
#define DMA_CMAR_MA_Msk (0xFFFFFFFFU << DMA_CMAR_MA_Pos)
#define DMA_CMAR_MA DMA_CMAR_MA_Msk







#define EXTI_IMR_MR0_Pos (0U)
#define EXTI_IMR_MR0_Msk (0x1U << EXTI_IMR_MR0_Pos)
#define EXTI_IMR_MR0 EXTI_IMR_MR0_Msk
#define EXTI_IMR_MR1_Pos (1U)
#define EXTI_IMR_MR1_Msk (0x1U << EXTI_IMR_MR1_Pos)
#define EXTI_IMR_MR1 EXTI_IMR_MR1_Msk
#define EXTI_IMR_MR2_Pos (2U)
#define EXTI_IMR_MR2_Msk (0x1U << EXTI_IMR_MR2_Pos)
#define EXTI_IMR_MR2 EXTI_IMR_MR2_Msk
#define EXTI_IMR_MR3_Pos (3U)
#define EXTI_IMR_MR3_Msk (0x1U << EXTI_IMR_MR3_Pos)
#define EXTI_IMR_MR3 EXTI_IMR_MR3_Msk
#define EXTI_IMR_MR4_Pos (4U)
#define EXTI_IMR_MR4_Msk (0x1U << EXTI_IMR_MR4_Pos)
#define EXTI_IMR_MR4 EXTI_IMR_MR4_Msk
#define EXTI_IMR_MR5_Pos (5U)
#define EXTI_IMR_MR5_Msk (0x1U << EXTI_IMR_MR5_Pos)
#define EXTI_IMR_MR5 EXTI_IMR_MR5_Msk
#define EXTI_IMR_MR6_Pos (6U)
#define EXTI_IMR_MR6_Msk (0x1U << EXTI_IMR_MR6_Pos)
#define EXTI_IMR_MR6 EXTI_IMR_MR6_Msk
#define EXTI_IMR_MR7_Pos (7U)
#define EXTI_IMR_MR7_Msk (0x1U << EXTI_IMR_MR7_Pos)
#define EXTI_IMR_MR7 EXTI_IMR_MR7_Msk
#define EXTI_IMR_MR8_Pos (8U)
#define EXTI_IMR_MR8_Msk (0x1U << EXTI_IMR_MR8_Pos)
#define EXTI_IMR_MR8 EXTI_IMR_MR8_Msk
#define EXTI_IMR_MR9_Pos (9U)
#define EXTI_IMR_MR9_Msk (0x1U << EXTI_IMR_MR9_Pos)
#define EXTI_IMR_MR9 EXTI_IMR_MR9_Msk
#define EXTI_IMR_MR10_Pos (10U)
#define EXTI_IMR_MR10_Msk (0x1U << EXTI_IMR_MR10_Pos)
#define EXTI_IMR_MR10 EXTI_IMR_MR10_Msk
#define EXTI_IMR_MR11_Pos (11U)
#define EXTI_IMR_MR11_Msk (0x1U << EXTI_IMR_MR11_Pos)
#define EXTI_IMR_MR11 EXTI_IMR_MR11_Msk
#define EXTI_IMR_MR12_Pos (12U)
#define EXTI_IMR_MR12_Msk (0x1U << EXTI_IMR_MR12_Pos)
#define EXTI_IMR_MR12 EXTI_IMR_MR12_Msk
#define EXTI_IMR_MR13_Pos (13U)
#define EXTI_IMR_MR13_Msk (0x1U << EXTI_IMR_MR13_Pos)
#define EXTI_IMR_MR13 EXTI_IMR_MR13_Msk
#define EXTI_IMR_MR14_Pos (14U)
#define EXTI_IMR_MR14_Msk (0x1U << EXTI_IMR_MR14_Pos)
#define EXTI_IMR_MR14 EXTI_IMR_MR14_Msk
#define EXTI_IMR_MR15_Pos (15U)
#define EXTI_IMR_MR15_Msk (0x1U << EXTI_IMR_MR15_Pos)
#define EXTI_IMR_MR15 EXTI_IMR_MR15_Msk
#define EXTI_IMR_MR16_Pos (16U)
#define EXTI_IMR_MR16_Msk (0x1U << EXTI_IMR_MR16_Pos)
#define EXTI_IMR_MR16 EXTI_IMR_MR16_Msk
#define EXTI_IMR_MR17_Pos (17U)
#define EXTI_IMR_MR17_Msk (0x1U << EXTI_IMR_MR17_Pos)
#define EXTI_IMR_MR17 EXTI_IMR_MR17_Msk
#define EXTI_IMR_MR18_Pos (18U)
#define EXTI_IMR_MR18_Msk (0x1U << EXTI_IMR_MR18_Pos)
#define EXTI_IMR_MR18 EXTI_IMR_MR18_Msk
#define EXTI_IMR_MR19_Pos (19U)
#define EXTI_IMR_MR19_Msk (0x1U << EXTI_IMR_MR19_Pos)
#define EXTI_IMR_MR19 EXTI_IMR_MR19_Msk
#define EXTI_IMR_MR20_Pos (20U)
#define EXTI_IMR_MR20_Msk (0x1U << EXTI_IMR_MR20_Pos)
#define EXTI_IMR_MR20 EXTI_IMR_MR20_Msk
#define EXTI_IMR_MR21_Pos (21U)
#define EXTI_IMR_MR21_Msk (0x1U << EXTI_IMR_MR21_Pos)
#define EXTI_IMR_MR21 EXTI_IMR_MR21_Msk
#define EXTI_IMR_MR22_Pos (22U)
#define EXTI_IMR_MR22_Msk (0x1U << EXTI_IMR_MR22_Pos)
#define EXTI_IMR_MR22 EXTI_IMR_MR22_Msk
#define EXTI_IMR_MR23_Pos (23U)
#define EXTI_IMR_MR23_Msk (0x1U << EXTI_IMR_MR23_Pos)
#define EXTI_IMR_MR23 EXTI_IMR_MR23_Msk
#define EXTI_IMR_MR24_Pos (24U)
#define EXTI_IMR_MR24_Msk (0x1U << EXTI_IMR_MR24_Pos)
#define EXTI_IMR_MR24 EXTI_IMR_MR24_Msk
#define EXTI_IMR_MR25_Pos (25U)
#define EXTI_IMR_MR25_Msk (0x1U << EXTI_IMR_MR25_Pos)
#define EXTI_IMR_MR25 EXTI_IMR_MR25_Msk
#define EXTI_IMR_MR26_Pos (26U)
#define EXTI_IMR_MR26_Msk (0x1U << EXTI_IMR_MR26_Pos)
#define EXTI_IMR_MR26 EXTI_IMR_MR26_Msk
#define EXTI_IMR_MR28_Pos (28U)
#define EXTI_IMR_MR28_Msk (0x1U << EXTI_IMR_MR28_Pos)
#define EXTI_IMR_MR28 EXTI_IMR_MR28_Msk
#define EXTI_IMR_MR29_Pos (29U)
#define EXTI_IMR_MR29_Msk (0x1U << EXTI_IMR_MR29_Pos)
#define EXTI_IMR_MR29 EXTI_IMR_MR29_Msk
#define EXTI_IMR_MR30_Pos (30U)
#define EXTI_IMR_MR30_Msk (0x1U << EXTI_IMR_MR30_Pos)
#define EXTI_IMR_MR30 EXTI_IMR_MR30_Msk
#define EXTI_IMR_MR31_Pos (31U)
#define EXTI_IMR_MR31_Msk (0x1U << EXTI_IMR_MR31_Pos)
#define EXTI_IMR_MR31 EXTI_IMR_MR31_Msk


#define EXTI_IMR_IM0 EXTI_IMR_MR0
#define EXTI_IMR_IM1 EXTI_IMR_MR1
#define EXTI_IMR_IM2 EXTI_IMR_MR2
#define EXTI_IMR_IM3 EXTI_IMR_MR3
#define EXTI_IMR_IM4 EXTI_IMR_MR4
#define EXTI_IMR_IM5 EXTI_IMR_MR5
#define EXTI_IMR_IM6 EXTI_IMR_MR6
#define EXTI_IMR_IM7 EXTI_IMR_MR7
#define EXTI_IMR_IM8 EXTI_IMR_MR8
#define EXTI_IMR_IM9 EXTI_IMR_MR9
#define EXTI_IMR_IM10 EXTI_IMR_MR10
#define EXTI_IMR_IM11 EXTI_IMR_MR11
#define EXTI_IMR_IM12 EXTI_IMR_MR12
#define EXTI_IMR_IM13 EXTI_IMR_MR13
#define EXTI_IMR_IM14 EXTI_IMR_MR14
#define EXTI_IMR_IM15 EXTI_IMR_MR15
#define EXTI_IMR_IM16 EXTI_IMR_MR16
#define EXTI_IMR_IM17 EXTI_IMR_MR17
#define EXTI_IMR_IM18 EXTI_IMR_MR18
#define EXTI_IMR_IM19 EXTI_IMR_MR19
#define EXTI_IMR_IM20 EXTI_IMR_MR20
#define EXTI_IMR_IM21 EXTI_IMR_MR21
#define EXTI_IMR_IM22 EXTI_IMR_MR22
#define EXTI_IMR_IM23 EXTI_IMR_MR23
#define EXTI_IMR_IM24 EXTI_IMR_MR24
#define EXTI_IMR_IM25 EXTI_IMR_MR25
#define EXTI_IMR_IM26 EXTI_IMR_MR26



#define EXTI_IMR_IM28 EXTI_IMR_MR28
#define EXTI_IMR_IM29 EXTI_IMR_MR29
#define EXTI_IMR_IM30 EXTI_IMR_MR30
#define EXTI_IMR_IM31 EXTI_IMR_MR31

#define EXTI_IMR_IM_Pos (0U)
#define EXTI_IMR_IM_Msk (0xFFFFFFFFU << EXTI_IMR_IM_Pos)
#define EXTI_IMR_IM EXTI_IMR_IM_Msk


#define EXTI_EMR_MR0_Pos (0U)
#define EXTI_EMR_MR0_Msk (0x1U << EXTI_EMR_MR0_Pos)
#define EXTI_EMR_MR0 EXTI_EMR_MR0_Msk
#define EXTI_EMR_MR1_Pos (1U)
#define EXTI_EMR_MR1_Msk (0x1U << EXTI_EMR_MR1_Pos)
#define EXTI_EMR_MR1 EXTI_EMR_MR1_Msk
#define EXTI_EMR_MR2_Pos (2U)
#define EXTI_EMR_MR2_Msk (0x1U << EXTI_EMR_MR2_Pos)
#define EXTI_EMR_MR2 EXTI_EMR_MR2_Msk
#define EXTI_EMR_MR3_Pos (3U)
#define EXTI_EMR_MR3_Msk (0x1U << EXTI_EMR_MR3_Pos)
#define EXTI_EMR_MR3 EXTI_EMR_MR3_Msk
#define EXTI_EMR_MR4_Pos (4U)
#define EXTI_EMR_MR4_Msk (0x1U << EXTI_EMR_MR4_Pos)
#define EXTI_EMR_MR4 EXTI_EMR_MR4_Msk
#define EXTI_EMR_MR5_Pos (5U)
#define EXTI_EMR_MR5_Msk (0x1U << EXTI_EMR_MR5_Pos)
#define EXTI_EMR_MR5 EXTI_EMR_MR5_Msk
#define EXTI_EMR_MR6_Pos (6U)
#define EXTI_EMR_MR6_Msk (0x1U << EXTI_EMR_MR6_Pos)
#define EXTI_EMR_MR6 EXTI_EMR_MR6_Msk
#define EXTI_EMR_MR7_Pos (7U)
#define EXTI_EMR_MR7_Msk (0x1U << EXTI_EMR_MR7_Pos)
#define EXTI_EMR_MR7 EXTI_EMR_MR7_Msk
#define EXTI_EMR_MR8_Pos (8U)
#define EXTI_EMR_MR8_Msk (0x1U << EXTI_EMR_MR8_Pos)
#define EXTI_EMR_MR8 EXTI_EMR_MR8_Msk
#define EXTI_EMR_MR9_Pos (9U)
#define EXTI_EMR_MR9_Msk (0x1U << EXTI_EMR_MR9_Pos)
#define EXTI_EMR_MR9 EXTI_EMR_MR9_Msk
#define EXTI_EMR_MR10_Pos (10U)
#define EXTI_EMR_MR10_Msk (0x1U << EXTI_EMR_MR10_Pos)
#define EXTI_EMR_MR10 EXTI_EMR_MR10_Msk
#define EXTI_EMR_MR11_Pos (11U)
#define EXTI_EMR_MR11_Msk (0x1U << EXTI_EMR_MR11_Pos)
#define EXTI_EMR_MR11 EXTI_EMR_MR11_Msk
#define EXTI_EMR_MR12_Pos (12U)
#define EXTI_EMR_MR12_Msk (0x1U << EXTI_EMR_MR12_Pos)
#define EXTI_EMR_MR12 EXTI_EMR_MR12_Msk
#define EXTI_EMR_MR13_Pos (13U)
#define EXTI_EMR_MR13_Msk (0x1U << EXTI_EMR_MR13_Pos)
#define EXTI_EMR_MR13 EXTI_EMR_MR13_Msk
#define EXTI_EMR_MR14_Pos (14U)
#define EXTI_EMR_MR14_Msk (0x1U << EXTI_EMR_MR14_Pos)
#define EXTI_EMR_MR14 EXTI_EMR_MR14_Msk
#define EXTI_EMR_MR15_Pos (15U)
#define EXTI_EMR_MR15_Msk (0x1U << EXTI_EMR_MR15_Pos)
#define EXTI_EMR_MR15 EXTI_EMR_MR15_Msk
#define EXTI_EMR_MR16_Pos (16U)
#define EXTI_EMR_MR16_Msk (0x1U << EXTI_EMR_MR16_Pos)
#define EXTI_EMR_MR16 EXTI_EMR_MR16_Msk
#define EXTI_EMR_MR17_Pos (17U)
#define EXTI_EMR_MR17_Msk (0x1U << EXTI_EMR_MR17_Pos)
#define EXTI_EMR_MR17 EXTI_EMR_MR17_Msk
#define EXTI_EMR_MR18_Pos (18U)
#define EXTI_EMR_MR18_Msk (0x1U << EXTI_EMR_MR18_Pos)
#define EXTI_EMR_MR18 EXTI_EMR_MR18_Msk
#define EXTI_EMR_MR19_Pos (19U)
#define EXTI_EMR_MR19_Msk (0x1U << EXTI_EMR_MR19_Pos)
#define EXTI_EMR_MR19 EXTI_EMR_MR19_Msk
#define EXTI_EMR_MR20_Pos (20U)
#define EXTI_EMR_MR20_Msk (0x1U << EXTI_EMR_MR20_Pos)
#define EXTI_EMR_MR20 EXTI_EMR_MR20_Msk
#define EXTI_EMR_MR21_Pos (21U)
#define EXTI_EMR_MR21_Msk (0x1U << EXTI_EMR_MR21_Pos)
#define EXTI_EMR_MR21 EXTI_EMR_MR21_Msk
#define EXTI_EMR_MR22_Pos (22U)
#define EXTI_EMR_MR22_Msk (0x1U << EXTI_EMR_MR22_Pos)
#define EXTI_EMR_MR22 EXTI_EMR_MR22_Msk
#define EXTI_EMR_MR23_Pos (23U)
#define EXTI_EMR_MR23_Msk (0x1U << EXTI_EMR_MR23_Pos)
#define EXTI_EMR_MR23 EXTI_EMR_MR23_Msk
#define EXTI_EMR_MR24_Pos (24U)
#define EXTI_EMR_MR24_Msk (0x1U << EXTI_EMR_MR24_Pos)
#define EXTI_EMR_MR24 EXTI_EMR_MR24_Msk
#define EXTI_EMR_MR25_Pos (25U)
#define EXTI_EMR_MR25_Msk (0x1U << EXTI_EMR_MR25_Pos)
#define EXTI_EMR_MR25 EXTI_EMR_MR25_Msk
#define EXTI_EMR_MR26_Pos (26U)
#define EXTI_EMR_MR26_Msk (0x1U << EXTI_EMR_MR26_Pos)
#define EXTI_EMR_MR26 EXTI_EMR_MR26_Msk
#define EXTI_EMR_MR28_Pos (28U)
#define EXTI_EMR_MR28_Msk (0x1U << EXTI_EMR_MR28_Pos)
#define EXTI_EMR_MR28 EXTI_EMR_MR28_Msk
#define EXTI_EMR_MR29_Pos (29U)
#define EXTI_EMR_MR29_Msk (0x1U << EXTI_EMR_MR29_Pos)
#define EXTI_EMR_MR29 EXTI_EMR_MR29_Msk
#define EXTI_EMR_MR30_Pos (30U)
#define EXTI_EMR_MR30_Msk (0x1U << EXTI_EMR_MR30_Pos)
#define EXTI_EMR_MR30 EXTI_EMR_MR30_Msk
#define EXTI_EMR_MR31_Pos (31U)
#define EXTI_EMR_MR31_Msk (0x1U << EXTI_EMR_MR31_Pos)
#define EXTI_EMR_MR31 EXTI_EMR_MR31_Msk


#define EXTI_EMR_EM0 EXTI_EMR_MR0
#define EXTI_EMR_EM1 EXTI_EMR_MR1
#define EXTI_EMR_EM2 EXTI_EMR_MR2
#define EXTI_EMR_EM3 EXTI_EMR_MR3
#define EXTI_EMR_EM4 EXTI_EMR_MR4
#define EXTI_EMR_EM5 EXTI_EMR_MR5
#define EXTI_EMR_EM6 EXTI_EMR_MR6
#define EXTI_EMR_EM7 EXTI_EMR_MR7
#define EXTI_EMR_EM8 EXTI_EMR_MR8
#define EXTI_EMR_EM9 EXTI_EMR_MR9
#define EXTI_EMR_EM10 EXTI_EMR_MR10
#define EXTI_EMR_EM11 EXTI_EMR_MR11
#define EXTI_EMR_EM12 EXTI_EMR_MR12
#define EXTI_EMR_EM13 EXTI_EMR_MR13
#define EXTI_EMR_EM14 EXTI_EMR_MR14
#define EXTI_EMR_EM15 EXTI_EMR_MR15
#define EXTI_EMR_EM16 EXTI_EMR_MR16
#define EXTI_EMR_EM17 EXTI_EMR_MR17
#define EXTI_EMR_EM18 EXTI_EMR_MR18
#define EXTI_EMR_EM19 EXTI_EMR_MR19
#define EXTI_EMR_EM20 EXTI_EMR_MR20
#define EXTI_EMR_EM21 EXTI_EMR_MR21
#define EXTI_EMR_EM22 EXTI_EMR_MR22
#define EXTI_EMR_EM23 EXTI_EMR_MR23
#define EXTI_EMR_EM24 EXTI_EMR_MR24
#define EXTI_EMR_EM25 EXTI_EMR_MR25
#define EXTI_EMR_EM26 EXTI_EMR_MR26



#define EXTI_EMR_EM28 EXTI_EMR_MR28
#define EXTI_EMR_EM29 EXTI_EMR_MR29
#define EXTI_EMR_EM30 EXTI_EMR_MR30
#define EXTI_EMR_EM31 EXTI_EMR_MR31


#define EXTI_RTSR_TR0_Pos (0U)
#define EXTI_RTSR_TR0_Msk (0x1U << EXTI_RTSR_TR0_Pos)
#define EXTI_RTSR_TR0 EXTI_RTSR_TR0_Msk
#define EXTI_RTSR_TR1_Pos (1U)
#define EXTI_RTSR_TR1_Msk (0x1U << EXTI_RTSR_TR1_Pos)
#define EXTI_RTSR_TR1 EXTI_RTSR_TR1_Msk
#define EXTI_RTSR_TR2_Pos (2U)
#define EXTI_RTSR_TR2_Msk (0x1U << EXTI_RTSR_TR2_Pos)
#define EXTI_RTSR_TR2 EXTI_RTSR_TR2_Msk
#define EXTI_RTSR_TR3_Pos (3U)
#define EXTI_RTSR_TR3_Msk (0x1U << EXTI_RTSR_TR3_Pos)
#define EXTI_RTSR_TR3 EXTI_RTSR_TR3_Msk
#define EXTI_RTSR_TR4_Pos (4U)
#define EXTI_RTSR_TR4_Msk (0x1U << EXTI_RTSR_TR4_Pos)
#define EXTI_RTSR_TR4 EXTI_RTSR_TR4_Msk
#define EXTI_RTSR_TR5_Pos (5U)
#define EXTI_RTSR_TR5_Msk (0x1U << EXTI_RTSR_TR5_Pos)
#define EXTI_RTSR_TR5 EXTI_RTSR_TR5_Msk
#define EXTI_RTSR_TR6_Pos (6U)
#define EXTI_RTSR_TR6_Msk (0x1U << EXTI_RTSR_TR6_Pos)
#define EXTI_RTSR_TR6 EXTI_RTSR_TR6_Msk
#define EXTI_RTSR_TR7_Pos (7U)
#define EXTI_RTSR_TR7_Msk (0x1U << EXTI_RTSR_TR7_Pos)
#define EXTI_RTSR_TR7 EXTI_RTSR_TR7_Msk
#define EXTI_RTSR_TR8_Pos (8U)
#define EXTI_RTSR_TR8_Msk (0x1U << EXTI_RTSR_TR8_Pos)
#define EXTI_RTSR_TR8 EXTI_RTSR_TR8_Msk
#define EXTI_RTSR_TR9_Pos (9U)
#define EXTI_RTSR_TR9_Msk (0x1U << EXTI_RTSR_TR9_Pos)
#define EXTI_RTSR_TR9 EXTI_RTSR_TR9_Msk
#define EXTI_RTSR_TR10_Pos (10U)
#define EXTI_RTSR_TR10_Msk (0x1U << EXTI_RTSR_TR10_Pos)
#define EXTI_RTSR_TR10 EXTI_RTSR_TR10_Msk
#define EXTI_RTSR_TR11_Pos (11U)
#define EXTI_RTSR_TR11_Msk (0x1U << EXTI_RTSR_TR11_Pos)
#define EXTI_RTSR_TR11 EXTI_RTSR_TR11_Msk
#define EXTI_RTSR_TR12_Pos (12U)
#define EXTI_RTSR_TR12_Msk (0x1U << EXTI_RTSR_TR12_Pos)
#define EXTI_RTSR_TR12 EXTI_RTSR_TR12_Msk
#define EXTI_RTSR_TR13_Pos (13U)
#define EXTI_RTSR_TR13_Msk (0x1U << EXTI_RTSR_TR13_Pos)
#define EXTI_RTSR_TR13 EXTI_RTSR_TR13_Msk
#define EXTI_RTSR_TR14_Pos (14U)
#define EXTI_RTSR_TR14_Msk (0x1U << EXTI_RTSR_TR14_Pos)
#define EXTI_RTSR_TR14 EXTI_RTSR_TR14_Msk
#define EXTI_RTSR_TR15_Pos (15U)
#define EXTI_RTSR_TR15_Msk (0x1U << EXTI_RTSR_TR15_Pos)
#define EXTI_RTSR_TR15 EXTI_RTSR_TR15_Msk
#define EXTI_RTSR_TR16_Pos (16U)
#define EXTI_RTSR_TR16_Msk (0x1U << EXTI_RTSR_TR16_Pos)
#define EXTI_RTSR_TR16 EXTI_RTSR_TR16_Msk
#define EXTI_RTSR_TR17_Pos (17U)
#define EXTI_RTSR_TR17_Msk (0x1U << EXTI_RTSR_TR17_Pos)
#define EXTI_RTSR_TR17 EXTI_RTSR_TR17_Msk
#define EXTI_RTSR_TR18_Pos (18U)
#define EXTI_RTSR_TR18_Msk (0x1U << EXTI_RTSR_TR18_Pos)
#define EXTI_RTSR_TR18 EXTI_RTSR_TR18_Msk
#define EXTI_RTSR_TR19_Pos (19U)
#define EXTI_RTSR_TR19_Msk (0x1U << EXTI_RTSR_TR19_Pos)
#define EXTI_RTSR_TR19 EXTI_RTSR_TR19_Msk
#define EXTI_RTSR_TR20_Pos (20U)
#define EXTI_RTSR_TR20_Msk (0x1U << EXTI_RTSR_TR20_Pos)
#define EXTI_RTSR_TR20 EXTI_RTSR_TR20_Msk
#define EXTI_RTSR_TR21_Pos (21U)
#define EXTI_RTSR_TR21_Msk (0x1U << EXTI_RTSR_TR21_Pos)
#define EXTI_RTSR_TR21 EXTI_RTSR_TR21_Msk
#define EXTI_RTSR_TR22_Pos (22U)
#define EXTI_RTSR_TR22_Msk (0x1U << EXTI_RTSR_TR22_Pos)
#define EXTI_RTSR_TR22 EXTI_RTSR_TR22_Msk
#define EXTI_RTSR_TR29_Pos (29U)
#define EXTI_RTSR_TR29_Msk (0x1U << EXTI_RTSR_TR29_Pos)
#define EXTI_RTSR_TR29 EXTI_RTSR_TR29_Msk
#define EXTI_RTSR_TR30_Pos (30U)
#define EXTI_RTSR_TR30_Msk (0x1U << EXTI_RTSR_TR30_Pos)
#define EXTI_RTSR_TR30 EXTI_RTSR_TR30_Msk
#define EXTI_RTSR_TR31_Pos (31U)
#define EXTI_RTSR_TR31_Msk (0x1U << EXTI_RTSR_TR31_Pos)
#define EXTI_RTSR_TR31 EXTI_RTSR_TR31_Msk


#define EXTI_RTSR_RT0 EXTI_RTSR_TR0
#define EXTI_RTSR_RT1 EXTI_RTSR_TR1
#define EXTI_RTSR_RT2 EXTI_RTSR_TR2
#define EXTI_RTSR_RT3 EXTI_RTSR_TR3
#define EXTI_RTSR_RT4 EXTI_RTSR_TR4
#define EXTI_RTSR_RT5 EXTI_RTSR_TR5
#define EXTI_RTSR_RT6 EXTI_RTSR_TR6
#define EXTI_RTSR_RT7 EXTI_RTSR_TR7
#define EXTI_RTSR_RT8 EXTI_RTSR_TR8
#define EXTI_RTSR_RT9 EXTI_RTSR_TR9
#define EXTI_RTSR_RT10 EXTI_RTSR_TR10
#define EXTI_RTSR_RT11 EXTI_RTSR_TR11
#define EXTI_RTSR_RT12 EXTI_RTSR_TR12
#define EXTI_RTSR_RT13 EXTI_RTSR_TR13
#define EXTI_RTSR_RT14 EXTI_RTSR_TR14
#define EXTI_RTSR_RT15 EXTI_RTSR_TR15
#define EXTI_RTSR_RT16 EXTI_RTSR_TR16
#define EXTI_RTSR_RT17 EXTI_RTSR_TR17
#define EXTI_RTSR_RT18 EXTI_RTSR_TR18
#define EXTI_RTSR_RT19 EXTI_RTSR_TR19
#define EXTI_RTSR_RT20 EXTI_RTSR_TR20
#define EXTI_RTSR_RT21 EXTI_RTSR_TR21
#define EXTI_RTSR_RT22 EXTI_RTSR_TR22
# 7482 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_RTSR_RT29 EXTI_RTSR_TR29
#define EXTI_RTSR_RT30 EXTI_RTSR_TR30
#define EXTI_RTSR_RT31 EXTI_RTSR_TR31


#define EXTI_FTSR_TR0_Pos (0U)
#define EXTI_FTSR_TR0_Msk (0x1U << EXTI_FTSR_TR0_Pos)
#define EXTI_FTSR_TR0 EXTI_FTSR_TR0_Msk
#define EXTI_FTSR_TR1_Pos (1U)
#define EXTI_FTSR_TR1_Msk (0x1U << EXTI_FTSR_TR1_Pos)
#define EXTI_FTSR_TR1 EXTI_FTSR_TR1_Msk
#define EXTI_FTSR_TR2_Pos (2U)
#define EXTI_FTSR_TR2_Msk (0x1U << EXTI_FTSR_TR2_Pos)
#define EXTI_FTSR_TR2 EXTI_FTSR_TR2_Msk
#define EXTI_FTSR_TR3_Pos (3U)
#define EXTI_FTSR_TR3_Msk (0x1U << EXTI_FTSR_TR3_Pos)
#define EXTI_FTSR_TR3 EXTI_FTSR_TR3_Msk
#define EXTI_FTSR_TR4_Pos (4U)
#define EXTI_FTSR_TR4_Msk (0x1U << EXTI_FTSR_TR4_Pos)
#define EXTI_FTSR_TR4 EXTI_FTSR_TR4_Msk
#define EXTI_FTSR_TR5_Pos (5U)
#define EXTI_FTSR_TR5_Msk (0x1U << EXTI_FTSR_TR5_Pos)
#define EXTI_FTSR_TR5 EXTI_FTSR_TR5_Msk
#define EXTI_FTSR_TR6_Pos (6U)
#define EXTI_FTSR_TR6_Msk (0x1U << EXTI_FTSR_TR6_Pos)
#define EXTI_FTSR_TR6 EXTI_FTSR_TR6_Msk
#define EXTI_FTSR_TR7_Pos (7U)
#define EXTI_FTSR_TR7_Msk (0x1U << EXTI_FTSR_TR7_Pos)
#define EXTI_FTSR_TR7 EXTI_FTSR_TR7_Msk
#define EXTI_FTSR_TR8_Pos (8U)
#define EXTI_FTSR_TR8_Msk (0x1U << EXTI_FTSR_TR8_Pos)
#define EXTI_FTSR_TR8 EXTI_FTSR_TR8_Msk
#define EXTI_FTSR_TR9_Pos (9U)
#define EXTI_FTSR_TR9_Msk (0x1U << EXTI_FTSR_TR9_Pos)
#define EXTI_FTSR_TR9 EXTI_FTSR_TR9_Msk
#define EXTI_FTSR_TR10_Pos (10U)
#define EXTI_FTSR_TR10_Msk (0x1U << EXTI_FTSR_TR10_Pos)
#define EXTI_FTSR_TR10 EXTI_FTSR_TR10_Msk
#define EXTI_FTSR_TR11_Pos (11U)
#define EXTI_FTSR_TR11_Msk (0x1U << EXTI_FTSR_TR11_Pos)
#define EXTI_FTSR_TR11 EXTI_FTSR_TR11_Msk
#define EXTI_FTSR_TR12_Pos (12U)
#define EXTI_FTSR_TR12_Msk (0x1U << EXTI_FTSR_TR12_Pos)
#define EXTI_FTSR_TR12 EXTI_FTSR_TR12_Msk
#define EXTI_FTSR_TR13_Pos (13U)
#define EXTI_FTSR_TR13_Msk (0x1U << EXTI_FTSR_TR13_Pos)
#define EXTI_FTSR_TR13 EXTI_FTSR_TR13_Msk
#define EXTI_FTSR_TR14_Pos (14U)
#define EXTI_FTSR_TR14_Msk (0x1U << EXTI_FTSR_TR14_Pos)
#define EXTI_FTSR_TR14 EXTI_FTSR_TR14_Msk
#define EXTI_FTSR_TR15_Pos (15U)
#define EXTI_FTSR_TR15_Msk (0x1U << EXTI_FTSR_TR15_Pos)
#define EXTI_FTSR_TR15 EXTI_FTSR_TR15_Msk
#define EXTI_FTSR_TR16_Pos (16U)
#define EXTI_FTSR_TR16_Msk (0x1U << EXTI_FTSR_TR16_Pos)
#define EXTI_FTSR_TR16 EXTI_FTSR_TR16_Msk
#define EXTI_FTSR_TR17_Pos (17U)
#define EXTI_FTSR_TR17_Msk (0x1U << EXTI_FTSR_TR17_Pos)
#define EXTI_FTSR_TR17 EXTI_FTSR_TR17_Msk
#define EXTI_FTSR_TR18_Pos (18U)
#define EXTI_FTSR_TR18_Msk (0x1U << EXTI_FTSR_TR18_Pos)
#define EXTI_FTSR_TR18 EXTI_FTSR_TR18_Msk
#define EXTI_FTSR_TR19_Pos (19U)
#define EXTI_FTSR_TR19_Msk (0x1U << EXTI_FTSR_TR19_Pos)
#define EXTI_FTSR_TR19 EXTI_FTSR_TR19_Msk
#define EXTI_FTSR_TR20_Pos (20U)
#define EXTI_FTSR_TR20_Msk (0x1U << EXTI_FTSR_TR20_Pos)
#define EXTI_FTSR_TR20 EXTI_FTSR_TR20_Msk
#define EXTI_FTSR_TR21_Pos (21U)
#define EXTI_FTSR_TR21_Msk (0x1U << EXTI_FTSR_TR21_Pos)
#define EXTI_FTSR_TR21 EXTI_FTSR_TR21_Msk
#define EXTI_FTSR_TR22_Pos (22U)
#define EXTI_FTSR_TR22_Msk (0x1U << EXTI_FTSR_TR22_Pos)
#define EXTI_FTSR_TR22 EXTI_FTSR_TR22_Msk
#define EXTI_FTSR_TR29_Pos (29U)
#define EXTI_FTSR_TR29_Msk (0x1U << EXTI_FTSR_TR29_Pos)
#define EXTI_FTSR_TR29 EXTI_FTSR_TR29_Msk
#define EXTI_FTSR_TR30_Pos (30U)
#define EXTI_FTSR_TR30_Msk (0x1U << EXTI_FTSR_TR30_Pos)
#define EXTI_FTSR_TR30 EXTI_FTSR_TR30_Msk
#define EXTI_FTSR_TR31_Pos (31U)
#define EXTI_FTSR_TR31_Msk (0x1U << EXTI_FTSR_TR31_Pos)
#define EXTI_FTSR_TR31 EXTI_FTSR_TR31_Msk


#define EXTI_FTSR_FT0 EXTI_FTSR_TR0
#define EXTI_FTSR_FT1 EXTI_FTSR_TR1
#define EXTI_FTSR_FT2 EXTI_FTSR_TR2
#define EXTI_FTSR_FT3 EXTI_FTSR_TR3
#define EXTI_FTSR_FT4 EXTI_FTSR_TR4
#define EXTI_FTSR_FT5 EXTI_FTSR_TR5
#define EXTI_FTSR_FT6 EXTI_FTSR_TR6
#define EXTI_FTSR_FT7 EXTI_FTSR_TR7
#define EXTI_FTSR_FT8 EXTI_FTSR_TR8
#define EXTI_FTSR_FT9 EXTI_FTSR_TR9
#define EXTI_FTSR_FT10 EXTI_FTSR_TR10
#define EXTI_FTSR_FT11 EXTI_FTSR_TR11
#define EXTI_FTSR_FT12 EXTI_FTSR_TR12
#define EXTI_FTSR_FT13 EXTI_FTSR_TR13
#define EXTI_FTSR_FT14 EXTI_FTSR_TR14
#define EXTI_FTSR_FT15 EXTI_FTSR_TR15
#define EXTI_FTSR_FT16 EXTI_FTSR_TR16
#define EXTI_FTSR_FT17 EXTI_FTSR_TR17
#define EXTI_FTSR_FT18 EXTI_FTSR_TR18
#define EXTI_FTSR_FT19 EXTI_FTSR_TR19
#define EXTI_FTSR_FT20 EXTI_FTSR_TR20
#define EXTI_FTSR_FT21 EXTI_FTSR_TR21
#define EXTI_FTSR_FT22 EXTI_FTSR_TR22
# 7608 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_FTSR_FT29 EXTI_FTSR_TR29
#define EXTI_FTSR_FT30 EXTI_FTSR_TR30
#define EXTI_FTSR_FT31 EXTI_FTSR_TR31


#define EXTI_SWIER_SWIER0_Pos (0U)
#define EXTI_SWIER_SWIER0_Msk (0x1U << EXTI_SWIER_SWIER0_Pos)
#define EXTI_SWIER_SWIER0 EXTI_SWIER_SWIER0_Msk
#define EXTI_SWIER_SWIER1_Pos (1U)
#define EXTI_SWIER_SWIER1_Msk (0x1U << EXTI_SWIER_SWIER1_Pos)
#define EXTI_SWIER_SWIER1 EXTI_SWIER_SWIER1_Msk
#define EXTI_SWIER_SWIER2_Pos (2U)
#define EXTI_SWIER_SWIER2_Msk (0x1U << EXTI_SWIER_SWIER2_Pos)
#define EXTI_SWIER_SWIER2 EXTI_SWIER_SWIER2_Msk
#define EXTI_SWIER_SWIER3_Pos (3U)
#define EXTI_SWIER_SWIER3_Msk (0x1U << EXTI_SWIER_SWIER3_Pos)
#define EXTI_SWIER_SWIER3 EXTI_SWIER_SWIER3_Msk
#define EXTI_SWIER_SWIER4_Pos (4U)
#define EXTI_SWIER_SWIER4_Msk (0x1U << EXTI_SWIER_SWIER4_Pos)
#define EXTI_SWIER_SWIER4 EXTI_SWIER_SWIER4_Msk
#define EXTI_SWIER_SWIER5_Pos (5U)
#define EXTI_SWIER_SWIER5_Msk (0x1U << EXTI_SWIER_SWIER5_Pos)
#define EXTI_SWIER_SWIER5 EXTI_SWIER_SWIER5_Msk
#define EXTI_SWIER_SWIER6_Pos (6U)
#define EXTI_SWIER_SWIER6_Msk (0x1U << EXTI_SWIER_SWIER6_Pos)
#define EXTI_SWIER_SWIER6 EXTI_SWIER_SWIER6_Msk
#define EXTI_SWIER_SWIER7_Pos (7U)
#define EXTI_SWIER_SWIER7_Msk (0x1U << EXTI_SWIER_SWIER7_Pos)
#define EXTI_SWIER_SWIER7 EXTI_SWIER_SWIER7_Msk
#define EXTI_SWIER_SWIER8_Pos (8U)
#define EXTI_SWIER_SWIER8_Msk (0x1U << EXTI_SWIER_SWIER8_Pos)
#define EXTI_SWIER_SWIER8 EXTI_SWIER_SWIER8_Msk
#define EXTI_SWIER_SWIER9_Pos (9U)
#define EXTI_SWIER_SWIER9_Msk (0x1U << EXTI_SWIER_SWIER9_Pos)
#define EXTI_SWIER_SWIER9 EXTI_SWIER_SWIER9_Msk
#define EXTI_SWIER_SWIER10_Pos (10U)
#define EXTI_SWIER_SWIER10_Msk (0x1U << EXTI_SWIER_SWIER10_Pos)
#define EXTI_SWIER_SWIER10 EXTI_SWIER_SWIER10_Msk
#define EXTI_SWIER_SWIER11_Pos (11U)
#define EXTI_SWIER_SWIER11_Msk (0x1U << EXTI_SWIER_SWIER11_Pos)
#define EXTI_SWIER_SWIER11 EXTI_SWIER_SWIER11_Msk
#define EXTI_SWIER_SWIER12_Pos (12U)
#define EXTI_SWIER_SWIER12_Msk (0x1U << EXTI_SWIER_SWIER12_Pos)
#define EXTI_SWIER_SWIER12 EXTI_SWIER_SWIER12_Msk
#define EXTI_SWIER_SWIER13_Pos (13U)
#define EXTI_SWIER_SWIER13_Msk (0x1U << EXTI_SWIER_SWIER13_Pos)
#define EXTI_SWIER_SWIER13 EXTI_SWIER_SWIER13_Msk
#define EXTI_SWIER_SWIER14_Pos (14U)
#define EXTI_SWIER_SWIER14_Msk (0x1U << EXTI_SWIER_SWIER14_Pos)
#define EXTI_SWIER_SWIER14 EXTI_SWIER_SWIER14_Msk
#define EXTI_SWIER_SWIER15_Pos (15U)
#define EXTI_SWIER_SWIER15_Msk (0x1U << EXTI_SWIER_SWIER15_Pos)
#define EXTI_SWIER_SWIER15 EXTI_SWIER_SWIER15_Msk
#define EXTI_SWIER_SWIER16_Pos (16U)
#define EXTI_SWIER_SWIER16_Msk (0x1U << EXTI_SWIER_SWIER16_Pos)
#define EXTI_SWIER_SWIER16 EXTI_SWIER_SWIER16_Msk
#define EXTI_SWIER_SWIER17_Pos (17U)
#define EXTI_SWIER_SWIER17_Msk (0x1U << EXTI_SWIER_SWIER17_Pos)
#define EXTI_SWIER_SWIER17 EXTI_SWIER_SWIER17_Msk
#define EXTI_SWIER_SWIER18_Pos (18U)
#define EXTI_SWIER_SWIER18_Msk (0x1U << EXTI_SWIER_SWIER18_Pos)
#define EXTI_SWIER_SWIER18 EXTI_SWIER_SWIER18_Msk
#define EXTI_SWIER_SWIER19_Pos (19U)
#define EXTI_SWIER_SWIER19_Msk (0x1U << EXTI_SWIER_SWIER19_Pos)
#define EXTI_SWIER_SWIER19 EXTI_SWIER_SWIER19_Msk
#define EXTI_SWIER_SWIER20_Pos (20U)
#define EXTI_SWIER_SWIER20_Msk (0x1U << EXTI_SWIER_SWIER20_Pos)
#define EXTI_SWIER_SWIER20 EXTI_SWIER_SWIER20_Msk
#define EXTI_SWIER_SWIER21_Pos (21U)
#define EXTI_SWIER_SWIER21_Msk (0x1U << EXTI_SWIER_SWIER21_Pos)
#define EXTI_SWIER_SWIER21 EXTI_SWIER_SWIER21_Msk
#define EXTI_SWIER_SWIER22_Pos (22U)
#define EXTI_SWIER_SWIER22_Msk (0x1U << EXTI_SWIER_SWIER22_Pos)
#define EXTI_SWIER_SWIER22 EXTI_SWIER_SWIER22_Msk
#define EXTI_SWIER_SWIER29_Pos (29U)
#define EXTI_SWIER_SWIER29_Msk (0x1U << EXTI_SWIER_SWIER29_Pos)
#define EXTI_SWIER_SWIER29 EXTI_SWIER_SWIER29_Msk
#define EXTI_SWIER_SWIER30_Pos (30U)
#define EXTI_SWIER_SWIER30_Msk (0x1U << EXTI_SWIER_SWIER30_Pos)
#define EXTI_SWIER_SWIER30 EXTI_SWIER_SWIER30_Msk
#define EXTI_SWIER_SWIER31_Pos (31U)
#define EXTI_SWIER_SWIER31_Msk (0x1U << EXTI_SWIER_SWIER31_Pos)
#define EXTI_SWIER_SWIER31 EXTI_SWIER_SWIER31_Msk


#define EXTI_SWIER_SWI0 EXTI_SWIER_SWIER0
#define EXTI_SWIER_SWI1 EXTI_SWIER_SWIER1
#define EXTI_SWIER_SWI2 EXTI_SWIER_SWIER2
#define EXTI_SWIER_SWI3 EXTI_SWIER_SWIER3
#define EXTI_SWIER_SWI4 EXTI_SWIER_SWIER4
#define EXTI_SWIER_SWI5 EXTI_SWIER_SWIER5
#define EXTI_SWIER_SWI6 EXTI_SWIER_SWIER6
#define EXTI_SWIER_SWI7 EXTI_SWIER_SWIER7
#define EXTI_SWIER_SWI8 EXTI_SWIER_SWIER8
#define EXTI_SWIER_SWI9 EXTI_SWIER_SWIER9
#define EXTI_SWIER_SWI10 EXTI_SWIER_SWIER10
#define EXTI_SWIER_SWI11 EXTI_SWIER_SWIER11
#define EXTI_SWIER_SWI12 EXTI_SWIER_SWIER12
#define EXTI_SWIER_SWI13 EXTI_SWIER_SWIER13
#define EXTI_SWIER_SWI14 EXTI_SWIER_SWIER14
#define EXTI_SWIER_SWI15 EXTI_SWIER_SWIER15
#define EXTI_SWIER_SWI16 EXTI_SWIER_SWIER16
#define EXTI_SWIER_SWI17 EXTI_SWIER_SWIER17
#define EXTI_SWIER_SWI18 EXTI_SWIER_SWIER18
#define EXTI_SWIER_SWI19 EXTI_SWIER_SWIER19
#define EXTI_SWIER_SWI20 EXTI_SWIER_SWIER20
#define EXTI_SWIER_SWI21 EXTI_SWIER_SWIER21
#define EXTI_SWIER_SWI22 EXTI_SWIER_SWIER22
# 7734 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_SWIER_SWI29 EXTI_SWIER_SWIER29
#define EXTI_SWIER_SWI30 EXTI_SWIER_SWIER30
#define EXTI_SWIER_SWI31 EXTI_SWIER_SWIER31


#define EXTI_PR_PR0_Pos (0U)
#define EXTI_PR_PR0_Msk (0x1U << EXTI_PR_PR0_Pos)
#define EXTI_PR_PR0 EXTI_PR_PR0_Msk
#define EXTI_PR_PR1_Pos (1U)
#define EXTI_PR_PR1_Msk (0x1U << EXTI_PR_PR1_Pos)
#define EXTI_PR_PR1 EXTI_PR_PR1_Msk
#define EXTI_PR_PR2_Pos (2U)
#define EXTI_PR_PR2_Msk (0x1U << EXTI_PR_PR2_Pos)
#define EXTI_PR_PR2 EXTI_PR_PR2_Msk
#define EXTI_PR_PR3_Pos (3U)
#define EXTI_PR_PR3_Msk (0x1U << EXTI_PR_PR3_Pos)
#define EXTI_PR_PR3 EXTI_PR_PR3_Msk
#define EXTI_PR_PR4_Pos (4U)
#define EXTI_PR_PR4_Msk (0x1U << EXTI_PR_PR4_Pos)
#define EXTI_PR_PR4 EXTI_PR_PR4_Msk
#define EXTI_PR_PR5_Pos (5U)
#define EXTI_PR_PR5_Msk (0x1U << EXTI_PR_PR5_Pos)
#define EXTI_PR_PR5 EXTI_PR_PR5_Msk
#define EXTI_PR_PR6_Pos (6U)
#define EXTI_PR_PR6_Msk (0x1U << EXTI_PR_PR6_Pos)
#define EXTI_PR_PR6 EXTI_PR_PR6_Msk
#define EXTI_PR_PR7_Pos (7U)
#define EXTI_PR_PR7_Msk (0x1U << EXTI_PR_PR7_Pos)
#define EXTI_PR_PR7 EXTI_PR_PR7_Msk
#define EXTI_PR_PR8_Pos (8U)
#define EXTI_PR_PR8_Msk (0x1U << EXTI_PR_PR8_Pos)
#define EXTI_PR_PR8 EXTI_PR_PR8_Msk
#define EXTI_PR_PR9_Pos (9U)
#define EXTI_PR_PR9_Msk (0x1U << EXTI_PR_PR9_Pos)
#define EXTI_PR_PR9 EXTI_PR_PR9_Msk
#define EXTI_PR_PR10_Pos (10U)
#define EXTI_PR_PR10_Msk (0x1U << EXTI_PR_PR10_Pos)
#define EXTI_PR_PR10 EXTI_PR_PR10_Msk
#define EXTI_PR_PR11_Pos (11U)
#define EXTI_PR_PR11_Msk (0x1U << EXTI_PR_PR11_Pos)
#define EXTI_PR_PR11 EXTI_PR_PR11_Msk
#define EXTI_PR_PR12_Pos (12U)
#define EXTI_PR_PR12_Msk (0x1U << EXTI_PR_PR12_Pos)
#define EXTI_PR_PR12 EXTI_PR_PR12_Msk
#define EXTI_PR_PR13_Pos (13U)
#define EXTI_PR_PR13_Msk (0x1U << EXTI_PR_PR13_Pos)
#define EXTI_PR_PR13 EXTI_PR_PR13_Msk
#define EXTI_PR_PR14_Pos (14U)
#define EXTI_PR_PR14_Msk (0x1U << EXTI_PR_PR14_Pos)
#define EXTI_PR_PR14 EXTI_PR_PR14_Msk
#define EXTI_PR_PR15_Pos (15U)
#define EXTI_PR_PR15_Msk (0x1U << EXTI_PR_PR15_Pos)
#define EXTI_PR_PR15 EXTI_PR_PR15_Msk
#define EXTI_PR_PR16_Pos (16U)
#define EXTI_PR_PR16_Msk (0x1U << EXTI_PR_PR16_Pos)
#define EXTI_PR_PR16 EXTI_PR_PR16_Msk
#define EXTI_PR_PR17_Pos (17U)
#define EXTI_PR_PR17_Msk (0x1U << EXTI_PR_PR17_Pos)
#define EXTI_PR_PR17 EXTI_PR_PR17_Msk
#define EXTI_PR_PR18_Pos (18U)
#define EXTI_PR_PR18_Msk (0x1U << EXTI_PR_PR18_Pos)
#define EXTI_PR_PR18 EXTI_PR_PR18_Msk
#define EXTI_PR_PR19_Pos (19U)
#define EXTI_PR_PR19_Msk (0x1U << EXTI_PR_PR19_Pos)
#define EXTI_PR_PR19 EXTI_PR_PR19_Msk
#define EXTI_PR_PR20_Pos (20U)
#define EXTI_PR_PR20_Msk (0x1U << EXTI_PR_PR20_Pos)
#define EXTI_PR_PR20 EXTI_PR_PR20_Msk
#define EXTI_PR_PR21_Pos (21U)
#define EXTI_PR_PR21_Msk (0x1U << EXTI_PR_PR21_Pos)
#define EXTI_PR_PR21 EXTI_PR_PR21_Msk
#define EXTI_PR_PR22_Pos (22U)
#define EXTI_PR_PR22_Msk (0x1U << EXTI_PR_PR22_Pos)
#define EXTI_PR_PR22 EXTI_PR_PR22_Msk
#define EXTI_PR_PR29_Pos (29U)
#define EXTI_PR_PR29_Msk (0x1U << EXTI_PR_PR29_Pos)
#define EXTI_PR_PR29 EXTI_PR_PR29_Msk
#define EXTI_PR_PR30_Pos (30U)
#define EXTI_PR_PR30_Msk (0x1U << EXTI_PR_PR30_Pos)
#define EXTI_PR_PR30 EXTI_PR_PR30_Msk
#define EXTI_PR_PR31_Pos (31U)
#define EXTI_PR_PR31_Msk (0x1U << EXTI_PR_PR31_Pos)
#define EXTI_PR_PR31 EXTI_PR_PR31_Msk


#define EXTI_PR_PIF0 EXTI_PR_PR0
#define EXTI_PR_PIF1 EXTI_PR_PR1
#define EXTI_PR_PIF2 EXTI_PR_PR2
#define EXTI_PR_PIF3 EXTI_PR_PR3
#define EXTI_PR_PIF4 EXTI_PR_PR4
#define EXTI_PR_PIF5 EXTI_PR_PR5
#define EXTI_PR_PIF6 EXTI_PR_PR6
#define EXTI_PR_PIF6 EXTI_PR_PR6
#define EXTI_PR_PIF7 EXTI_PR_PR7
#define EXTI_PR_PIF8 EXTI_PR_PR8
#define EXTI_PR_PIF9 EXTI_PR_PR9
#define EXTI_PR_PIF10 EXTI_PR_PR10
#define EXTI_PR_PIF11 EXTI_PR_PR11
#define EXTI_PR_PIF12 EXTI_PR_PR12
#define EXTI_PR_PIF13 EXTI_PR_PR13
#define EXTI_PR_PIF14 EXTI_PR_PR14
#define EXTI_PR_PIF15 EXTI_PR_PR15
#define EXTI_PR_PIF16 EXTI_PR_PR16
#define EXTI_PR_PIF17 EXTI_PR_PR17
#define EXTI_PR_PIF18 EXTI_PR_PR18
#define EXTI_PR_PIF19 EXTI_PR_PR19
#define EXTI_PR_PIF20 EXTI_PR_PR20
#define EXTI_PR_PIF21 EXTI_PR_PR21
#define EXTI_PR_PIF22 EXTI_PR_PR22
# 7861 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_PR_PIF29 EXTI_PR_PR29
#define EXTI_PR_PIF30 EXTI_PR_PR30
#define EXTI_PR_PIF31 EXTI_PR_PR31

#define EXTI_32_63_SUPPORT 


#define EXTI_IMR2_MR32_Pos (0U)
#define EXTI_IMR2_MR32_Msk (0x1U << EXTI_IMR2_MR32_Pos)
#define EXTI_IMR2_MR32 EXTI_IMR2_MR32_Msk
#define EXTI_IMR2_MR33_Pos (1U)
#define EXTI_IMR2_MR33_Msk (0x1U << EXTI_IMR2_MR33_Pos)
#define EXTI_IMR2_MR33 EXTI_IMR2_MR33_Msk
#define EXTI_IMR2_MR34_Pos (2U)
#define EXTI_IMR2_MR34_Msk (0x1U << EXTI_IMR2_MR34_Pos)
#define EXTI_IMR2_MR34 EXTI_IMR2_MR34_Msk
#define EXTI_IMR2_MR35_Pos (3U)
#define EXTI_IMR2_MR35_Msk (0x1U << EXTI_IMR2_MR35_Pos)
#define EXTI_IMR2_MR35 EXTI_IMR2_MR35_Msk



#define EXTI_IMR2_IM32 EXTI_IMR2_MR32
#define EXTI_IMR2_IM33 EXTI_IMR2_MR33
#define EXTI_IMR2_IM34 EXTI_IMR2_MR34
#define EXTI_IMR2_IM35 EXTI_IMR2_MR35

#define EXTI_IMR2_IM_Pos (0U)
#define EXTI_IMR2_IM_Msk (0xFU << EXTI_IMR2_IM_Pos)
#define EXTI_IMR2_IM EXTI_IMR2_IM_Msk


#define EXTI_EMR2_MR32_Pos (0U)
#define EXTI_EMR2_MR32_Msk (0x1U << EXTI_EMR2_MR32_Pos)
#define EXTI_EMR2_MR32 EXTI_EMR2_MR32_Msk
#define EXTI_EMR2_MR33_Pos (1U)
#define EXTI_EMR2_MR33_Msk (0x1U << EXTI_EMR2_MR33_Pos)
#define EXTI_EMR2_MR33 EXTI_EMR2_MR33_Msk
#define EXTI_EMR2_MR34_Pos (2U)
#define EXTI_EMR2_MR34_Msk (0x1U << EXTI_EMR2_MR34_Pos)
#define EXTI_EMR2_MR34 EXTI_EMR2_MR34_Msk
#define EXTI_EMR2_MR35_Pos (3U)
#define EXTI_EMR2_MR35_Msk (0x1U << EXTI_EMR2_MR35_Pos)
#define EXTI_EMR2_MR35 EXTI_EMR2_MR35_Msk


#define EXTI_EMR2_EM32 EXTI_EMR2_MR32
#define EXTI_EMR2_EM33 EXTI_EMR2_MR33
#define EXTI_EMR2_EM34 EXTI_EMR2_MR34
#define EXTI_EMR2_EM35 EXTI_EMR2_MR35

#define EXTI_EMR2_EM_Pos (0U)
#define EXTI_EMR2_EM_Msk (0xFU << EXTI_EMR2_EM_Pos)
#define EXTI_EMR2_EM EXTI_EMR2_EM_Msk


#define EXTI_RTSR2_TR32_Pos (0U)
#define EXTI_RTSR2_TR32_Msk (0x1U << EXTI_RTSR2_TR32_Pos)
#define EXTI_RTSR2_TR32 EXTI_RTSR2_TR32_Msk
#define EXTI_RTSR2_TR33_Pos (1U)
#define EXTI_RTSR2_TR33_Msk (0x1U << EXTI_RTSR2_TR33_Pos)
#define EXTI_RTSR2_TR33 EXTI_RTSR2_TR33_Msk


#define EXTI_RTSR2_RT32 EXTI_RTSR2_TR32
#define EXTI_RTSR2_RT33 EXTI_RTSR2_TR33
# 7935 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_FTSR2_TR32_Pos (0U)
#define EXTI_FTSR2_TR32_Msk (0x1U << EXTI_FTSR2_TR32_Pos)
#define EXTI_FTSR2_TR32 EXTI_FTSR2_TR32_Msk
#define EXTI_FTSR2_TR33_Pos (1U)
#define EXTI_FTSR2_TR33_Msk (0x1U << EXTI_FTSR2_TR33_Pos)
#define EXTI_FTSR2_TR33 EXTI_FTSR2_TR33_Msk


#define EXTI_FTSR2_FT32 EXTI_FTSR2_TR32
#define EXTI_FTSR2_FT33 EXTI_FTSR2_TR33
# 7953 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_SWIER2_SWIER32_Pos (0U)
#define EXTI_SWIER2_SWIER32_Msk (0x1U << EXTI_SWIER2_SWIER32_Pos)
#define EXTI_SWIER2_SWIER32 EXTI_SWIER2_SWIER32_Msk
#define EXTI_SWIER2_SWIER33_Pos (1U)
#define EXTI_SWIER2_SWIER33_Msk (0x1U << EXTI_SWIER2_SWIER33_Pos)
#define EXTI_SWIER2_SWIER33 EXTI_SWIER2_SWIER33_Msk


#define EXTI_SWIER2_SWI32 EXTI_SWIER2_SWIER32
#define EXTI_SWIER2_SWI33 EXTI_SWIER2_SWIER33
# 7971 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define EXTI_PR2_PR32_Pos (0U)
#define EXTI_PR2_PR32_Msk (0x1U << EXTI_PR2_PR32_Pos)
#define EXTI_PR2_PR32 EXTI_PR2_PR32_Msk
#define EXTI_PR2_PR33_Pos (1U)
#define EXTI_PR2_PR33_Msk (0x1U << EXTI_PR2_PR33_Pos)
#define EXTI_PR2_PR33 EXTI_PR2_PR33_Msk


#define EXTI_PR2_PIF32 EXTI_PR2_PR32
#define EXTI_PR2_PIF33 EXTI_PR2_PR33
# 7995 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define FLASH_ACR_LATENCY_Pos (0U)
#define FLASH_ACR_LATENCY_Msk (0x7U << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY FLASH_ACR_LATENCY_Msk
#define FLASH_ACR_LATENCY_0 (0x1U << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_1 (0x2U << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_2 (0x4U << FLASH_ACR_LATENCY_Pos)

#define FLASH_ACR_HLFCYA_Pos (3U)
#define FLASH_ACR_HLFCYA_Msk (0x1U << FLASH_ACR_HLFCYA_Pos)
#define FLASH_ACR_HLFCYA FLASH_ACR_HLFCYA_Msk
#define FLASH_ACR_PRFTBE_Pos (4U)
#define FLASH_ACR_PRFTBE_Msk (0x1U << FLASH_ACR_PRFTBE_Pos)
#define FLASH_ACR_PRFTBE FLASH_ACR_PRFTBE_Msk
#define FLASH_ACR_PRFTBS_Pos (5U)
#define FLASH_ACR_PRFTBS_Msk (0x1U << FLASH_ACR_PRFTBS_Pos)
#define FLASH_ACR_PRFTBS FLASH_ACR_PRFTBS_Msk


#define FLASH_KEYR_FKEYR_Pos (0U)
#define FLASH_KEYR_FKEYR_Msk (0xFFFFFFFFU << FLASH_KEYR_FKEYR_Pos)
#define FLASH_KEYR_FKEYR FLASH_KEYR_FKEYR_Msk

#define RDP_KEY_Pos (0U)
#define RDP_KEY_Msk (0xA5U << RDP_KEY_Pos)
#define RDP_KEY RDP_KEY_Msk
#define FLASH_KEY1_Pos (0U)
#define FLASH_KEY1_Msk (0x45670123U << FLASH_KEY1_Pos)
#define FLASH_KEY1 FLASH_KEY1_Msk
#define FLASH_KEY2_Pos (0U)
#define FLASH_KEY2_Msk (0xCDEF89ABU << FLASH_KEY2_Pos)
#define FLASH_KEY2 FLASH_KEY2_Msk


#define FLASH_OPTKEYR_OPTKEYR_Pos (0U)
#define FLASH_OPTKEYR_OPTKEYR_Msk (0xFFFFFFFFU << FLASH_OPTKEYR_OPTKEYR_Pos)
#define FLASH_OPTKEYR_OPTKEYR FLASH_OPTKEYR_OPTKEYR_Msk

#define FLASH_OPTKEY1 FLASH_KEY1
#define FLASH_OPTKEY2 FLASH_KEY2


#define FLASH_SR_BSY_Pos (0U)
#define FLASH_SR_BSY_Msk (0x1U << FLASH_SR_BSY_Pos)
#define FLASH_SR_BSY FLASH_SR_BSY_Msk
#define FLASH_SR_PGERR_Pos (2U)
#define FLASH_SR_PGERR_Msk (0x1U << FLASH_SR_PGERR_Pos)
#define FLASH_SR_PGERR FLASH_SR_PGERR_Msk
#define FLASH_SR_WRPERR_Pos (4U)
#define FLASH_SR_WRPERR_Msk (0x1U << FLASH_SR_WRPERR_Pos)
#define FLASH_SR_WRPERR FLASH_SR_WRPERR_Msk
#define FLASH_SR_EOP_Pos (5U)
#define FLASH_SR_EOP_Msk (0x1U << FLASH_SR_EOP_Pos)
#define FLASH_SR_EOP FLASH_SR_EOP_Msk


#define FLASH_CR_PG_Pos (0U)
#define FLASH_CR_PG_Msk (0x1U << FLASH_CR_PG_Pos)
#define FLASH_CR_PG FLASH_CR_PG_Msk
#define FLASH_CR_PER_Pos (1U)
#define FLASH_CR_PER_Msk (0x1U << FLASH_CR_PER_Pos)
#define FLASH_CR_PER FLASH_CR_PER_Msk
#define FLASH_CR_MER_Pos (2U)
#define FLASH_CR_MER_Msk (0x1U << FLASH_CR_MER_Pos)
#define FLASH_CR_MER FLASH_CR_MER_Msk
#define FLASH_CR_OPTPG_Pos (4U)
#define FLASH_CR_OPTPG_Msk (0x1U << FLASH_CR_OPTPG_Pos)
#define FLASH_CR_OPTPG FLASH_CR_OPTPG_Msk
#define FLASH_CR_OPTER_Pos (5U)
#define FLASH_CR_OPTER_Msk (0x1U << FLASH_CR_OPTER_Pos)
#define FLASH_CR_OPTER FLASH_CR_OPTER_Msk
#define FLASH_CR_STRT_Pos (6U)
#define FLASH_CR_STRT_Msk (0x1U << FLASH_CR_STRT_Pos)
#define FLASH_CR_STRT FLASH_CR_STRT_Msk
#define FLASH_CR_LOCK_Pos (7U)
#define FLASH_CR_LOCK_Msk (0x1U << FLASH_CR_LOCK_Pos)
#define FLASH_CR_LOCK FLASH_CR_LOCK_Msk
#define FLASH_CR_OPTWRE_Pos (9U)
#define FLASH_CR_OPTWRE_Msk (0x1U << FLASH_CR_OPTWRE_Pos)
#define FLASH_CR_OPTWRE FLASH_CR_OPTWRE_Msk
#define FLASH_CR_ERRIE_Pos (10U)
#define FLASH_CR_ERRIE_Msk (0x1U << FLASH_CR_ERRIE_Pos)
#define FLASH_CR_ERRIE FLASH_CR_ERRIE_Msk
#define FLASH_CR_EOPIE_Pos (12U)
#define FLASH_CR_EOPIE_Msk (0x1U << FLASH_CR_EOPIE_Pos)
#define FLASH_CR_EOPIE FLASH_CR_EOPIE_Msk
#define FLASH_CR_OBL_LAUNCH_Pos (13U)
#define FLASH_CR_OBL_LAUNCH_Msk (0x1U << FLASH_CR_OBL_LAUNCH_Pos)
#define FLASH_CR_OBL_LAUNCH FLASH_CR_OBL_LAUNCH_Msk


#define FLASH_AR_FAR_Pos (0U)
#define FLASH_AR_FAR_Msk (0xFFFFFFFFU << FLASH_AR_FAR_Pos)
#define FLASH_AR_FAR FLASH_AR_FAR_Msk


#define FLASH_OBR_OPTERR_Pos (0U)
#define FLASH_OBR_OPTERR_Msk (0x1U << FLASH_OBR_OPTERR_Pos)
#define FLASH_OBR_OPTERR FLASH_OBR_OPTERR_Msk
#define FLASH_OBR_RDPRT_Pos (1U)
#define FLASH_OBR_RDPRT_Msk (0x3U << FLASH_OBR_RDPRT_Pos)
#define FLASH_OBR_RDPRT FLASH_OBR_RDPRT_Msk
#define FLASH_OBR_RDPRT_1 (0x1U << FLASH_OBR_RDPRT_Pos)
#define FLASH_OBR_RDPRT_2 (0x3U << FLASH_OBR_RDPRT_Pos)

#define FLASH_OBR_USER_Pos (8U)
#define FLASH_OBR_USER_Msk (0x77U << FLASH_OBR_USER_Pos)
#define FLASH_OBR_USER FLASH_OBR_USER_Msk
#define FLASH_OBR_IWDG_SW_Pos (8U)
#define FLASH_OBR_IWDG_SW_Msk (0x1U << FLASH_OBR_IWDG_SW_Pos)
#define FLASH_OBR_IWDG_SW FLASH_OBR_IWDG_SW_Msk
#define FLASH_OBR_nRST_STOP_Pos (9U)
#define FLASH_OBR_nRST_STOP_Msk (0x1U << FLASH_OBR_nRST_STOP_Pos)
#define FLASH_OBR_nRST_STOP FLASH_OBR_nRST_STOP_Msk
#define FLASH_OBR_nRST_STDBY_Pos (10U)
#define FLASH_OBR_nRST_STDBY_Msk (0x1U << FLASH_OBR_nRST_STDBY_Pos)
#define FLASH_OBR_nRST_STDBY FLASH_OBR_nRST_STDBY_Msk
#define FLASH_OBR_nBOOT1_Pos (12U)
#define FLASH_OBR_nBOOT1_Msk (0x1U << FLASH_OBR_nBOOT1_Pos)
#define FLASH_OBR_nBOOT1 FLASH_OBR_nBOOT1_Msk
#define FLASH_OBR_VDDA_MONITOR_Pos (13U)
#define FLASH_OBR_VDDA_MONITOR_Msk (0x1U << FLASH_OBR_VDDA_MONITOR_Pos)
#define FLASH_OBR_VDDA_MONITOR FLASH_OBR_VDDA_MONITOR_Msk
#define FLASH_OBR_SRAM_PE_Pos (14U)
#define FLASH_OBR_SRAM_PE_Msk (0x1U << FLASH_OBR_SRAM_PE_Pos)
#define FLASH_OBR_SRAM_PE FLASH_OBR_SRAM_PE_Msk
#define FLASH_OBR_DATA0_Pos (16U)
#define FLASH_OBR_DATA0_Msk (0xFFU << FLASH_OBR_DATA0_Pos)
#define FLASH_OBR_DATA0 FLASH_OBR_DATA0_Msk
#define FLASH_OBR_DATA1_Pos (24U)
#define FLASH_OBR_DATA1_Msk (0xFFU << FLASH_OBR_DATA1_Pos)
#define FLASH_OBR_DATA1 FLASH_OBR_DATA1_Msk


#define FLASH_OBR_WDG_SW FLASH_OBR_IWDG_SW


#define FLASH_WRPR_WRP_Pos (0U)
#define FLASH_WRPR_WRP_Msk (0xFFFFFFFFU << FLASH_WRPR_WRP_Pos)
#define FLASH_WRPR_WRP FLASH_WRPR_WRP_Msk




#define OB_RDP_RDP_Pos (0U)
#define OB_RDP_RDP_Msk (0xFFU << OB_RDP_RDP_Pos)
#define OB_RDP_RDP OB_RDP_RDP_Msk
#define OB_RDP_nRDP_Pos (8U)
#define OB_RDP_nRDP_Msk (0xFFU << OB_RDP_nRDP_Pos)
#define OB_RDP_nRDP OB_RDP_nRDP_Msk


#define OB_USER_USER_Pos (16U)
#define OB_USER_USER_Msk (0xFFU << OB_USER_USER_Pos)
#define OB_USER_USER OB_USER_USER_Msk
#define OB_USER_nUSER_Pos (24U)
#define OB_USER_nUSER_Msk (0xFFU << OB_USER_nUSER_Pos)
#define OB_USER_nUSER OB_USER_nUSER_Msk


#define OB_WRP0_WRP0_Pos (0U)
#define OB_WRP0_WRP0_Msk (0xFFU << OB_WRP0_WRP0_Pos)
#define OB_WRP0_WRP0 OB_WRP0_WRP0_Msk
#define OB_WRP0_nWRP0_Pos (8U)
#define OB_WRP0_nWRP0_Msk (0xFFU << OB_WRP0_nWRP0_Pos)
#define OB_WRP0_nWRP0 OB_WRP0_nWRP0_Msk


#define OB_WRP1_WRP1_Pos (16U)
#define OB_WRP1_WRP1_Msk (0xFFU << OB_WRP1_WRP1_Pos)
#define OB_WRP1_WRP1 OB_WRP1_WRP1_Msk
#define OB_WRP1_nWRP1_Pos (24U)
#define OB_WRP1_nWRP1_Msk (0xFFU << OB_WRP1_nWRP1_Pos)
#define OB_WRP1_nWRP1 OB_WRP1_nWRP1_Msk


#define OB_WRP2_WRP2_Pos (0U)
#define OB_WRP2_WRP2_Msk (0xFFU << OB_WRP2_WRP2_Pos)
#define OB_WRP2_WRP2 OB_WRP2_WRP2_Msk
#define OB_WRP2_nWRP2_Pos (8U)
#define OB_WRP2_nWRP2_Msk (0xFFU << OB_WRP2_nWRP2_Pos)
#define OB_WRP2_nWRP2 OB_WRP2_nWRP2_Msk


#define OB_WRP3_WRP3_Pos (16U)
#define OB_WRP3_WRP3_Msk (0xFFU << OB_WRP3_WRP3_Pos)
#define OB_WRP3_WRP3 OB_WRP3_WRP3_Msk
#define OB_WRP3_nWRP3_Pos (24U)
#define OB_WRP3_nWRP3_Msk (0xFFU << OB_WRP3_nWRP3_Pos)
#define OB_WRP3_nWRP3 OB_WRP3_nWRP3_Msk







#define GPIO_MODER_MODER0_Pos (0U)
#define GPIO_MODER_MODER0_Msk (0x3U << GPIO_MODER_MODER0_Pos)
#define GPIO_MODER_MODER0 GPIO_MODER_MODER0_Msk
#define GPIO_MODER_MODER0_0 (0x1U << GPIO_MODER_MODER0_Pos)
#define GPIO_MODER_MODER0_1 (0x2U << GPIO_MODER_MODER0_Pos)
#define GPIO_MODER_MODER1_Pos (2U)
#define GPIO_MODER_MODER1_Msk (0x3U << GPIO_MODER_MODER1_Pos)
#define GPIO_MODER_MODER1 GPIO_MODER_MODER1_Msk
#define GPIO_MODER_MODER1_0 (0x1U << GPIO_MODER_MODER1_Pos)
#define GPIO_MODER_MODER1_1 (0x2U << GPIO_MODER_MODER1_Pos)
#define GPIO_MODER_MODER2_Pos (4U)
#define GPIO_MODER_MODER2_Msk (0x3U << GPIO_MODER_MODER2_Pos)
#define GPIO_MODER_MODER2 GPIO_MODER_MODER2_Msk
#define GPIO_MODER_MODER2_0 (0x1U << GPIO_MODER_MODER2_Pos)
#define GPIO_MODER_MODER2_1 (0x2U << GPIO_MODER_MODER2_Pos)
#define GPIO_MODER_MODER3_Pos (6U)
#define GPIO_MODER_MODER3_Msk (0x3U << GPIO_MODER_MODER3_Pos)
#define GPIO_MODER_MODER3 GPIO_MODER_MODER3_Msk
#define GPIO_MODER_MODER3_0 (0x1U << GPIO_MODER_MODER3_Pos)
#define GPIO_MODER_MODER3_1 (0x2U << GPIO_MODER_MODER3_Pos)
#define GPIO_MODER_MODER4_Pos (8U)
#define GPIO_MODER_MODER4_Msk (0x3U << GPIO_MODER_MODER4_Pos)
#define GPIO_MODER_MODER4 GPIO_MODER_MODER4_Msk
#define GPIO_MODER_MODER4_0 (0x1U << GPIO_MODER_MODER4_Pos)
#define GPIO_MODER_MODER4_1 (0x2U << GPIO_MODER_MODER4_Pos)
#define GPIO_MODER_MODER5_Pos (10U)
#define GPIO_MODER_MODER5_Msk (0x3U << GPIO_MODER_MODER5_Pos)
#define GPIO_MODER_MODER5 GPIO_MODER_MODER5_Msk
#define GPIO_MODER_MODER5_0 (0x1U << GPIO_MODER_MODER5_Pos)
#define GPIO_MODER_MODER5_1 (0x2U << GPIO_MODER_MODER5_Pos)
#define GPIO_MODER_MODER6_Pos (12U)
#define GPIO_MODER_MODER6_Msk (0x3U << GPIO_MODER_MODER6_Pos)
#define GPIO_MODER_MODER6 GPIO_MODER_MODER6_Msk
#define GPIO_MODER_MODER6_0 (0x1U << GPIO_MODER_MODER6_Pos)
#define GPIO_MODER_MODER6_1 (0x2U << GPIO_MODER_MODER6_Pos)
#define GPIO_MODER_MODER7_Pos (14U)
#define GPIO_MODER_MODER7_Msk (0x3U << GPIO_MODER_MODER7_Pos)
#define GPIO_MODER_MODER7 GPIO_MODER_MODER7_Msk
#define GPIO_MODER_MODER7_0 (0x1U << GPIO_MODER_MODER7_Pos)
#define GPIO_MODER_MODER7_1 (0x2U << GPIO_MODER_MODER7_Pos)
#define GPIO_MODER_MODER8_Pos (16U)
#define GPIO_MODER_MODER8_Msk (0x3U << GPIO_MODER_MODER8_Pos)
#define GPIO_MODER_MODER8 GPIO_MODER_MODER8_Msk
#define GPIO_MODER_MODER8_0 (0x1U << GPIO_MODER_MODER8_Pos)
#define GPIO_MODER_MODER8_1 (0x2U << GPIO_MODER_MODER8_Pos)
#define GPIO_MODER_MODER9_Pos (18U)
#define GPIO_MODER_MODER9_Msk (0x3U << GPIO_MODER_MODER9_Pos)
#define GPIO_MODER_MODER9 GPIO_MODER_MODER9_Msk
#define GPIO_MODER_MODER9_0 (0x1U << GPIO_MODER_MODER9_Pos)
#define GPIO_MODER_MODER9_1 (0x2U << GPIO_MODER_MODER9_Pos)
#define GPIO_MODER_MODER10_Pos (20U)
#define GPIO_MODER_MODER10_Msk (0x3U << GPIO_MODER_MODER10_Pos)
#define GPIO_MODER_MODER10 GPIO_MODER_MODER10_Msk
#define GPIO_MODER_MODER10_0 (0x1U << GPIO_MODER_MODER10_Pos)
#define GPIO_MODER_MODER10_1 (0x2U << GPIO_MODER_MODER10_Pos)
#define GPIO_MODER_MODER11_Pos (22U)
#define GPIO_MODER_MODER11_Msk (0x3U << GPIO_MODER_MODER11_Pos)
#define GPIO_MODER_MODER11 GPIO_MODER_MODER11_Msk
#define GPIO_MODER_MODER11_0 (0x1U << GPIO_MODER_MODER11_Pos)
#define GPIO_MODER_MODER11_1 (0x2U << GPIO_MODER_MODER11_Pos)
#define GPIO_MODER_MODER12_Pos (24U)
#define GPIO_MODER_MODER12_Msk (0x3U << GPIO_MODER_MODER12_Pos)
#define GPIO_MODER_MODER12 GPIO_MODER_MODER12_Msk
#define GPIO_MODER_MODER12_0 (0x1U << GPIO_MODER_MODER12_Pos)
#define GPIO_MODER_MODER12_1 (0x2U << GPIO_MODER_MODER12_Pos)
#define GPIO_MODER_MODER13_Pos (26U)
#define GPIO_MODER_MODER13_Msk (0x3U << GPIO_MODER_MODER13_Pos)
#define GPIO_MODER_MODER13 GPIO_MODER_MODER13_Msk
#define GPIO_MODER_MODER13_0 (0x1U << GPIO_MODER_MODER13_Pos)
#define GPIO_MODER_MODER13_1 (0x2U << GPIO_MODER_MODER13_Pos)
#define GPIO_MODER_MODER14_Pos (28U)
#define GPIO_MODER_MODER14_Msk (0x3U << GPIO_MODER_MODER14_Pos)
#define GPIO_MODER_MODER14 GPIO_MODER_MODER14_Msk
#define GPIO_MODER_MODER14_0 (0x1U << GPIO_MODER_MODER14_Pos)
#define GPIO_MODER_MODER14_1 (0x2U << GPIO_MODER_MODER14_Pos)
#define GPIO_MODER_MODER15_Pos (30U)
#define GPIO_MODER_MODER15_Msk (0x3U << GPIO_MODER_MODER15_Pos)
#define GPIO_MODER_MODER15 GPIO_MODER_MODER15_Msk
#define GPIO_MODER_MODER15_0 (0x1U << GPIO_MODER_MODER15_Pos)
#define GPIO_MODER_MODER15_1 (0x2U << GPIO_MODER_MODER15_Pos)


#define GPIO_OTYPER_OT_0 (0x00000001U)
#define GPIO_OTYPER_OT_1 (0x00000002U)
#define GPIO_OTYPER_OT_2 (0x00000004U)
#define GPIO_OTYPER_OT_3 (0x00000008U)
#define GPIO_OTYPER_OT_4 (0x00000010U)
#define GPIO_OTYPER_OT_5 (0x00000020U)
#define GPIO_OTYPER_OT_6 (0x00000040U)
#define GPIO_OTYPER_OT_7 (0x00000080U)
#define GPIO_OTYPER_OT_8 (0x00000100U)
#define GPIO_OTYPER_OT_9 (0x00000200U)
#define GPIO_OTYPER_OT_10 (0x00000400U)
#define GPIO_OTYPER_OT_11 (0x00000800U)
#define GPIO_OTYPER_OT_12 (0x00001000U)
#define GPIO_OTYPER_OT_13 (0x00002000U)
#define GPIO_OTYPER_OT_14 (0x00004000U)
#define GPIO_OTYPER_OT_15 (0x00008000U)


#define GPIO_OSPEEDER_OSPEEDR0_Pos (0U)
#define GPIO_OSPEEDER_OSPEEDR0_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR0_Pos)
#define GPIO_OSPEEDER_OSPEEDR0 GPIO_OSPEEDER_OSPEEDR0_Msk
#define GPIO_OSPEEDER_OSPEEDR0_0 (0x1U << GPIO_OSPEEDER_OSPEEDR0_Pos)
#define GPIO_OSPEEDER_OSPEEDR0_1 (0x2U << GPIO_OSPEEDER_OSPEEDR0_Pos)
#define GPIO_OSPEEDER_OSPEEDR1_Pos (2U)
#define GPIO_OSPEEDER_OSPEEDR1_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR1_Pos)
#define GPIO_OSPEEDER_OSPEEDR1 GPIO_OSPEEDER_OSPEEDR1_Msk
#define GPIO_OSPEEDER_OSPEEDR1_0 (0x1U << GPIO_OSPEEDER_OSPEEDR1_Pos)
#define GPIO_OSPEEDER_OSPEEDR1_1 (0x2U << GPIO_OSPEEDER_OSPEEDR1_Pos)
#define GPIO_OSPEEDER_OSPEEDR2_Pos (4U)
#define GPIO_OSPEEDER_OSPEEDR2_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR2_Pos)
#define GPIO_OSPEEDER_OSPEEDR2 GPIO_OSPEEDER_OSPEEDR2_Msk
#define GPIO_OSPEEDER_OSPEEDR2_0 (0x1U << GPIO_OSPEEDER_OSPEEDR2_Pos)
#define GPIO_OSPEEDER_OSPEEDR2_1 (0x2U << GPIO_OSPEEDER_OSPEEDR2_Pos)
#define GPIO_OSPEEDER_OSPEEDR3_Pos (6U)
#define GPIO_OSPEEDER_OSPEEDR3_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR3_Pos)
#define GPIO_OSPEEDER_OSPEEDR3 GPIO_OSPEEDER_OSPEEDR3_Msk
#define GPIO_OSPEEDER_OSPEEDR3_0 (0x1U << GPIO_OSPEEDER_OSPEEDR3_Pos)
#define GPIO_OSPEEDER_OSPEEDR3_1 (0x2U << GPIO_OSPEEDER_OSPEEDR3_Pos)
#define GPIO_OSPEEDER_OSPEEDR4_Pos (8U)
#define GPIO_OSPEEDER_OSPEEDR4_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR4_Pos)
#define GPIO_OSPEEDER_OSPEEDR4 GPIO_OSPEEDER_OSPEEDR4_Msk
#define GPIO_OSPEEDER_OSPEEDR4_0 (0x1U << GPIO_OSPEEDER_OSPEEDR4_Pos)
#define GPIO_OSPEEDER_OSPEEDR4_1 (0x2U << GPIO_OSPEEDER_OSPEEDR4_Pos)
#define GPIO_OSPEEDER_OSPEEDR5_Pos (10U)
#define GPIO_OSPEEDER_OSPEEDR5_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR5_Pos)
#define GPIO_OSPEEDER_OSPEEDR5 GPIO_OSPEEDER_OSPEEDR5_Msk
#define GPIO_OSPEEDER_OSPEEDR5_0 (0x1U << GPIO_OSPEEDER_OSPEEDR5_Pos)
#define GPIO_OSPEEDER_OSPEEDR5_1 (0x2U << GPIO_OSPEEDER_OSPEEDR5_Pos)
#define GPIO_OSPEEDER_OSPEEDR6_Pos (12U)
#define GPIO_OSPEEDER_OSPEEDR6_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR6_Pos)
#define GPIO_OSPEEDER_OSPEEDR6 GPIO_OSPEEDER_OSPEEDR6_Msk
#define GPIO_OSPEEDER_OSPEEDR6_0 (0x1U << GPIO_OSPEEDER_OSPEEDR6_Pos)
#define GPIO_OSPEEDER_OSPEEDR6_1 (0x2U << GPIO_OSPEEDER_OSPEEDR6_Pos)
#define GPIO_OSPEEDER_OSPEEDR7_Pos (14U)
#define GPIO_OSPEEDER_OSPEEDR7_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR7_Pos)
#define GPIO_OSPEEDER_OSPEEDR7 GPIO_OSPEEDER_OSPEEDR7_Msk
#define GPIO_OSPEEDER_OSPEEDR7_0 (0x1U << GPIO_OSPEEDER_OSPEEDR7_Pos)
#define GPIO_OSPEEDER_OSPEEDR7_1 (0x2U << GPIO_OSPEEDER_OSPEEDR7_Pos)
#define GPIO_OSPEEDER_OSPEEDR8_Pos (16U)
#define GPIO_OSPEEDER_OSPEEDR8_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR8_Pos)
#define GPIO_OSPEEDER_OSPEEDR8 GPIO_OSPEEDER_OSPEEDR8_Msk
#define GPIO_OSPEEDER_OSPEEDR8_0 (0x1U << GPIO_OSPEEDER_OSPEEDR8_Pos)
#define GPIO_OSPEEDER_OSPEEDR8_1 (0x2U << GPIO_OSPEEDER_OSPEEDR8_Pos)
#define GPIO_OSPEEDER_OSPEEDR9_Pos (18U)
#define GPIO_OSPEEDER_OSPEEDR9_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR9_Pos)
#define GPIO_OSPEEDER_OSPEEDR9 GPIO_OSPEEDER_OSPEEDR9_Msk
#define GPIO_OSPEEDER_OSPEEDR9_0 (0x1U << GPIO_OSPEEDER_OSPEEDR9_Pos)
#define GPIO_OSPEEDER_OSPEEDR9_1 (0x2U << GPIO_OSPEEDER_OSPEEDR9_Pos)
#define GPIO_OSPEEDER_OSPEEDR10_Pos (20U)
#define GPIO_OSPEEDER_OSPEEDR10_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR10_Pos)
#define GPIO_OSPEEDER_OSPEEDR10 GPIO_OSPEEDER_OSPEEDR10_Msk
#define GPIO_OSPEEDER_OSPEEDR10_0 (0x1U << GPIO_OSPEEDER_OSPEEDR10_Pos)
#define GPIO_OSPEEDER_OSPEEDR10_1 (0x2U << GPIO_OSPEEDER_OSPEEDR10_Pos)
#define GPIO_OSPEEDER_OSPEEDR11_Pos (22U)
#define GPIO_OSPEEDER_OSPEEDR11_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR11_Pos)
#define GPIO_OSPEEDER_OSPEEDR11 GPIO_OSPEEDER_OSPEEDR11_Msk
#define GPIO_OSPEEDER_OSPEEDR11_0 (0x1U << GPIO_OSPEEDER_OSPEEDR11_Pos)
#define GPIO_OSPEEDER_OSPEEDR11_1 (0x2U << GPIO_OSPEEDER_OSPEEDR11_Pos)
#define GPIO_OSPEEDER_OSPEEDR12_Pos (24U)
#define GPIO_OSPEEDER_OSPEEDR12_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR12_Pos)
#define GPIO_OSPEEDER_OSPEEDR12 GPIO_OSPEEDER_OSPEEDR12_Msk
#define GPIO_OSPEEDER_OSPEEDR12_0 (0x1U << GPIO_OSPEEDER_OSPEEDR12_Pos)
#define GPIO_OSPEEDER_OSPEEDR12_1 (0x2U << GPIO_OSPEEDER_OSPEEDR12_Pos)
#define GPIO_OSPEEDER_OSPEEDR13_Pos (26U)
#define GPIO_OSPEEDER_OSPEEDR13_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR13_Pos)
#define GPIO_OSPEEDER_OSPEEDR13 GPIO_OSPEEDER_OSPEEDR13_Msk
#define GPIO_OSPEEDER_OSPEEDR13_0 (0x1U << GPIO_OSPEEDER_OSPEEDR13_Pos)
#define GPIO_OSPEEDER_OSPEEDR13_1 (0x2U << GPIO_OSPEEDER_OSPEEDR13_Pos)
#define GPIO_OSPEEDER_OSPEEDR14_Pos (28U)
#define GPIO_OSPEEDER_OSPEEDR14_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR14_Pos)
#define GPIO_OSPEEDER_OSPEEDR14 GPIO_OSPEEDER_OSPEEDR14_Msk
#define GPIO_OSPEEDER_OSPEEDR14_0 (0x1U << GPIO_OSPEEDER_OSPEEDR14_Pos)
#define GPIO_OSPEEDER_OSPEEDR14_1 (0x2U << GPIO_OSPEEDER_OSPEEDR14_Pos)
#define GPIO_OSPEEDER_OSPEEDR15_Pos (30U)
#define GPIO_OSPEEDER_OSPEEDR15_Msk (0x3U << GPIO_OSPEEDER_OSPEEDR15_Pos)
#define GPIO_OSPEEDER_OSPEEDR15 GPIO_OSPEEDER_OSPEEDR15_Msk
#define GPIO_OSPEEDER_OSPEEDR15_0 (0x1U << GPIO_OSPEEDER_OSPEEDR15_Pos)
#define GPIO_OSPEEDER_OSPEEDR15_1 (0x2U << GPIO_OSPEEDER_OSPEEDR15_Pos)


#define GPIO_PUPDR_PUPDR0_Pos (0U)
#define GPIO_PUPDR_PUPDR0_Msk (0x3U << GPIO_PUPDR_PUPDR0_Pos)
#define GPIO_PUPDR_PUPDR0 GPIO_PUPDR_PUPDR0_Msk
#define GPIO_PUPDR_PUPDR0_0 (0x1U << GPIO_PUPDR_PUPDR0_Pos)
#define GPIO_PUPDR_PUPDR0_1 (0x2U << GPIO_PUPDR_PUPDR0_Pos)
#define GPIO_PUPDR_PUPDR1_Pos (2U)
#define GPIO_PUPDR_PUPDR1_Msk (0x3U << GPIO_PUPDR_PUPDR1_Pos)
#define GPIO_PUPDR_PUPDR1 GPIO_PUPDR_PUPDR1_Msk
#define GPIO_PUPDR_PUPDR1_0 (0x1U << GPIO_PUPDR_PUPDR1_Pos)
#define GPIO_PUPDR_PUPDR1_1 (0x2U << GPIO_PUPDR_PUPDR1_Pos)
#define GPIO_PUPDR_PUPDR2_Pos (4U)
#define GPIO_PUPDR_PUPDR2_Msk (0x3U << GPIO_PUPDR_PUPDR2_Pos)
#define GPIO_PUPDR_PUPDR2 GPIO_PUPDR_PUPDR2_Msk
#define GPIO_PUPDR_PUPDR2_0 (0x1U << GPIO_PUPDR_PUPDR2_Pos)
#define GPIO_PUPDR_PUPDR2_1 (0x2U << GPIO_PUPDR_PUPDR2_Pos)
#define GPIO_PUPDR_PUPDR3_Pos (6U)
#define GPIO_PUPDR_PUPDR3_Msk (0x3U << GPIO_PUPDR_PUPDR3_Pos)
#define GPIO_PUPDR_PUPDR3 GPIO_PUPDR_PUPDR3_Msk
#define GPIO_PUPDR_PUPDR3_0 (0x1U << GPIO_PUPDR_PUPDR3_Pos)
#define GPIO_PUPDR_PUPDR3_1 (0x2U << GPIO_PUPDR_PUPDR3_Pos)
#define GPIO_PUPDR_PUPDR4_Pos (8U)
#define GPIO_PUPDR_PUPDR4_Msk (0x3U << GPIO_PUPDR_PUPDR4_Pos)
#define GPIO_PUPDR_PUPDR4 GPIO_PUPDR_PUPDR4_Msk
#define GPIO_PUPDR_PUPDR4_0 (0x1U << GPIO_PUPDR_PUPDR4_Pos)
#define GPIO_PUPDR_PUPDR4_1 (0x2U << GPIO_PUPDR_PUPDR4_Pos)
#define GPIO_PUPDR_PUPDR5_Pos (10U)
#define GPIO_PUPDR_PUPDR5_Msk (0x3U << GPIO_PUPDR_PUPDR5_Pos)
#define GPIO_PUPDR_PUPDR5 GPIO_PUPDR_PUPDR5_Msk
#define GPIO_PUPDR_PUPDR5_0 (0x1U << GPIO_PUPDR_PUPDR5_Pos)
#define GPIO_PUPDR_PUPDR5_1 (0x2U << GPIO_PUPDR_PUPDR5_Pos)
#define GPIO_PUPDR_PUPDR6_Pos (12U)
#define GPIO_PUPDR_PUPDR6_Msk (0x3U << GPIO_PUPDR_PUPDR6_Pos)
#define GPIO_PUPDR_PUPDR6 GPIO_PUPDR_PUPDR6_Msk
#define GPIO_PUPDR_PUPDR6_0 (0x1U << GPIO_PUPDR_PUPDR6_Pos)
#define GPIO_PUPDR_PUPDR6_1 (0x2U << GPIO_PUPDR_PUPDR6_Pos)
#define GPIO_PUPDR_PUPDR7_Pos (14U)
#define GPIO_PUPDR_PUPDR7_Msk (0x3U << GPIO_PUPDR_PUPDR7_Pos)
#define GPIO_PUPDR_PUPDR7 GPIO_PUPDR_PUPDR7_Msk
#define GPIO_PUPDR_PUPDR7_0 (0x1U << GPIO_PUPDR_PUPDR7_Pos)
#define GPIO_PUPDR_PUPDR7_1 (0x2U << GPIO_PUPDR_PUPDR7_Pos)
#define GPIO_PUPDR_PUPDR8_Pos (16U)
#define GPIO_PUPDR_PUPDR8_Msk (0x3U << GPIO_PUPDR_PUPDR8_Pos)
#define GPIO_PUPDR_PUPDR8 GPIO_PUPDR_PUPDR8_Msk
#define GPIO_PUPDR_PUPDR8_0 (0x1U << GPIO_PUPDR_PUPDR8_Pos)
#define GPIO_PUPDR_PUPDR8_1 (0x2U << GPIO_PUPDR_PUPDR8_Pos)
#define GPIO_PUPDR_PUPDR9_Pos (18U)
#define GPIO_PUPDR_PUPDR9_Msk (0x3U << GPIO_PUPDR_PUPDR9_Pos)
#define GPIO_PUPDR_PUPDR9 GPIO_PUPDR_PUPDR9_Msk
#define GPIO_PUPDR_PUPDR9_0 (0x1U << GPIO_PUPDR_PUPDR9_Pos)
#define GPIO_PUPDR_PUPDR9_1 (0x2U << GPIO_PUPDR_PUPDR9_Pos)
#define GPIO_PUPDR_PUPDR10_Pos (20U)
#define GPIO_PUPDR_PUPDR10_Msk (0x3U << GPIO_PUPDR_PUPDR10_Pos)
#define GPIO_PUPDR_PUPDR10 GPIO_PUPDR_PUPDR10_Msk
#define GPIO_PUPDR_PUPDR10_0 (0x1U << GPIO_PUPDR_PUPDR10_Pos)
#define GPIO_PUPDR_PUPDR10_1 (0x2U << GPIO_PUPDR_PUPDR10_Pos)
#define GPIO_PUPDR_PUPDR11_Pos (22U)
#define GPIO_PUPDR_PUPDR11_Msk (0x3U << GPIO_PUPDR_PUPDR11_Pos)
#define GPIO_PUPDR_PUPDR11 GPIO_PUPDR_PUPDR11_Msk
#define GPIO_PUPDR_PUPDR11_0 (0x1U << GPIO_PUPDR_PUPDR11_Pos)
#define GPIO_PUPDR_PUPDR11_1 (0x2U << GPIO_PUPDR_PUPDR11_Pos)
#define GPIO_PUPDR_PUPDR12_Pos (24U)
#define GPIO_PUPDR_PUPDR12_Msk (0x3U << GPIO_PUPDR_PUPDR12_Pos)
#define GPIO_PUPDR_PUPDR12 GPIO_PUPDR_PUPDR12_Msk
#define GPIO_PUPDR_PUPDR12_0 (0x1U << GPIO_PUPDR_PUPDR12_Pos)
#define GPIO_PUPDR_PUPDR12_1 (0x2U << GPIO_PUPDR_PUPDR12_Pos)
#define GPIO_PUPDR_PUPDR13_Pos (26U)
#define GPIO_PUPDR_PUPDR13_Msk (0x3U << GPIO_PUPDR_PUPDR13_Pos)
#define GPIO_PUPDR_PUPDR13 GPIO_PUPDR_PUPDR13_Msk
#define GPIO_PUPDR_PUPDR13_0 (0x1U << GPIO_PUPDR_PUPDR13_Pos)
#define GPIO_PUPDR_PUPDR13_1 (0x2U << GPIO_PUPDR_PUPDR13_Pos)
#define GPIO_PUPDR_PUPDR14_Pos (28U)
#define GPIO_PUPDR_PUPDR14_Msk (0x3U << GPIO_PUPDR_PUPDR14_Pos)
#define GPIO_PUPDR_PUPDR14 GPIO_PUPDR_PUPDR14_Msk
#define GPIO_PUPDR_PUPDR14_0 (0x1U << GPIO_PUPDR_PUPDR14_Pos)
#define GPIO_PUPDR_PUPDR14_1 (0x2U << GPIO_PUPDR_PUPDR14_Pos)
#define GPIO_PUPDR_PUPDR15_Pos (30U)
#define GPIO_PUPDR_PUPDR15_Msk (0x3U << GPIO_PUPDR_PUPDR15_Pos)
#define GPIO_PUPDR_PUPDR15 GPIO_PUPDR_PUPDR15_Msk
#define GPIO_PUPDR_PUPDR15_0 (0x1U << GPIO_PUPDR_PUPDR15_Pos)
#define GPIO_PUPDR_PUPDR15_1 (0x2U << GPIO_PUPDR_PUPDR15_Pos)


#define GPIO_IDR_0 (0x00000001U)
#define GPIO_IDR_1 (0x00000002U)
#define GPIO_IDR_2 (0x00000004U)
#define GPIO_IDR_3 (0x00000008U)
#define GPIO_IDR_4 (0x00000010U)
#define GPIO_IDR_5 (0x00000020U)
#define GPIO_IDR_6 (0x00000040U)
#define GPIO_IDR_7 (0x00000080U)
#define GPIO_IDR_8 (0x00000100U)
#define GPIO_IDR_9 (0x00000200U)
#define GPIO_IDR_10 (0x00000400U)
#define GPIO_IDR_11 (0x00000800U)
#define GPIO_IDR_12 (0x00001000U)
#define GPIO_IDR_13 (0x00002000U)
#define GPIO_IDR_14 (0x00004000U)
#define GPIO_IDR_15 (0x00008000U)


#define GPIO_ODR_0 (0x00000001U)
#define GPIO_ODR_1 (0x00000002U)
#define GPIO_ODR_2 (0x00000004U)
#define GPIO_ODR_3 (0x00000008U)
#define GPIO_ODR_4 (0x00000010U)
#define GPIO_ODR_5 (0x00000020U)
#define GPIO_ODR_6 (0x00000040U)
#define GPIO_ODR_7 (0x00000080U)
#define GPIO_ODR_8 (0x00000100U)
#define GPIO_ODR_9 (0x00000200U)
#define GPIO_ODR_10 (0x00000400U)
#define GPIO_ODR_11 (0x00000800U)
#define GPIO_ODR_12 (0x00001000U)
#define GPIO_ODR_13 (0x00002000U)
#define GPIO_ODR_14 (0x00004000U)
#define GPIO_ODR_15 (0x00008000U)


#define GPIO_BSRR_BS_0 (0x00000001U)
#define GPIO_BSRR_BS_1 (0x00000002U)
#define GPIO_BSRR_BS_2 (0x00000004U)
#define GPIO_BSRR_BS_3 (0x00000008U)
#define GPIO_BSRR_BS_4 (0x00000010U)
#define GPIO_BSRR_BS_5 (0x00000020U)
#define GPIO_BSRR_BS_6 (0x00000040U)
#define GPIO_BSRR_BS_7 (0x00000080U)
#define GPIO_BSRR_BS_8 (0x00000100U)
#define GPIO_BSRR_BS_9 (0x00000200U)
#define GPIO_BSRR_BS_10 (0x00000400U)
#define GPIO_BSRR_BS_11 (0x00000800U)
#define GPIO_BSRR_BS_12 (0x00001000U)
#define GPIO_BSRR_BS_13 (0x00002000U)
#define GPIO_BSRR_BS_14 (0x00004000U)
#define GPIO_BSRR_BS_15 (0x00008000U)
#define GPIO_BSRR_BR_0 (0x00010000U)
#define GPIO_BSRR_BR_1 (0x00020000U)
#define GPIO_BSRR_BR_2 (0x00040000U)
#define GPIO_BSRR_BR_3 (0x00080000U)
#define GPIO_BSRR_BR_4 (0x00100000U)
#define GPIO_BSRR_BR_5 (0x00200000U)
#define GPIO_BSRR_BR_6 (0x00400000U)
#define GPIO_BSRR_BR_7 (0x00800000U)
#define GPIO_BSRR_BR_8 (0x01000000U)
#define GPIO_BSRR_BR_9 (0x02000000U)
#define GPIO_BSRR_BR_10 (0x04000000U)
#define GPIO_BSRR_BR_11 (0x08000000U)
#define GPIO_BSRR_BR_12 (0x10000000U)
#define GPIO_BSRR_BR_13 (0x20000000U)
#define GPIO_BSRR_BR_14 (0x40000000U)
#define GPIO_BSRR_BR_15 (0x80000000U)


#define GPIO_LCKR_LCK0_Pos (0U)
#define GPIO_LCKR_LCK0_Msk (0x1U << GPIO_LCKR_LCK0_Pos)
#define GPIO_LCKR_LCK0 GPIO_LCKR_LCK0_Msk
#define GPIO_LCKR_LCK1_Pos (1U)
#define GPIO_LCKR_LCK1_Msk (0x1U << GPIO_LCKR_LCK1_Pos)
#define GPIO_LCKR_LCK1 GPIO_LCKR_LCK1_Msk
#define GPIO_LCKR_LCK2_Pos (2U)
#define GPIO_LCKR_LCK2_Msk (0x1U << GPIO_LCKR_LCK2_Pos)
#define GPIO_LCKR_LCK2 GPIO_LCKR_LCK2_Msk
#define GPIO_LCKR_LCK3_Pos (3U)
#define GPIO_LCKR_LCK3_Msk (0x1U << GPIO_LCKR_LCK3_Pos)
#define GPIO_LCKR_LCK3 GPIO_LCKR_LCK3_Msk
#define GPIO_LCKR_LCK4_Pos (4U)
#define GPIO_LCKR_LCK4_Msk (0x1U << GPIO_LCKR_LCK4_Pos)
#define GPIO_LCKR_LCK4 GPIO_LCKR_LCK4_Msk
#define GPIO_LCKR_LCK5_Pos (5U)
#define GPIO_LCKR_LCK5_Msk (0x1U << GPIO_LCKR_LCK5_Pos)
#define GPIO_LCKR_LCK5 GPIO_LCKR_LCK5_Msk
#define GPIO_LCKR_LCK6_Pos (6U)
#define GPIO_LCKR_LCK6_Msk (0x1U << GPIO_LCKR_LCK6_Pos)
#define GPIO_LCKR_LCK6 GPIO_LCKR_LCK6_Msk
#define GPIO_LCKR_LCK7_Pos (7U)
#define GPIO_LCKR_LCK7_Msk (0x1U << GPIO_LCKR_LCK7_Pos)
#define GPIO_LCKR_LCK7 GPIO_LCKR_LCK7_Msk
#define GPIO_LCKR_LCK8_Pos (8U)
#define GPIO_LCKR_LCK8_Msk (0x1U << GPIO_LCKR_LCK8_Pos)
#define GPIO_LCKR_LCK8 GPIO_LCKR_LCK8_Msk
#define GPIO_LCKR_LCK9_Pos (9U)
#define GPIO_LCKR_LCK9_Msk (0x1U << GPIO_LCKR_LCK9_Pos)
#define GPIO_LCKR_LCK9 GPIO_LCKR_LCK9_Msk
#define GPIO_LCKR_LCK10_Pos (10U)
#define GPIO_LCKR_LCK10_Msk (0x1U << GPIO_LCKR_LCK10_Pos)
#define GPIO_LCKR_LCK10 GPIO_LCKR_LCK10_Msk
#define GPIO_LCKR_LCK11_Pos (11U)
#define GPIO_LCKR_LCK11_Msk (0x1U << GPIO_LCKR_LCK11_Pos)
#define GPIO_LCKR_LCK11 GPIO_LCKR_LCK11_Msk
#define GPIO_LCKR_LCK12_Pos (12U)
#define GPIO_LCKR_LCK12_Msk (0x1U << GPIO_LCKR_LCK12_Pos)
#define GPIO_LCKR_LCK12 GPIO_LCKR_LCK12_Msk
#define GPIO_LCKR_LCK13_Pos (13U)
#define GPIO_LCKR_LCK13_Msk (0x1U << GPIO_LCKR_LCK13_Pos)
#define GPIO_LCKR_LCK13 GPIO_LCKR_LCK13_Msk
#define GPIO_LCKR_LCK14_Pos (14U)
#define GPIO_LCKR_LCK14_Msk (0x1U << GPIO_LCKR_LCK14_Pos)
#define GPIO_LCKR_LCK14 GPIO_LCKR_LCK14_Msk
#define GPIO_LCKR_LCK15_Pos (15U)
#define GPIO_LCKR_LCK15_Msk (0x1U << GPIO_LCKR_LCK15_Pos)
#define GPIO_LCKR_LCK15 GPIO_LCKR_LCK15_Msk
#define GPIO_LCKR_LCKK_Pos (16U)
#define GPIO_LCKR_LCKK_Msk (0x1U << GPIO_LCKR_LCKK_Pos)
#define GPIO_LCKR_LCKK GPIO_LCKR_LCKK_Msk


#define GPIO_AFRL_AFRL0_Pos (0U)
#define GPIO_AFRL_AFRL0_Msk (0xFU << GPIO_AFRL_AFRL0_Pos)
#define GPIO_AFRL_AFRL0 GPIO_AFRL_AFRL0_Msk
#define GPIO_AFRL_AFRL1_Pos (4U)
#define GPIO_AFRL_AFRL1_Msk (0xFU << GPIO_AFRL_AFRL1_Pos)
#define GPIO_AFRL_AFRL1 GPIO_AFRL_AFRL1_Msk
#define GPIO_AFRL_AFRL2_Pos (8U)
#define GPIO_AFRL_AFRL2_Msk (0xFU << GPIO_AFRL_AFRL2_Pos)
#define GPIO_AFRL_AFRL2 GPIO_AFRL_AFRL2_Msk
#define GPIO_AFRL_AFRL3_Pos (12U)
#define GPIO_AFRL_AFRL3_Msk (0xFU << GPIO_AFRL_AFRL3_Pos)
#define GPIO_AFRL_AFRL3 GPIO_AFRL_AFRL3_Msk
#define GPIO_AFRL_AFRL4_Pos (16U)
#define GPIO_AFRL_AFRL4_Msk (0xFU << GPIO_AFRL_AFRL4_Pos)
#define GPIO_AFRL_AFRL4 GPIO_AFRL_AFRL4_Msk
#define GPIO_AFRL_AFRL5_Pos (20U)
#define GPIO_AFRL_AFRL5_Msk (0xFU << GPIO_AFRL_AFRL5_Pos)
#define GPIO_AFRL_AFRL5 GPIO_AFRL_AFRL5_Msk
#define GPIO_AFRL_AFRL6_Pos (24U)
#define GPIO_AFRL_AFRL6_Msk (0xFU << GPIO_AFRL_AFRL6_Pos)
#define GPIO_AFRL_AFRL6 GPIO_AFRL_AFRL6_Msk
#define GPIO_AFRL_AFRL7_Pos (28U)
#define GPIO_AFRL_AFRL7_Msk (0xFU << GPIO_AFRL_AFRL7_Pos)
#define GPIO_AFRL_AFRL7 GPIO_AFRL_AFRL7_Msk


#define GPIO_AFRH_AFRH0_Pos (0U)
#define GPIO_AFRH_AFRH0_Msk (0xFU << GPIO_AFRH_AFRH0_Pos)
#define GPIO_AFRH_AFRH0 GPIO_AFRH_AFRH0_Msk
#define GPIO_AFRH_AFRH1_Pos (4U)
#define GPIO_AFRH_AFRH1_Msk (0xFU << GPIO_AFRH_AFRH1_Pos)
#define GPIO_AFRH_AFRH1 GPIO_AFRH_AFRH1_Msk
#define GPIO_AFRH_AFRH2_Pos (8U)
#define GPIO_AFRH_AFRH2_Msk (0xFU << GPIO_AFRH_AFRH2_Pos)
#define GPIO_AFRH_AFRH2 GPIO_AFRH_AFRH2_Msk
#define GPIO_AFRH_AFRH3_Pos (12U)
#define GPIO_AFRH_AFRH3_Msk (0xFU << GPIO_AFRH_AFRH3_Pos)
#define GPIO_AFRH_AFRH3 GPIO_AFRH_AFRH3_Msk
#define GPIO_AFRH_AFRH4_Pos (16U)
#define GPIO_AFRH_AFRH4_Msk (0xFU << GPIO_AFRH_AFRH4_Pos)
#define GPIO_AFRH_AFRH4 GPIO_AFRH_AFRH4_Msk
#define GPIO_AFRH_AFRH5_Pos (20U)
#define GPIO_AFRH_AFRH5_Msk (0xFU << GPIO_AFRH_AFRH5_Pos)
#define GPIO_AFRH_AFRH5 GPIO_AFRH_AFRH5_Msk
#define GPIO_AFRH_AFRH6_Pos (24U)
#define GPIO_AFRH_AFRH6_Msk (0xFU << GPIO_AFRH_AFRH6_Pos)
#define GPIO_AFRH_AFRH6 GPIO_AFRH_AFRH6_Msk
#define GPIO_AFRH_AFRH7_Pos (28U)
#define GPIO_AFRH_AFRH7_Msk (0xFU << GPIO_AFRH_AFRH7_Pos)
#define GPIO_AFRH_AFRH7 GPIO_AFRH_AFRH7_Msk


#define GPIO_BRR_BR_0 (0x00000001U)
#define GPIO_BRR_BR_1 (0x00000002U)
#define GPIO_BRR_BR_2 (0x00000004U)
#define GPIO_BRR_BR_3 (0x00000008U)
#define GPIO_BRR_BR_4 (0x00000010U)
#define GPIO_BRR_BR_5 (0x00000020U)
#define GPIO_BRR_BR_6 (0x00000040U)
#define GPIO_BRR_BR_7 (0x00000080U)
#define GPIO_BRR_BR_8 (0x00000100U)
#define GPIO_BRR_BR_9 (0x00000200U)
#define GPIO_BRR_BR_10 (0x00000400U)
#define GPIO_BRR_BR_11 (0x00000800U)
#define GPIO_BRR_BR_12 (0x00001000U)
#define GPIO_BRR_BR_13 (0x00002000U)
#define GPIO_BRR_BR_14 (0x00004000U)
#define GPIO_BRR_BR_15 (0x00008000U)







#define I2C_CR1_PE_Pos (0U)
#define I2C_CR1_PE_Msk (0x1U << I2C_CR1_PE_Pos)
#define I2C_CR1_PE I2C_CR1_PE_Msk
#define I2C_CR1_TXIE_Pos (1U)
#define I2C_CR1_TXIE_Msk (0x1U << I2C_CR1_TXIE_Pos)
#define I2C_CR1_TXIE I2C_CR1_TXIE_Msk
#define I2C_CR1_RXIE_Pos (2U)
#define I2C_CR1_RXIE_Msk (0x1U << I2C_CR1_RXIE_Pos)
#define I2C_CR1_RXIE I2C_CR1_RXIE_Msk
#define I2C_CR1_ADDRIE_Pos (3U)
#define I2C_CR1_ADDRIE_Msk (0x1U << I2C_CR1_ADDRIE_Pos)
#define I2C_CR1_ADDRIE I2C_CR1_ADDRIE_Msk
#define I2C_CR1_NACKIE_Pos (4U)
#define I2C_CR1_NACKIE_Msk (0x1U << I2C_CR1_NACKIE_Pos)
#define I2C_CR1_NACKIE I2C_CR1_NACKIE_Msk
#define I2C_CR1_STOPIE_Pos (5U)
#define I2C_CR1_STOPIE_Msk (0x1U << I2C_CR1_STOPIE_Pos)
#define I2C_CR1_STOPIE I2C_CR1_STOPIE_Msk
#define I2C_CR1_TCIE_Pos (6U)
#define I2C_CR1_TCIE_Msk (0x1U << I2C_CR1_TCIE_Pos)
#define I2C_CR1_TCIE I2C_CR1_TCIE_Msk
#define I2C_CR1_ERRIE_Pos (7U)
#define I2C_CR1_ERRIE_Msk (0x1U << I2C_CR1_ERRIE_Pos)
#define I2C_CR1_ERRIE I2C_CR1_ERRIE_Msk
#define I2C_CR1_DNF_Pos (8U)
#define I2C_CR1_DNF_Msk (0xFU << I2C_CR1_DNF_Pos)
#define I2C_CR1_DNF I2C_CR1_DNF_Msk
#define I2C_CR1_ANFOFF_Pos (12U)
#define I2C_CR1_ANFOFF_Msk (0x1U << I2C_CR1_ANFOFF_Pos)
#define I2C_CR1_ANFOFF I2C_CR1_ANFOFF_Msk
#define I2C_CR1_SWRST_Pos (13U)
#define I2C_CR1_SWRST_Msk (0x1U << I2C_CR1_SWRST_Pos)
#define I2C_CR1_SWRST I2C_CR1_SWRST_Msk
#define I2C_CR1_TXDMAEN_Pos (14U)
#define I2C_CR1_TXDMAEN_Msk (0x1U << I2C_CR1_TXDMAEN_Pos)
#define I2C_CR1_TXDMAEN I2C_CR1_TXDMAEN_Msk
#define I2C_CR1_RXDMAEN_Pos (15U)
#define I2C_CR1_RXDMAEN_Msk (0x1U << I2C_CR1_RXDMAEN_Pos)
#define I2C_CR1_RXDMAEN I2C_CR1_RXDMAEN_Msk
#define I2C_CR1_SBC_Pos (16U)
#define I2C_CR1_SBC_Msk (0x1U << I2C_CR1_SBC_Pos)
#define I2C_CR1_SBC I2C_CR1_SBC_Msk
#define I2C_CR1_NOSTRETCH_Pos (17U)
#define I2C_CR1_NOSTRETCH_Msk (0x1U << I2C_CR1_NOSTRETCH_Pos)
#define I2C_CR1_NOSTRETCH I2C_CR1_NOSTRETCH_Msk
#define I2C_CR1_WUPEN_Pos (18U)
#define I2C_CR1_WUPEN_Msk (0x1U << I2C_CR1_WUPEN_Pos)
#define I2C_CR1_WUPEN I2C_CR1_WUPEN_Msk
#define I2C_CR1_GCEN_Pos (19U)
#define I2C_CR1_GCEN_Msk (0x1U << I2C_CR1_GCEN_Pos)
#define I2C_CR1_GCEN I2C_CR1_GCEN_Msk
#define I2C_CR1_SMBHEN_Pos (20U)
#define I2C_CR1_SMBHEN_Msk (0x1U << I2C_CR1_SMBHEN_Pos)
#define I2C_CR1_SMBHEN I2C_CR1_SMBHEN_Msk
#define I2C_CR1_SMBDEN_Pos (21U)
#define I2C_CR1_SMBDEN_Msk (0x1U << I2C_CR1_SMBDEN_Pos)
#define I2C_CR1_SMBDEN I2C_CR1_SMBDEN_Msk
#define I2C_CR1_ALERTEN_Pos (22U)
#define I2C_CR1_ALERTEN_Msk (0x1U << I2C_CR1_ALERTEN_Pos)
#define I2C_CR1_ALERTEN I2C_CR1_ALERTEN_Msk
#define I2C_CR1_PECEN_Pos (23U)
#define I2C_CR1_PECEN_Msk (0x1U << I2C_CR1_PECEN_Pos)
#define I2C_CR1_PECEN I2C_CR1_PECEN_Msk


#define I2C_CR1_DFN I2C_CR1_DNF


#define I2C_CR2_SADD_Pos (0U)
#define I2C_CR2_SADD_Msk (0x3FFU << I2C_CR2_SADD_Pos)
#define I2C_CR2_SADD I2C_CR2_SADD_Msk
#define I2C_CR2_RD_WRN_Pos (10U)
#define I2C_CR2_RD_WRN_Msk (0x1U << I2C_CR2_RD_WRN_Pos)
#define I2C_CR2_RD_WRN I2C_CR2_RD_WRN_Msk
#define I2C_CR2_ADD10_Pos (11U)
#define I2C_CR2_ADD10_Msk (0x1U << I2C_CR2_ADD10_Pos)
#define I2C_CR2_ADD10 I2C_CR2_ADD10_Msk
#define I2C_CR2_HEAD10R_Pos (12U)
#define I2C_CR2_HEAD10R_Msk (0x1U << I2C_CR2_HEAD10R_Pos)
#define I2C_CR2_HEAD10R I2C_CR2_HEAD10R_Msk
#define I2C_CR2_START_Pos (13U)
#define I2C_CR2_START_Msk (0x1U << I2C_CR2_START_Pos)
#define I2C_CR2_START I2C_CR2_START_Msk
#define I2C_CR2_STOP_Pos (14U)
#define I2C_CR2_STOP_Msk (0x1U << I2C_CR2_STOP_Pos)
#define I2C_CR2_STOP I2C_CR2_STOP_Msk
#define I2C_CR2_NACK_Pos (15U)
#define I2C_CR2_NACK_Msk (0x1U << I2C_CR2_NACK_Pos)
#define I2C_CR2_NACK I2C_CR2_NACK_Msk
#define I2C_CR2_NBYTES_Pos (16U)
#define I2C_CR2_NBYTES_Msk (0xFFU << I2C_CR2_NBYTES_Pos)
#define I2C_CR2_NBYTES I2C_CR2_NBYTES_Msk
#define I2C_CR2_RELOAD_Pos (24U)
#define I2C_CR2_RELOAD_Msk (0x1U << I2C_CR2_RELOAD_Pos)
#define I2C_CR2_RELOAD I2C_CR2_RELOAD_Msk
#define I2C_CR2_AUTOEND_Pos (25U)
#define I2C_CR2_AUTOEND_Msk (0x1U << I2C_CR2_AUTOEND_Pos)
#define I2C_CR2_AUTOEND I2C_CR2_AUTOEND_Msk
#define I2C_CR2_PECBYTE_Pos (26U)
#define I2C_CR2_PECBYTE_Msk (0x1U << I2C_CR2_PECBYTE_Pos)
#define I2C_CR2_PECBYTE I2C_CR2_PECBYTE_Msk


#define I2C_OAR1_OA1_Pos (0U)
#define I2C_OAR1_OA1_Msk (0x3FFU << I2C_OAR1_OA1_Pos)
#define I2C_OAR1_OA1 I2C_OAR1_OA1_Msk
#define I2C_OAR1_OA1MODE_Pos (10U)
#define I2C_OAR1_OA1MODE_Msk (0x1U << I2C_OAR1_OA1MODE_Pos)
#define I2C_OAR1_OA1MODE I2C_OAR1_OA1MODE_Msk
#define I2C_OAR1_OA1EN_Pos (15U)
#define I2C_OAR1_OA1EN_Msk (0x1U << I2C_OAR1_OA1EN_Pos)
#define I2C_OAR1_OA1EN I2C_OAR1_OA1EN_Msk


#define I2C_OAR2_OA2_Pos (1U)
#define I2C_OAR2_OA2_Msk (0x7FU << I2C_OAR2_OA2_Pos)
#define I2C_OAR2_OA2 I2C_OAR2_OA2_Msk
#define I2C_OAR2_OA2MSK_Pos (8U)
#define I2C_OAR2_OA2MSK_Msk (0x7U << I2C_OAR2_OA2MSK_Pos)
#define I2C_OAR2_OA2MSK I2C_OAR2_OA2MSK_Msk
#define I2C_OAR2_OA2NOMASK (0x00000000U)
#define I2C_OAR2_OA2MASK01_Pos (8U)
#define I2C_OAR2_OA2MASK01_Msk (0x1U << I2C_OAR2_OA2MASK01_Pos)
#define I2C_OAR2_OA2MASK01 I2C_OAR2_OA2MASK01_Msk
#define I2C_OAR2_OA2MASK02_Pos (9U)
#define I2C_OAR2_OA2MASK02_Msk (0x1U << I2C_OAR2_OA2MASK02_Pos)
#define I2C_OAR2_OA2MASK02 I2C_OAR2_OA2MASK02_Msk
#define I2C_OAR2_OA2MASK03_Pos (8U)
#define I2C_OAR2_OA2MASK03_Msk (0x3U << I2C_OAR2_OA2MASK03_Pos)
#define I2C_OAR2_OA2MASK03 I2C_OAR2_OA2MASK03_Msk
#define I2C_OAR2_OA2MASK04_Pos (10U)
#define I2C_OAR2_OA2MASK04_Msk (0x1U << I2C_OAR2_OA2MASK04_Pos)
#define I2C_OAR2_OA2MASK04 I2C_OAR2_OA2MASK04_Msk
#define I2C_OAR2_OA2MASK05_Pos (8U)
#define I2C_OAR2_OA2MASK05_Msk (0x5U << I2C_OAR2_OA2MASK05_Pos)
#define I2C_OAR2_OA2MASK05 I2C_OAR2_OA2MASK05_Msk
#define I2C_OAR2_OA2MASK06_Pos (9U)
#define I2C_OAR2_OA2MASK06_Msk (0x3U << I2C_OAR2_OA2MASK06_Pos)
#define I2C_OAR2_OA2MASK06 I2C_OAR2_OA2MASK06_Msk
#define I2C_OAR2_OA2MASK07_Pos (8U)
#define I2C_OAR2_OA2MASK07_Msk (0x7U << I2C_OAR2_OA2MASK07_Pos)
#define I2C_OAR2_OA2MASK07 I2C_OAR2_OA2MASK07_Msk
#define I2C_OAR2_OA2EN_Pos (15U)
#define I2C_OAR2_OA2EN_Msk (0x1U << I2C_OAR2_OA2EN_Pos)
#define I2C_OAR2_OA2EN I2C_OAR2_OA2EN_Msk


#define I2C_TIMINGR_SCLL_Pos (0U)
#define I2C_TIMINGR_SCLL_Msk (0xFFU << I2C_TIMINGR_SCLL_Pos)
#define I2C_TIMINGR_SCLL I2C_TIMINGR_SCLL_Msk
#define I2C_TIMINGR_SCLH_Pos (8U)
#define I2C_TIMINGR_SCLH_Msk (0xFFU << I2C_TIMINGR_SCLH_Pos)
#define I2C_TIMINGR_SCLH I2C_TIMINGR_SCLH_Msk
#define I2C_TIMINGR_SDADEL_Pos (16U)
#define I2C_TIMINGR_SDADEL_Msk (0xFU << I2C_TIMINGR_SDADEL_Pos)
#define I2C_TIMINGR_SDADEL I2C_TIMINGR_SDADEL_Msk
#define I2C_TIMINGR_SCLDEL_Pos (20U)
#define I2C_TIMINGR_SCLDEL_Msk (0xFU << I2C_TIMINGR_SCLDEL_Pos)
#define I2C_TIMINGR_SCLDEL I2C_TIMINGR_SCLDEL_Msk
#define I2C_TIMINGR_PRESC_Pos (28U)
#define I2C_TIMINGR_PRESC_Msk (0xFU << I2C_TIMINGR_PRESC_Pos)
#define I2C_TIMINGR_PRESC I2C_TIMINGR_PRESC_Msk


#define I2C_TIMEOUTR_TIMEOUTA_Pos (0U)
#define I2C_TIMEOUTR_TIMEOUTA_Msk (0xFFFU << I2C_TIMEOUTR_TIMEOUTA_Pos)
#define I2C_TIMEOUTR_TIMEOUTA I2C_TIMEOUTR_TIMEOUTA_Msk
#define I2C_TIMEOUTR_TIDLE_Pos (12U)
#define I2C_TIMEOUTR_TIDLE_Msk (0x1U << I2C_TIMEOUTR_TIDLE_Pos)
#define I2C_TIMEOUTR_TIDLE I2C_TIMEOUTR_TIDLE_Msk
#define I2C_TIMEOUTR_TIMOUTEN_Pos (15U)
#define I2C_TIMEOUTR_TIMOUTEN_Msk (0x1U << I2C_TIMEOUTR_TIMOUTEN_Pos)
#define I2C_TIMEOUTR_TIMOUTEN I2C_TIMEOUTR_TIMOUTEN_Msk
#define I2C_TIMEOUTR_TIMEOUTB_Pos (16U)
#define I2C_TIMEOUTR_TIMEOUTB_Msk (0xFFFU << I2C_TIMEOUTR_TIMEOUTB_Pos)
#define I2C_TIMEOUTR_TIMEOUTB I2C_TIMEOUTR_TIMEOUTB_Msk
#define I2C_TIMEOUTR_TEXTEN_Pos (31U)
#define I2C_TIMEOUTR_TEXTEN_Msk (0x1U << I2C_TIMEOUTR_TEXTEN_Pos)
#define I2C_TIMEOUTR_TEXTEN I2C_TIMEOUTR_TEXTEN_Msk


#define I2C_ISR_TXE_Pos (0U)
#define I2C_ISR_TXE_Msk (0x1U << I2C_ISR_TXE_Pos)
#define I2C_ISR_TXE I2C_ISR_TXE_Msk
#define I2C_ISR_TXIS_Pos (1U)
#define I2C_ISR_TXIS_Msk (0x1U << I2C_ISR_TXIS_Pos)
#define I2C_ISR_TXIS I2C_ISR_TXIS_Msk
#define I2C_ISR_RXNE_Pos (2U)
#define I2C_ISR_RXNE_Msk (0x1U << I2C_ISR_RXNE_Pos)
#define I2C_ISR_RXNE I2C_ISR_RXNE_Msk
#define I2C_ISR_ADDR_Pos (3U)
#define I2C_ISR_ADDR_Msk (0x1U << I2C_ISR_ADDR_Pos)
#define I2C_ISR_ADDR I2C_ISR_ADDR_Msk
#define I2C_ISR_NACKF_Pos (4U)
#define I2C_ISR_NACKF_Msk (0x1U << I2C_ISR_NACKF_Pos)
#define I2C_ISR_NACKF I2C_ISR_NACKF_Msk
#define I2C_ISR_STOPF_Pos (5U)
#define I2C_ISR_STOPF_Msk (0x1U << I2C_ISR_STOPF_Pos)
#define I2C_ISR_STOPF I2C_ISR_STOPF_Msk
#define I2C_ISR_TC_Pos (6U)
#define I2C_ISR_TC_Msk (0x1U << I2C_ISR_TC_Pos)
#define I2C_ISR_TC I2C_ISR_TC_Msk
#define I2C_ISR_TCR_Pos (7U)
#define I2C_ISR_TCR_Msk (0x1U << I2C_ISR_TCR_Pos)
#define I2C_ISR_TCR I2C_ISR_TCR_Msk
#define I2C_ISR_BERR_Pos (8U)
#define I2C_ISR_BERR_Msk (0x1U << I2C_ISR_BERR_Pos)
#define I2C_ISR_BERR I2C_ISR_BERR_Msk
#define I2C_ISR_ARLO_Pos (9U)
#define I2C_ISR_ARLO_Msk (0x1U << I2C_ISR_ARLO_Pos)
#define I2C_ISR_ARLO I2C_ISR_ARLO_Msk
#define I2C_ISR_OVR_Pos (10U)
#define I2C_ISR_OVR_Msk (0x1U << I2C_ISR_OVR_Pos)
#define I2C_ISR_OVR I2C_ISR_OVR_Msk
#define I2C_ISR_PECERR_Pos (11U)
#define I2C_ISR_PECERR_Msk (0x1U << I2C_ISR_PECERR_Pos)
#define I2C_ISR_PECERR I2C_ISR_PECERR_Msk
#define I2C_ISR_TIMEOUT_Pos (12U)
#define I2C_ISR_TIMEOUT_Msk (0x1U << I2C_ISR_TIMEOUT_Pos)
#define I2C_ISR_TIMEOUT I2C_ISR_TIMEOUT_Msk
#define I2C_ISR_ALERT_Pos (13U)
#define I2C_ISR_ALERT_Msk (0x1U << I2C_ISR_ALERT_Pos)
#define I2C_ISR_ALERT I2C_ISR_ALERT_Msk
#define I2C_ISR_BUSY_Pos (15U)
#define I2C_ISR_BUSY_Msk (0x1U << I2C_ISR_BUSY_Pos)
#define I2C_ISR_BUSY I2C_ISR_BUSY_Msk
#define I2C_ISR_DIR_Pos (16U)
#define I2C_ISR_DIR_Msk (0x1U << I2C_ISR_DIR_Pos)
#define I2C_ISR_DIR I2C_ISR_DIR_Msk
#define I2C_ISR_ADDCODE_Pos (17U)
#define I2C_ISR_ADDCODE_Msk (0x7FU << I2C_ISR_ADDCODE_Pos)
#define I2C_ISR_ADDCODE I2C_ISR_ADDCODE_Msk


#define I2C_ICR_ADDRCF_Pos (3U)
#define I2C_ICR_ADDRCF_Msk (0x1U << I2C_ICR_ADDRCF_Pos)
#define I2C_ICR_ADDRCF I2C_ICR_ADDRCF_Msk
#define I2C_ICR_NACKCF_Pos (4U)
#define I2C_ICR_NACKCF_Msk (0x1U << I2C_ICR_NACKCF_Pos)
#define I2C_ICR_NACKCF I2C_ICR_NACKCF_Msk
#define I2C_ICR_STOPCF_Pos (5U)
#define I2C_ICR_STOPCF_Msk (0x1U << I2C_ICR_STOPCF_Pos)
#define I2C_ICR_STOPCF I2C_ICR_STOPCF_Msk
#define I2C_ICR_BERRCF_Pos (8U)
#define I2C_ICR_BERRCF_Msk (0x1U << I2C_ICR_BERRCF_Pos)
#define I2C_ICR_BERRCF I2C_ICR_BERRCF_Msk
#define I2C_ICR_ARLOCF_Pos (9U)
#define I2C_ICR_ARLOCF_Msk (0x1U << I2C_ICR_ARLOCF_Pos)
#define I2C_ICR_ARLOCF I2C_ICR_ARLOCF_Msk
#define I2C_ICR_OVRCF_Pos (10U)
#define I2C_ICR_OVRCF_Msk (0x1U << I2C_ICR_OVRCF_Pos)
#define I2C_ICR_OVRCF I2C_ICR_OVRCF_Msk
#define I2C_ICR_PECCF_Pos (11U)
#define I2C_ICR_PECCF_Msk (0x1U << I2C_ICR_PECCF_Pos)
#define I2C_ICR_PECCF I2C_ICR_PECCF_Msk
#define I2C_ICR_TIMOUTCF_Pos (12U)
#define I2C_ICR_TIMOUTCF_Msk (0x1U << I2C_ICR_TIMOUTCF_Pos)
#define I2C_ICR_TIMOUTCF I2C_ICR_TIMOUTCF_Msk
#define I2C_ICR_ALERTCF_Pos (13U)
#define I2C_ICR_ALERTCF_Msk (0x1U << I2C_ICR_ALERTCF_Pos)
#define I2C_ICR_ALERTCF I2C_ICR_ALERTCF_Msk


#define I2C_PECR_PEC_Pos (0U)
#define I2C_PECR_PEC_Msk (0xFFU << I2C_PECR_PEC_Pos)
#define I2C_PECR_PEC I2C_PECR_PEC_Msk


#define I2C_RXDR_RXDATA_Pos (0U)
#define I2C_RXDR_RXDATA_Msk (0xFFU << I2C_RXDR_RXDATA_Pos)
#define I2C_RXDR_RXDATA I2C_RXDR_RXDATA_Msk


#define I2C_TXDR_TXDATA_Pos (0U)
#define I2C_TXDR_TXDATA_Msk (0xFFU << I2C_TXDR_TXDATA_Pos)
#define I2C_TXDR_TXDATA I2C_TXDR_TXDATA_Msk
# 8937 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IWDG_KR_KEY_Pos (0U)
#define IWDG_KR_KEY_Msk (0xFFFFU << IWDG_KR_KEY_Pos)
#define IWDG_KR_KEY IWDG_KR_KEY_Msk


#define IWDG_PR_PR_Pos (0U)
#define IWDG_PR_PR_Msk (0x7U << IWDG_PR_PR_Pos)
#define IWDG_PR_PR IWDG_PR_PR_Msk
#define IWDG_PR_PR_0 (0x1U << IWDG_PR_PR_Pos)
#define IWDG_PR_PR_1 (0x2U << IWDG_PR_PR_Pos)
#define IWDG_PR_PR_2 (0x4U << IWDG_PR_PR_Pos)


#define IWDG_RLR_RL_Pos (0U)
#define IWDG_RLR_RL_Msk (0xFFFU << IWDG_RLR_RL_Pos)
#define IWDG_RLR_RL IWDG_RLR_RL_Msk


#define IWDG_SR_PVU_Pos (0U)
#define IWDG_SR_PVU_Msk (0x1U << IWDG_SR_PVU_Pos)
#define IWDG_SR_PVU IWDG_SR_PVU_Msk
#define IWDG_SR_RVU_Pos (1U)
#define IWDG_SR_RVU_Msk (0x1U << IWDG_SR_RVU_Pos)
#define IWDG_SR_RVU IWDG_SR_RVU_Msk
#define IWDG_SR_WVU_Pos (2U)
#define IWDG_SR_WVU_Msk (0x1U << IWDG_SR_WVU_Pos)
#define IWDG_SR_WVU IWDG_SR_WVU_Msk


#define IWDG_WINR_WIN_Pos (0U)
#define IWDG_WINR_WIN_Msk (0xFFFU << IWDG_WINR_WIN_Pos)
#define IWDG_WINR_WIN IWDG_WINR_WIN_Msk






#define PWR_PVD_SUPPORT 

#define PWR_CR_LPDS_Pos (0U)
#define PWR_CR_LPDS_Msk (0x1U << PWR_CR_LPDS_Pos)
#define PWR_CR_LPDS PWR_CR_LPDS_Msk
#define PWR_CR_PDDS_Pos (1U)
#define PWR_CR_PDDS_Msk (0x1U << PWR_CR_PDDS_Pos)
#define PWR_CR_PDDS PWR_CR_PDDS_Msk
#define PWR_CR_CWUF_Pos (2U)
#define PWR_CR_CWUF_Msk (0x1U << PWR_CR_CWUF_Pos)
#define PWR_CR_CWUF PWR_CR_CWUF_Msk
#define PWR_CR_CSBF_Pos (3U)
#define PWR_CR_CSBF_Msk (0x1U << PWR_CR_CSBF_Pos)
#define PWR_CR_CSBF PWR_CR_CSBF_Msk
#define PWR_CR_PVDE_Pos (4U)
#define PWR_CR_PVDE_Msk (0x1U << PWR_CR_PVDE_Pos)
#define PWR_CR_PVDE PWR_CR_PVDE_Msk

#define PWR_CR_PLS_Pos (5U)
#define PWR_CR_PLS_Msk (0x7U << PWR_CR_PLS_Pos)
#define PWR_CR_PLS PWR_CR_PLS_Msk
#define PWR_CR_PLS_0 (0x1U << PWR_CR_PLS_Pos)
#define PWR_CR_PLS_1 (0x2U << PWR_CR_PLS_Pos)
#define PWR_CR_PLS_2 (0x4U << PWR_CR_PLS_Pos)


#define PWR_CR_PLS_LEV0 (0x00000000U)
#define PWR_CR_PLS_LEV1 (0x00000020U)
#define PWR_CR_PLS_LEV2 (0x00000040U)
#define PWR_CR_PLS_LEV3 (0x00000060U)
#define PWR_CR_PLS_LEV4 (0x00000080U)
#define PWR_CR_PLS_LEV5 (0x000000A0U)
#define PWR_CR_PLS_LEV6 (0x000000C0U)
#define PWR_CR_PLS_LEV7 (0x000000E0U)

#define PWR_CR_DBP_Pos (8U)
#define PWR_CR_DBP_Msk (0x1U << PWR_CR_DBP_Pos)
#define PWR_CR_DBP PWR_CR_DBP_Msk


#define PWR_CSR_WUF_Pos (0U)
#define PWR_CSR_WUF_Msk (0x1U << PWR_CSR_WUF_Pos)
#define PWR_CSR_WUF PWR_CSR_WUF_Msk
#define PWR_CSR_SBF_Pos (1U)
#define PWR_CSR_SBF_Msk (0x1U << PWR_CSR_SBF_Pos)
#define PWR_CSR_SBF PWR_CSR_SBF_Msk
#define PWR_CSR_PVDO_Pos (2U)
#define PWR_CSR_PVDO_Msk (0x1U << PWR_CSR_PVDO_Pos)
#define PWR_CSR_PVDO PWR_CSR_PVDO_Msk
#define PWR_CSR_VREFINTRDYF_Pos (3U)
#define PWR_CSR_VREFINTRDYF_Msk (0x1U << PWR_CSR_VREFINTRDYF_Pos)
#define PWR_CSR_VREFINTRDYF PWR_CSR_VREFINTRDYF_Msk

#define PWR_CSR_EWUP1_Pos (8U)
#define PWR_CSR_EWUP1_Msk (0x1U << PWR_CSR_EWUP1_Pos)
#define PWR_CSR_EWUP1 PWR_CSR_EWUP1_Msk
#define PWR_CSR_EWUP2_Pos (9U)
#define PWR_CSR_EWUP2_Msk (0x1U << PWR_CSR_EWUP2_Pos)
#define PWR_CSR_EWUP2 PWR_CSR_EWUP2_Msk
#define PWR_CSR_EWUP3_Pos (10U)
#define PWR_CSR_EWUP3_Msk (0x1U << PWR_CSR_EWUP3_Pos)
#define PWR_CSR_EWUP3 PWR_CSR_EWUP3_Msk







#define RCC_CR_HSION_Pos (0U)
#define RCC_CR_HSION_Msk (0x1U << RCC_CR_HSION_Pos)
#define RCC_CR_HSION RCC_CR_HSION_Msk
#define RCC_CR_HSIRDY_Pos (1U)
#define RCC_CR_HSIRDY_Msk (0x1U << RCC_CR_HSIRDY_Pos)
#define RCC_CR_HSIRDY RCC_CR_HSIRDY_Msk

#define RCC_CR_HSITRIM_Pos (3U)
#define RCC_CR_HSITRIM_Msk (0x1FU << RCC_CR_HSITRIM_Pos)
#define RCC_CR_HSITRIM RCC_CR_HSITRIM_Msk
#define RCC_CR_HSITRIM_0 (0x01U << RCC_CR_HSITRIM_Pos)
#define RCC_CR_HSITRIM_1 (0x02U << RCC_CR_HSITRIM_Pos)
#define RCC_CR_HSITRIM_2 (0x04U << RCC_CR_HSITRIM_Pos)
#define RCC_CR_HSITRIM_3 (0x08U << RCC_CR_HSITRIM_Pos)
#define RCC_CR_HSITRIM_4 (0x10U << RCC_CR_HSITRIM_Pos)

#define RCC_CR_HSICAL_Pos (8U)
#define RCC_CR_HSICAL_Msk (0xFFU << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL RCC_CR_HSICAL_Msk
#define RCC_CR_HSICAL_0 (0x01U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_1 (0x02U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_2 (0x04U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_3 (0x08U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_4 (0x10U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_5 (0x20U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_6 (0x40U << RCC_CR_HSICAL_Pos)
#define RCC_CR_HSICAL_7 (0x80U << RCC_CR_HSICAL_Pos)

#define RCC_CR_HSEON_Pos (16U)
#define RCC_CR_HSEON_Msk (0x1U << RCC_CR_HSEON_Pos)
#define RCC_CR_HSEON RCC_CR_HSEON_Msk
#define RCC_CR_HSERDY_Pos (17U)
#define RCC_CR_HSERDY_Msk (0x1U << RCC_CR_HSERDY_Pos)
#define RCC_CR_HSERDY RCC_CR_HSERDY_Msk
#define RCC_CR_HSEBYP_Pos (18U)
#define RCC_CR_HSEBYP_Msk (0x1U << RCC_CR_HSEBYP_Pos)
#define RCC_CR_HSEBYP RCC_CR_HSEBYP_Msk
#define RCC_CR_CSSON_Pos (19U)
#define RCC_CR_CSSON_Msk (0x1U << RCC_CR_CSSON_Pos)
#define RCC_CR_CSSON RCC_CR_CSSON_Msk
#define RCC_CR_PLLON_Pos (24U)
#define RCC_CR_PLLON_Msk (0x1U << RCC_CR_PLLON_Pos)
#define RCC_CR_PLLON RCC_CR_PLLON_Msk
#define RCC_CR_PLLRDY_Pos (25U)
#define RCC_CR_PLLRDY_Msk (0x1U << RCC_CR_PLLRDY_Pos)
#define RCC_CR_PLLRDY RCC_CR_PLLRDY_Msk



#define RCC_CFGR_SW_Pos (0U)
#define RCC_CFGR_SW_Msk (0x3U << RCC_CFGR_SW_Pos)
#define RCC_CFGR_SW RCC_CFGR_SW_Msk
#define RCC_CFGR_SW_0 (0x1U << RCC_CFGR_SW_Pos)
#define RCC_CFGR_SW_1 (0x2U << RCC_CFGR_SW_Pos)

#define RCC_CFGR_SW_HSI (0x00000000U)
#define RCC_CFGR_SW_HSE (0x00000001U)
#define RCC_CFGR_SW_PLL (0x00000002U)


#define RCC_CFGR_SWS_Pos (2U)
#define RCC_CFGR_SWS_Msk (0x3U << RCC_CFGR_SWS_Pos)
#define RCC_CFGR_SWS RCC_CFGR_SWS_Msk
#define RCC_CFGR_SWS_0 (0x1U << RCC_CFGR_SWS_Pos)
#define RCC_CFGR_SWS_1 (0x2U << RCC_CFGR_SWS_Pos)

#define RCC_CFGR_SWS_HSI (0x00000000U)
#define RCC_CFGR_SWS_HSE (0x00000004U)
#define RCC_CFGR_SWS_PLL (0x00000008U)


#define RCC_CFGR_HPRE_Pos (4U)
#define RCC_CFGR_HPRE_Msk (0xFU << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE RCC_CFGR_HPRE_Msk
#define RCC_CFGR_HPRE_0 (0x1U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_1 (0x2U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_2 (0x4U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_3 (0x8U << RCC_CFGR_HPRE_Pos)

#define RCC_CFGR_HPRE_DIV1 (0x00000000U)
#define RCC_CFGR_HPRE_DIV2 (0x00000080U)
#define RCC_CFGR_HPRE_DIV4 (0x00000090U)
#define RCC_CFGR_HPRE_DIV8 (0x000000A0U)
#define RCC_CFGR_HPRE_DIV16 (0x000000B0U)
#define RCC_CFGR_HPRE_DIV64 (0x000000C0U)
#define RCC_CFGR_HPRE_DIV128 (0x000000D0U)
#define RCC_CFGR_HPRE_DIV256 (0x000000E0U)
#define RCC_CFGR_HPRE_DIV512 (0x000000F0U)


#define RCC_CFGR_PPRE1_Pos (8U)
#define RCC_CFGR_PPRE1_Msk (0x7U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1 RCC_CFGR_PPRE1_Msk
#define RCC_CFGR_PPRE1_0 (0x1U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1_1 (0x2U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1_2 (0x4U << RCC_CFGR_PPRE1_Pos)

#define RCC_CFGR_PPRE1_DIV1 (0x00000000U)
#define RCC_CFGR_PPRE1_DIV2 (0x00000400U)
#define RCC_CFGR_PPRE1_DIV4 (0x00000500U)
#define RCC_CFGR_PPRE1_DIV8 (0x00000600U)
#define RCC_CFGR_PPRE1_DIV16 (0x00000700U)


#define RCC_CFGR_PPRE2_Pos (11U)
#define RCC_CFGR_PPRE2_Msk (0x7U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2 RCC_CFGR_PPRE2_Msk
#define RCC_CFGR_PPRE2_0 (0x1U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2_1 (0x2U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2_2 (0x4U << RCC_CFGR_PPRE2_Pos)

#define RCC_CFGR_PPRE2_DIV1 (0x00000000U)
#define RCC_CFGR_PPRE2_DIV2 (0x00002000U)
#define RCC_CFGR_PPRE2_DIV4 (0x00002800U)
#define RCC_CFGR_PPRE2_DIV8 (0x00003000U)
#define RCC_CFGR_PPRE2_DIV16 (0x00003800U)

#define RCC_CFGR_PLLSRC_Pos (16U)
#define RCC_CFGR_PLLSRC_Msk (0x1U << RCC_CFGR_PLLSRC_Pos)
#define RCC_CFGR_PLLSRC RCC_CFGR_PLLSRC_Msk
#define RCC_CFGR_PLLSRC_HSI_DIV2 (0x00000000U)
#define RCC_CFGR_PLLSRC_HSE_PREDIV (0x00010000U)

#define RCC_CFGR_PLLXTPRE_Pos (17U)
#define RCC_CFGR_PLLXTPRE_Msk (0x1U << RCC_CFGR_PLLXTPRE_Pos)
#define RCC_CFGR_PLLXTPRE RCC_CFGR_PLLXTPRE_Msk
#define RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV1 (0x00000000U)
#define RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV2 (0x00020000U)


#define RCC_CFGR_PLLMUL_Pos (18U)
#define RCC_CFGR_PLLMUL_Msk (0xFU << RCC_CFGR_PLLMUL_Pos)
#define RCC_CFGR_PLLMUL RCC_CFGR_PLLMUL_Msk
#define RCC_CFGR_PLLMUL_0 (0x1U << RCC_CFGR_PLLMUL_Pos)
#define RCC_CFGR_PLLMUL_1 (0x2U << RCC_CFGR_PLLMUL_Pos)
#define RCC_CFGR_PLLMUL_2 (0x4U << RCC_CFGR_PLLMUL_Pos)
#define RCC_CFGR_PLLMUL_3 (0x8U << RCC_CFGR_PLLMUL_Pos)

#define RCC_CFGR_PLLMUL2 (0x00000000U)
#define RCC_CFGR_PLLMUL3 (0x00040000U)
#define RCC_CFGR_PLLMUL4 (0x00080000U)
#define RCC_CFGR_PLLMUL5 (0x000C0000U)
#define RCC_CFGR_PLLMUL6 (0x00100000U)
#define RCC_CFGR_PLLMUL7 (0x00140000U)
#define RCC_CFGR_PLLMUL8 (0x00180000U)
#define RCC_CFGR_PLLMUL9 (0x001C0000U)
#define RCC_CFGR_PLLMUL10 (0x00200000U)
#define RCC_CFGR_PLLMUL11 (0x00240000U)
#define RCC_CFGR_PLLMUL12 (0x00280000U)
#define RCC_CFGR_PLLMUL13 (0x002C0000U)
#define RCC_CFGR_PLLMUL14 (0x00300000U)
#define RCC_CFGR_PLLMUL15 (0x00340000U)
#define RCC_CFGR_PLLMUL16 (0x00380000U)


#define RCC_CFGR_USBPRE_Pos (22U)
#define RCC_CFGR_USBPRE_Msk (0x1U << RCC_CFGR_USBPRE_Pos)
#define RCC_CFGR_USBPRE RCC_CFGR_USBPRE_Msk

#define RCC_CFGR_USBPRE_DIV1_5 (0x00000000U)
#define RCC_CFGR_USBPRE_DIV1 (0x00400000U)


#define RCC_CFGR_I2SSRC_Pos (23U)
#define RCC_CFGR_I2SSRC_Msk (0x1U << RCC_CFGR_I2SSRC_Pos)
#define RCC_CFGR_I2SSRC RCC_CFGR_I2SSRC_Msk

#define RCC_CFGR_I2SSRC_SYSCLK (0x00000000U)
#define RCC_CFGR_I2SSRC_EXT (0x00800000U)


#define RCC_CFGR_MCO_Pos (24U)
#define RCC_CFGR_MCO_Msk (0x7U << RCC_CFGR_MCO_Pos)
#define RCC_CFGR_MCO RCC_CFGR_MCO_Msk
#define RCC_CFGR_MCO_0 (0x1U << RCC_CFGR_MCO_Pos)
#define RCC_CFGR_MCO_1 (0x2U << RCC_CFGR_MCO_Pos)
#define RCC_CFGR_MCO_2 (0x4U << RCC_CFGR_MCO_Pos)

#define RCC_CFGR_MCO_NOCLOCK (0x00000000U)
#define RCC_CFGR_MCO_LSI (0x02000000U)
#define RCC_CFGR_MCO_LSE (0x03000000U)
#define RCC_CFGR_MCO_SYSCLK (0x04000000U)
#define RCC_CFGR_MCO_HSI (0x05000000U)
#define RCC_CFGR_MCO_HSE (0x06000000U)
#define RCC_CFGR_MCO_PLL (0x07000000U)

#define RCC_CFGR_MCOF_Pos (28U)
#define RCC_CFGR_MCOF_Msk (0x1U << RCC_CFGR_MCOF_Pos)
#define RCC_CFGR_MCOF RCC_CFGR_MCOF_Msk

#define RCC_CFGR_MCOSEL RCC_CFGR_MCO
#define RCC_CFGR_MCOSEL_0 RCC_CFGR_MCO_0
#define RCC_CFGR_MCOSEL_1 RCC_CFGR_MCO_1
#define RCC_CFGR_MCOSEL_2 RCC_CFGR_MCO_2
#define RCC_CFGR_MCOSEL_NOCLOCK RCC_CFGR_MCO_NOCLOCK
#define RCC_CFGR_MCOSEL_LSI RCC_CFGR_MCO_LSI
#define RCC_CFGR_MCOSEL_LSE RCC_CFGR_MCO_LSE
#define RCC_CFGR_MCOSEL_SYSCLK RCC_CFGR_MCO_SYSCLK
#define RCC_CFGR_MCOSEL_HSI RCC_CFGR_MCO_HSI
#define RCC_CFGR_MCOSEL_HSE RCC_CFGR_MCO_HSE
#define RCC_CFGR_MCOSEL_PLL_DIV2 RCC_CFGR_MCO_PLL


#define RCC_CIR_LSIRDYF_Pos (0U)
#define RCC_CIR_LSIRDYF_Msk (0x1U << RCC_CIR_LSIRDYF_Pos)
#define RCC_CIR_LSIRDYF RCC_CIR_LSIRDYF_Msk
#define RCC_CIR_LSERDYF_Pos (1U)
#define RCC_CIR_LSERDYF_Msk (0x1U << RCC_CIR_LSERDYF_Pos)
#define RCC_CIR_LSERDYF RCC_CIR_LSERDYF_Msk
#define RCC_CIR_HSIRDYF_Pos (2U)
#define RCC_CIR_HSIRDYF_Msk (0x1U << RCC_CIR_HSIRDYF_Pos)
#define RCC_CIR_HSIRDYF RCC_CIR_HSIRDYF_Msk
#define RCC_CIR_HSERDYF_Pos (3U)
#define RCC_CIR_HSERDYF_Msk (0x1U << RCC_CIR_HSERDYF_Pos)
#define RCC_CIR_HSERDYF RCC_CIR_HSERDYF_Msk
#define RCC_CIR_PLLRDYF_Pos (4U)
#define RCC_CIR_PLLRDYF_Msk (0x1U << RCC_CIR_PLLRDYF_Pos)
#define RCC_CIR_PLLRDYF RCC_CIR_PLLRDYF_Msk
#define RCC_CIR_CSSF_Pos (7U)
#define RCC_CIR_CSSF_Msk (0x1U << RCC_CIR_CSSF_Pos)
#define RCC_CIR_CSSF RCC_CIR_CSSF_Msk
#define RCC_CIR_LSIRDYIE_Pos (8U)
#define RCC_CIR_LSIRDYIE_Msk (0x1U << RCC_CIR_LSIRDYIE_Pos)
#define RCC_CIR_LSIRDYIE RCC_CIR_LSIRDYIE_Msk
#define RCC_CIR_LSERDYIE_Pos (9U)
#define RCC_CIR_LSERDYIE_Msk (0x1U << RCC_CIR_LSERDYIE_Pos)
#define RCC_CIR_LSERDYIE RCC_CIR_LSERDYIE_Msk
#define RCC_CIR_HSIRDYIE_Pos (10U)
#define RCC_CIR_HSIRDYIE_Msk (0x1U << RCC_CIR_HSIRDYIE_Pos)
#define RCC_CIR_HSIRDYIE RCC_CIR_HSIRDYIE_Msk
#define RCC_CIR_HSERDYIE_Pos (11U)
#define RCC_CIR_HSERDYIE_Msk (0x1U << RCC_CIR_HSERDYIE_Pos)
#define RCC_CIR_HSERDYIE RCC_CIR_HSERDYIE_Msk
#define RCC_CIR_PLLRDYIE_Pos (12U)
#define RCC_CIR_PLLRDYIE_Msk (0x1U << RCC_CIR_PLLRDYIE_Pos)
#define RCC_CIR_PLLRDYIE RCC_CIR_PLLRDYIE_Msk
#define RCC_CIR_LSIRDYC_Pos (16U)
#define RCC_CIR_LSIRDYC_Msk (0x1U << RCC_CIR_LSIRDYC_Pos)
#define RCC_CIR_LSIRDYC RCC_CIR_LSIRDYC_Msk
#define RCC_CIR_LSERDYC_Pos (17U)
#define RCC_CIR_LSERDYC_Msk (0x1U << RCC_CIR_LSERDYC_Pos)
#define RCC_CIR_LSERDYC RCC_CIR_LSERDYC_Msk
#define RCC_CIR_HSIRDYC_Pos (18U)
#define RCC_CIR_HSIRDYC_Msk (0x1U << RCC_CIR_HSIRDYC_Pos)
#define RCC_CIR_HSIRDYC RCC_CIR_HSIRDYC_Msk
#define RCC_CIR_HSERDYC_Pos (19U)
#define RCC_CIR_HSERDYC_Msk (0x1U << RCC_CIR_HSERDYC_Pos)
#define RCC_CIR_HSERDYC RCC_CIR_HSERDYC_Msk
#define RCC_CIR_PLLRDYC_Pos (20U)
#define RCC_CIR_PLLRDYC_Msk (0x1U << RCC_CIR_PLLRDYC_Pos)
#define RCC_CIR_PLLRDYC RCC_CIR_PLLRDYC_Msk
#define RCC_CIR_CSSC_Pos (23U)
#define RCC_CIR_CSSC_Msk (0x1U << RCC_CIR_CSSC_Pos)
#define RCC_CIR_CSSC RCC_CIR_CSSC_Msk


#define RCC_APB2RSTR_SYSCFGRST_Pos (0U)
#define RCC_APB2RSTR_SYSCFGRST_Msk (0x1U << RCC_APB2RSTR_SYSCFGRST_Pos)
#define RCC_APB2RSTR_SYSCFGRST RCC_APB2RSTR_SYSCFGRST_Msk
#define RCC_APB2RSTR_TIM1RST_Pos (11U)
#define RCC_APB2RSTR_TIM1RST_Msk (0x1U << RCC_APB2RSTR_TIM1RST_Pos)
#define RCC_APB2RSTR_TIM1RST RCC_APB2RSTR_TIM1RST_Msk
#define RCC_APB2RSTR_SPI1RST_Pos (12U)
#define RCC_APB2RSTR_SPI1RST_Msk (0x1U << RCC_APB2RSTR_SPI1RST_Pos)
#define RCC_APB2RSTR_SPI1RST RCC_APB2RSTR_SPI1RST_Msk
#define RCC_APB2RSTR_TIM8RST_Pos (13U)
#define RCC_APB2RSTR_TIM8RST_Msk (0x1U << RCC_APB2RSTR_TIM8RST_Pos)
#define RCC_APB2RSTR_TIM8RST RCC_APB2RSTR_TIM8RST_Msk
#define RCC_APB2RSTR_USART1RST_Pos (14U)
#define RCC_APB2RSTR_USART1RST_Msk (0x1U << RCC_APB2RSTR_USART1RST_Pos)
#define RCC_APB2RSTR_USART1RST RCC_APB2RSTR_USART1RST_Msk
#define RCC_APB2RSTR_TIM15RST_Pos (16U)
#define RCC_APB2RSTR_TIM15RST_Msk (0x1U << RCC_APB2RSTR_TIM15RST_Pos)
#define RCC_APB2RSTR_TIM15RST RCC_APB2RSTR_TIM15RST_Msk
#define RCC_APB2RSTR_TIM16RST_Pos (17U)
#define RCC_APB2RSTR_TIM16RST_Msk (0x1U << RCC_APB2RSTR_TIM16RST_Pos)
#define RCC_APB2RSTR_TIM16RST RCC_APB2RSTR_TIM16RST_Msk
#define RCC_APB2RSTR_TIM17RST_Pos (18U)
#define RCC_APB2RSTR_TIM17RST_Msk (0x1U << RCC_APB2RSTR_TIM17RST_Pos)
#define RCC_APB2RSTR_TIM17RST RCC_APB2RSTR_TIM17RST_Msk


#define RCC_APB1RSTR_TIM2RST_Pos (0U)
#define RCC_APB1RSTR_TIM2RST_Msk (0x1U << RCC_APB1RSTR_TIM2RST_Pos)
#define RCC_APB1RSTR_TIM2RST RCC_APB1RSTR_TIM2RST_Msk
#define RCC_APB1RSTR_TIM3RST_Pos (1U)
#define RCC_APB1RSTR_TIM3RST_Msk (0x1U << RCC_APB1RSTR_TIM3RST_Pos)
#define RCC_APB1RSTR_TIM3RST RCC_APB1RSTR_TIM3RST_Msk
#define RCC_APB1RSTR_TIM4RST_Pos (2U)
#define RCC_APB1RSTR_TIM4RST_Msk (0x1U << RCC_APB1RSTR_TIM4RST_Pos)
#define RCC_APB1RSTR_TIM4RST RCC_APB1RSTR_TIM4RST_Msk
#define RCC_APB1RSTR_TIM6RST_Pos (4U)
#define RCC_APB1RSTR_TIM6RST_Msk (0x1U << RCC_APB1RSTR_TIM6RST_Pos)
#define RCC_APB1RSTR_TIM6RST RCC_APB1RSTR_TIM6RST_Msk
#define RCC_APB1RSTR_TIM7RST_Pos (5U)
#define RCC_APB1RSTR_TIM7RST_Msk (0x1U << RCC_APB1RSTR_TIM7RST_Pos)
#define RCC_APB1RSTR_TIM7RST RCC_APB1RSTR_TIM7RST_Msk
#define RCC_APB1RSTR_WWDGRST_Pos (11U)
#define RCC_APB1RSTR_WWDGRST_Msk (0x1U << RCC_APB1RSTR_WWDGRST_Pos)
#define RCC_APB1RSTR_WWDGRST RCC_APB1RSTR_WWDGRST_Msk
#define RCC_APB1RSTR_SPI2RST_Pos (14U)
#define RCC_APB1RSTR_SPI2RST_Msk (0x1U << RCC_APB1RSTR_SPI2RST_Pos)
#define RCC_APB1RSTR_SPI2RST RCC_APB1RSTR_SPI2RST_Msk
#define RCC_APB1RSTR_SPI3RST_Pos (15U)
#define RCC_APB1RSTR_SPI3RST_Msk (0x1U << RCC_APB1RSTR_SPI3RST_Pos)
#define RCC_APB1RSTR_SPI3RST RCC_APB1RSTR_SPI3RST_Msk
#define RCC_APB1RSTR_USART2RST_Pos (17U)
#define RCC_APB1RSTR_USART2RST_Msk (0x1U << RCC_APB1RSTR_USART2RST_Pos)
#define RCC_APB1RSTR_USART2RST RCC_APB1RSTR_USART2RST_Msk
#define RCC_APB1RSTR_USART3RST_Pos (18U)
#define RCC_APB1RSTR_USART3RST_Msk (0x1U << RCC_APB1RSTR_USART3RST_Pos)
#define RCC_APB1RSTR_USART3RST RCC_APB1RSTR_USART3RST_Msk
#define RCC_APB1RSTR_UART4RST_Pos (19U)
#define RCC_APB1RSTR_UART4RST_Msk (0x1U << RCC_APB1RSTR_UART4RST_Pos)
#define RCC_APB1RSTR_UART4RST RCC_APB1RSTR_UART4RST_Msk
#define RCC_APB1RSTR_UART5RST_Pos (20U)
#define RCC_APB1RSTR_UART5RST_Msk (0x1U << RCC_APB1RSTR_UART5RST_Pos)
#define RCC_APB1RSTR_UART5RST RCC_APB1RSTR_UART5RST_Msk
#define RCC_APB1RSTR_I2C1RST_Pos (21U)
#define RCC_APB1RSTR_I2C1RST_Msk (0x1U << RCC_APB1RSTR_I2C1RST_Pos)
#define RCC_APB1RSTR_I2C1RST RCC_APB1RSTR_I2C1RST_Msk
#define RCC_APB1RSTR_I2C2RST_Pos (22U)
#define RCC_APB1RSTR_I2C2RST_Msk (0x1U << RCC_APB1RSTR_I2C2RST_Pos)
#define RCC_APB1RSTR_I2C2RST RCC_APB1RSTR_I2C2RST_Msk
#define RCC_APB1RSTR_USBRST_Pos (23U)
#define RCC_APB1RSTR_USBRST_Msk (0x1U << RCC_APB1RSTR_USBRST_Pos)
#define RCC_APB1RSTR_USBRST RCC_APB1RSTR_USBRST_Msk
#define RCC_APB1RSTR_CANRST_Pos (25U)
#define RCC_APB1RSTR_CANRST_Msk (0x1U << RCC_APB1RSTR_CANRST_Pos)
#define RCC_APB1RSTR_CANRST RCC_APB1RSTR_CANRST_Msk
#define RCC_APB1RSTR_PWRRST_Pos (28U)
#define RCC_APB1RSTR_PWRRST_Msk (0x1U << RCC_APB1RSTR_PWRRST_Pos)
#define RCC_APB1RSTR_PWRRST RCC_APB1RSTR_PWRRST_Msk
#define RCC_APB1RSTR_DAC1RST_Pos (29U)
#define RCC_APB1RSTR_DAC1RST_Msk (0x1U << RCC_APB1RSTR_DAC1RST_Pos)
#define RCC_APB1RSTR_DAC1RST RCC_APB1RSTR_DAC1RST_Msk


#define RCC_AHBENR_DMA1EN_Pos (0U)
#define RCC_AHBENR_DMA1EN_Msk (0x1U << RCC_AHBENR_DMA1EN_Pos)
#define RCC_AHBENR_DMA1EN RCC_AHBENR_DMA1EN_Msk
#define RCC_AHBENR_DMA2EN_Pos (1U)
#define RCC_AHBENR_DMA2EN_Msk (0x1U << RCC_AHBENR_DMA2EN_Pos)
#define RCC_AHBENR_DMA2EN RCC_AHBENR_DMA2EN_Msk
#define RCC_AHBENR_SRAMEN_Pos (2U)
#define RCC_AHBENR_SRAMEN_Msk (0x1U << RCC_AHBENR_SRAMEN_Pos)
#define RCC_AHBENR_SRAMEN RCC_AHBENR_SRAMEN_Msk
#define RCC_AHBENR_FLITFEN_Pos (4U)
#define RCC_AHBENR_FLITFEN_Msk (0x1U << RCC_AHBENR_FLITFEN_Pos)
#define RCC_AHBENR_FLITFEN RCC_AHBENR_FLITFEN_Msk
#define RCC_AHBENR_CRCEN_Pos (6U)
#define RCC_AHBENR_CRCEN_Msk (0x1U << RCC_AHBENR_CRCEN_Pos)
#define RCC_AHBENR_CRCEN RCC_AHBENR_CRCEN_Msk
#define RCC_AHBENR_GPIOAEN_Pos (17U)
#define RCC_AHBENR_GPIOAEN_Msk (0x1U << RCC_AHBENR_GPIOAEN_Pos)
#define RCC_AHBENR_GPIOAEN RCC_AHBENR_GPIOAEN_Msk
#define RCC_AHBENR_GPIOBEN_Pos (18U)
#define RCC_AHBENR_GPIOBEN_Msk (0x1U << RCC_AHBENR_GPIOBEN_Pos)
#define RCC_AHBENR_GPIOBEN RCC_AHBENR_GPIOBEN_Msk
#define RCC_AHBENR_GPIOCEN_Pos (19U)
#define RCC_AHBENR_GPIOCEN_Msk (0x1U << RCC_AHBENR_GPIOCEN_Pos)
#define RCC_AHBENR_GPIOCEN RCC_AHBENR_GPIOCEN_Msk
#define RCC_AHBENR_GPIODEN_Pos (20U)
#define RCC_AHBENR_GPIODEN_Msk (0x1U << RCC_AHBENR_GPIODEN_Pos)
#define RCC_AHBENR_GPIODEN RCC_AHBENR_GPIODEN_Msk
#define RCC_AHBENR_GPIOEEN_Pos (21U)
#define RCC_AHBENR_GPIOEEN_Msk (0x1U << RCC_AHBENR_GPIOEEN_Pos)
#define RCC_AHBENR_GPIOEEN RCC_AHBENR_GPIOEEN_Msk
#define RCC_AHBENR_GPIOFEN_Pos (22U)
#define RCC_AHBENR_GPIOFEN_Msk (0x1U << RCC_AHBENR_GPIOFEN_Pos)
#define RCC_AHBENR_GPIOFEN RCC_AHBENR_GPIOFEN_Msk
#define RCC_AHBENR_TSCEN_Pos (24U)
#define RCC_AHBENR_TSCEN_Msk (0x1U << RCC_AHBENR_TSCEN_Pos)
#define RCC_AHBENR_TSCEN RCC_AHBENR_TSCEN_Msk
#define RCC_AHBENR_ADC12EN_Pos (28U)
#define RCC_AHBENR_ADC12EN_Msk (0x1U << RCC_AHBENR_ADC12EN_Pos)
#define RCC_AHBENR_ADC12EN RCC_AHBENR_ADC12EN_Msk
#define RCC_AHBENR_ADC34EN_Pos (29U)
#define RCC_AHBENR_ADC34EN_Msk (0x1U << RCC_AHBENR_ADC34EN_Pos)
#define RCC_AHBENR_ADC34EN RCC_AHBENR_ADC34EN_Msk


#define RCC_APB2ENR_SYSCFGEN_Pos (0U)
#define RCC_APB2ENR_SYSCFGEN_Msk (0x1U << RCC_APB2ENR_SYSCFGEN_Pos)
#define RCC_APB2ENR_SYSCFGEN RCC_APB2ENR_SYSCFGEN_Msk
#define RCC_APB2ENR_TIM1EN_Pos (11U)
#define RCC_APB2ENR_TIM1EN_Msk (0x1U << RCC_APB2ENR_TIM1EN_Pos)
#define RCC_APB2ENR_TIM1EN RCC_APB2ENR_TIM1EN_Msk
#define RCC_APB2ENR_SPI1EN_Pos (12U)
#define RCC_APB2ENR_SPI1EN_Msk (0x1U << RCC_APB2ENR_SPI1EN_Pos)
#define RCC_APB2ENR_SPI1EN RCC_APB2ENR_SPI1EN_Msk
#define RCC_APB2ENR_TIM8EN_Pos (13U)
#define RCC_APB2ENR_TIM8EN_Msk (0x1U << RCC_APB2ENR_TIM8EN_Pos)
#define RCC_APB2ENR_TIM8EN RCC_APB2ENR_TIM8EN_Msk
#define RCC_APB2ENR_USART1EN_Pos (14U)
#define RCC_APB2ENR_USART1EN_Msk (0x1U << RCC_APB2ENR_USART1EN_Pos)
#define RCC_APB2ENR_USART1EN RCC_APB2ENR_USART1EN_Msk
#define RCC_APB2ENR_TIM15EN_Pos (16U)
#define RCC_APB2ENR_TIM15EN_Msk (0x1U << RCC_APB2ENR_TIM15EN_Pos)
#define RCC_APB2ENR_TIM15EN RCC_APB2ENR_TIM15EN_Msk
#define RCC_APB2ENR_TIM16EN_Pos (17U)
#define RCC_APB2ENR_TIM16EN_Msk (0x1U << RCC_APB2ENR_TIM16EN_Pos)
#define RCC_APB2ENR_TIM16EN RCC_APB2ENR_TIM16EN_Msk
#define RCC_APB2ENR_TIM17EN_Pos (18U)
#define RCC_APB2ENR_TIM17EN_Msk (0x1U << RCC_APB2ENR_TIM17EN_Pos)
#define RCC_APB2ENR_TIM17EN RCC_APB2ENR_TIM17EN_Msk


#define RCC_APB1ENR_TIM2EN_Pos (0U)
#define RCC_APB1ENR_TIM2EN_Msk (0x1U << RCC_APB1ENR_TIM2EN_Pos)
#define RCC_APB1ENR_TIM2EN RCC_APB1ENR_TIM2EN_Msk
#define RCC_APB1ENR_TIM3EN_Pos (1U)
#define RCC_APB1ENR_TIM3EN_Msk (0x1U << RCC_APB1ENR_TIM3EN_Pos)
#define RCC_APB1ENR_TIM3EN RCC_APB1ENR_TIM3EN_Msk
#define RCC_APB1ENR_TIM4EN_Pos (2U)
#define RCC_APB1ENR_TIM4EN_Msk (0x1U << RCC_APB1ENR_TIM4EN_Pos)
#define RCC_APB1ENR_TIM4EN RCC_APB1ENR_TIM4EN_Msk
#define RCC_APB1ENR_TIM6EN_Pos (4U)
#define RCC_APB1ENR_TIM6EN_Msk (0x1U << RCC_APB1ENR_TIM6EN_Pos)
#define RCC_APB1ENR_TIM6EN RCC_APB1ENR_TIM6EN_Msk
#define RCC_APB1ENR_TIM7EN_Pos (5U)
#define RCC_APB1ENR_TIM7EN_Msk (0x1U << RCC_APB1ENR_TIM7EN_Pos)
#define RCC_APB1ENR_TIM7EN RCC_APB1ENR_TIM7EN_Msk
#define RCC_APB1ENR_WWDGEN_Pos (11U)
#define RCC_APB1ENR_WWDGEN_Msk (0x1U << RCC_APB1ENR_WWDGEN_Pos)
#define RCC_APB1ENR_WWDGEN RCC_APB1ENR_WWDGEN_Msk
#define RCC_APB1ENR_SPI2EN_Pos (14U)
#define RCC_APB1ENR_SPI2EN_Msk (0x1U << RCC_APB1ENR_SPI2EN_Pos)
#define RCC_APB1ENR_SPI2EN RCC_APB1ENR_SPI2EN_Msk
#define RCC_APB1ENR_SPI3EN_Pos (15U)
#define RCC_APB1ENR_SPI3EN_Msk (0x1U << RCC_APB1ENR_SPI3EN_Pos)
#define RCC_APB1ENR_SPI3EN RCC_APB1ENR_SPI3EN_Msk
#define RCC_APB1ENR_USART2EN_Pos (17U)
#define RCC_APB1ENR_USART2EN_Msk (0x1U << RCC_APB1ENR_USART2EN_Pos)
#define RCC_APB1ENR_USART2EN RCC_APB1ENR_USART2EN_Msk
#define RCC_APB1ENR_USART3EN_Pos (18U)
#define RCC_APB1ENR_USART3EN_Msk (0x1U << RCC_APB1ENR_USART3EN_Pos)
#define RCC_APB1ENR_USART3EN RCC_APB1ENR_USART3EN_Msk
#define RCC_APB1ENR_UART4EN_Pos (19U)
#define RCC_APB1ENR_UART4EN_Msk (0x1U << RCC_APB1ENR_UART4EN_Pos)
#define RCC_APB1ENR_UART4EN RCC_APB1ENR_UART4EN_Msk
#define RCC_APB1ENR_UART5EN_Pos (20U)
#define RCC_APB1ENR_UART5EN_Msk (0x1U << RCC_APB1ENR_UART5EN_Pos)
#define RCC_APB1ENR_UART5EN RCC_APB1ENR_UART5EN_Msk
#define RCC_APB1ENR_I2C1EN_Pos (21U)
#define RCC_APB1ENR_I2C1EN_Msk (0x1U << RCC_APB1ENR_I2C1EN_Pos)
#define RCC_APB1ENR_I2C1EN RCC_APB1ENR_I2C1EN_Msk
#define RCC_APB1ENR_I2C2EN_Pos (22U)
#define RCC_APB1ENR_I2C2EN_Msk (0x1U << RCC_APB1ENR_I2C2EN_Pos)
#define RCC_APB1ENR_I2C2EN RCC_APB1ENR_I2C2EN_Msk
#define RCC_APB1ENR_USBEN_Pos (23U)
#define RCC_APB1ENR_USBEN_Msk (0x1U << RCC_APB1ENR_USBEN_Pos)
#define RCC_APB1ENR_USBEN RCC_APB1ENR_USBEN_Msk
#define RCC_APB1ENR_CANEN_Pos (25U)
#define RCC_APB1ENR_CANEN_Msk (0x1U << RCC_APB1ENR_CANEN_Pos)
#define RCC_APB1ENR_CANEN RCC_APB1ENR_CANEN_Msk
#define RCC_APB1ENR_PWREN_Pos (28U)
#define RCC_APB1ENR_PWREN_Msk (0x1U << RCC_APB1ENR_PWREN_Pos)
#define RCC_APB1ENR_PWREN RCC_APB1ENR_PWREN_Msk
#define RCC_APB1ENR_DAC1EN_Pos (29U)
#define RCC_APB1ENR_DAC1EN_Msk (0x1U << RCC_APB1ENR_DAC1EN_Pos)
#define RCC_APB1ENR_DAC1EN RCC_APB1ENR_DAC1EN_Msk


#define RCC_BDCR_LSE_Pos (0U)
#define RCC_BDCR_LSE_Msk (0x7U << RCC_BDCR_LSE_Pos)
#define RCC_BDCR_LSE RCC_BDCR_LSE_Msk
#define RCC_BDCR_LSEON_Pos (0U)
#define RCC_BDCR_LSEON_Msk (0x1U << RCC_BDCR_LSEON_Pos)
#define RCC_BDCR_LSEON RCC_BDCR_LSEON_Msk
#define RCC_BDCR_LSERDY_Pos (1U)
#define RCC_BDCR_LSERDY_Msk (0x1U << RCC_BDCR_LSERDY_Pos)
#define RCC_BDCR_LSERDY RCC_BDCR_LSERDY_Msk
#define RCC_BDCR_LSEBYP_Pos (2U)
#define RCC_BDCR_LSEBYP_Msk (0x1U << RCC_BDCR_LSEBYP_Pos)
#define RCC_BDCR_LSEBYP RCC_BDCR_LSEBYP_Msk

#define RCC_BDCR_LSEDRV_Pos (3U)
#define RCC_BDCR_LSEDRV_Msk (0x3U << RCC_BDCR_LSEDRV_Pos)
#define RCC_BDCR_LSEDRV RCC_BDCR_LSEDRV_Msk
#define RCC_BDCR_LSEDRV_0 (0x1U << RCC_BDCR_LSEDRV_Pos)
#define RCC_BDCR_LSEDRV_1 (0x2U << RCC_BDCR_LSEDRV_Pos)

#define RCC_BDCR_RTCSEL_Pos (8U)
#define RCC_BDCR_RTCSEL_Msk (0x3U << RCC_BDCR_RTCSEL_Pos)
#define RCC_BDCR_RTCSEL RCC_BDCR_RTCSEL_Msk
#define RCC_BDCR_RTCSEL_0 (0x1U << RCC_BDCR_RTCSEL_Pos)
#define RCC_BDCR_RTCSEL_1 (0x2U << RCC_BDCR_RTCSEL_Pos)


#define RCC_BDCR_RTCSEL_NOCLOCK (0x00000000U)
#define RCC_BDCR_RTCSEL_LSE (0x00000100U)
#define RCC_BDCR_RTCSEL_LSI (0x00000200U)
#define RCC_BDCR_RTCSEL_HSE (0x00000300U)

#define RCC_BDCR_RTCEN_Pos (15U)
#define RCC_BDCR_RTCEN_Msk (0x1U << RCC_BDCR_RTCEN_Pos)
#define RCC_BDCR_RTCEN RCC_BDCR_RTCEN_Msk
#define RCC_BDCR_BDRST_Pos (16U)
#define RCC_BDCR_BDRST_Msk (0x1U << RCC_BDCR_BDRST_Pos)
#define RCC_BDCR_BDRST RCC_BDCR_BDRST_Msk


#define RCC_CSR_LSION_Pos (0U)
#define RCC_CSR_LSION_Msk (0x1U << RCC_CSR_LSION_Pos)
#define RCC_CSR_LSION RCC_CSR_LSION_Msk
#define RCC_CSR_LSIRDY_Pos (1U)
#define RCC_CSR_LSIRDY_Msk (0x1U << RCC_CSR_LSIRDY_Pos)
#define RCC_CSR_LSIRDY RCC_CSR_LSIRDY_Msk
#define RCC_CSR_V18PWRRSTF_Pos (23U)
#define RCC_CSR_V18PWRRSTF_Msk (0x1U << RCC_CSR_V18PWRRSTF_Pos)
#define RCC_CSR_V18PWRRSTF RCC_CSR_V18PWRRSTF_Msk
#define RCC_CSR_RMVF_Pos (24U)
#define RCC_CSR_RMVF_Msk (0x1U << RCC_CSR_RMVF_Pos)
#define RCC_CSR_RMVF RCC_CSR_RMVF_Msk
#define RCC_CSR_OBLRSTF_Pos (25U)
#define RCC_CSR_OBLRSTF_Msk (0x1U << RCC_CSR_OBLRSTF_Pos)
#define RCC_CSR_OBLRSTF RCC_CSR_OBLRSTF_Msk
#define RCC_CSR_PINRSTF_Pos (26U)
#define RCC_CSR_PINRSTF_Msk (0x1U << RCC_CSR_PINRSTF_Pos)
#define RCC_CSR_PINRSTF RCC_CSR_PINRSTF_Msk
#define RCC_CSR_PORRSTF_Pos (27U)
#define RCC_CSR_PORRSTF_Msk (0x1U << RCC_CSR_PORRSTF_Pos)
#define RCC_CSR_PORRSTF RCC_CSR_PORRSTF_Msk
#define RCC_CSR_SFTRSTF_Pos (28U)
#define RCC_CSR_SFTRSTF_Msk (0x1U << RCC_CSR_SFTRSTF_Pos)
#define RCC_CSR_SFTRSTF RCC_CSR_SFTRSTF_Msk
#define RCC_CSR_IWDGRSTF_Pos (29U)
#define RCC_CSR_IWDGRSTF_Msk (0x1U << RCC_CSR_IWDGRSTF_Pos)
#define RCC_CSR_IWDGRSTF RCC_CSR_IWDGRSTF_Msk
#define RCC_CSR_WWDGRSTF_Pos (30U)
#define RCC_CSR_WWDGRSTF_Msk (0x1U << RCC_CSR_WWDGRSTF_Pos)
#define RCC_CSR_WWDGRSTF RCC_CSR_WWDGRSTF_Msk
#define RCC_CSR_LPWRRSTF_Pos (31U)
#define RCC_CSR_LPWRRSTF_Msk (0x1U << RCC_CSR_LPWRRSTF_Pos)
#define RCC_CSR_LPWRRSTF RCC_CSR_LPWRRSTF_Msk


#define RCC_CSR_VREGRSTF RCC_CSR_V18PWRRSTF


#define RCC_AHBRSTR_GPIOARST_Pos (17U)
#define RCC_AHBRSTR_GPIOARST_Msk (0x1U << RCC_AHBRSTR_GPIOARST_Pos)
#define RCC_AHBRSTR_GPIOARST RCC_AHBRSTR_GPIOARST_Msk
#define RCC_AHBRSTR_GPIOBRST_Pos (18U)
#define RCC_AHBRSTR_GPIOBRST_Msk (0x1U << RCC_AHBRSTR_GPIOBRST_Pos)
#define RCC_AHBRSTR_GPIOBRST RCC_AHBRSTR_GPIOBRST_Msk
#define RCC_AHBRSTR_GPIOCRST_Pos (19U)
#define RCC_AHBRSTR_GPIOCRST_Msk (0x1U << RCC_AHBRSTR_GPIOCRST_Pos)
#define RCC_AHBRSTR_GPIOCRST RCC_AHBRSTR_GPIOCRST_Msk
#define RCC_AHBRSTR_GPIODRST_Pos (20U)
#define RCC_AHBRSTR_GPIODRST_Msk (0x1U << RCC_AHBRSTR_GPIODRST_Pos)
#define RCC_AHBRSTR_GPIODRST RCC_AHBRSTR_GPIODRST_Msk
#define RCC_AHBRSTR_GPIOERST_Pos (21U)
#define RCC_AHBRSTR_GPIOERST_Msk (0x1U << RCC_AHBRSTR_GPIOERST_Pos)
#define RCC_AHBRSTR_GPIOERST RCC_AHBRSTR_GPIOERST_Msk
#define RCC_AHBRSTR_GPIOFRST_Pos (22U)
#define RCC_AHBRSTR_GPIOFRST_Msk (0x1U << RCC_AHBRSTR_GPIOFRST_Pos)
#define RCC_AHBRSTR_GPIOFRST RCC_AHBRSTR_GPIOFRST_Msk
#define RCC_AHBRSTR_TSCRST_Pos (24U)
#define RCC_AHBRSTR_TSCRST_Msk (0x1U << RCC_AHBRSTR_TSCRST_Pos)
#define RCC_AHBRSTR_TSCRST RCC_AHBRSTR_TSCRST_Msk
#define RCC_AHBRSTR_ADC12RST_Pos (28U)
#define RCC_AHBRSTR_ADC12RST_Msk (0x1U << RCC_AHBRSTR_ADC12RST_Pos)
#define RCC_AHBRSTR_ADC12RST RCC_AHBRSTR_ADC12RST_Msk
#define RCC_AHBRSTR_ADC34RST_Pos (29U)
#define RCC_AHBRSTR_ADC34RST_Msk (0x1U << RCC_AHBRSTR_ADC34RST_Pos)
#define RCC_AHBRSTR_ADC34RST RCC_AHBRSTR_ADC34RST_Msk



#define RCC_CFGR2_PREDIV_Pos (0U)
#define RCC_CFGR2_PREDIV_Msk (0xFU << RCC_CFGR2_PREDIV_Pos)
#define RCC_CFGR2_PREDIV RCC_CFGR2_PREDIV_Msk
#define RCC_CFGR2_PREDIV_0 (0x1U << RCC_CFGR2_PREDIV_Pos)
#define RCC_CFGR2_PREDIV_1 (0x2U << RCC_CFGR2_PREDIV_Pos)
#define RCC_CFGR2_PREDIV_2 (0x4U << RCC_CFGR2_PREDIV_Pos)
#define RCC_CFGR2_PREDIV_3 (0x8U << RCC_CFGR2_PREDIV_Pos)

#define RCC_CFGR2_PREDIV_DIV1 (0x00000000U)
#define RCC_CFGR2_PREDIV_DIV2 (0x00000001U)
#define RCC_CFGR2_PREDIV_DIV3 (0x00000002U)
#define RCC_CFGR2_PREDIV_DIV4 (0x00000003U)
#define RCC_CFGR2_PREDIV_DIV5 (0x00000004U)
#define RCC_CFGR2_PREDIV_DIV6 (0x00000005U)
#define RCC_CFGR2_PREDIV_DIV7 (0x00000006U)
#define RCC_CFGR2_PREDIV_DIV8 (0x00000007U)
#define RCC_CFGR2_PREDIV_DIV9 (0x00000008U)
#define RCC_CFGR2_PREDIV_DIV10 (0x00000009U)
#define RCC_CFGR2_PREDIV_DIV11 (0x0000000AU)
#define RCC_CFGR2_PREDIV_DIV12 (0x0000000BU)
#define RCC_CFGR2_PREDIV_DIV13 (0x0000000CU)
#define RCC_CFGR2_PREDIV_DIV14 (0x0000000DU)
#define RCC_CFGR2_PREDIV_DIV15 (0x0000000EU)
#define RCC_CFGR2_PREDIV_DIV16 (0x0000000FU)


#define RCC_CFGR2_ADCPRE12_Pos (4U)
#define RCC_CFGR2_ADCPRE12_Msk (0x1FU << RCC_CFGR2_ADCPRE12_Pos)
#define RCC_CFGR2_ADCPRE12 RCC_CFGR2_ADCPRE12_Msk
#define RCC_CFGR2_ADCPRE12_0 (0x01U << RCC_CFGR2_ADCPRE12_Pos)
#define RCC_CFGR2_ADCPRE12_1 (0x02U << RCC_CFGR2_ADCPRE12_Pos)
#define RCC_CFGR2_ADCPRE12_2 (0x04U << RCC_CFGR2_ADCPRE12_Pos)
#define RCC_CFGR2_ADCPRE12_3 (0x08U << RCC_CFGR2_ADCPRE12_Pos)
#define RCC_CFGR2_ADCPRE12_4 (0x10U << RCC_CFGR2_ADCPRE12_Pos)

#define RCC_CFGR2_ADCPRE12_NO (0x00000000U)
#define RCC_CFGR2_ADCPRE12_DIV1 (0x00000100U)
#define RCC_CFGR2_ADCPRE12_DIV2 (0x00000110U)
#define RCC_CFGR2_ADCPRE12_DIV4 (0x00000120U)
#define RCC_CFGR2_ADCPRE12_DIV6 (0x00000130U)
#define RCC_CFGR2_ADCPRE12_DIV8 (0x00000140U)
#define RCC_CFGR2_ADCPRE12_DIV10 (0x00000150U)
#define RCC_CFGR2_ADCPRE12_DIV12 (0x00000160U)
#define RCC_CFGR2_ADCPRE12_DIV16 (0x00000170U)
#define RCC_CFGR2_ADCPRE12_DIV32 (0x00000180U)
#define RCC_CFGR2_ADCPRE12_DIV64 (0x00000190U)
#define RCC_CFGR2_ADCPRE12_DIV128 (0x000001A0U)
#define RCC_CFGR2_ADCPRE12_DIV256 (0x000001B0U)


#define RCC_CFGR2_ADCPRE34_Pos (9U)
#define RCC_CFGR2_ADCPRE34_Msk (0x1FU << RCC_CFGR2_ADCPRE34_Pos)
#define RCC_CFGR2_ADCPRE34 RCC_CFGR2_ADCPRE34_Msk
#define RCC_CFGR2_ADCPRE34_0 (0x01U << RCC_CFGR2_ADCPRE34_Pos)
#define RCC_CFGR2_ADCPRE34_1 (0x02U << RCC_CFGR2_ADCPRE34_Pos)
#define RCC_CFGR2_ADCPRE34_2 (0x04U << RCC_CFGR2_ADCPRE34_Pos)
#define RCC_CFGR2_ADCPRE34_3 (0x08U << RCC_CFGR2_ADCPRE34_Pos)
#define RCC_CFGR2_ADCPRE34_4 (0x10U << RCC_CFGR2_ADCPRE34_Pos)

#define RCC_CFGR2_ADCPRE34_NO (0x00000000U)
#define RCC_CFGR2_ADCPRE34_DIV1 (0x00002000U)
#define RCC_CFGR2_ADCPRE34_DIV2 (0x00002200U)
#define RCC_CFGR2_ADCPRE34_DIV4 (0x00002400U)
#define RCC_CFGR2_ADCPRE34_DIV6 (0x00002600U)
#define RCC_CFGR2_ADCPRE34_DIV8 (0x00002800U)
#define RCC_CFGR2_ADCPRE34_DIV10 (0x00002A00U)
#define RCC_CFGR2_ADCPRE34_DIV12 (0x00002C00U)
#define RCC_CFGR2_ADCPRE34_DIV16 (0x00002E00U)
#define RCC_CFGR2_ADCPRE34_DIV32 (0x00003000U)
#define RCC_CFGR2_ADCPRE34_DIV64 (0x00003200U)
#define RCC_CFGR2_ADCPRE34_DIV128 (0x00003400U)
#define RCC_CFGR2_ADCPRE34_DIV256 (0x00003600U)


#define RCC_CFGR3_USART1SW_Pos (0U)
#define RCC_CFGR3_USART1SW_Msk (0x3U << RCC_CFGR3_USART1SW_Pos)
#define RCC_CFGR3_USART1SW RCC_CFGR3_USART1SW_Msk
#define RCC_CFGR3_USART1SW_0 (0x1U << RCC_CFGR3_USART1SW_Pos)
#define RCC_CFGR3_USART1SW_1 (0x2U << RCC_CFGR3_USART1SW_Pos)

#define RCC_CFGR3_USART1SW_PCLK2 (0x00000000U)
#define RCC_CFGR3_USART1SW_SYSCLK (0x00000001U)
#define RCC_CFGR3_USART1SW_LSE (0x00000002U)
#define RCC_CFGR3_USART1SW_HSI (0x00000003U)

#define RCC_CFGR3_USART1SW_PCLK RCC_CFGR3_USART1SW_PCLK2

#define RCC_CFGR3_I2CSW_Pos (4U)
#define RCC_CFGR3_I2CSW_Msk (0x3U << RCC_CFGR3_I2CSW_Pos)
#define RCC_CFGR3_I2CSW RCC_CFGR3_I2CSW_Msk
#define RCC_CFGR3_I2C1SW_Pos (4U)
#define RCC_CFGR3_I2C1SW_Msk (0x1U << RCC_CFGR3_I2C1SW_Pos)
#define RCC_CFGR3_I2C1SW RCC_CFGR3_I2C1SW_Msk
#define RCC_CFGR3_I2C2SW_Pos (5U)
#define RCC_CFGR3_I2C2SW_Msk (0x1U << RCC_CFGR3_I2C2SW_Pos)
#define RCC_CFGR3_I2C2SW RCC_CFGR3_I2C2SW_Msk

#define RCC_CFGR3_I2C1SW_HSI (0x00000000U)
#define RCC_CFGR3_I2C1SW_SYSCLK_Pos (4U)
#define RCC_CFGR3_I2C1SW_SYSCLK_Msk (0x1U << RCC_CFGR3_I2C1SW_SYSCLK_Pos)
#define RCC_CFGR3_I2C1SW_SYSCLK RCC_CFGR3_I2C1SW_SYSCLK_Msk
#define RCC_CFGR3_I2C2SW_HSI (0x00000000U)
#define RCC_CFGR3_I2C2SW_SYSCLK_Pos (5U)
#define RCC_CFGR3_I2C2SW_SYSCLK_Msk (0x1U << RCC_CFGR3_I2C2SW_SYSCLK_Pos)
#define RCC_CFGR3_I2C2SW_SYSCLK RCC_CFGR3_I2C2SW_SYSCLK_Msk
#define RCC_CFGR3_TIMSW_Pos (8U)
#define RCC_CFGR3_TIMSW_Msk (0x3U << RCC_CFGR3_TIMSW_Pos)
#define RCC_CFGR3_TIMSW RCC_CFGR3_TIMSW_Msk
#define RCC_CFGR3_TIM1SW_Pos (8U)
#define RCC_CFGR3_TIM1SW_Msk (0x1U << RCC_CFGR3_TIM1SW_Pos)
#define RCC_CFGR3_TIM1SW RCC_CFGR3_TIM1SW_Msk
#define RCC_CFGR3_TIM8SW_Pos (9U)
#define RCC_CFGR3_TIM8SW_Msk (0x1U << RCC_CFGR3_TIM8SW_Pos)
#define RCC_CFGR3_TIM8SW RCC_CFGR3_TIM8SW_Msk
#define RCC_CFGR3_TIM1SW_PCLK2 (0x00000000U)
#define RCC_CFGR3_TIM1SW_PLL_Pos (8U)
#define RCC_CFGR3_TIM1SW_PLL_Msk (0x1U << RCC_CFGR3_TIM1SW_PLL_Pos)
#define RCC_CFGR3_TIM1SW_PLL RCC_CFGR3_TIM1SW_PLL_Msk
#define RCC_CFGR3_TIM8SW_PCLK2 (0x00000000U)
#define RCC_CFGR3_TIM8SW_PLL_Pos (9U)
#define RCC_CFGR3_TIM8SW_PLL_Msk (0x1U << RCC_CFGR3_TIM8SW_PLL_Pos)
#define RCC_CFGR3_TIM8SW_PLL RCC_CFGR3_TIM8SW_PLL_Msk

#define RCC_CFGR3_USART2SW_Pos (16U)
#define RCC_CFGR3_USART2SW_Msk (0x3U << RCC_CFGR3_USART2SW_Pos)
#define RCC_CFGR3_USART2SW RCC_CFGR3_USART2SW_Msk
#define RCC_CFGR3_USART2SW_0 (0x1U << RCC_CFGR3_USART2SW_Pos)
#define RCC_CFGR3_USART2SW_1 (0x2U << RCC_CFGR3_USART2SW_Pos)

#define RCC_CFGR3_USART2SW_PCLK (0x00000000U)
#define RCC_CFGR3_USART2SW_SYSCLK (0x00010000U)
#define RCC_CFGR3_USART2SW_LSE (0x00020000U)
#define RCC_CFGR3_USART2SW_HSI (0x00030000U)

#define RCC_CFGR3_USART3SW_Pos (18U)
#define RCC_CFGR3_USART3SW_Msk (0x3U << RCC_CFGR3_USART3SW_Pos)
#define RCC_CFGR3_USART3SW RCC_CFGR3_USART3SW_Msk
#define RCC_CFGR3_USART3SW_0 (0x1U << RCC_CFGR3_USART3SW_Pos)
#define RCC_CFGR3_USART3SW_1 (0x2U << RCC_CFGR3_USART3SW_Pos)

#define RCC_CFGR3_USART3SW_PCLK (0x00000000U)
#define RCC_CFGR3_USART3SW_SYSCLK (0x00040000U)
#define RCC_CFGR3_USART3SW_LSE (0x00080000U)
#define RCC_CFGR3_USART3SW_HSI (0x000C0000U)

#define RCC_CFGR3_UART4SW_Pos (20U)
#define RCC_CFGR3_UART4SW_Msk (0x3U << RCC_CFGR3_UART4SW_Pos)
#define RCC_CFGR3_UART4SW RCC_CFGR3_UART4SW_Msk
#define RCC_CFGR3_UART4SW_0 (0x1U << RCC_CFGR3_UART4SW_Pos)
#define RCC_CFGR3_UART4SW_1 (0x2U << RCC_CFGR3_UART4SW_Pos)

#define RCC_CFGR3_UART4SW_PCLK (0x00000000U)
#define RCC_CFGR3_UART4SW_SYSCLK (0x00100000U)
#define RCC_CFGR3_UART4SW_LSE (0x00200000U)
#define RCC_CFGR3_UART4SW_HSI (0x00300000U)

#define RCC_CFGR3_UART5SW_Pos (22U)
#define RCC_CFGR3_UART5SW_Msk (0x3U << RCC_CFGR3_UART5SW_Pos)
#define RCC_CFGR3_UART5SW RCC_CFGR3_UART5SW_Msk
#define RCC_CFGR3_UART5SW_0 (0x1U << RCC_CFGR3_UART5SW_Pos)
#define RCC_CFGR3_UART5SW_1 (0x2U << RCC_CFGR3_UART5SW_Pos)

#define RCC_CFGR3_UART5SW_PCLK (0x00000000U)
#define RCC_CFGR3_UART5SW_SYSCLK (0x00400000U)
#define RCC_CFGR3_UART5SW_LSE (0x00800000U)
#define RCC_CFGR3_UART5SW_HSI (0x00C00000U)


#define RCC_CFGR3_TIM1SW_HCLK RCC_CFGR3_TIM1SW_PCLK2
#define RCC_CFGR3_TIM8SW_HCLK RCC_CFGR3_TIM8SW_PCLK2
# 9794 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define RTC_TAMPER1_SUPPORT 
#define RTC_TAMPER2_SUPPORT 
#define RTC_TAMPER3_SUPPORT 
#define RTC_BACKUP_SUPPORT 
#define RTC_WAKEUP_SUPPORT 


#define RTC_TR_PM_Pos (22U)
#define RTC_TR_PM_Msk (0x1U << RTC_TR_PM_Pos)
#define RTC_TR_PM RTC_TR_PM_Msk
#define RTC_TR_HT_Pos (20U)
#define RTC_TR_HT_Msk (0x3U << RTC_TR_HT_Pos)
#define RTC_TR_HT RTC_TR_HT_Msk
#define RTC_TR_HT_0 (0x1U << RTC_TR_HT_Pos)
#define RTC_TR_HT_1 (0x2U << RTC_TR_HT_Pos)
#define RTC_TR_HU_Pos (16U)
#define RTC_TR_HU_Msk (0xFU << RTC_TR_HU_Pos)
#define RTC_TR_HU RTC_TR_HU_Msk
#define RTC_TR_HU_0 (0x1U << RTC_TR_HU_Pos)
#define RTC_TR_HU_1 (0x2U << RTC_TR_HU_Pos)
#define RTC_TR_HU_2 (0x4U << RTC_TR_HU_Pos)
#define RTC_TR_HU_3 (0x8U << RTC_TR_HU_Pos)
#define RTC_TR_MNT_Pos (12U)
#define RTC_TR_MNT_Msk (0x7U << RTC_TR_MNT_Pos)
#define RTC_TR_MNT RTC_TR_MNT_Msk
#define RTC_TR_MNT_0 (0x1U << RTC_TR_MNT_Pos)
#define RTC_TR_MNT_1 (0x2U << RTC_TR_MNT_Pos)
#define RTC_TR_MNT_2 (0x4U << RTC_TR_MNT_Pos)
#define RTC_TR_MNU_Pos (8U)
#define RTC_TR_MNU_Msk (0xFU << RTC_TR_MNU_Pos)
#define RTC_TR_MNU RTC_TR_MNU_Msk
#define RTC_TR_MNU_0 (0x1U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_1 (0x2U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_2 (0x4U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_3 (0x8U << RTC_TR_MNU_Pos)
#define RTC_TR_ST_Pos (4U)
#define RTC_TR_ST_Msk (0x7U << RTC_TR_ST_Pos)
#define RTC_TR_ST RTC_TR_ST_Msk
#define RTC_TR_ST_0 (0x1U << RTC_TR_ST_Pos)
#define RTC_TR_ST_1 (0x2U << RTC_TR_ST_Pos)
#define RTC_TR_ST_2 (0x4U << RTC_TR_ST_Pos)
#define RTC_TR_SU_Pos (0U)
#define RTC_TR_SU_Msk (0xFU << RTC_TR_SU_Pos)
#define RTC_TR_SU RTC_TR_SU_Msk
#define RTC_TR_SU_0 (0x1U << RTC_TR_SU_Pos)
#define RTC_TR_SU_1 (0x2U << RTC_TR_SU_Pos)
#define RTC_TR_SU_2 (0x4U << RTC_TR_SU_Pos)
#define RTC_TR_SU_3 (0x8U << RTC_TR_SU_Pos)


#define RTC_DR_YT_Pos (20U)
#define RTC_DR_YT_Msk (0xFU << RTC_DR_YT_Pos)
#define RTC_DR_YT RTC_DR_YT_Msk
#define RTC_DR_YT_0 (0x1U << RTC_DR_YT_Pos)
#define RTC_DR_YT_1 (0x2U << RTC_DR_YT_Pos)
#define RTC_DR_YT_2 (0x4U << RTC_DR_YT_Pos)
#define RTC_DR_YT_3 (0x8U << RTC_DR_YT_Pos)
#define RTC_DR_YU_Pos (16U)
#define RTC_DR_YU_Msk (0xFU << RTC_DR_YU_Pos)
#define RTC_DR_YU RTC_DR_YU_Msk
#define RTC_DR_YU_0 (0x1U << RTC_DR_YU_Pos)
#define RTC_DR_YU_1 (0x2U << RTC_DR_YU_Pos)
#define RTC_DR_YU_2 (0x4U << RTC_DR_YU_Pos)
#define RTC_DR_YU_3 (0x8U << RTC_DR_YU_Pos)
#define RTC_DR_WDU_Pos (13U)
#define RTC_DR_WDU_Msk (0x7U << RTC_DR_WDU_Pos)
#define RTC_DR_WDU RTC_DR_WDU_Msk
#define RTC_DR_WDU_0 (0x1U << RTC_DR_WDU_Pos)
#define RTC_DR_WDU_1 (0x2U << RTC_DR_WDU_Pos)
#define RTC_DR_WDU_2 (0x4U << RTC_DR_WDU_Pos)
#define RTC_DR_MT_Pos (12U)
#define RTC_DR_MT_Msk (0x1U << RTC_DR_MT_Pos)
#define RTC_DR_MT RTC_DR_MT_Msk
#define RTC_DR_MU_Pos (8U)
#define RTC_DR_MU_Msk (0xFU << RTC_DR_MU_Pos)
#define RTC_DR_MU RTC_DR_MU_Msk
#define RTC_DR_MU_0 (0x1U << RTC_DR_MU_Pos)
#define RTC_DR_MU_1 (0x2U << RTC_DR_MU_Pos)
#define RTC_DR_MU_2 (0x4U << RTC_DR_MU_Pos)
#define RTC_DR_MU_3 (0x8U << RTC_DR_MU_Pos)
#define RTC_DR_DT_Pos (4U)
#define RTC_DR_DT_Msk (0x3U << RTC_DR_DT_Pos)
#define RTC_DR_DT RTC_DR_DT_Msk
#define RTC_DR_DT_0 (0x1U << RTC_DR_DT_Pos)
#define RTC_DR_DT_1 (0x2U << RTC_DR_DT_Pos)
#define RTC_DR_DU_Pos (0U)
#define RTC_DR_DU_Msk (0xFU << RTC_DR_DU_Pos)
#define RTC_DR_DU RTC_DR_DU_Msk
#define RTC_DR_DU_0 (0x1U << RTC_DR_DU_Pos)
#define RTC_DR_DU_1 (0x2U << RTC_DR_DU_Pos)
#define RTC_DR_DU_2 (0x4U << RTC_DR_DU_Pos)
#define RTC_DR_DU_3 (0x8U << RTC_DR_DU_Pos)


#define RTC_CR_COE_Pos (23U)
#define RTC_CR_COE_Msk (0x1U << RTC_CR_COE_Pos)
#define RTC_CR_COE RTC_CR_COE_Msk
#define RTC_CR_OSEL_Pos (21U)
#define RTC_CR_OSEL_Msk (0x3U << RTC_CR_OSEL_Pos)
#define RTC_CR_OSEL RTC_CR_OSEL_Msk
#define RTC_CR_OSEL_0 (0x1U << RTC_CR_OSEL_Pos)
#define RTC_CR_OSEL_1 (0x2U << RTC_CR_OSEL_Pos)
#define RTC_CR_POL_Pos (20U)
#define RTC_CR_POL_Msk (0x1U << RTC_CR_POL_Pos)
#define RTC_CR_POL RTC_CR_POL_Msk
#define RTC_CR_COSEL_Pos (19U)
#define RTC_CR_COSEL_Msk (0x1U << RTC_CR_COSEL_Pos)
#define RTC_CR_COSEL RTC_CR_COSEL_Msk
#define RTC_CR_BKP_Pos (18U)
#define RTC_CR_BKP_Msk (0x1U << RTC_CR_BKP_Pos)
#define RTC_CR_BKP RTC_CR_BKP_Msk
#define RTC_CR_SUB1H_Pos (17U)
#define RTC_CR_SUB1H_Msk (0x1U << RTC_CR_SUB1H_Pos)
#define RTC_CR_SUB1H RTC_CR_SUB1H_Msk
#define RTC_CR_ADD1H_Pos (16U)
#define RTC_CR_ADD1H_Msk (0x1U << RTC_CR_ADD1H_Pos)
#define RTC_CR_ADD1H RTC_CR_ADD1H_Msk
#define RTC_CR_TSIE_Pos (15U)
#define RTC_CR_TSIE_Msk (0x1U << RTC_CR_TSIE_Pos)
#define RTC_CR_TSIE RTC_CR_TSIE_Msk
#define RTC_CR_WUTIE_Pos (14U)
#define RTC_CR_WUTIE_Msk (0x1U << RTC_CR_WUTIE_Pos)
#define RTC_CR_WUTIE RTC_CR_WUTIE_Msk
#define RTC_CR_ALRBIE_Pos (13U)
#define RTC_CR_ALRBIE_Msk (0x1U << RTC_CR_ALRBIE_Pos)
#define RTC_CR_ALRBIE RTC_CR_ALRBIE_Msk
#define RTC_CR_ALRAIE_Pos (12U)
#define RTC_CR_ALRAIE_Msk (0x1U << RTC_CR_ALRAIE_Pos)
#define RTC_CR_ALRAIE RTC_CR_ALRAIE_Msk
#define RTC_CR_TSE_Pos (11U)
#define RTC_CR_TSE_Msk (0x1U << RTC_CR_TSE_Pos)
#define RTC_CR_TSE RTC_CR_TSE_Msk
#define RTC_CR_WUTE_Pos (10U)
#define RTC_CR_WUTE_Msk (0x1U << RTC_CR_WUTE_Pos)
#define RTC_CR_WUTE RTC_CR_WUTE_Msk
#define RTC_CR_ALRBE_Pos (9U)
#define RTC_CR_ALRBE_Msk (0x1U << RTC_CR_ALRBE_Pos)
#define RTC_CR_ALRBE RTC_CR_ALRBE_Msk
#define RTC_CR_ALRAE_Pos (8U)
#define RTC_CR_ALRAE_Msk (0x1U << RTC_CR_ALRAE_Pos)
#define RTC_CR_ALRAE RTC_CR_ALRAE_Msk
#define RTC_CR_FMT_Pos (6U)
#define RTC_CR_FMT_Msk (0x1U << RTC_CR_FMT_Pos)
#define RTC_CR_FMT RTC_CR_FMT_Msk
#define RTC_CR_BYPSHAD_Pos (5U)
#define RTC_CR_BYPSHAD_Msk (0x1U << RTC_CR_BYPSHAD_Pos)
#define RTC_CR_BYPSHAD RTC_CR_BYPSHAD_Msk
#define RTC_CR_REFCKON_Pos (4U)
#define RTC_CR_REFCKON_Msk (0x1U << RTC_CR_REFCKON_Pos)
#define RTC_CR_REFCKON RTC_CR_REFCKON_Msk
#define RTC_CR_TSEDGE_Pos (3U)
#define RTC_CR_TSEDGE_Msk (0x1U << RTC_CR_TSEDGE_Pos)
#define RTC_CR_TSEDGE RTC_CR_TSEDGE_Msk
#define RTC_CR_WUCKSEL_Pos (0U)
#define RTC_CR_WUCKSEL_Msk (0x7U << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL RTC_CR_WUCKSEL_Msk
#define RTC_CR_WUCKSEL_0 (0x1U << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL_1 (0x2U << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL_2 (0x4U << RTC_CR_WUCKSEL_Pos)


#define RTC_CR_BCK_Pos RTC_CR_BKP_Pos
#define RTC_CR_BCK_Msk RTC_CR_BKP_Msk
#define RTC_CR_BCK RTC_CR_BKP


#define RTC_ISR_RECALPF_Pos (16U)
#define RTC_ISR_RECALPF_Msk (0x1U << RTC_ISR_RECALPF_Pos)
#define RTC_ISR_RECALPF RTC_ISR_RECALPF_Msk
#define RTC_ISR_TAMP3F_Pos (15U)
#define RTC_ISR_TAMP3F_Msk (0x1U << RTC_ISR_TAMP3F_Pos)
#define RTC_ISR_TAMP3F RTC_ISR_TAMP3F_Msk
#define RTC_ISR_TAMP2F_Pos (14U)
#define RTC_ISR_TAMP2F_Msk (0x1U << RTC_ISR_TAMP2F_Pos)
#define RTC_ISR_TAMP2F RTC_ISR_TAMP2F_Msk
#define RTC_ISR_TAMP1F_Pos (13U)
#define RTC_ISR_TAMP1F_Msk (0x1U << RTC_ISR_TAMP1F_Pos)
#define RTC_ISR_TAMP1F RTC_ISR_TAMP1F_Msk
#define RTC_ISR_TSOVF_Pos (12U)
#define RTC_ISR_TSOVF_Msk (0x1U << RTC_ISR_TSOVF_Pos)
#define RTC_ISR_TSOVF RTC_ISR_TSOVF_Msk
#define RTC_ISR_TSF_Pos (11U)
#define RTC_ISR_TSF_Msk (0x1U << RTC_ISR_TSF_Pos)
#define RTC_ISR_TSF RTC_ISR_TSF_Msk
#define RTC_ISR_WUTF_Pos (10U)
#define RTC_ISR_WUTF_Msk (0x1U << RTC_ISR_WUTF_Pos)
#define RTC_ISR_WUTF RTC_ISR_WUTF_Msk
#define RTC_ISR_ALRBF_Pos (9U)
#define RTC_ISR_ALRBF_Msk (0x1U << RTC_ISR_ALRBF_Pos)
#define RTC_ISR_ALRBF RTC_ISR_ALRBF_Msk
#define RTC_ISR_ALRAF_Pos (8U)
#define RTC_ISR_ALRAF_Msk (0x1U << RTC_ISR_ALRAF_Pos)
#define RTC_ISR_ALRAF RTC_ISR_ALRAF_Msk
#define RTC_ISR_INIT_Pos (7U)
#define RTC_ISR_INIT_Msk (0x1U << RTC_ISR_INIT_Pos)
#define RTC_ISR_INIT RTC_ISR_INIT_Msk
#define RTC_ISR_INITF_Pos (6U)
#define RTC_ISR_INITF_Msk (0x1U << RTC_ISR_INITF_Pos)
#define RTC_ISR_INITF RTC_ISR_INITF_Msk
#define RTC_ISR_RSF_Pos (5U)
#define RTC_ISR_RSF_Msk (0x1U << RTC_ISR_RSF_Pos)
#define RTC_ISR_RSF RTC_ISR_RSF_Msk
#define RTC_ISR_INITS_Pos (4U)
#define RTC_ISR_INITS_Msk (0x1U << RTC_ISR_INITS_Pos)
#define RTC_ISR_INITS RTC_ISR_INITS_Msk
#define RTC_ISR_SHPF_Pos (3U)
#define RTC_ISR_SHPF_Msk (0x1U << RTC_ISR_SHPF_Pos)
#define RTC_ISR_SHPF RTC_ISR_SHPF_Msk
#define RTC_ISR_WUTWF_Pos (2U)
#define RTC_ISR_WUTWF_Msk (0x1U << RTC_ISR_WUTWF_Pos)
#define RTC_ISR_WUTWF RTC_ISR_WUTWF_Msk
#define RTC_ISR_ALRBWF_Pos (1U)
#define RTC_ISR_ALRBWF_Msk (0x1U << RTC_ISR_ALRBWF_Pos)
#define RTC_ISR_ALRBWF RTC_ISR_ALRBWF_Msk
#define RTC_ISR_ALRAWF_Pos (0U)
#define RTC_ISR_ALRAWF_Msk (0x1U << RTC_ISR_ALRAWF_Pos)
#define RTC_ISR_ALRAWF RTC_ISR_ALRAWF_Msk


#define RTC_PRER_PREDIV_A_Pos (16U)
#define RTC_PRER_PREDIV_A_Msk (0x7FU << RTC_PRER_PREDIV_A_Pos)
#define RTC_PRER_PREDIV_A RTC_PRER_PREDIV_A_Msk
#define RTC_PRER_PREDIV_S_Pos (0U)
#define RTC_PRER_PREDIV_S_Msk (0x7FFFU << RTC_PRER_PREDIV_S_Pos)
#define RTC_PRER_PREDIV_S RTC_PRER_PREDIV_S_Msk


#define RTC_WUTR_WUT_Pos (0U)
#define RTC_WUTR_WUT_Msk (0xFFFFU << RTC_WUTR_WUT_Pos)
#define RTC_WUTR_WUT RTC_WUTR_WUT_Msk


#define RTC_ALRMAR_MSK4_Pos (31U)
#define RTC_ALRMAR_MSK4_Msk (0x1U << RTC_ALRMAR_MSK4_Pos)
#define RTC_ALRMAR_MSK4 RTC_ALRMAR_MSK4_Msk
#define RTC_ALRMAR_WDSEL_Pos (30U)
#define RTC_ALRMAR_WDSEL_Msk (0x1U << RTC_ALRMAR_WDSEL_Pos)
#define RTC_ALRMAR_WDSEL RTC_ALRMAR_WDSEL_Msk
#define RTC_ALRMAR_DT_Pos (28U)
#define RTC_ALRMAR_DT_Msk (0x3U << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DT RTC_ALRMAR_DT_Msk
#define RTC_ALRMAR_DT_0 (0x1U << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DT_1 (0x2U << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DU_Pos (24U)
#define RTC_ALRMAR_DU_Msk (0xFU << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU RTC_ALRMAR_DU_Msk
#define RTC_ALRMAR_DU_0 (0x1U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_1 (0x2U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_2 (0x4U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_3 (0x8U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_MSK3_Pos (23U)
#define RTC_ALRMAR_MSK3_Msk (0x1U << RTC_ALRMAR_MSK3_Pos)
#define RTC_ALRMAR_MSK3 RTC_ALRMAR_MSK3_Msk
#define RTC_ALRMAR_PM_Pos (22U)
#define RTC_ALRMAR_PM_Msk (0x1U << RTC_ALRMAR_PM_Pos)
#define RTC_ALRMAR_PM RTC_ALRMAR_PM_Msk
#define RTC_ALRMAR_HT_Pos (20U)
#define RTC_ALRMAR_HT_Msk (0x3U << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HT RTC_ALRMAR_HT_Msk
#define RTC_ALRMAR_HT_0 (0x1U << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HT_1 (0x2U << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HU_Pos (16U)
#define RTC_ALRMAR_HU_Msk (0xFU << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU RTC_ALRMAR_HU_Msk
#define RTC_ALRMAR_HU_0 (0x1U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_1 (0x2U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_2 (0x4U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_3 (0x8U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_MSK2_Pos (15U)
#define RTC_ALRMAR_MSK2_Msk (0x1U << RTC_ALRMAR_MSK2_Pos)
#define RTC_ALRMAR_MSK2 RTC_ALRMAR_MSK2_Msk
#define RTC_ALRMAR_MNT_Pos (12U)
#define RTC_ALRMAR_MNT_Msk (0x7U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT RTC_ALRMAR_MNT_Msk
#define RTC_ALRMAR_MNT_0 (0x1U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT_1 (0x2U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT_2 (0x4U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNU_Pos (8U)
#define RTC_ALRMAR_MNU_Msk (0xFU << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU RTC_ALRMAR_MNU_Msk
#define RTC_ALRMAR_MNU_0 (0x1U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_1 (0x2U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_2 (0x4U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_3 (0x8U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MSK1_Pos (7U)
#define RTC_ALRMAR_MSK1_Msk (0x1U << RTC_ALRMAR_MSK1_Pos)
#define RTC_ALRMAR_MSK1 RTC_ALRMAR_MSK1_Msk
#define RTC_ALRMAR_ST_Pos (4U)
#define RTC_ALRMAR_ST_Msk (0x7U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST RTC_ALRMAR_ST_Msk
#define RTC_ALRMAR_ST_0 (0x1U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST_1 (0x2U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST_2 (0x4U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_SU_Pos (0U)
#define RTC_ALRMAR_SU_Msk (0xFU << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU RTC_ALRMAR_SU_Msk
#define RTC_ALRMAR_SU_0 (0x1U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_1 (0x2U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_2 (0x4U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_3 (0x8U << RTC_ALRMAR_SU_Pos)


#define RTC_ALRMBR_MSK4_Pos (31U)
#define RTC_ALRMBR_MSK4_Msk (0x1U << RTC_ALRMBR_MSK4_Pos)
#define RTC_ALRMBR_MSK4 RTC_ALRMBR_MSK4_Msk
#define RTC_ALRMBR_WDSEL_Pos (30U)
#define RTC_ALRMBR_WDSEL_Msk (0x1U << RTC_ALRMBR_WDSEL_Pos)
#define RTC_ALRMBR_WDSEL RTC_ALRMBR_WDSEL_Msk
#define RTC_ALRMBR_DT_Pos (28U)
#define RTC_ALRMBR_DT_Msk (0x3U << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DT RTC_ALRMBR_DT_Msk
#define RTC_ALRMBR_DT_0 (0x1U << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DT_1 (0x2U << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DU_Pos (24U)
#define RTC_ALRMBR_DU_Msk (0xFU << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU RTC_ALRMBR_DU_Msk
#define RTC_ALRMBR_DU_0 (0x1U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_1 (0x2U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_2 (0x4U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_3 (0x8U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_MSK3_Pos (23U)
#define RTC_ALRMBR_MSK3_Msk (0x1U << RTC_ALRMBR_MSK3_Pos)
#define RTC_ALRMBR_MSK3 RTC_ALRMBR_MSK3_Msk
#define RTC_ALRMBR_PM_Pos (22U)
#define RTC_ALRMBR_PM_Msk (0x1U << RTC_ALRMBR_PM_Pos)
#define RTC_ALRMBR_PM RTC_ALRMBR_PM_Msk
#define RTC_ALRMBR_HT_Pos (20U)
#define RTC_ALRMBR_HT_Msk (0x3U << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HT RTC_ALRMBR_HT_Msk
#define RTC_ALRMBR_HT_0 (0x1U << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HT_1 (0x2U << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HU_Pos (16U)
#define RTC_ALRMBR_HU_Msk (0xFU << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU RTC_ALRMBR_HU_Msk
#define RTC_ALRMBR_HU_0 (0x1U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_1 (0x2U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_2 (0x4U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_3 (0x8U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_MSK2_Pos (15U)
#define RTC_ALRMBR_MSK2_Msk (0x1U << RTC_ALRMBR_MSK2_Pos)
#define RTC_ALRMBR_MSK2 RTC_ALRMBR_MSK2_Msk
#define RTC_ALRMBR_MNT_Pos (12U)
#define RTC_ALRMBR_MNT_Msk (0x7U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT RTC_ALRMBR_MNT_Msk
#define RTC_ALRMBR_MNT_0 (0x1U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT_1 (0x2U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT_2 (0x4U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNU_Pos (8U)
#define RTC_ALRMBR_MNU_Msk (0xFU << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU RTC_ALRMBR_MNU_Msk
#define RTC_ALRMBR_MNU_0 (0x1U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_1 (0x2U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_2 (0x4U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_3 (0x8U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MSK1_Pos (7U)
#define RTC_ALRMBR_MSK1_Msk (0x1U << RTC_ALRMBR_MSK1_Pos)
#define RTC_ALRMBR_MSK1 RTC_ALRMBR_MSK1_Msk
#define RTC_ALRMBR_ST_Pos (4U)
#define RTC_ALRMBR_ST_Msk (0x7U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST RTC_ALRMBR_ST_Msk
#define RTC_ALRMBR_ST_0 (0x1U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST_1 (0x2U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST_2 (0x4U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_SU_Pos (0U)
#define RTC_ALRMBR_SU_Msk (0xFU << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU RTC_ALRMBR_SU_Msk
#define RTC_ALRMBR_SU_0 (0x1U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_1 (0x2U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_2 (0x4U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_3 (0x8U << RTC_ALRMBR_SU_Pos)


#define RTC_WPR_KEY_Pos (0U)
#define RTC_WPR_KEY_Msk (0xFFU << RTC_WPR_KEY_Pos)
#define RTC_WPR_KEY RTC_WPR_KEY_Msk


#define RTC_SSR_SS_Pos (0U)
#define RTC_SSR_SS_Msk (0xFFFFU << RTC_SSR_SS_Pos)
#define RTC_SSR_SS RTC_SSR_SS_Msk


#define RTC_SHIFTR_SUBFS_Pos (0U)
#define RTC_SHIFTR_SUBFS_Msk (0x7FFFU << RTC_SHIFTR_SUBFS_Pos)
#define RTC_SHIFTR_SUBFS RTC_SHIFTR_SUBFS_Msk
#define RTC_SHIFTR_ADD1S_Pos (31U)
#define RTC_SHIFTR_ADD1S_Msk (0x1U << RTC_SHIFTR_ADD1S_Pos)
#define RTC_SHIFTR_ADD1S RTC_SHIFTR_ADD1S_Msk


#define RTC_TSTR_PM_Pos (22U)
#define RTC_TSTR_PM_Msk (0x1U << RTC_TSTR_PM_Pos)
#define RTC_TSTR_PM RTC_TSTR_PM_Msk
#define RTC_TSTR_HT_Pos (20U)
#define RTC_TSTR_HT_Msk (0x3U << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HT RTC_TSTR_HT_Msk
#define RTC_TSTR_HT_0 (0x1U << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HT_1 (0x2U << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HU_Pos (16U)
#define RTC_TSTR_HU_Msk (0xFU << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU RTC_TSTR_HU_Msk
#define RTC_TSTR_HU_0 (0x1U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_1 (0x2U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_2 (0x4U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_3 (0x8U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_MNT_Pos (12U)
#define RTC_TSTR_MNT_Msk (0x7U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT RTC_TSTR_MNT_Msk
#define RTC_TSTR_MNT_0 (0x1U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT_1 (0x2U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT_2 (0x4U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNU_Pos (8U)
#define RTC_TSTR_MNU_Msk (0xFU << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU RTC_TSTR_MNU_Msk
#define RTC_TSTR_MNU_0 (0x1U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_1 (0x2U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_2 (0x4U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_3 (0x8U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_ST_Pos (4U)
#define RTC_TSTR_ST_Msk (0x7U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST RTC_TSTR_ST_Msk
#define RTC_TSTR_ST_0 (0x1U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST_1 (0x2U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST_2 (0x4U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_SU_Pos (0U)
#define RTC_TSTR_SU_Msk (0xFU << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU RTC_TSTR_SU_Msk
#define RTC_TSTR_SU_0 (0x1U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_1 (0x2U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_2 (0x4U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_3 (0x8U << RTC_TSTR_SU_Pos)


#define RTC_TSDR_WDU_Pos (13U)
#define RTC_TSDR_WDU_Msk (0x7U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU RTC_TSDR_WDU_Msk
#define RTC_TSDR_WDU_0 (0x1U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU_1 (0x2U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU_2 (0x4U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_MT_Pos (12U)
#define RTC_TSDR_MT_Msk (0x1U << RTC_TSDR_MT_Pos)
#define RTC_TSDR_MT RTC_TSDR_MT_Msk
#define RTC_TSDR_MU_Pos (8U)
#define RTC_TSDR_MU_Msk (0xFU << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU RTC_TSDR_MU_Msk
#define RTC_TSDR_MU_0 (0x1U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_1 (0x2U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_2 (0x4U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_3 (0x8U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_DT_Pos (4U)
#define RTC_TSDR_DT_Msk (0x3U << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DT RTC_TSDR_DT_Msk
#define RTC_TSDR_DT_0 (0x1U << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DT_1 (0x2U << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DU_Pos (0U)
#define RTC_TSDR_DU_Msk (0xFU << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU RTC_TSDR_DU_Msk
#define RTC_TSDR_DU_0 (0x1U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_1 (0x2U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_2 (0x4U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_3 (0x8U << RTC_TSDR_DU_Pos)


#define RTC_TSSSR_SS_Pos (0U)
#define RTC_TSSSR_SS_Msk (0xFFFFU << RTC_TSSSR_SS_Pos)
#define RTC_TSSSR_SS RTC_TSSSR_SS_Msk


#define RTC_CALR_CALP_Pos (15U)
#define RTC_CALR_CALP_Msk (0x1U << RTC_CALR_CALP_Pos)
#define RTC_CALR_CALP RTC_CALR_CALP_Msk
#define RTC_CALR_CALW8_Pos (14U)
#define RTC_CALR_CALW8_Msk (0x1U << RTC_CALR_CALW8_Pos)
#define RTC_CALR_CALW8 RTC_CALR_CALW8_Msk
#define RTC_CALR_CALW16_Pos (13U)
#define RTC_CALR_CALW16_Msk (0x1U << RTC_CALR_CALW16_Pos)
#define RTC_CALR_CALW16 RTC_CALR_CALW16_Msk
#define RTC_CALR_CALM_Pos (0U)
#define RTC_CALR_CALM_Msk (0x1FFU << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM RTC_CALR_CALM_Msk
#define RTC_CALR_CALM_0 (0x001U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_1 (0x002U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_2 (0x004U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_3 (0x008U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_4 (0x010U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_5 (0x020U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_6 (0x040U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_7 (0x080U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_8 (0x100U << RTC_CALR_CALM_Pos)


#define RTC_TAFCR_PC15MODE_Pos (23U)
#define RTC_TAFCR_PC15MODE_Msk (0x1U << RTC_TAFCR_PC15MODE_Pos)
#define RTC_TAFCR_PC15MODE RTC_TAFCR_PC15MODE_Msk
#define RTC_TAFCR_PC15VALUE_Pos (22U)
#define RTC_TAFCR_PC15VALUE_Msk (0x1U << RTC_TAFCR_PC15VALUE_Pos)
#define RTC_TAFCR_PC15VALUE RTC_TAFCR_PC15VALUE_Msk
#define RTC_TAFCR_PC14MODE_Pos (21U)
#define RTC_TAFCR_PC14MODE_Msk (0x1U << RTC_TAFCR_PC14MODE_Pos)
#define RTC_TAFCR_PC14MODE RTC_TAFCR_PC14MODE_Msk
#define RTC_TAFCR_PC14VALUE_Pos (20U)
#define RTC_TAFCR_PC14VALUE_Msk (0x1U << RTC_TAFCR_PC14VALUE_Pos)
#define RTC_TAFCR_PC14VALUE RTC_TAFCR_PC14VALUE_Msk
#define RTC_TAFCR_PC13MODE_Pos (19U)
#define RTC_TAFCR_PC13MODE_Msk (0x1U << RTC_TAFCR_PC13MODE_Pos)
#define RTC_TAFCR_PC13MODE RTC_TAFCR_PC13MODE_Msk
#define RTC_TAFCR_PC13VALUE_Pos (18U)
#define RTC_TAFCR_PC13VALUE_Msk (0x1U << RTC_TAFCR_PC13VALUE_Pos)
#define RTC_TAFCR_PC13VALUE RTC_TAFCR_PC13VALUE_Msk
#define RTC_TAFCR_TAMPPUDIS_Pos (15U)
#define RTC_TAFCR_TAMPPUDIS_Msk (0x1U << RTC_TAFCR_TAMPPUDIS_Pos)
#define RTC_TAFCR_TAMPPUDIS RTC_TAFCR_TAMPPUDIS_Msk
#define RTC_TAFCR_TAMPPRCH_Pos (13U)
#define RTC_TAFCR_TAMPPRCH_Msk (0x3U << RTC_TAFCR_TAMPPRCH_Pos)
#define RTC_TAFCR_TAMPPRCH RTC_TAFCR_TAMPPRCH_Msk
#define RTC_TAFCR_TAMPPRCH_0 (0x1U << RTC_TAFCR_TAMPPRCH_Pos)
#define RTC_TAFCR_TAMPPRCH_1 (0x2U << RTC_TAFCR_TAMPPRCH_Pos)
#define RTC_TAFCR_TAMPFLT_Pos (11U)
#define RTC_TAFCR_TAMPFLT_Msk (0x3U << RTC_TAFCR_TAMPFLT_Pos)
#define RTC_TAFCR_TAMPFLT RTC_TAFCR_TAMPFLT_Msk
#define RTC_TAFCR_TAMPFLT_0 (0x1U << RTC_TAFCR_TAMPFLT_Pos)
#define RTC_TAFCR_TAMPFLT_1 (0x2U << RTC_TAFCR_TAMPFLT_Pos)
#define RTC_TAFCR_TAMPFREQ_Pos (8U)
#define RTC_TAFCR_TAMPFREQ_Msk (0x7U << RTC_TAFCR_TAMPFREQ_Pos)
#define RTC_TAFCR_TAMPFREQ RTC_TAFCR_TAMPFREQ_Msk
#define RTC_TAFCR_TAMPFREQ_0 (0x1U << RTC_TAFCR_TAMPFREQ_Pos)
#define RTC_TAFCR_TAMPFREQ_1 (0x2U << RTC_TAFCR_TAMPFREQ_Pos)
#define RTC_TAFCR_TAMPFREQ_2 (0x4U << RTC_TAFCR_TAMPFREQ_Pos)
#define RTC_TAFCR_TAMPTS_Pos (7U)
#define RTC_TAFCR_TAMPTS_Msk (0x1U << RTC_TAFCR_TAMPTS_Pos)
#define RTC_TAFCR_TAMPTS RTC_TAFCR_TAMPTS_Msk
#define RTC_TAFCR_TAMP3TRG_Pos (6U)
#define RTC_TAFCR_TAMP3TRG_Msk (0x1U << RTC_TAFCR_TAMP3TRG_Pos)
#define RTC_TAFCR_TAMP3TRG RTC_TAFCR_TAMP3TRG_Msk
#define RTC_TAFCR_TAMP3E_Pos (5U)
#define RTC_TAFCR_TAMP3E_Msk (0x1U << RTC_TAFCR_TAMP3E_Pos)
#define RTC_TAFCR_TAMP3E RTC_TAFCR_TAMP3E_Msk
#define RTC_TAFCR_TAMP2TRG_Pos (4U)
#define RTC_TAFCR_TAMP2TRG_Msk (0x1U << RTC_TAFCR_TAMP2TRG_Pos)
#define RTC_TAFCR_TAMP2TRG RTC_TAFCR_TAMP2TRG_Msk
#define RTC_TAFCR_TAMP2E_Pos (3U)
#define RTC_TAFCR_TAMP2E_Msk (0x1U << RTC_TAFCR_TAMP2E_Pos)
#define RTC_TAFCR_TAMP2E RTC_TAFCR_TAMP2E_Msk
#define RTC_TAFCR_TAMPIE_Pos (2U)
#define RTC_TAFCR_TAMPIE_Msk (0x1U << RTC_TAFCR_TAMPIE_Pos)
#define RTC_TAFCR_TAMPIE RTC_TAFCR_TAMPIE_Msk
#define RTC_TAFCR_TAMP1TRG_Pos (1U)
#define RTC_TAFCR_TAMP1TRG_Msk (0x1U << RTC_TAFCR_TAMP1TRG_Pos)
#define RTC_TAFCR_TAMP1TRG RTC_TAFCR_TAMP1TRG_Msk
#define RTC_TAFCR_TAMP1E_Pos (0U)
#define RTC_TAFCR_TAMP1E_Msk (0x1U << RTC_TAFCR_TAMP1E_Pos)
#define RTC_TAFCR_TAMP1E RTC_TAFCR_TAMP1E_Msk


#define RTC_TAFCR_ALARMOUTTYPE RTC_TAFCR_PC13VALUE


#define RTC_ALRMASSR_MASKSS_Pos (24U)
#define RTC_ALRMASSR_MASKSS_Msk (0xFU << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS RTC_ALRMASSR_MASKSS_Msk
#define RTC_ALRMASSR_MASKSS_0 (0x1U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_1 (0x2U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_2 (0x4U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_3 (0x8U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_SS_Pos (0U)
#define RTC_ALRMASSR_SS_Msk (0x7FFFU << RTC_ALRMASSR_SS_Pos)
#define RTC_ALRMASSR_SS RTC_ALRMASSR_SS_Msk


#define RTC_ALRMBSSR_MASKSS_Pos (24U)
#define RTC_ALRMBSSR_MASKSS_Msk (0xFU << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS RTC_ALRMBSSR_MASKSS_Msk
#define RTC_ALRMBSSR_MASKSS_0 (0x1U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_1 (0x2U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_2 (0x4U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_3 (0x8U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_SS_Pos (0U)
#define RTC_ALRMBSSR_SS_Msk (0x7FFFU << RTC_ALRMBSSR_SS_Pos)
#define RTC_ALRMBSSR_SS RTC_ALRMBSSR_SS_Msk


#define RTC_BKP0R_Pos (0U)
#define RTC_BKP0R_Msk (0xFFFFFFFFU << RTC_BKP0R_Pos)
#define RTC_BKP0R RTC_BKP0R_Msk


#define RTC_BKP1R_Pos (0U)
#define RTC_BKP1R_Msk (0xFFFFFFFFU << RTC_BKP1R_Pos)
#define RTC_BKP1R RTC_BKP1R_Msk


#define RTC_BKP2R_Pos (0U)
#define RTC_BKP2R_Msk (0xFFFFFFFFU << RTC_BKP2R_Pos)
#define RTC_BKP2R RTC_BKP2R_Msk


#define RTC_BKP3R_Pos (0U)
#define RTC_BKP3R_Msk (0xFFFFFFFFU << RTC_BKP3R_Pos)
#define RTC_BKP3R RTC_BKP3R_Msk


#define RTC_BKP4R_Pos (0U)
#define RTC_BKP4R_Msk (0xFFFFFFFFU << RTC_BKP4R_Pos)
#define RTC_BKP4R RTC_BKP4R_Msk


#define RTC_BKP5R_Pos (0U)
#define RTC_BKP5R_Msk (0xFFFFFFFFU << RTC_BKP5R_Pos)
#define RTC_BKP5R RTC_BKP5R_Msk


#define RTC_BKP6R_Pos (0U)
#define RTC_BKP6R_Msk (0xFFFFFFFFU << RTC_BKP6R_Pos)
#define RTC_BKP6R RTC_BKP6R_Msk


#define RTC_BKP7R_Pos (0U)
#define RTC_BKP7R_Msk (0xFFFFFFFFU << RTC_BKP7R_Pos)
#define RTC_BKP7R RTC_BKP7R_Msk


#define RTC_BKP8R_Pos (0U)
#define RTC_BKP8R_Msk (0xFFFFFFFFU << RTC_BKP8R_Pos)
#define RTC_BKP8R RTC_BKP8R_Msk


#define RTC_BKP9R_Pos (0U)
#define RTC_BKP9R_Msk (0xFFFFFFFFU << RTC_BKP9R_Pos)
#define RTC_BKP9R RTC_BKP9R_Msk


#define RTC_BKP10R_Pos (0U)
#define RTC_BKP10R_Msk (0xFFFFFFFFU << RTC_BKP10R_Pos)
#define RTC_BKP10R RTC_BKP10R_Msk


#define RTC_BKP11R_Pos (0U)
#define RTC_BKP11R_Msk (0xFFFFFFFFU << RTC_BKP11R_Pos)
#define RTC_BKP11R RTC_BKP11R_Msk


#define RTC_BKP12R_Pos (0U)
#define RTC_BKP12R_Msk (0xFFFFFFFFU << RTC_BKP12R_Pos)
#define RTC_BKP12R RTC_BKP12R_Msk


#define RTC_BKP13R_Pos (0U)
#define RTC_BKP13R_Msk (0xFFFFFFFFU << RTC_BKP13R_Pos)
#define RTC_BKP13R RTC_BKP13R_Msk


#define RTC_BKP14R_Pos (0U)
#define RTC_BKP14R_Msk (0xFFFFFFFFU << RTC_BKP14R_Pos)
#define RTC_BKP14R RTC_BKP14R_Msk


#define RTC_BKP15R_Pos (0U)
#define RTC_BKP15R_Msk (0xFFFFFFFFU << RTC_BKP15R_Pos)
#define RTC_BKP15R RTC_BKP15R_Msk


#define RTC_BKP_NUMBER 16
# 10466 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define SPI_I2S_SUPPORT 
#define SPI_I2S_FULLDUPLEX_SUPPORT 


#define SPI_CR1_CPHA_Pos (0U)
#define SPI_CR1_CPHA_Msk (0x1U << SPI_CR1_CPHA_Pos)
#define SPI_CR1_CPHA SPI_CR1_CPHA_Msk
#define SPI_CR1_CPOL_Pos (1U)
#define SPI_CR1_CPOL_Msk (0x1U << SPI_CR1_CPOL_Pos)
#define SPI_CR1_CPOL SPI_CR1_CPOL_Msk
#define SPI_CR1_MSTR_Pos (2U)
#define SPI_CR1_MSTR_Msk (0x1U << SPI_CR1_MSTR_Pos)
#define SPI_CR1_MSTR SPI_CR1_MSTR_Msk
#define SPI_CR1_BR_Pos (3U)
#define SPI_CR1_BR_Msk (0x7U << SPI_CR1_BR_Pos)
#define SPI_CR1_BR SPI_CR1_BR_Msk
#define SPI_CR1_BR_0 (0x1U << SPI_CR1_BR_Pos)
#define SPI_CR1_BR_1 (0x2U << SPI_CR1_BR_Pos)
#define SPI_CR1_BR_2 (0x4U << SPI_CR1_BR_Pos)
#define SPI_CR1_SPE_Pos (6U)
#define SPI_CR1_SPE_Msk (0x1U << SPI_CR1_SPE_Pos)
#define SPI_CR1_SPE SPI_CR1_SPE_Msk
#define SPI_CR1_LSBFIRST_Pos (7U)
#define SPI_CR1_LSBFIRST_Msk (0x1U << SPI_CR1_LSBFIRST_Pos)
#define SPI_CR1_LSBFIRST SPI_CR1_LSBFIRST_Msk
#define SPI_CR1_SSI_Pos (8U)
#define SPI_CR1_SSI_Msk (0x1U << SPI_CR1_SSI_Pos)
#define SPI_CR1_SSI SPI_CR1_SSI_Msk
#define SPI_CR1_SSM_Pos (9U)
#define SPI_CR1_SSM_Msk (0x1U << SPI_CR1_SSM_Pos)
#define SPI_CR1_SSM SPI_CR1_SSM_Msk
#define SPI_CR1_RXONLY_Pos (10U)
#define SPI_CR1_RXONLY_Msk (0x1U << SPI_CR1_RXONLY_Pos)
#define SPI_CR1_RXONLY SPI_CR1_RXONLY_Msk
#define SPI_CR1_CRCL_Pos (11U)
#define SPI_CR1_CRCL_Msk (0x1U << SPI_CR1_CRCL_Pos)
#define SPI_CR1_CRCL SPI_CR1_CRCL_Msk
#define SPI_CR1_CRCNEXT_Pos (12U)
#define SPI_CR1_CRCNEXT_Msk (0x1U << SPI_CR1_CRCNEXT_Pos)
#define SPI_CR1_CRCNEXT SPI_CR1_CRCNEXT_Msk
#define SPI_CR1_CRCEN_Pos (13U)
#define SPI_CR1_CRCEN_Msk (0x1U << SPI_CR1_CRCEN_Pos)
#define SPI_CR1_CRCEN SPI_CR1_CRCEN_Msk
#define SPI_CR1_BIDIOE_Pos (14U)
#define SPI_CR1_BIDIOE_Msk (0x1U << SPI_CR1_BIDIOE_Pos)
#define SPI_CR1_BIDIOE SPI_CR1_BIDIOE_Msk
#define SPI_CR1_BIDIMODE_Pos (15U)
#define SPI_CR1_BIDIMODE_Msk (0x1U << SPI_CR1_BIDIMODE_Pos)
#define SPI_CR1_BIDIMODE SPI_CR1_BIDIMODE_Msk


#define SPI_CR2_RXDMAEN_Pos (0U)
#define SPI_CR2_RXDMAEN_Msk (0x1U << SPI_CR2_RXDMAEN_Pos)
#define SPI_CR2_RXDMAEN SPI_CR2_RXDMAEN_Msk
#define SPI_CR2_TXDMAEN_Pos (1U)
#define SPI_CR2_TXDMAEN_Msk (0x1U << SPI_CR2_TXDMAEN_Pos)
#define SPI_CR2_TXDMAEN SPI_CR2_TXDMAEN_Msk
#define SPI_CR2_SSOE_Pos (2U)
#define SPI_CR2_SSOE_Msk (0x1U << SPI_CR2_SSOE_Pos)
#define SPI_CR2_SSOE SPI_CR2_SSOE_Msk
#define SPI_CR2_NSSP_Pos (3U)
#define SPI_CR2_NSSP_Msk (0x1U << SPI_CR2_NSSP_Pos)
#define SPI_CR2_NSSP SPI_CR2_NSSP_Msk
#define SPI_CR2_FRF_Pos (4U)
#define SPI_CR2_FRF_Msk (0x1U << SPI_CR2_FRF_Pos)
#define SPI_CR2_FRF SPI_CR2_FRF_Msk
#define SPI_CR2_ERRIE_Pos (5U)
#define SPI_CR2_ERRIE_Msk (0x1U << SPI_CR2_ERRIE_Pos)
#define SPI_CR2_ERRIE SPI_CR2_ERRIE_Msk
#define SPI_CR2_RXNEIE_Pos (6U)
#define SPI_CR2_RXNEIE_Msk (0x1U << SPI_CR2_RXNEIE_Pos)
#define SPI_CR2_RXNEIE SPI_CR2_RXNEIE_Msk
#define SPI_CR2_TXEIE_Pos (7U)
#define SPI_CR2_TXEIE_Msk (0x1U << SPI_CR2_TXEIE_Pos)
#define SPI_CR2_TXEIE SPI_CR2_TXEIE_Msk
#define SPI_CR2_DS_Pos (8U)
#define SPI_CR2_DS_Msk (0xFU << SPI_CR2_DS_Pos)
#define SPI_CR2_DS SPI_CR2_DS_Msk
#define SPI_CR2_DS_0 (0x1U << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_1 (0x2U << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_2 (0x4U << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_3 (0x8U << SPI_CR2_DS_Pos)
#define SPI_CR2_FRXTH_Pos (12U)
#define SPI_CR2_FRXTH_Msk (0x1U << SPI_CR2_FRXTH_Pos)
#define SPI_CR2_FRXTH SPI_CR2_FRXTH_Msk
#define SPI_CR2_LDMARX_Pos (13U)
#define SPI_CR2_LDMARX_Msk (0x1U << SPI_CR2_LDMARX_Pos)
#define SPI_CR2_LDMARX SPI_CR2_LDMARX_Msk
#define SPI_CR2_LDMATX_Pos (14U)
#define SPI_CR2_LDMATX_Msk (0x1U << SPI_CR2_LDMATX_Pos)
#define SPI_CR2_LDMATX SPI_CR2_LDMATX_Msk


#define SPI_SR_RXNE_Pos (0U)
#define SPI_SR_RXNE_Msk (0x1U << SPI_SR_RXNE_Pos)
#define SPI_SR_RXNE SPI_SR_RXNE_Msk
#define SPI_SR_TXE_Pos (1U)
#define SPI_SR_TXE_Msk (0x1U << SPI_SR_TXE_Pos)
#define SPI_SR_TXE SPI_SR_TXE_Msk
#define SPI_SR_CHSIDE_Pos (2U)
#define SPI_SR_CHSIDE_Msk (0x1U << SPI_SR_CHSIDE_Pos)
#define SPI_SR_CHSIDE SPI_SR_CHSIDE_Msk
#define SPI_SR_UDR_Pos (3U)
#define SPI_SR_UDR_Msk (0x1U << SPI_SR_UDR_Pos)
#define SPI_SR_UDR SPI_SR_UDR_Msk
#define SPI_SR_CRCERR_Pos (4U)
#define SPI_SR_CRCERR_Msk (0x1U << SPI_SR_CRCERR_Pos)
#define SPI_SR_CRCERR SPI_SR_CRCERR_Msk
#define SPI_SR_MODF_Pos (5U)
#define SPI_SR_MODF_Msk (0x1U << SPI_SR_MODF_Pos)
#define SPI_SR_MODF SPI_SR_MODF_Msk
#define SPI_SR_OVR_Pos (6U)
#define SPI_SR_OVR_Msk (0x1U << SPI_SR_OVR_Pos)
#define SPI_SR_OVR SPI_SR_OVR_Msk
#define SPI_SR_BSY_Pos (7U)
#define SPI_SR_BSY_Msk (0x1U << SPI_SR_BSY_Pos)
#define SPI_SR_BSY SPI_SR_BSY_Msk
#define SPI_SR_FRE_Pos (8U)
#define SPI_SR_FRE_Msk (0x1U << SPI_SR_FRE_Pos)
#define SPI_SR_FRE SPI_SR_FRE_Msk
#define SPI_SR_FRLVL_Pos (9U)
#define SPI_SR_FRLVL_Msk (0x3U << SPI_SR_FRLVL_Pos)
#define SPI_SR_FRLVL SPI_SR_FRLVL_Msk
#define SPI_SR_FRLVL_0 (0x1U << SPI_SR_FRLVL_Pos)
#define SPI_SR_FRLVL_1 (0x2U << SPI_SR_FRLVL_Pos)
#define SPI_SR_FTLVL_Pos (11U)
#define SPI_SR_FTLVL_Msk (0x3U << SPI_SR_FTLVL_Pos)
#define SPI_SR_FTLVL SPI_SR_FTLVL_Msk
#define SPI_SR_FTLVL_0 (0x1U << SPI_SR_FTLVL_Pos)
#define SPI_SR_FTLVL_1 (0x2U << SPI_SR_FTLVL_Pos)


#define SPI_DR_DR_Pos (0U)
#define SPI_DR_DR_Msk (0xFFFFU << SPI_DR_DR_Pos)
#define SPI_DR_DR SPI_DR_DR_Msk


#define SPI_CRCPR_CRCPOLY_Pos (0U)
#define SPI_CRCPR_CRCPOLY_Msk (0xFFFFU << SPI_CRCPR_CRCPOLY_Pos)
#define SPI_CRCPR_CRCPOLY SPI_CRCPR_CRCPOLY_Msk


#define SPI_RXCRCR_RXCRC_Pos (0U)
#define SPI_RXCRCR_RXCRC_Msk (0xFFFFU << SPI_RXCRCR_RXCRC_Pos)
#define SPI_RXCRCR_RXCRC SPI_RXCRCR_RXCRC_Msk


#define SPI_TXCRCR_TXCRC_Pos (0U)
#define SPI_TXCRCR_TXCRC_Msk (0xFFFFU << SPI_TXCRCR_TXCRC_Pos)
#define SPI_TXCRCR_TXCRC SPI_TXCRCR_TXCRC_Msk


#define SPI_I2SCFGR_CHLEN_Pos (0U)
#define SPI_I2SCFGR_CHLEN_Msk (0x1U << SPI_I2SCFGR_CHLEN_Pos)
#define SPI_I2SCFGR_CHLEN SPI_I2SCFGR_CHLEN_Msk
#define SPI_I2SCFGR_DATLEN_Pos (1U)
#define SPI_I2SCFGR_DATLEN_Msk (0x3U << SPI_I2SCFGR_DATLEN_Pos)
#define SPI_I2SCFGR_DATLEN SPI_I2SCFGR_DATLEN_Msk
#define SPI_I2SCFGR_DATLEN_0 (0x1U << SPI_I2SCFGR_DATLEN_Pos)
#define SPI_I2SCFGR_DATLEN_1 (0x2U << SPI_I2SCFGR_DATLEN_Pos)
#define SPI_I2SCFGR_CKPOL_Pos (3U)
#define SPI_I2SCFGR_CKPOL_Msk (0x1U << SPI_I2SCFGR_CKPOL_Pos)
#define SPI_I2SCFGR_CKPOL SPI_I2SCFGR_CKPOL_Msk
#define SPI_I2SCFGR_I2SSTD_Pos (4U)
#define SPI_I2SCFGR_I2SSTD_Msk (0x3U << SPI_I2SCFGR_I2SSTD_Pos)
#define SPI_I2SCFGR_I2SSTD SPI_I2SCFGR_I2SSTD_Msk
#define SPI_I2SCFGR_I2SSTD_0 (0x1U << SPI_I2SCFGR_I2SSTD_Pos)
#define SPI_I2SCFGR_I2SSTD_1 (0x2U << SPI_I2SCFGR_I2SSTD_Pos)
#define SPI_I2SCFGR_PCMSYNC_Pos (7U)
#define SPI_I2SCFGR_PCMSYNC_Msk (0x1U << SPI_I2SCFGR_PCMSYNC_Pos)
#define SPI_I2SCFGR_PCMSYNC SPI_I2SCFGR_PCMSYNC_Msk
#define SPI_I2SCFGR_I2SCFG_Pos (8U)
#define SPI_I2SCFGR_I2SCFG_Msk (0x3U << SPI_I2SCFGR_I2SCFG_Pos)
#define SPI_I2SCFGR_I2SCFG SPI_I2SCFGR_I2SCFG_Msk
#define SPI_I2SCFGR_I2SCFG_0 (0x1U << SPI_I2SCFGR_I2SCFG_Pos)
#define SPI_I2SCFGR_I2SCFG_1 (0x2U << SPI_I2SCFGR_I2SCFG_Pos)
#define SPI_I2SCFGR_I2SE_Pos (10U)
#define SPI_I2SCFGR_I2SE_Msk (0x1U << SPI_I2SCFGR_I2SE_Pos)
#define SPI_I2SCFGR_I2SE SPI_I2SCFGR_I2SE_Msk
#define SPI_I2SCFGR_I2SMOD_Pos (11U)
#define SPI_I2SCFGR_I2SMOD_Msk (0x1U << SPI_I2SCFGR_I2SMOD_Pos)
#define SPI_I2SCFGR_I2SMOD SPI_I2SCFGR_I2SMOD_Msk


#define SPI_I2SPR_I2SDIV_Pos (0U)
#define SPI_I2SPR_I2SDIV_Msk (0xFFU << SPI_I2SPR_I2SDIV_Pos)
#define SPI_I2SPR_I2SDIV SPI_I2SPR_I2SDIV_Msk
#define SPI_I2SPR_ODD_Pos (8U)
#define SPI_I2SPR_ODD_Msk (0x1U << SPI_I2SPR_ODD_Pos)
#define SPI_I2SPR_ODD SPI_I2SPR_ODD_Msk
#define SPI_I2SPR_MCKOE_Pos (9U)
#define SPI_I2SPR_MCKOE_Msk (0x1U << SPI_I2SPR_MCKOE_Pos)
#define SPI_I2SPR_MCKOE SPI_I2SPR_MCKOE_Msk







#define SYSCFG_CFGR1_MEM_MODE_Pos (0U)
#define SYSCFG_CFGR1_MEM_MODE_Msk (0x3U << SYSCFG_CFGR1_MEM_MODE_Pos)
#define SYSCFG_CFGR1_MEM_MODE SYSCFG_CFGR1_MEM_MODE_Msk
#define SYSCFG_CFGR1_MEM_MODE_0 (0x00000001U)
#define SYSCFG_CFGR1_MEM_MODE_1 (0x00000002U)
#define SYSCFG_CFGR1_USB_IT_RMP_Pos (5U)
#define SYSCFG_CFGR1_USB_IT_RMP_Msk (0x1U << SYSCFG_CFGR1_USB_IT_RMP_Pos)
#define SYSCFG_CFGR1_USB_IT_RMP SYSCFG_CFGR1_USB_IT_RMP_Msk
#define SYSCFG_CFGR1_TIM1_ITR3_RMP_Pos (6U)
#define SYSCFG_CFGR1_TIM1_ITR3_RMP_Msk (0x1U << SYSCFG_CFGR1_TIM1_ITR3_RMP_Pos)
#define SYSCFG_CFGR1_TIM1_ITR3_RMP SYSCFG_CFGR1_TIM1_ITR3_RMP_Msk
#define SYSCFG_CFGR1_DAC1_TRIG1_RMP_Pos (7U)
#define SYSCFG_CFGR1_DAC1_TRIG1_RMP_Msk (0x1U << SYSCFG_CFGR1_DAC1_TRIG1_RMP_Pos)
#define SYSCFG_CFGR1_DAC1_TRIG1_RMP SYSCFG_CFGR1_DAC1_TRIG1_RMP_Msk
#define SYSCFG_CFGR1_DMA_RMP_Pos (8U)
#define SYSCFG_CFGR1_DMA_RMP_Msk (0x79U << SYSCFG_CFGR1_DMA_RMP_Pos)
#define SYSCFG_CFGR1_DMA_RMP SYSCFG_CFGR1_DMA_RMP_Msk
#define SYSCFG_CFGR1_ADC24_DMA_RMP_Pos (8U)
#define SYSCFG_CFGR1_ADC24_DMA_RMP_Msk (0x1U << SYSCFG_CFGR1_ADC24_DMA_RMP_Pos)
#define SYSCFG_CFGR1_ADC24_DMA_RMP SYSCFG_CFGR1_ADC24_DMA_RMP_Msk
#define SYSCFG_CFGR1_TIM16_DMA_RMP_Pos (11U)
#define SYSCFG_CFGR1_TIM16_DMA_RMP_Msk (0x1U << SYSCFG_CFGR1_TIM16_DMA_RMP_Pos)
#define SYSCFG_CFGR1_TIM16_DMA_RMP SYSCFG_CFGR1_TIM16_DMA_RMP_Msk
#define SYSCFG_CFGR1_TIM17_DMA_RMP_Pos (12U)
#define SYSCFG_CFGR1_TIM17_DMA_RMP_Msk (0x1U << SYSCFG_CFGR1_TIM17_DMA_RMP_Pos)
#define SYSCFG_CFGR1_TIM17_DMA_RMP SYSCFG_CFGR1_TIM17_DMA_RMP_Msk
#define SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Pos (13U)
#define SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Msk (0x1U << SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Pos)
#define SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP_Msk
#define SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Pos (14U)
#define SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Msk (0x1U << SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Pos)
#define SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP_Msk
#define SYSCFG_CFGR1_I2C_PB6_FMP_Pos (16U)
#define SYSCFG_CFGR1_I2C_PB6_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C_PB6_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB6_FMP SYSCFG_CFGR1_I2C_PB6_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB7_FMP_Pos (17U)
#define SYSCFG_CFGR1_I2C_PB7_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C_PB7_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB7_FMP SYSCFG_CFGR1_I2C_PB7_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB8_FMP_Pos (18U)
#define SYSCFG_CFGR1_I2C_PB8_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C_PB8_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB8_FMP SYSCFG_CFGR1_I2C_PB8_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB9_FMP_Pos (19U)
#define SYSCFG_CFGR1_I2C_PB9_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C_PB9_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB9_FMP SYSCFG_CFGR1_I2C_PB9_FMP_Msk
#define SYSCFG_CFGR1_I2C1_FMP_Pos (20U)
#define SYSCFG_CFGR1_I2C1_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C1_FMP_Pos)
#define SYSCFG_CFGR1_I2C1_FMP SYSCFG_CFGR1_I2C1_FMP_Msk
#define SYSCFG_CFGR1_I2C2_FMP_Pos (21U)
#define SYSCFG_CFGR1_I2C2_FMP_Msk (0x1U << SYSCFG_CFGR1_I2C2_FMP_Pos)
#define SYSCFG_CFGR1_I2C2_FMP SYSCFG_CFGR1_I2C2_FMP_Msk
#define SYSCFG_CFGR1_ENCODER_MODE_Pos (22U)
#define SYSCFG_CFGR1_ENCODER_MODE_Msk (0x3U << SYSCFG_CFGR1_ENCODER_MODE_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE SYSCFG_CFGR1_ENCODER_MODE_Msk
#define SYSCFG_CFGR1_ENCODER_MODE_0 (0x1U << SYSCFG_CFGR1_ENCODER_MODE_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE_1 (0x2U << SYSCFG_CFGR1_ENCODER_MODE_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM2_Pos (22U)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM2_Msk (0x1U << SYSCFG_CFGR1_ENCODER_MODE_TIM2_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM2 SYSCFG_CFGR1_ENCODER_MODE_TIM2_Msk
#define SYSCFG_CFGR1_ENCODER_MODE_TIM3_Pos (23U)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM3_Msk (0x1U << SYSCFG_CFGR1_ENCODER_MODE_TIM3_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM3 SYSCFG_CFGR1_ENCODER_MODE_TIM3_Msk
#define SYSCFG_CFGR1_ENCODER_MODE_TIM4_Pos (22U)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM4_Msk (0x3U << SYSCFG_CFGR1_ENCODER_MODE_TIM4_Pos)
#define SYSCFG_CFGR1_ENCODER_MODE_TIM4 SYSCFG_CFGR1_ENCODER_MODE_TIM4_Msk
#define SYSCFG_CFGR1_FPU_IE_Pos (26U)
#define SYSCFG_CFGR1_FPU_IE_Msk (0x3FU << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE SYSCFG_CFGR1_FPU_IE_Msk
#define SYSCFG_CFGR1_FPU_IE_0 (0x01U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_1 (0x02U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_2 (0x04U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_3 (0x08U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_4 (0x10U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_5 (0x20U << SYSCFG_CFGR1_FPU_IE_Pos)


#define SYSCFG_RCR_PAGE0_Pos (0U)
#define SYSCFG_RCR_PAGE0_Msk (0x1U << SYSCFG_RCR_PAGE0_Pos)
#define SYSCFG_RCR_PAGE0 SYSCFG_RCR_PAGE0_Msk
#define SYSCFG_RCR_PAGE1_Pos (1U)
#define SYSCFG_RCR_PAGE1_Msk (0x1U << SYSCFG_RCR_PAGE1_Pos)
#define SYSCFG_RCR_PAGE1 SYSCFG_RCR_PAGE1_Msk
#define SYSCFG_RCR_PAGE2_Pos (2U)
#define SYSCFG_RCR_PAGE2_Msk (0x1U << SYSCFG_RCR_PAGE2_Pos)
#define SYSCFG_RCR_PAGE2 SYSCFG_RCR_PAGE2_Msk
#define SYSCFG_RCR_PAGE3_Pos (3U)
#define SYSCFG_RCR_PAGE3_Msk (0x1U << SYSCFG_RCR_PAGE3_Pos)
#define SYSCFG_RCR_PAGE3 SYSCFG_RCR_PAGE3_Msk
#define SYSCFG_RCR_PAGE4_Pos (4U)
#define SYSCFG_RCR_PAGE4_Msk (0x1U << SYSCFG_RCR_PAGE4_Pos)
#define SYSCFG_RCR_PAGE4 SYSCFG_RCR_PAGE4_Msk
#define SYSCFG_RCR_PAGE5_Pos (5U)
#define SYSCFG_RCR_PAGE5_Msk (0x1U << SYSCFG_RCR_PAGE5_Pos)
#define SYSCFG_RCR_PAGE5 SYSCFG_RCR_PAGE5_Msk
#define SYSCFG_RCR_PAGE6_Pos (6U)
#define SYSCFG_RCR_PAGE6_Msk (0x1U << SYSCFG_RCR_PAGE6_Pos)
#define SYSCFG_RCR_PAGE6 SYSCFG_RCR_PAGE6_Msk
#define SYSCFG_RCR_PAGE7_Pos (7U)
#define SYSCFG_RCR_PAGE7_Msk (0x1U << SYSCFG_RCR_PAGE7_Pos)
#define SYSCFG_RCR_PAGE7 SYSCFG_RCR_PAGE7_Msk


#define SYSCFG_EXTICR1_EXTI0_Pos (0U)
#define SYSCFG_EXTICR1_EXTI0_Msk (0xFU << SYSCFG_EXTICR1_EXTI0_Pos)
#define SYSCFG_EXTICR1_EXTI0 SYSCFG_EXTICR1_EXTI0_Msk
#define SYSCFG_EXTICR1_EXTI1_Pos (4U)
#define SYSCFG_EXTICR1_EXTI1_Msk (0xFU << SYSCFG_EXTICR1_EXTI1_Pos)
#define SYSCFG_EXTICR1_EXTI1 SYSCFG_EXTICR1_EXTI1_Msk
#define SYSCFG_EXTICR1_EXTI2_Pos (8U)
#define SYSCFG_EXTICR1_EXTI2_Msk (0xFU << SYSCFG_EXTICR1_EXTI2_Pos)
#define SYSCFG_EXTICR1_EXTI2 SYSCFG_EXTICR1_EXTI2_Msk
#define SYSCFG_EXTICR1_EXTI3_Pos (12U)
#define SYSCFG_EXTICR1_EXTI3_Msk (0xFU << SYSCFG_EXTICR1_EXTI3_Pos)
#define SYSCFG_EXTICR1_EXTI3 SYSCFG_EXTICR1_EXTI3_Msk




#define SYSCFG_EXTICR1_EXTI0_PA (0x00000000U)
#define SYSCFG_EXTICR1_EXTI0_PB (0x00000001U)
#define SYSCFG_EXTICR1_EXTI0_PC (0x00000002U)
#define SYSCFG_EXTICR1_EXTI0_PD (0x00000003U)
#define SYSCFG_EXTICR1_EXTI0_PE (0x00000004U)
#define SYSCFG_EXTICR1_EXTI0_PF (0x00000005U)




#define SYSCFG_EXTICR1_EXTI1_PA (0x00000000U)
#define SYSCFG_EXTICR1_EXTI1_PB (0x00000010U)
#define SYSCFG_EXTICR1_EXTI1_PC (0x00000020U)
#define SYSCFG_EXTICR1_EXTI1_PD (0x00000030U)
#define SYSCFG_EXTICR1_EXTI1_PE (0x00000040U)
#define SYSCFG_EXTICR1_EXTI1_PF (0x00000050U)




#define SYSCFG_EXTICR1_EXTI2_PA (0x00000000U)
#define SYSCFG_EXTICR1_EXTI2_PB (0x00000100U)
#define SYSCFG_EXTICR1_EXTI2_PC (0x00000200U)
#define SYSCFG_EXTICR1_EXTI2_PD (0x00000300U)
#define SYSCFG_EXTICR1_EXTI2_PE (0x00000400U)
#define SYSCFG_EXTICR1_EXTI2_PF (0x00000500U)




#define SYSCFG_EXTICR1_EXTI3_PA (0x00000000U)
#define SYSCFG_EXTICR1_EXTI3_PB (0x00001000U)
#define SYSCFG_EXTICR1_EXTI3_PC (0x00002000U)
#define SYSCFG_EXTICR1_EXTI3_PD (0x00003000U)
#define SYSCFG_EXTICR1_EXTI3_PE (0x00004000U)


#define SYSCFG_EXTICR2_EXTI4_Pos (0U)
#define SYSCFG_EXTICR2_EXTI4_Msk (0xFU << SYSCFG_EXTICR2_EXTI4_Pos)
#define SYSCFG_EXTICR2_EXTI4 SYSCFG_EXTICR2_EXTI4_Msk
#define SYSCFG_EXTICR2_EXTI5_Pos (4U)
#define SYSCFG_EXTICR2_EXTI5_Msk (0xFU << SYSCFG_EXTICR2_EXTI5_Pos)
#define SYSCFG_EXTICR2_EXTI5 SYSCFG_EXTICR2_EXTI5_Msk
#define SYSCFG_EXTICR2_EXTI6_Pos (8U)
#define SYSCFG_EXTICR2_EXTI6_Msk (0xFU << SYSCFG_EXTICR2_EXTI6_Pos)
#define SYSCFG_EXTICR2_EXTI6 SYSCFG_EXTICR2_EXTI6_Msk
#define SYSCFG_EXTICR2_EXTI7_Pos (12U)
#define SYSCFG_EXTICR2_EXTI7_Msk (0xFU << SYSCFG_EXTICR2_EXTI7_Pos)
#define SYSCFG_EXTICR2_EXTI7 SYSCFG_EXTICR2_EXTI7_Msk




#define SYSCFG_EXTICR2_EXTI4_PA (0x00000000U)
#define SYSCFG_EXTICR2_EXTI4_PB (0x00000001U)
#define SYSCFG_EXTICR2_EXTI4_PC (0x00000002U)
#define SYSCFG_EXTICR2_EXTI4_PD (0x00000003U)
#define SYSCFG_EXTICR2_EXTI4_PE (0x00000004U)
#define SYSCFG_EXTICR2_EXTI4_PF (0x00000005U)




#define SYSCFG_EXTICR2_EXTI5_PA (0x00000000U)
#define SYSCFG_EXTICR2_EXTI5_PB (0x00000010U)
#define SYSCFG_EXTICR2_EXTI5_PC (0x00000020U)
#define SYSCFG_EXTICR2_EXTI5_PD (0x00000030U)
#define SYSCFG_EXTICR2_EXTI5_PE (0x00000040U)
#define SYSCFG_EXTICR2_EXTI5_PF (0x00000050U)




#define SYSCFG_EXTICR2_EXTI6_PA (0x00000000U)
#define SYSCFG_EXTICR2_EXTI6_PB (0x00000100U)
#define SYSCFG_EXTICR2_EXTI6_PC (0x00000200U)
#define SYSCFG_EXTICR2_EXTI6_PD (0x00000300U)
#define SYSCFG_EXTICR2_EXTI6_PE (0x00000400U)
#define SYSCFG_EXTICR2_EXTI6_PF (0x00000500U)




#define SYSCFG_EXTICR2_EXTI7_PA (0x00000000U)
#define SYSCFG_EXTICR2_EXTI7_PB (0x00001000U)
#define SYSCFG_EXTICR2_EXTI7_PC (0x00002000U)
#define SYSCFG_EXTICR2_EXTI7_PD (0x00003000U)
#define SYSCFG_EXTICR2_EXTI7_PE (0x00004000U)


#define SYSCFG_EXTICR3_EXTI8_Pos (0U)
#define SYSCFG_EXTICR3_EXTI8_Msk (0xFU << SYSCFG_EXTICR3_EXTI8_Pos)
#define SYSCFG_EXTICR3_EXTI8 SYSCFG_EXTICR3_EXTI8_Msk
#define SYSCFG_EXTICR3_EXTI9_Pos (4U)
#define SYSCFG_EXTICR3_EXTI9_Msk (0xFU << SYSCFG_EXTICR3_EXTI9_Pos)
#define SYSCFG_EXTICR3_EXTI9 SYSCFG_EXTICR3_EXTI9_Msk
#define SYSCFG_EXTICR3_EXTI10_Pos (8U)
#define SYSCFG_EXTICR3_EXTI10_Msk (0xFU << SYSCFG_EXTICR3_EXTI10_Pos)
#define SYSCFG_EXTICR3_EXTI10 SYSCFG_EXTICR3_EXTI10_Msk
#define SYSCFG_EXTICR3_EXTI11_Pos (12U)
#define SYSCFG_EXTICR3_EXTI11_Msk (0xFU << SYSCFG_EXTICR3_EXTI11_Pos)
#define SYSCFG_EXTICR3_EXTI11 SYSCFG_EXTICR3_EXTI11_Msk




#define SYSCFG_EXTICR3_EXTI8_PA (0x00000000U)
#define SYSCFG_EXTICR3_EXTI8_PB (0x00000001U)
#define SYSCFG_EXTICR3_EXTI8_PC (0x00000002U)
#define SYSCFG_EXTICR3_EXTI8_PD (0x00000003U)
#define SYSCFG_EXTICR3_EXTI8_PE (0x00000004U)




#define SYSCFG_EXTICR3_EXTI9_PA (0x00000000U)
#define SYSCFG_EXTICR3_EXTI9_PB (0x00000010U)
#define SYSCFG_EXTICR3_EXTI9_PC (0x00000020U)
#define SYSCFG_EXTICR3_EXTI9_PD (0x00000030U)
#define SYSCFG_EXTICR3_EXTI9_PE (0x00000040U)
#define SYSCFG_EXTICR3_EXTI9_PF (0x00000050U)




#define SYSCFG_EXTICR3_EXTI10_PA (0x00000000U)
#define SYSCFG_EXTICR3_EXTI10_PB (0x00000100U)
#define SYSCFG_EXTICR3_EXTI10_PC (0x00000200U)
#define SYSCFG_EXTICR3_EXTI10_PD (0x00000300U)
#define SYSCFG_EXTICR3_EXTI10_PE (0x00000400U)
#define SYSCFG_EXTICR3_EXTI10_PF (0x00000500U)




#define SYSCFG_EXTICR3_EXTI11_PA (0x00000000U)
#define SYSCFG_EXTICR3_EXTI11_PB (0x00001000U)
#define SYSCFG_EXTICR3_EXTI11_PC (0x00002000U)
#define SYSCFG_EXTICR3_EXTI11_PD (0x00003000U)
#define SYSCFG_EXTICR3_EXTI11_PE (0x00004000U)


#define SYSCFG_EXTICR4_EXTI12_Pos (0U)
#define SYSCFG_EXTICR4_EXTI12_Msk (0xFU << SYSCFG_EXTICR4_EXTI12_Pos)
#define SYSCFG_EXTICR4_EXTI12 SYSCFG_EXTICR4_EXTI12_Msk
#define SYSCFG_EXTICR4_EXTI13_Pos (4U)
#define SYSCFG_EXTICR4_EXTI13_Msk (0xFU << SYSCFG_EXTICR4_EXTI13_Pos)
#define SYSCFG_EXTICR4_EXTI13 SYSCFG_EXTICR4_EXTI13_Msk
#define SYSCFG_EXTICR4_EXTI14_Pos (8U)
#define SYSCFG_EXTICR4_EXTI14_Msk (0xFU << SYSCFG_EXTICR4_EXTI14_Pos)
#define SYSCFG_EXTICR4_EXTI14 SYSCFG_EXTICR4_EXTI14_Msk
#define SYSCFG_EXTICR4_EXTI15_Pos (12U)
#define SYSCFG_EXTICR4_EXTI15_Msk (0xFU << SYSCFG_EXTICR4_EXTI15_Pos)
#define SYSCFG_EXTICR4_EXTI15 SYSCFG_EXTICR4_EXTI15_Msk




#define SYSCFG_EXTICR4_EXTI12_PA (0x00000000U)
#define SYSCFG_EXTICR4_EXTI12_PB (0x00000001U)
#define SYSCFG_EXTICR4_EXTI12_PC (0x00000002U)
#define SYSCFG_EXTICR4_EXTI12_PD (0x00000003U)
#define SYSCFG_EXTICR4_EXTI12_PE (0x00000004U)




#define SYSCFG_EXTICR4_EXTI13_PA (0x00000000U)
#define SYSCFG_EXTICR4_EXTI13_PB (0x00000010U)
#define SYSCFG_EXTICR4_EXTI13_PC (0x00000020U)
#define SYSCFG_EXTICR4_EXTI13_PD (0x00000030U)
#define SYSCFG_EXTICR4_EXTI13_PE (0x00000040U)




#define SYSCFG_EXTICR4_EXTI14_PA (0x00000000U)
#define SYSCFG_EXTICR4_EXTI14_PB (0x00000100U)
#define SYSCFG_EXTICR4_EXTI14_PC (0x00000200U)
#define SYSCFG_EXTICR4_EXTI14_PD (0x00000300U)
#define SYSCFG_EXTICR4_EXTI14_PE (0x00000400U)




#define SYSCFG_EXTICR4_EXTI15_PA (0x00000000U)
#define SYSCFG_EXTICR4_EXTI15_PB (0x00001000U)
#define SYSCFG_EXTICR4_EXTI15_PC (0x00002000U)
#define SYSCFG_EXTICR4_EXTI15_PD (0x00003000U)
#define SYSCFG_EXTICR4_EXTI15_PE (0x00004000U)


#define SYSCFG_CFGR2_LOCKUP_LOCK_Pos (0U)
#define SYSCFG_CFGR2_LOCKUP_LOCK_Msk (0x1U << SYSCFG_CFGR2_LOCKUP_LOCK_Pos)
#define SYSCFG_CFGR2_LOCKUP_LOCK SYSCFG_CFGR2_LOCKUP_LOCK_Msk
#define SYSCFG_CFGR2_SRAM_PARITY_LOCK_Pos (1U)
#define SYSCFG_CFGR2_SRAM_PARITY_LOCK_Msk (0x1U << SYSCFG_CFGR2_SRAM_PARITY_LOCK_Pos)
#define SYSCFG_CFGR2_SRAM_PARITY_LOCK SYSCFG_CFGR2_SRAM_PARITY_LOCK_Msk
#define SYSCFG_CFGR2_PVD_LOCK_Pos (2U)
#define SYSCFG_CFGR2_PVD_LOCK_Msk (0x1U << SYSCFG_CFGR2_PVD_LOCK_Pos)
#define SYSCFG_CFGR2_PVD_LOCK SYSCFG_CFGR2_PVD_LOCK_Msk
#define SYSCFG_CFGR2_BYP_ADDR_PAR_Pos (4U)
#define SYSCFG_CFGR2_BYP_ADDR_PAR_Msk (0x1U << SYSCFG_CFGR2_BYP_ADDR_PAR_Pos)
#define SYSCFG_CFGR2_BYP_ADDR_PAR SYSCFG_CFGR2_BYP_ADDR_PAR_Msk
#define SYSCFG_CFGR2_SRAM_PE_Pos (8U)
#define SYSCFG_CFGR2_SRAM_PE_Msk (0x1U << SYSCFG_CFGR2_SRAM_PE_Pos)
#define SYSCFG_CFGR2_SRAM_PE SYSCFG_CFGR2_SRAM_PE_Msk







#define TIM_CR1_CEN_Pos (0U)
#define TIM_CR1_CEN_Msk (0x1U << TIM_CR1_CEN_Pos)
#define TIM_CR1_CEN TIM_CR1_CEN_Msk
#define TIM_CR1_UDIS_Pos (1U)
#define TIM_CR1_UDIS_Msk (0x1U << TIM_CR1_UDIS_Pos)
#define TIM_CR1_UDIS TIM_CR1_UDIS_Msk
#define TIM_CR1_URS_Pos (2U)
#define TIM_CR1_URS_Msk (0x1U << TIM_CR1_URS_Pos)
#define TIM_CR1_URS TIM_CR1_URS_Msk
#define TIM_CR1_OPM_Pos (3U)
#define TIM_CR1_OPM_Msk (0x1U << TIM_CR1_OPM_Pos)
#define TIM_CR1_OPM TIM_CR1_OPM_Msk
#define TIM_CR1_DIR_Pos (4U)
#define TIM_CR1_DIR_Msk (0x1U << TIM_CR1_DIR_Pos)
#define TIM_CR1_DIR TIM_CR1_DIR_Msk

#define TIM_CR1_CMS_Pos (5U)
#define TIM_CR1_CMS_Msk (0x3U << TIM_CR1_CMS_Pos)
#define TIM_CR1_CMS TIM_CR1_CMS_Msk
#define TIM_CR1_CMS_0 (0x1U << TIM_CR1_CMS_Pos)
#define TIM_CR1_CMS_1 (0x2U << TIM_CR1_CMS_Pos)

#define TIM_CR1_ARPE_Pos (7U)
#define TIM_CR1_ARPE_Msk (0x1U << TIM_CR1_ARPE_Pos)
#define TIM_CR1_ARPE TIM_CR1_ARPE_Msk

#define TIM_CR1_CKD_Pos (8U)
#define TIM_CR1_CKD_Msk (0x3U << TIM_CR1_CKD_Pos)
#define TIM_CR1_CKD TIM_CR1_CKD_Msk
#define TIM_CR1_CKD_0 (0x1U << TIM_CR1_CKD_Pos)
#define TIM_CR1_CKD_1 (0x2U << TIM_CR1_CKD_Pos)

#define TIM_CR1_UIFREMAP_Pos (11U)
#define TIM_CR1_UIFREMAP_Msk (0x1U << TIM_CR1_UIFREMAP_Pos)
#define TIM_CR1_UIFREMAP TIM_CR1_UIFREMAP_Msk


#define TIM_CR2_CCPC_Pos (0U)
#define TIM_CR2_CCPC_Msk (0x1U << TIM_CR2_CCPC_Pos)
#define TIM_CR2_CCPC TIM_CR2_CCPC_Msk
#define TIM_CR2_CCUS_Pos (2U)
#define TIM_CR2_CCUS_Msk (0x1U << TIM_CR2_CCUS_Pos)
#define TIM_CR2_CCUS TIM_CR2_CCUS_Msk
#define TIM_CR2_CCDS_Pos (3U)
#define TIM_CR2_CCDS_Msk (0x1U << TIM_CR2_CCDS_Pos)
#define TIM_CR2_CCDS TIM_CR2_CCDS_Msk

#define TIM_CR2_MMS_Pos (4U)
#define TIM_CR2_MMS_Msk (0x7U << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS TIM_CR2_MMS_Msk
#define TIM_CR2_MMS_0 (0x1U << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS_1 (0x2U << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS_2 (0x4U << TIM_CR2_MMS_Pos)

#define TIM_CR2_TI1S_Pos (7U)
#define TIM_CR2_TI1S_Msk (0x1U << TIM_CR2_TI1S_Pos)
#define TIM_CR2_TI1S TIM_CR2_TI1S_Msk
#define TIM_CR2_OIS1_Pos (8U)
#define TIM_CR2_OIS1_Msk (0x1U << TIM_CR2_OIS1_Pos)
#define TIM_CR2_OIS1 TIM_CR2_OIS1_Msk
#define TIM_CR2_OIS1N_Pos (9U)
#define TIM_CR2_OIS1N_Msk (0x1U << TIM_CR2_OIS1N_Pos)
#define TIM_CR2_OIS1N TIM_CR2_OIS1N_Msk
#define TIM_CR2_OIS2_Pos (10U)
#define TIM_CR2_OIS2_Msk (0x1U << TIM_CR2_OIS2_Pos)
#define TIM_CR2_OIS2 TIM_CR2_OIS2_Msk
#define TIM_CR2_OIS2N_Pos (11U)
#define TIM_CR2_OIS2N_Msk (0x1U << TIM_CR2_OIS2N_Pos)
#define TIM_CR2_OIS2N TIM_CR2_OIS2N_Msk
#define TIM_CR2_OIS3_Pos (12U)
#define TIM_CR2_OIS3_Msk (0x1U << TIM_CR2_OIS3_Pos)
#define TIM_CR2_OIS3 TIM_CR2_OIS3_Msk
#define TIM_CR2_OIS3N_Pos (13U)
#define TIM_CR2_OIS3N_Msk (0x1U << TIM_CR2_OIS3N_Pos)
#define TIM_CR2_OIS3N TIM_CR2_OIS3N_Msk
#define TIM_CR2_OIS4_Pos (14U)
#define TIM_CR2_OIS4_Msk (0x1U << TIM_CR2_OIS4_Pos)
#define TIM_CR2_OIS4 TIM_CR2_OIS4_Msk

#define TIM_CR2_OIS5_Pos (16U)
#define TIM_CR2_OIS5_Msk (0x1U << TIM_CR2_OIS5_Pos)
#define TIM_CR2_OIS5 TIM_CR2_OIS5_Msk
#define TIM_CR2_OIS6_Pos (18U)
#define TIM_CR2_OIS6_Msk (0x1U << TIM_CR2_OIS6_Pos)
#define TIM_CR2_OIS6 TIM_CR2_OIS6_Msk

#define TIM_CR2_MMS2_Pos (20U)
#define TIM_CR2_MMS2_Msk (0xFU << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2 TIM_CR2_MMS2_Msk
#define TIM_CR2_MMS2_0 (0x1U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_1 (0x2U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_2 (0x4U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_3 (0x8U << TIM_CR2_MMS2_Pos)


#define TIM_SMCR_SMS_Pos (0U)
#define TIM_SMCR_SMS_Msk (0x10007U << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_SMS TIM_SMCR_SMS_Msk
#define TIM_SMCR_SMS_0 (0x00000001U)
#define TIM_SMCR_SMS_1 (0x00000002U)
#define TIM_SMCR_SMS_2 (0x00000004U)
#define TIM_SMCR_SMS_3 (0x00010000U)

#define TIM_SMCR_OCCS_Pos (3U)
#define TIM_SMCR_OCCS_Msk (0x1U << TIM_SMCR_OCCS_Pos)
#define TIM_SMCR_OCCS TIM_SMCR_OCCS_Msk

#define TIM_SMCR_TS_Pos (4U)
#define TIM_SMCR_TS_Msk (0x7U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS TIM_SMCR_TS_Msk
#define TIM_SMCR_TS_0 (0x1U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_1 (0x2U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_2 (0x4U << TIM_SMCR_TS_Pos)

#define TIM_SMCR_MSM_Pos (7U)
#define TIM_SMCR_MSM_Msk (0x1U << TIM_SMCR_MSM_Pos)
#define TIM_SMCR_MSM TIM_SMCR_MSM_Msk

#define TIM_SMCR_ETF_Pos (8U)
#define TIM_SMCR_ETF_Msk (0xFU << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF TIM_SMCR_ETF_Msk
#define TIM_SMCR_ETF_0 (0x1U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_1 (0x2U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_2 (0x4U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_3 (0x8U << TIM_SMCR_ETF_Pos)

#define TIM_SMCR_ETPS_Pos (12U)
#define TIM_SMCR_ETPS_Msk (0x3U << TIM_SMCR_ETPS_Pos)
#define TIM_SMCR_ETPS TIM_SMCR_ETPS_Msk
#define TIM_SMCR_ETPS_0 (0x1U << TIM_SMCR_ETPS_Pos)
#define TIM_SMCR_ETPS_1 (0x2U << TIM_SMCR_ETPS_Pos)

#define TIM_SMCR_ECE_Pos (14U)
#define TIM_SMCR_ECE_Msk (0x1U << TIM_SMCR_ECE_Pos)
#define TIM_SMCR_ECE TIM_SMCR_ECE_Msk
#define TIM_SMCR_ETP_Pos (15U)
#define TIM_SMCR_ETP_Msk (0x1U << TIM_SMCR_ETP_Pos)
#define TIM_SMCR_ETP TIM_SMCR_ETP_Msk


#define TIM_DIER_UIE_Pos (0U)
#define TIM_DIER_UIE_Msk (0x1U << TIM_DIER_UIE_Pos)
#define TIM_DIER_UIE TIM_DIER_UIE_Msk
#define TIM_DIER_CC1IE_Pos (1U)
#define TIM_DIER_CC1IE_Msk (0x1U << TIM_DIER_CC1IE_Pos)
#define TIM_DIER_CC1IE TIM_DIER_CC1IE_Msk
#define TIM_DIER_CC2IE_Pos (2U)
#define TIM_DIER_CC2IE_Msk (0x1U << TIM_DIER_CC2IE_Pos)
#define TIM_DIER_CC2IE TIM_DIER_CC2IE_Msk
#define TIM_DIER_CC3IE_Pos (3U)
#define TIM_DIER_CC3IE_Msk (0x1U << TIM_DIER_CC3IE_Pos)
#define TIM_DIER_CC3IE TIM_DIER_CC3IE_Msk
#define TIM_DIER_CC4IE_Pos (4U)
#define TIM_DIER_CC4IE_Msk (0x1U << TIM_DIER_CC4IE_Pos)
#define TIM_DIER_CC4IE TIM_DIER_CC4IE_Msk
#define TIM_DIER_COMIE_Pos (5U)
#define TIM_DIER_COMIE_Msk (0x1U << TIM_DIER_COMIE_Pos)
#define TIM_DIER_COMIE TIM_DIER_COMIE_Msk
#define TIM_DIER_TIE_Pos (6U)
#define TIM_DIER_TIE_Msk (0x1U << TIM_DIER_TIE_Pos)
#define TIM_DIER_TIE TIM_DIER_TIE_Msk
#define TIM_DIER_BIE_Pos (7U)
#define TIM_DIER_BIE_Msk (0x1U << TIM_DIER_BIE_Pos)
#define TIM_DIER_BIE TIM_DIER_BIE_Msk
#define TIM_DIER_UDE_Pos (8U)
#define TIM_DIER_UDE_Msk (0x1U << TIM_DIER_UDE_Pos)
#define TIM_DIER_UDE TIM_DIER_UDE_Msk
#define TIM_DIER_CC1DE_Pos (9U)
#define TIM_DIER_CC1DE_Msk (0x1U << TIM_DIER_CC1DE_Pos)
#define TIM_DIER_CC1DE TIM_DIER_CC1DE_Msk
#define TIM_DIER_CC2DE_Pos (10U)
#define TIM_DIER_CC2DE_Msk (0x1U << TIM_DIER_CC2DE_Pos)
#define TIM_DIER_CC2DE TIM_DIER_CC2DE_Msk
#define TIM_DIER_CC3DE_Pos (11U)
#define TIM_DIER_CC3DE_Msk (0x1U << TIM_DIER_CC3DE_Pos)
#define TIM_DIER_CC3DE TIM_DIER_CC3DE_Msk
#define TIM_DIER_CC4DE_Pos (12U)
#define TIM_DIER_CC4DE_Msk (0x1U << TIM_DIER_CC4DE_Pos)
#define TIM_DIER_CC4DE TIM_DIER_CC4DE_Msk
#define TIM_DIER_COMDE_Pos (13U)
#define TIM_DIER_COMDE_Msk (0x1U << TIM_DIER_COMDE_Pos)
#define TIM_DIER_COMDE TIM_DIER_COMDE_Msk
#define TIM_DIER_TDE_Pos (14U)
#define TIM_DIER_TDE_Msk (0x1U << TIM_DIER_TDE_Pos)
#define TIM_DIER_TDE TIM_DIER_TDE_Msk


#define TIM_SR_UIF_Pos (0U)
#define TIM_SR_UIF_Msk (0x1U << TIM_SR_UIF_Pos)
#define TIM_SR_UIF TIM_SR_UIF_Msk
#define TIM_SR_CC1IF_Pos (1U)
#define TIM_SR_CC1IF_Msk (0x1U << TIM_SR_CC1IF_Pos)
#define TIM_SR_CC1IF TIM_SR_CC1IF_Msk
#define TIM_SR_CC2IF_Pos (2U)
#define TIM_SR_CC2IF_Msk (0x1U << TIM_SR_CC2IF_Pos)
#define TIM_SR_CC2IF TIM_SR_CC2IF_Msk
#define TIM_SR_CC3IF_Pos (3U)
#define TIM_SR_CC3IF_Msk (0x1U << TIM_SR_CC3IF_Pos)
#define TIM_SR_CC3IF TIM_SR_CC3IF_Msk
#define TIM_SR_CC4IF_Pos (4U)
#define TIM_SR_CC4IF_Msk (0x1U << TIM_SR_CC4IF_Pos)
#define TIM_SR_CC4IF TIM_SR_CC4IF_Msk
#define TIM_SR_COMIF_Pos (5U)
#define TIM_SR_COMIF_Msk (0x1U << TIM_SR_COMIF_Pos)
#define TIM_SR_COMIF TIM_SR_COMIF_Msk
#define TIM_SR_TIF_Pos (6U)
#define TIM_SR_TIF_Msk (0x1U << TIM_SR_TIF_Pos)
#define TIM_SR_TIF TIM_SR_TIF_Msk
#define TIM_SR_BIF_Pos (7U)
#define TIM_SR_BIF_Msk (0x1U << TIM_SR_BIF_Pos)
#define TIM_SR_BIF TIM_SR_BIF_Msk
#define TIM_SR_B2IF_Pos (8U)
#define TIM_SR_B2IF_Msk (0x1U << TIM_SR_B2IF_Pos)
#define TIM_SR_B2IF TIM_SR_B2IF_Msk
#define TIM_SR_CC1OF_Pos (9U)
#define TIM_SR_CC1OF_Msk (0x1U << TIM_SR_CC1OF_Pos)
#define TIM_SR_CC1OF TIM_SR_CC1OF_Msk
#define TIM_SR_CC2OF_Pos (10U)
#define TIM_SR_CC2OF_Msk (0x1U << TIM_SR_CC2OF_Pos)
#define TIM_SR_CC2OF TIM_SR_CC2OF_Msk
#define TIM_SR_CC3OF_Pos (11U)
#define TIM_SR_CC3OF_Msk (0x1U << TIM_SR_CC3OF_Pos)
#define TIM_SR_CC3OF TIM_SR_CC3OF_Msk
#define TIM_SR_CC4OF_Pos (12U)
#define TIM_SR_CC4OF_Msk (0x1U << TIM_SR_CC4OF_Pos)
#define TIM_SR_CC4OF TIM_SR_CC4OF_Msk
#define TIM_SR_CC5IF_Pos (16U)
#define TIM_SR_CC5IF_Msk (0x1U << TIM_SR_CC5IF_Pos)
#define TIM_SR_CC5IF TIM_SR_CC5IF_Msk
#define TIM_SR_CC6IF_Pos (17U)
#define TIM_SR_CC6IF_Msk (0x1U << TIM_SR_CC6IF_Pos)
#define TIM_SR_CC6IF TIM_SR_CC6IF_Msk


#define TIM_EGR_UG_Pos (0U)
#define TIM_EGR_UG_Msk (0x1U << TIM_EGR_UG_Pos)
#define TIM_EGR_UG TIM_EGR_UG_Msk
#define TIM_EGR_CC1G_Pos (1U)
#define TIM_EGR_CC1G_Msk (0x1U << TIM_EGR_CC1G_Pos)
#define TIM_EGR_CC1G TIM_EGR_CC1G_Msk
#define TIM_EGR_CC2G_Pos (2U)
#define TIM_EGR_CC2G_Msk (0x1U << TIM_EGR_CC2G_Pos)
#define TIM_EGR_CC2G TIM_EGR_CC2G_Msk
#define TIM_EGR_CC3G_Pos (3U)
#define TIM_EGR_CC3G_Msk (0x1U << TIM_EGR_CC3G_Pos)
#define TIM_EGR_CC3G TIM_EGR_CC3G_Msk
#define TIM_EGR_CC4G_Pos (4U)
#define TIM_EGR_CC4G_Msk (0x1U << TIM_EGR_CC4G_Pos)
#define TIM_EGR_CC4G TIM_EGR_CC4G_Msk
#define TIM_EGR_COMG_Pos (5U)
#define TIM_EGR_COMG_Msk (0x1U << TIM_EGR_COMG_Pos)
#define TIM_EGR_COMG TIM_EGR_COMG_Msk
#define TIM_EGR_TG_Pos (6U)
#define TIM_EGR_TG_Msk (0x1U << TIM_EGR_TG_Pos)
#define TIM_EGR_TG TIM_EGR_TG_Msk
#define TIM_EGR_BG_Pos (7U)
#define TIM_EGR_BG_Msk (0x1U << TIM_EGR_BG_Pos)
#define TIM_EGR_BG TIM_EGR_BG_Msk
#define TIM_EGR_B2G_Pos (8U)
#define TIM_EGR_B2G_Msk (0x1U << TIM_EGR_B2G_Pos)
#define TIM_EGR_B2G TIM_EGR_B2G_Msk


#define TIM_CCMR1_CC1S_Pos (0U)
#define TIM_CCMR1_CC1S_Msk (0x3U << TIM_CCMR1_CC1S_Pos)
#define TIM_CCMR1_CC1S TIM_CCMR1_CC1S_Msk
#define TIM_CCMR1_CC1S_0 (0x1U << TIM_CCMR1_CC1S_Pos)
#define TIM_CCMR1_CC1S_1 (0x2U << TIM_CCMR1_CC1S_Pos)

#define TIM_CCMR1_OC1FE_Pos (2U)
#define TIM_CCMR1_OC1FE_Msk (0x1U << TIM_CCMR1_OC1FE_Pos)
#define TIM_CCMR1_OC1FE TIM_CCMR1_OC1FE_Msk
#define TIM_CCMR1_OC1PE_Pos (3U)
#define TIM_CCMR1_OC1PE_Msk (0x1U << TIM_CCMR1_OC1PE_Pos)
#define TIM_CCMR1_OC1PE TIM_CCMR1_OC1PE_Msk

#define TIM_CCMR1_OC1M_Pos (4U)
#define TIM_CCMR1_OC1M_Msk (0x1007U << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M TIM_CCMR1_OC1M_Msk
#define TIM_CCMR1_OC1M_0 (0x00000010U)
#define TIM_CCMR1_OC1M_1 (0x00000020U)
#define TIM_CCMR1_OC1M_2 (0x00000040U)
#define TIM_CCMR1_OC1M_3 (0x00010000U)

#define TIM_CCMR1_OC1CE_Pos (7U)
#define TIM_CCMR1_OC1CE_Msk (0x1U << TIM_CCMR1_OC1CE_Pos)
#define TIM_CCMR1_OC1CE TIM_CCMR1_OC1CE_Msk

#define TIM_CCMR1_CC2S_Pos (8U)
#define TIM_CCMR1_CC2S_Msk (0x3U << TIM_CCMR1_CC2S_Pos)
#define TIM_CCMR1_CC2S TIM_CCMR1_CC2S_Msk
#define TIM_CCMR1_CC2S_0 (0x1U << TIM_CCMR1_CC2S_Pos)
#define TIM_CCMR1_CC2S_1 (0x2U << TIM_CCMR1_CC2S_Pos)

#define TIM_CCMR1_OC2FE_Pos (10U)
#define TIM_CCMR1_OC2FE_Msk (0x1U << TIM_CCMR1_OC2FE_Pos)
#define TIM_CCMR1_OC2FE TIM_CCMR1_OC2FE_Msk
#define TIM_CCMR1_OC2PE_Pos (11U)
#define TIM_CCMR1_OC2PE_Msk (0x1U << TIM_CCMR1_OC2PE_Pos)
#define TIM_CCMR1_OC2PE TIM_CCMR1_OC2PE_Msk

#define TIM_CCMR1_OC2M_Pos (12U)
#define TIM_CCMR1_OC2M_Msk (0x1007U << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2M TIM_CCMR1_OC2M_Msk
#define TIM_CCMR1_OC2M_0 (0x00001000U)
#define TIM_CCMR1_OC2M_1 (0x00002000U)
#define TIM_CCMR1_OC2M_2 (0x00004000U)
#define TIM_CCMR1_OC2M_3 (0x01000000U)

#define TIM_CCMR1_OC2CE_Pos (15U)
#define TIM_CCMR1_OC2CE_Msk (0x1U << TIM_CCMR1_OC2CE_Pos)
#define TIM_CCMR1_OC2CE TIM_CCMR1_OC2CE_Msk



#define TIM_CCMR1_IC1PSC_Pos (2U)
#define TIM_CCMR1_IC1PSC_Msk (0x3U << TIM_CCMR1_IC1PSC_Pos)
#define TIM_CCMR1_IC1PSC TIM_CCMR1_IC1PSC_Msk
#define TIM_CCMR1_IC1PSC_0 (0x1U << TIM_CCMR1_IC1PSC_Pos)
#define TIM_CCMR1_IC1PSC_1 (0x2U << TIM_CCMR1_IC1PSC_Pos)

#define TIM_CCMR1_IC1F_Pos (4U)
#define TIM_CCMR1_IC1F_Msk (0xFU << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F TIM_CCMR1_IC1F_Msk
#define TIM_CCMR1_IC1F_0 (0x1U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_1 (0x2U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_2 (0x4U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_3 (0x8U << TIM_CCMR1_IC1F_Pos)

#define TIM_CCMR1_IC2PSC_Pos (10U)
#define TIM_CCMR1_IC2PSC_Msk (0x3U << TIM_CCMR1_IC2PSC_Pos)
#define TIM_CCMR1_IC2PSC TIM_CCMR1_IC2PSC_Msk
#define TIM_CCMR1_IC2PSC_0 (0x1U << TIM_CCMR1_IC2PSC_Pos)
#define TIM_CCMR1_IC2PSC_1 (0x2U << TIM_CCMR1_IC2PSC_Pos)

#define TIM_CCMR1_IC2F_Pos (12U)
#define TIM_CCMR1_IC2F_Msk (0xFU << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F TIM_CCMR1_IC2F_Msk
#define TIM_CCMR1_IC2F_0 (0x1U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_1 (0x2U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_2 (0x4U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_3 (0x8U << TIM_CCMR1_IC2F_Pos)


#define TIM_CCMR2_CC3S_Pos (0U)
#define TIM_CCMR2_CC3S_Msk (0x3U << TIM_CCMR2_CC3S_Pos)
#define TIM_CCMR2_CC3S TIM_CCMR2_CC3S_Msk
#define TIM_CCMR2_CC3S_0 (0x1U << TIM_CCMR2_CC3S_Pos)
#define TIM_CCMR2_CC3S_1 (0x2U << TIM_CCMR2_CC3S_Pos)

#define TIM_CCMR2_OC3FE_Pos (2U)
#define TIM_CCMR2_OC3FE_Msk (0x1U << TIM_CCMR2_OC3FE_Pos)
#define TIM_CCMR2_OC3FE TIM_CCMR2_OC3FE_Msk
#define TIM_CCMR2_OC3PE_Pos (3U)
#define TIM_CCMR2_OC3PE_Msk (0x1U << TIM_CCMR2_OC3PE_Pos)
#define TIM_CCMR2_OC3PE TIM_CCMR2_OC3PE_Msk

#define TIM_CCMR2_OC3M_Pos (4U)
#define TIM_CCMR2_OC3M_Msk (0x1007U << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3M TIM_CCMR2_OC3M_Msk
#define TIM_CCMR2_OC3M_0 (0x00000010U)
#define TIM_CCMR2_OC3M_1 (0x00000020U)
#define TIM_CCMR2_OC3M_2 (0x00000040U)
#define TIM_CCMR2_OC3M_3 (0x00010000U)

#define TIM_CCMR2_OC3CE_Pos (7U)
#define TIM_CCMR2_OC3CE_Msk (0x1U << TIM_CCMR2_OC3CE_Pos)
#define TIM_CCMR2_OC3CE TIM_CCMR2_OC3CE_Msk

#define TIM_CCMR2_CC4S_Pos (8U)
#define TIM_CCMR2_CC4S_Msk (0x3U << TIM_CCMR2_CC4S_Pos)
#define TIM_CCMR2_CC4S TIM_CCMR2_CC4S_Msk
#define TIM_CCMR2_CC4S_0 (0x1U << TIM_CCMR2_CC4S_Pos)
#define TIM_CCMR2_CC4S_1 (0x2U << TIM_CCMR2_CC4S_Pos)

#define TIM_CCMR2_OC4FE_Pos (10U)
#define TIM_CCMR2_OC4FE_Msk (0x1U << TIM_CCMR2_OC4FE_Pos)
#define TIM_CCMR2_OC4FE TIM_CCMR2_OC4FE_Msk
#define TIM_CCMR2_OC4PE_Pos (11U)
#define TIM_CCMR2_OC4PE_Msk (0x1U << TIM_CCMR2_OC4PE_Pos)
#define TIM_CCMR2_OC4PE TIM_CCMR2_OC4PE_Msk

#define TIM_CCMR2_OC4M_Pos (12U)
#define TIM_CCMR2_OC4M_Msk (0x1007U << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4M TIM_CCMR2_OC4M_Msk
#define TIM_CCMR2_OC4M_0 (0x00001000U)
#define TIM_CCMR2_OC4M_1 (0x00002000U)
#define TIM_CCMR2_OC4M_2 (0x00004000U)
#define TIM_CCMR2_OC4M_3 (0x01000000U)

#define TIM_CCMR2_OC4CE_Pos (15U)
#define TIM_CCMR2_OC4CE_Msk (0x1U << TIM_CCMR2_OC4CE_Pos)
#define TIM_CCMR2_OC4CE TIM_CCMR2_OC4CE_Msk



#define TIM_CCMR2_IC3PSC_Pos (2U)
#define TIM_CCMR2_IC3PSC_Msk (0x3U << TIM_CCMR2_IC3PSC_Pos)
#define TIM_CCMR2_IC3PSC TIM_CCMR2_IC3PSC_Msk
#define TIM_CCMR2_IC3PSC_0 (0x1U << TIM_CCMR2_IC3PSC_Pos)
#define TIM_CCMR2_IC3PSC_1 (0x2U << TIM_CCMR2_IC3PSC_Pos)

#define TIM_CCMR2_IC3F_Pos (4U)
#define TIM_CCMR2_IC3F_Msk (0xFU << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F TIM_CCMR2_IC3F_Msk
#define TIM_CCMR2_IC3F_0 (0x1U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_1 (0x2U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_2 (0x4U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_3 (0x8U << TIM_CCMR2_IC3F_Pos)

#define TIM_CCMR2_IC4PSC_Pos (10U)
#define TIM_CCMR2_IC4PSC_Msk (0x3U << TIM_CCMR2_IC4PSC_Pos)
#define TIM_CCMR2_IC4PSC TIM_CCMR2_IC4PSC_Msk
#define TIM_CCMR2_IC4PSC_0 (0x1U << TIM_CCMR2_IC4PSC_Pos)
#define TIM_CCMR2_IC4PSC_1 (0x2U << TIM_CCMR2_IC4PSC_Pos)

#define TIM_CCMR2_IC4F_Pos (12U)
#define TIM_CCMR2_IC4F_Msk (0xFU << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F TIM_CCMR2_IC4F_Msk
#define TIM_CCMR2_IC4F_0 (0x1U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_1 (0x2U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_2 (0x4U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_3 (0x8U << TIM_CCMR2_IC4F_Pos)


#define TIM_CCER_CC1E_Pos (0U)
#define TIM_CCER_CC1E_Msk (0x1U << TIM_CCER_CC1E_Pos)
#define TIM_CCER_CC1E TIM_CCER_CC1E_Msk
#define TIM_CCER_CC1P_Pos (1U)
#define TIM_CCER_CC1P_Msk (0x1U << TIM_CCER_CC1P_Pos)
#define TIM_CCER_CC1P TIM_CCER_CC1P_Msk
#define TIM_CCER_CC1NE_Pos (2U)
#define TIM_CCER_CC1NE_Msk (0x1U << TIM_CCER_CC1NE_Pos)
#define TIM_CCER_CC1NE TIM_CCER_CC1NE_Msk
#define TIM_CCER_CC1NP_Pos (3U)
#define TIM_CCER_CC1NP_Msk (0x1U << TIM_CCER_CC1NP_Pos)
#define TIM_CCER_CC1NP TIM_CCER_CC1NP_Msk
#define TIM_CCER_CC2E_Pos (4U)
#define TIM_CCER_CC2E_Msk (0x1U << TIM_CCER_CC2E_Pos)
#define TIM_CCER_CC2E TIM_CCER_CC2E_Msk
#define TIM_CCER_CC2P_Pos (5U)
#define TIM_CCER_CC2P_Msk (0x1U << TIM_CCER_CC2P_Pos)
#define TIM_CCER_CC2P TIM_CCER_CC2P_Msk
#define TIM_CCER_CC2NE_Pos (6U)
#define TIM_CCER_CC2NE_Msk (0x1U << TIM_CCER_CC2NE_Pos)
#define TIM_CCER_CC2NE TIM_CCER_CC2NE_Msk
#define TIM_CCER_CC2NP_Pos (7U)
#define TIM_CCER_CC2NP_Msk (0x1U << TIM_CCER_CC2NP_Pos)
#define TIM_CCER_CC2NP TIM_CCER_CC2NP_Msk
#define TIM_CCER_CC3E_Pos (8U)
#define TIM_CCER_CC3E_Msk (0x1U << TIM_CCER_CC3E_Pos)
#define TIM_CCER_CC3E TIM_CCER_CC3E_Msk
#define TIM_CCER_CC3P_Pos (9U)
#define TIM_CCER_CC3P_Msk (0x1U << TIM_CCER_CC3P_Pos)
#define TIM_CCER_CC3P TIM_CCER_CC3P_Msk
#define TIM_CCER_CC3NE_Pos (10U)
#define TIM_CCER_CC3NE_Msk (0x1U << TIM_CCER_CC3NE_Pos)
#define TIM_CCER_CC3NE TIM_CCER_CC3NE_Msk
#define TIM_CCER_CC3NP_Pos (11U)
#define TIM_CCER_CC3NP_Msk (0x1U << TIM_CCER_CC3NP_Pos)
#define TIM_CCER_CC3NP TIM_CCER_CC3NP_Msk
#define TIM_CCER_CC4E_Pos (12U)
#define TIM_CCER_CC4E_Msk (0x1U << TIM_CCER_CC4E_Pos)
#define TIM_CCER_CC4E TIM_CCER_CC4E_Msk
#define TIM_CCER_CC4P_Pos (13U)
#define TIM_CCER_CC4P_Msk (0x1U << TIM_CCER_CC4P_Pos)
#define TIM_CCER_CC4P TIM_CCER_CC4P_Msk
#define TIM_CCER_CC4NP_Pos (15U)
#define TIM_CCER_CC4NP_Msk (0x1U << TIM_CCER_CC4NP_Pos)
#define TIM_CCER_CC4NP TIM_CCER_CC4NP_Msk
#define TIM_CCER_CC5E_Pos (16U)
#define TIM_CCER_CC5E_Msk (0x1U << TIM_CCER_CC5E_Pos)
#define TIM_CCER_CC5E TIM_CCER_CC5E_Msk
#define TIM_CCER_CC5P_Pos (17U)
#define TIM_CCER_CC5P_Msk (0x1U << TIM_CCER_CC5P_Pos)
#define TIM_CCER_CC5P TIM_CCER_CC5P_Msk
#define TIM_CCER_CC6E_Pos (20U)
#define TIM_CCER_CC6E_Msk (0x1U << TIM_CCER_CC6E_Pos)
#define TIM_CCER_CC6E TIM_CCER_CC6E_Msk
#define TIM_CCER_CC6P_Pos (21U)
#define TIM_CCER_CC6P_Msk (0x1U << TIM_CCER_CC6P_Pos)
#define TIM_CCER_CC6P TIM_CCER_CC6P_Msk


#define TIM_CNT_CNT_Pos (0U)
#define TIM_CNT_CNT_Msk (0xFFFFFFFFU << TIM_CNT_CNT_Pos)
#define TIM_CNT_CNT TIM_CNT_CNT_Msk
#define TIM_CNT_UIFCPY_Pos (31U)
#define TIM_CNT_UIFCPY_Msk (0x1U << TIM_CNT_UIFCPY_Pos)
#define TIM_CNT_UIFCPY TIM_CNT_UIFCPY_Msk


#define TIM_PSC_PSC_Pos (0U)
#define TIM_PSC_PSC_Msk (0xFFFFU << TIM_PSC_PSC_Pos)
#define TIM_PSC_PSC TIM_PSC_PSC_Msk


#define TIM_ARR_ARR_Pos (0U)
#define TIM_ARR_ARR_Msk (0xFFFFFFFFU << TIM_ARR_ARR_Pos)
#define TIM_ARR_ARR TIM_ARR_ARR_Msk


#define TIM_RCR_REP_Pos (0U)
#define TIM_RCR_REP_Msk (0xFFFFU << TIM_RCR_REP_Pos)
#define TIM_RCR_REP TIM_RCR_REP_Msk


#define TIM_CCR1_CCR1_Pos (0U)
#define TIM_CCR1_CCR1_Msk (0xFFFFU << TIM_CCR1_CCR1_Pos)
#define TIM_CCR1_CCR1 TIM_CCR1_CCR1_Msk


#define TIM_CCR2_CCR2_Pos (0U)
#define TIM_CCR2_CCR2_Msk (0xFFFFU << TIM_CCR2_CCR2_Pos)
#define TIM_CCR2_CCR2 TIM_CCR2_CCR2_Msk


#define TIM_CCR3_CCR3_Pos (0U)
#define TIM_CCR3_CCR3_Msk (0xFFFFU << TIM_CCR3_CCR3_Pos)
#define TIM_CCR3_CCR3 TIM_CCR3_CCR3_Msk


#define TIM_CCR4_CCR4_Pos (0U)
#define TIM_CCR4_CCR4_Msk (0xFFFFU << TIM_CCR4_CCR4_Pos)
#define TIM_CCR4_CCR4 TIM_CCR4_CCR4_Msk


#define TIM_CCR5_CCR5_Pos (0U)
#define TIM_CCR5_CCR5_Msk (0xFFFFFFFFU << TIM_CCR5_CCR5_Pos)
#define TIM_CCR5_CCR5 TIM_CCR5_CCR5_Msk
#define TIM_CCR5_GC5C1_Pos (29U)
#define TIM_CCR5_GC5C1_Msk (0x1U << TIM_CCR5_GC5C1_Pos)
#define TIM_CCR5_GC5C1 TIM_CCR5_GC5C1_Msk
#define TIM_CCR5_GC5C2_Pos (30U)
#define TIM_CCR5_GC5C2_Msk (0x1U << TIM_CCR5_GC5C2_Pos)
#define TIM_CCR5_GC5C2 TIM_CCR5_GC5C2_Msk
#define TIM_CCR5_GC5C3_Pos (31U)
#define TIM_CCR5_GC5C3_Msk (0x1U << TIM_CCR5_GC5C3_Pos)
#define TIM_CCR5_GC5C3 TIM_CCR5_GC5C3_Msk


#define TIM_CCR6_CCR6_Pos (0U)
#define TIM_CCR6_CCR6_Msk (0xFFFFU << TIM_CCR6_CCR6_Pos)
#define TIM_CCR6_CCR6 TIM_CCR6_CCR6_Msk


#define TIM_BDTR_DTG_Pos (0U)
#define TIM_BDTR_DTG_Msk (0xFFU << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG TIM_BDTR_DTG_Msk
#define TIM_BDTR_DTG_0 (0x01U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_1 (0x02U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_2 (0x04U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_3 (0x08U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_4 (0x10U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_5 (0x20U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_6 (0x40U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_7 (0x80U << TIM_BDTR_DTG_Pos)

#define TIM_BDTR_LOCK_Pos (8U)
#define TIM_BDTR_LOCK_Msk (0x3U << TIM_BDTR_LOCK_Pos)
#define TIM_BDTR_LOCK TIM_BDTR_LOCK_Msk
#define TIM_BDTR_LOCK_0 (0x1U << TIM_BDTR_LOCK_Pos)
#define TIM_BDTR_LOCK_1 (0x2U << TIM_BDTR_LOCK_Pos)

#define TIM_BDTR_OSSI_Pos (10U)
#define TIM_BDTR_OSSI_Msk (0x1U << TIM_BDTR_OSSI_Pos)
#define TIM_BDTR_OSSI TIM_BDTR_OSSI_Msk
#define TIM_BDTR_OSSR_Pos (11U)
#define TIM_BDTR_OSSR_Msk (0x1U << TIM_BDTR_OSSR_Pos)
#define TIM_BDTR_OSSR TIM_BDTR_OSSR_Msk
#define TIM_BDTR_BKE_Pos (12U)
#define TIM_BDTR_BKE_Msk (0x1U << TIM_BDTR_BKE_Pos)
#define TIM_BDTR_BKE TIM_BDTR_BKE_Msk
#define TIM_BDTR_BKP_Pos (13U)
#define TIM_BDTR_BKP_Msk (0x1U << TIM_BDTR_BKP_Pos)
#define TIM_BDTR_BKP TIM_BDTR_BKP_Msk
#define TIM_BDTR_AOE_Pos (14U)
#define TIM_BDTR_AOE_Msk (0x1U << TIM_BDTR_AOE_Pos)
#define TIM_BDTR_AOE TIM_BDTR_AOE_Msk
#define TIM_BDTR_MOE_Pos (15U)
#define TIM_BDTR_MOE_Msk (0x1U << TIM_BDTR_MOE_Pos)
#define TIM_BDTR_MOE TIM_BDTR_MOE_Msk

#define TIM_BDTR_BKF_Pos (16U)
#define TIM_BDTR_BKF_Msk (0xFU << TIM_BDTR_BKF_Pos)
#define TIM_BDTR_BKF TIM_BDTR_BKF_Msk
#define TIM_BDTR_BK2F_Pos (20U)
#define TIM_BDTR_BK2F_Msk (0xFU << TIM_BDTR_BK2F_Pos)
#define TIM_BDTR_BK2F TIM_BDTR_BK2F_Msk

#define TIM_BDTR_BK2E_Pos (24U)
#define TIM_BDTR_BK2E_Msk (0x1U << TIM_BDTR_BK2E_Pos)
#define TIM_BDTR_BK2E TIM_BDTR_BK2E_Msk
#define TIM_BDTR_BK2P_Pos (25U)
#define TIM_BDTR_BK2P_Msk (0x1U << TIM_BDTR_BK2P_Pos)
#define TIM_BDTR_BK2P TIM_BDTR_BK2P_Msk


#define TIM_DCR_DBA_Pos (0U)
#define TIM_DCR_DBA_Msk (0x1FU << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA TIM_DCR_DBA_Msk
#define TIM_DCR_DBA_0 (0x01U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_1 (0x02U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_2 (0x04U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_3 (0x08U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_4 (0x10U << TIM_DCR_DBA_Pos)

#define TIM_DCR_DBL_Pos (8U)
#define TIM_DCR_DBL_Msk (0x1FU << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL TIM_DCR_DBL_Msk
#define TIM_DCR_DBL_0 (0x01U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_1 (0x02U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_2 (0x04U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_3 (0x08U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_4 (0x10U << TIM_DCR_DBL_Pos)


#define TIM_DMAR_DMAB_Pos (0U)
#define TIM_DMAR_DMAB_Msk (0xFFFFU << TIM_DMAR_DMAB_Pos)
#define TIM_DMAR_DMAB TIM_DMAR_DMAB_Msk


#define TIM16_OR_TI1_RMP_Pos (0U)
#define TIM16_OR_TI1_RMP_Msk (0x3U << TIM16_OR_TI1_RMP_Pos)
#define TIM16_OR_TI1_RMP TIM16_OR_TI1_RMP_Msk
#define TIM16_OR_TI1_RMP_0 (0x1U << TIM16_OR_TI1_RMP_Pos)
#define TIM16_OR_TI1_RMP_1 (0x2U << TIM16_OR_TI1_RMP_Pos)


#define TIM1_OR_ETR_RMP_Pos (0U)
#define TIM1_OR_ETR_RMP_Msk (0xFU << TIM1_OR_ETR_RMP_Pos)
#define TIM1_OR_ETR_RMP TIM1_OR_ETR_RMP_Msk
#define TIM1_OR_ETR_RMP_0 (0x1U << TIM1_OR_ETR_RMP_Pos)
#define TIM1_OR_ETR_RMP_1 (0x2U << TIM1_OR_ETR_RMP_Pos)
#define TIM1_OR_ETR_RMP_2 (0x4U << TIM1_OR_ETR_RMP_Pos)
#define TIM1_OR_ETR_RMP_3 (0x8U << TIM1_OR_ETR_RMP_Pos)


#define TIM8_OR_ETR_RMP_Pos (0U)
#define TIM8_OR_ETR_RMP_Msk (0xFU << TIM8_OR_ETR_RMP_Pos)
#define TIM8_OR_ETR_RMP TIM8_OR_ETR_RMP_Msk
#define TIM8_OR_ETR_RMP_0 (0x1U << TIM8_OR_ETR_RMP_Pos)
#define TIM8_OR_ETR_RMP_1 (0x2U << TIM8_OR_ETR_RMP_Pos)
#define TIM8_OR_ETR_RMP_2 (0x4U << TIM8_OR_ETR_RMP_Pos)
#define TIM8_OR_ETR_RMP_3 (0x8U << TIM8_OR_ETR_RMP_Pos)


#define TIM_CCMR3_OC5FE_Pos (2U)
#define TIM_CCMR3_OC5FE_Msk (0x1U << TIM_CCMR3_OC5FE_Pos)
#define TIM_CCMR3_OC5FE TIM_CCMR3_OC5FE_Msk
#define TIM_CCMR3_OC5PE_Pos (3U)
#define TIM_CCMR3_OC5PE_Msk (0x1U << TIM_CCMR3_OC5PE_Pos)
#define TIM_CCMR3_OC5PE TIM_CCMR3_OC5PE_Msk

#define TIM_CCMR3_OC5M_Pos (4U)
#define TIM_CCMR3_OC5M_Msk (0x1007U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M TIM_CCMR3_OC5M_Msk
#define TIM_CCMR3_OC5M_0 (0x0001U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_1 (0x0002U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_2 (0x0004U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_3 (0x1000U << TIM_CCMR3_OC5M_Pos)

#define TIM_CCMR3_OC5CE_Pos (7U)
#define TIM_CCMR3_OC5CE_Msk (0x1U << TIM_CCMR3_OC5CE_Pos)
#define TIM_CCMR3_OC5CE TIM_CCMR3_OC5CE_Msk

#define TIM_CCMR3_OC6FE_Pos (10U)
#define TIM_CCMR3_OC6FE_Msk (0x1U << TIM_CCMR3_OC6FE_Pos)
#define TIM_CCMR3_OC6FE TIM_CCMR3_OC6FE_Msk
#define TIM_CCMR3_OC6PE_Pos (11U)
#define TIM_CCMR3_OC6PE_Msk (0x1U << TIM_CCMR3_OC6PE_Pos)
#define TIM_CCMR3_OC6PE TIM_CCMR3_OC6PE_Msk

#define TIM_CCMR3_OC6M_Pos (12U)
#define TIM_CCMR3_OC6M_Msk (0x1007U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M TIM_CCMR3_OC6M_Msk
#define TIM_CCMR3_OC6M_0 (0x0001U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_1 (0x0002U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_2 (0x0004U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_3 (0x1000U << TIM_CCMR3_OC6M_Pos)

#define TIM_CCMR3_OC6CE_Pos (15U)
#define TIM_CCMR3_OC6CE_Msk (0x1U << TIM_CCMR3_OC6CE_Pos)
#define TIM_CCMR3_OC6CE TIM_CCMR3_OC6CE_Msk







#define TSC_CR_TSCE_Pos (0U)
#define TSC_CR_TSCE_Msk (0x1U << TSC_CR_TSCE_Pos)
#define TSC_CR_TSCE TSC_CR_TSCE_Msk
#define TSC_CR_START_Pos (1U)
#define TSC_CR_START_Msk (0x1U << TSC_CR_START_Pos)
#define TSC_CR_START TSC_CR_START_Msk
#define TSC_CR_AM_Pos (2U)
#define TSC_CR_AM_Msk (0x1U << TSC_CR_AM_Pos)
#define TSC_CR_AM TSC_CR_AM_Msk
#define TSC_CR_SYNCPOL_Pos (3U)
#define TSC_CR_SYNCPOL_Msk (0x1U << TSC_CR_SYNCPOL_Pos)
#define TSC_CR_SYNCPOL TSC_CR_SYNCPOL_Msk
#define TSC_CR_IODEF_Pos (4U)
#define TSC_CR_IODEF_Msk (0x1U << TSC_CR_IODEF_Pos)
#define TSC_CR_IODEF TSC_CR_IODEF_Msk

#define TSC_CR_MCV_Pos (5U)
#define TSC_CR_MCV_Msk (0x7U << TSC_CR_MCV_Pos)
#define TSC_CR_MCV TSC_CR_MCV_Msk
#define TSC_CR_MCV_0 (0x1U << TSC_CR_MCV_Pos)
#define TSC_CR_MCV_1 (0x2U << TSC_CR_MCV_Pos)
#define TSC_CR_MCV_2 (0x4U << TSC_CR_MCV_Pos)

#define TSC_CR_PGPSC_Pos (12U)
#define TSC_CR_PGPSC_Msk (0x7U << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC TSC_CR_PGPSC_Msk
#define TSC_CR_PGPSC_0 (0x1U << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC_1 (0x2U << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC_2 (0x4U << TSC_CR_PGPSC_Pos)

#define TSC_CR_SSPSC_Pos (15U)
#define TSC_CR_SSPSC_Msk (0x1U << TSC_CR_SSPSC_Pos)
#define TSC_CR_SSPSC TSC_CR_SSPSC_Msk
#define TSC_CR_SSE_Pos (16U)
#define TSC_CR_SSE_Msk (0x1U << TSC_CR_SSE_Pos)
#define TSC_CR_SSE TSC_CR_SSE_Msk

#define TSC_CR_SSD_Pos (17U)
#define TSC_CR_SSD_Msk (0x7FU << TSC_CR_SSD_Pos)
#define TSC_CR_SSD TSC_CR_SSD_Msk
#define TSC_CR_SSD_0 (0x01U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_1 (0x02U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_2 (0x04U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_3 (0x08U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_4 (0x10U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_5 (0x20U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_6 (0x40U << TSC_CR_SSD_Pos)

#define TSC_CR_CTPL_Pos (24U)
#define TSC_CR_CTPL_Msk (0xFU << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL TSC_CR_CTPL_Msk
#define TSC_CR_CTPL_0 (0x1U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_1 (0x2U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_2 (0x4U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_3 (0x8U << TSC_CR_CTPL_Pos)

#define TSC_CR_CTPH_Pos (28U)
#define TSC_CR_CTPH_Msk (0xFU << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH TSC_CR_CTPH_Msk
#define TSC_CR_CTPH_0 (0x1U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_1 (0x2U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_2 (0x4U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_3 (0x8U << TSC_CR_CTPH_Pos)


#define TSC_IER_EOAIE_Pos (0U)
#define TSC_IER_EOAIE_Msk (0x1U << TSC_IER_EOAIE_Pos)
#define TSC_IER_EOAIE TSC_IER_EOAIE_Msk
#define TSC_IER_MCEIE_Pos (1U)
#define TSC_IER_MCEIE_Msk (0x1U << TSC_IER_MCEIE_Pos)
#define TSC_IER_MCEIE TSC_IER_MCEIE_Msk


#define TSC_ICR_EOAIC_Pos (0U)
#define TSC_ICR_EOAIC_Msk (0x1U << TSC_ICR_EOAIC_Pos)
#define TSC_ICR_EOAIC TSC_ICR_EOAIC_Msk
#define TSC_ICR_MCEIC_Pos (1U)
#define TSC_ICR_MCEIC_Msk (0x1U << TSC_ICR_MCEIC_Pos)
#define TSC_ICR_MCEIC TSC_ICR_MCEIC_Msk


#define TSC_ISR_EOAF_Pos (0U)
#define TSC_ISR_EOAF_Msk (0x1U << TSC_ISR_EOAF_Pos)
#define TSC_ISR_EOAF TSC_ISR_EOAF_Msk
#define TSC_ISR_MCEF_Pos (1U)
#define TSC_ISR_MCEF_Msk (0x1U << TSC_ISR_MCEF_Pos)
#define TSC_ISR_MCEF TSC_ISR_MCEF_Msk


#define TSC_IOHCR_G1_IO1_Pos (0U)
#define TSC_IOHCR_G1_IO1_Msk (0x1U << TSC_IOHCR_G1_IO1_Pos)
#define TSC_IOHCR_G1_IO1 TSC_IOHCR_G1_IO1_Msk
#define TSC_IOHCR_G1_IO2_Pos (1U)
#define TSC_IOHCR_G1_IO2_Msk (0x1U << TSC_IOHCR_G1_IO2_Pos)
#define TSC_IOHCR_G1_IO2 TSC_IOHCR_G1_IO2_Msk
#define TSC_IOHCR_G1_IO3_Pos (2U)
#define TSC_IOHCR_G1_IO3_Msk (0x1U << TSC_IOHCR_G1_IO3_Pos)
#define TSC_IOHCR_G1_IO3 TSC_IOHCR_G1_IO3_Msk
#define TSC_IOHCR_G1_IO4_Pos (3U)
#define TSC_IOHCR_G1_IO4_Msk (0x1U << TSC_IOHCR_G1_IO4_Pos)
#define TSC_IOHCR_G1_IO4 TSC_IOHCR_G1_IO4_Msk
#define TSC_IOHCR_G2_IO1_Pos (4U)
#define TSC_IOHCR_G2_IO1_Msk (0x1U << TSC_IOHCR_G2_IO1_Pos)
#define TSC_IOHCR_G2_IO1 TSC_IOHCR_G2_IO1_Msk
#define TSC_IOHCR_G2_IO2_Pos (5U)
#define TSC_IOHCR_G2_IO2_Msk (0x1U << TSC_IOHCR_G2_IO2_Pos)
#define TSC_IOHCR_G2_IO2 TSC_IOHCR_G2_IO2_Msk
#define TSC_IOHCR_G2_IO3_Pos (6U)
#define TSC_IOHCR_G2_IO3_Msk (0x1U << TSC_IOHCR_G2_IO3_Pos)
#define TSC_IOHCR_G2_IO3 TSC_IOHCR_G2_IO3_Msk
#define TSC_IOHCR_G2_IO4_Pos (7U)
#define TSC_IOHCR_G2_IO4_Msk (0x1U << TSC_IOHCR_G2_IO4_Pos)
#define TSC_IOHCR_G2_IO4 TSC_IOHCR_G2_IO4_Msk
#define TSC_IOHCR_G3_IO1_Pos (8U)
#define TSC_IOHCR_G3_IO1_Msk (0x1U << TSC_IOHCR_G3_IO1_Pos)
#define TSC_IOHCR_G3_IO1 TSC_IOHCR_G3_IO1_Msk
#define TSC_IOHCR_G3_IO2_Pos (9U)
#define TSC_IOHCR_G3_IO2_Msk (0x1U << TSC_IOHCR_G3_IO2_Pos)
#define TSC_IOHCR_G3_IO2 TSC_IOHCR_G3_IO2_Msk
#define TSC_IOHCR_G3_IO3_Pos (10U)
#define TSC_IOHCR_G3_IO3_Msk (0x1U << TSC_IOHCR_G3_IO3_Pos)
#define TSC_IOHCR_G3_IO3 TSC_IOHCR_G3_IO3_Msk
#define TSC_IOHCR_G3_IO4_Pos (11U)
#define TSC_IOHCR_G3_IO4_Msk (0x1U << TSC_IOHCR_G3_IO4_Pos)
#define TSC_IOHCR_G3_IO4 TSC_IOHCR_G3_IO4_Msk
#define TSC_IOHCR_G4_IO1_Pos (12U)
#define TSC_IOHCR_G4_IO1_Msk (0x1U << TSC_IOHCR_G4_IO1_Pos)
#define TSC_IOHCR_G4_IO1 TSC_IOHCR_G4_IO1_Msk
#define TSC_IOHCR_G4_IO2_Pos (13U)
#define TSC_IOHCR_G4_IO2_Msk (0x1U << TSC_IOHCR_G4_IO2_Pos)
#define TSC_IOHCR_G4_IO2 TSC_IOHCR_G4_IO2_Msk
#define TSC_IOHCR_G4_IO3_Pos (14U)
#define TSC_IOHCR_G4_IO3_Msk (0x1U << TSC_IOHCR_G4_IO3_Pos)
#define TSC_IOHCR_G4_IO3 TSC_IOHCR_G4_IO3_Msk
#define TSC_IOHCR_G4_IO4_Pos (15U)
#define TSC_IOHCR_G4_IO4_Msk (0x1U << TSC_IOHCR_G4_IO4_Pos)
#define TSC_IOHCR_G4_IO4 TSC_IOHCR_G4_IO4_Msk
#define TSC_IOHCR_G5_IO1_Pos (16U)
#define TSC_IOHCR_G5_IO1_Msk (0x1U << TSC_IOHCR_G5_IO1_Pos)
#define TSC_IOHCR_G5_IO1 TSC_IOHCR_G5_IO1_Msk
#define TSC_IOHCR_G5_IO2_Pos (17U)
#define TSC_IOHCR_G5_IO2_Msk (0x1U << TSC_IOHCR_G5_IO2_Pos)
#define TSC_IOHCR_G5_IO2 TSC_IOHCR_G5_IO2_Msk
#define TSC_IOHCR_G5_IO3_Pos (18U)
#define TSC_IOHCR_G5_IO3_Msk (0x1U << TSC_IOHCR_G5_IO3_Pos)
#define TSC_IOHCR_G5_IO3 TSC_IOHCR_G5_IO3_Msk
#define TSC_IOHCR_G5_IO4_Pos (19U)
#define TSC_IOHCR_G5_IO4_Msk (0x1U << TSC_IOHCR_G5_IO4_Pos)
#define TSC_IOHCR_G5_IO4 TSC_IOHCR_G5_IO4_Msk
#define TSC_IOHCR_G6_IO1_Pos (20U)
#define TSC_IOHCR_G6_IO1_Msk (0x1U << TSC_IOHCR_G6_IO1_Pos)
#define TSC_IOHCR_G6_IO1 TSC_IOHCR_G6_IO1_Msk
#define TSC_IOHCR_G6_IO2_Pos (21U)
#define TSC_IOHCR_G6_IO2_Msk (0x1U << TSC_IOHCR_G6_IO2_Pos)
#define TSC_IOHCR_G6_IO2 TSC_IOHCR_G6_IO2_Msk
#define TSC_IOHCR_G6_IO3_Pos (22U)
#define TSC_IOHCR_G6_IO3_Msk (0x1U << TSC_IOHCR_G6_IO3_Pos)
#define TSC_IOHCR_G6_IO3 TSC_IOHCR_G6_IO3_Msk
#define TSC_IOHCR_G6_IO4_Pos (23U)
#define TSC_IOHCR_G6_IO4_Msk (0x1U << TSC_IOHCR_G6_IO4_Pos)
#define TSC_IOHCR_G6_IO4 TSC_IOHCR_G6_IO4_Msk
#define TSC_IOHCR_G7_IO1_Pos (24U)
#define TSC_IOHCR_G7_IO1_Msk (0x1U << TSC_IOHCR_G7_IO1_Pos)
#define TSC_IOHCR_G7_IO1 TSC_IOHCR_G7_IO1_Msk
#define TSC_IOHCR_G7_IO2_Pos (25U)
#define TSC_IOHCR_G7_IO2_Msk (0x1U << TSC_IOHCR_G7_IO2_Pos)
#define TSC_IOHCR_G7_IO2 TSC_IOHCR_G7_IO2_Msk
#define TSC_IOHCR_G7_IO3_Pos (26U)
#define TSC_IOHCR_G7_IO3_Msk (0x1U << TSC_IOHCR_G7_IO3_Pos)
#define TSC_IOHCR_G7_IO3 TSC_IOHCR_G7_IO3_Msk
#define TSC_IOHCR_G7_IO4_Pos (27U)
#define TSC_IOHCR_G7_IO4_Msk (0x1U << TSC_IOHCR_G7_IO4_Pos)
#define TSC_IOHCR_G7_IO4 TSC_IOHCR_G7_IO4_Msk
#define TSC_IOHCR_G8_IO1_Pos (28U)
#define TSC_IOHCR_G8_IO1_Msk (0x1U << TSC_IOHCR_G8_IO1_Pos)
#define TSC_IOHCR_G8_IO1 TSC_IOHCR_G8_IO1_Msk
#define TSC_IOHCR_G8_IO2_Pos (29U)
#define TSC_IOHCR_G8_IO2_Msk (0x1U << TSC_IOHCR_G8_IO2_Pos)
#define TSC_IOHCR_G8_IO2 TSC_IOHCR_G8_IO2_Msk
#define TSC_IOHCR_G8_IO3_Pos (30U)
#define TSC_IOHCR_G8_IO3_Msk (0x1U << TSC_IOHCR_G8_IO3_Pos)
#define TSC_IOHCR_G8_IO3 TSC_IOHCR_G8_IO3_Msk
#define TSC_IOHCR_G8_IO4_Pos (31U)
#define TSC_IOHCR_G8_IO4_Msk (0x1U << TSC_IOHCR_G8_IO4_Pos)
#define TSC_IOHCR_G8_IO4 TSC_IOHCR_G8_IO4_Msk


#define TSC_IOASCR_G1_IO1_Pos (0U)
#define TSC_IOASCR_G1_IO1_Msk (0x1U << TSC_IOASCR_G1_IO1_Pos)
#define TSC_IOASCR_G1_IO1 TSC_IOASCR_G1_IO1_Msk
#define TSC_IOASCR_G1_IO2_Pos (1U)
#define TSC_IOASCR_G1_IO2_Msk (0x1U << TSC_IOASCR_G1_IO2_Pos)
#define TSC_IOASCR_G1_IO2 TSC_IOASCR_G1_IO2_Msk
#define TSC_IOASCR_G1_IO3_Pos (2U)
#define TSC_IOASCR_G1_IO3_Msk (0x1U << TSC_IOASCR_G1_IO3_Pos)
#define TSC_IOASCR_G1_IO3 TSC_IOASCR_G1_IO3_Msk
#define TSC_IOASCR_G1_IO4_Pos (3U)
#define TSC_IOASCR_G1_IO4_Msk (0x1U << TSC_IOASCR_G1_IO4_Pos)
#define TSC_IOASCR_G1_IO4 TSC_IOASCR_G1_IO4_Msk
#define TSC_IOASCR_G2_IO1_Pos (4U)
#define TSC_IOASCR_G2_IO1_Msk (0x1U << TSC_IOASCR_G2_IO1_Pos)
#define TSC_IOASCR_G2_IO1 TSC_IOASCR_G2_IO1_Msk
#define TSC_IOASCR_G2_IO2_Pos (5U)
#define TSC_IOASCR_G2_IO2_Msk (0x1U << TSC_IOASCR_G2_IO2_Pos)
#define TSC_IOASCR_G2_IO2 TSC_IOASCR_G2_IO2_Msk
#define TSC_IOASCR_G2_IO3_Pos (6U)
#define TSC_IOASCR_G2_IO3_Msk (0x1U << TSC_IOASCR_G2_IO3_Pos)
#define TSC_IOASCR_G2_IO3 TSC_IOASCR_G2_IO3_Msk
#define TSC_IOASCR_G2_IO4_Pos (7U)
#define TSC_IOASCR_G2_IO4_Msk (0x1U << TSC_IOASCR_G2_IO4_Pos)
#define TSC_IOASCR_G2_IO4 TSC_IOASCR_G2_IO4_Msk
#define TSC_IOASCR_G3_IO1_Pos (8U)
#define TSC_IOASCR_G3_IO1_Msk (0x1U << TSC_IOASCR_G3_IO1_Pos)
#define TSC_IOASCR_G3_IO1 TSC_IOASCR_G3_IO1_Msk
#define TSC_IOASCR_G3_IO2_Pos (9U)
#define TSC_IOASCR_G3_IO2_Msk (0x1U << TSC_IOASCR_G3_IO2_Pos)
#define TSC_IOASCR_G3_IO2 TSC_IOASCR_G3_IO2_Msk
#define TSC_IOASCR_G3_IO3_Pos (10U)
#define TSC_IOASCR_G3_IO3_Msk (0x1U << TSC_IOASCR_G3_IO3_Pos)
#define TSC_IOASCR_G3_IO3 TSC_IOASCR_G3_IO3_Msk
#define TSC_IOASCR_G3_IO4_Pos (11U)
#define TSC_IOASCR_G3_IO4_Msk (0x1U << TSC_IOASCR_G3_IO4_Pos)
#define TSC_IOASCR_G3_IO4 TSC_IOASCR_G3_IO4_Msk
#define TSC_IOASCR_G4_IO1_Pos (12U)
#define TSC_IOASCR_G4_IO1_Msk (0x1U << TSC_IOASCR_G4_IO1_Pos)
#define TSC_IOASCR_G4_IO1 TSC_IOASCR_G4_IO1_Msk
#define TSC_IOASCR_G4_IO2_Pos (13U)
#define TSC_IOASCR_G4_IO2_Msk (0x1U << TSC_IOASCR_G4_IO2_Pos)
#define TSC_IOASCR_G4_IO2 TSC_IOASCR_G4_IO2_Msk
#define TSC_IOASCR_G4_IO3_Pos (14U)
#define TSC_IOASCR_G4_IO3_Msk (0x1U << TSC_IOASCR_G4_IO3_Pos)
#define TSC_IOASCR_G4_IO3 TSC_IOASCR_G4_IO3_Msk
#define TSC_IOASCR_G4_IO4_Pos (15U)
#define TSC_IOASCR_G4_IO4_Msk (0x1U << TSC_IOASCR_G4_IO4_Pos)
#define TSC_IOASCR_G4_IO4 TSC_IOASCR_G4_IO4_Msk
#define TSC_IOASCR_G5_IO1_Pos (16U)
#define TSC_IOASCR_G5_IO1_Msk (0x1U << TSC_IOASCR_G5_IO1_Pos)
#define TSC_IOASCR_G5_IO1 TSC_IOASCR_G5_IO1_Msk
#define TSC_IOASCR_G5_IO2_Pos (17U)
#define TSC_IOASCR_G5_IO2_Msk (0x1U << TSC_IOASCR_G5_IO2_Pos)
#define TSC_IOASCR_G5_IO2 TSC_IOASCR_G5_IO2_Msk
#define TSC_IOASCR_G5_IO3_Pos (18U)
#define TSC_IOASCR_G5_IO3_Msk (0x1U << TSC_IOASCR_G5_IO3_Pos)
#define TSC_IOASCR_G5_IO3 TSC_IOASCR_G5_IO3_Msk
#define TSC_IOASCR_G5_IO4_Pos (19U)
#define TSC_IOASCR_G5_IO4_Msk (0x1U << TSC_IOASCR_G5_IO4_Pos)
#define TSC_IOASCR_G5_IO4 TSC_IOASCR_G5_IO4_Msk
#define TSC_IOASCR_G6_IO1_Pos (20U)
#define TSC_IOASCR_G6_IO1_Msk (0x1U << TSC_IOASCR_G6_IO1_Pos)
#define TSC_IOASCR_G6_IO1 TSC_IOASCR_G6_IO1_Msk
#define TSC_IOASCR_G6_IO2_Pos (21U)
#define TSC_IOASCR_G6_IO2_Msk (0x1U << TSC_IOASCR_G6_IO2_Pos)
#define TSC_IOASCR_G6_IO2 TSC_IOASCR_G6_IO2_Msk
#define TSC_IOASCR_G6_IO3_Pos (22U)
#define TSC_IOASCR_G6_IO3_Msk (0x1U << TSC_IOASCR_G6_IO3_Pos)
#define TSC_IOASCR_G6_IO3 TSC_IOASCR_G6_IO3_Msk
#define TSC_IOASCR_G6_IO4_Pos (23U)
#define TSC_IOASCR_G6_IO4_Msk (0x1U << TSC_IOASCR_G6_IO4_Pos)
#define TSC_IOASCR_G6_IO4 TSC_IOASCR_G6_IO4_Msk
#define TSC_IOASCR_G7_IO1_Pos (24U)
#define TSC_IOASCR_G7_IO1_Msk (0x1U << TSC_IOASCR_G7_IO1_Pos)
#define TSC_IOASCR_G7_IO1 TSC_IOASCR_G7_IO1_Msk
#define TSC_IOASCR_G7_IO2_Pos (25U)
#define TSC_IOASCR_G7_IO2_Msk (0x1U << TSC_IOASCR_G7_IO2_Pos)
#define TSC_IOASCR_G7_IO2 TSC_IOASCR_G7_IO2_Msk
#define TSC_IOASCR_G7_IO3_Pos (26U)
#define TSC_IOASCR_G7_IO3_Msk (0x1U << TSC_IOASCR_G7_IO3_Pos)
#define TSC_IOASCR_G7_IO3 TSC_IOASCR_G7_IO3_Msk
#define TSC_IOASCR_G7_IO4_Pos (27U)
#define TSC_IOASCR_G7_IO4_Msk (0x1U << TSC_IOASCR_G7_IO4_Pos)
#define TSC_IOASCR_G7_IO4 TSC_IOASCR_G7_IO4_Msk
#define TSC_IOASCR_G8_IO1_Pos (28U)
#define TSC_IOASCR_G8_IO1_Msk (0x1U << TSC_IOASCR_G8_IO1_Pos)
#define TSC_IOASCR_G8_IO1 TSC_IOASCR_G8_IO1_Msk
#define TSC_IOASCR_G8_IO2_Pos (29U)
#define TSC_IOASCR_G8_IO2_Msk (0x1U << TSC_IOASCR_G8_IO2_Pos)
#define TSC_IOASCR_G8_IO2 TSC_IOASCR_G8_IO2_Msk
#define TSC_IOASCR_G8_IO3_Pos (30U)
#define TSC_IOASCR_G8_IO3_Msk (0x1U << TSC_IOASCR_G8_IO3_Pos)
#define TSC_IOASCR_G8_IO3 TSC_IOASCR_G8_IO3_Msk
#define TSC_IOASCR_G8_IO4_Pos (31U)
#define TSC_IOASCR_G8_IO4_Msk (0x1U << TSC_IOASCR_G8_IO4_Pos)
#define TSC_IOASCR_G8_IO4 TSC_IOASCR_G8_IO4_Msk


#define TSC_IOSCR_G1_IO1_Pos (0U)
#define TSC_IOSCR_G1_IO1_Msk (0x1U << TSC_IOSCR_G1_IO1_Pos)
#define TSC_IOSCR_G1_IO1 TSC_IOSCR_G1_IO1_Msk
#define TSC_IOSCR_G1_IO2_Pos (1U)
#define TSC_IOSCR_G1_IO2_Msk (0x1U << TSC_IOSCR_G1_IO2_Pos)
#define TSC_IOSCR_G1_IO2 TSC_IOSCR_G1_IO2_Msk
#define TSC_IOSCR_G1_IO3_Pos (2U)
#define TSC_IOSCR_G1_IO3_Msk (0x1U << TSC_IOSCR_G1_IO3_Pos)
#define TSC_IOSCR_G1_IO3 TSC_IOSCR_G1_IO3_Msk
#define TSC_IOSCR_G1_IO4_Pos (3U)
#define TSC_IOSCR_G1_IO4_Msk (0x1U << TSC_IOSCR_G1_IO4_Pos)
#define TSC_IOSCR_G1_IO4 TSC_IOSCR_G1_IO4_Msk
#define TSC_IOSCR_G2_IO1_Pos (4U)
#define TSC_IOSCR_G2_IO1_Msk (0x1U << TSC_IOSCR_G2_IO1_Pos)
#define TSC_IOSCR_G2_IO1 TSC_IOSCR_G2_IO1_Msk
#define TSC_IOSCR_G2_IO2_Pos (5U)
#define TSC_IOSCR_G2_IO2_Msk (0x1U << TSC_IOSCR_G2_IO2_Pos)
#define TSC_IOSCR_G2_IO2 TSC_IOSCR_G2_IO2_Msk
#define TSC_IOSCR_G2_IO3_Pos (6U)
#define TSC_IOSCR_G2_IO3_Msk (0x1U << TSC_IOSCR_G2_IO3_Pos)
#define TSC_IOSCR_G2_IO3 TSC_IOSCR_G2_IO3_Msk
#define TSC_IOSCR_G2_IO4_Pos (7U)
#define TSC_IOSCR_G2_IO4_Msk (0x1U << TSC_IOSCR_G2_IO4_Pos)
#define TSC_IOSCR_G2_IO4 TSC_IOSCR_G2_IO4_Msk
#define TSC_IOSCR_G3_IO1_Pos (8U)
#define TSC_IOSCR_G3_IO1_Msk (0x1U << TSC_IOSCR_G3_IO1_Pos)
#define TSC_IOSCR_G3_IO1 TSC_IOSCR_G3_IO1_Msk
#define TSC_IOSCR_G3_IO2_Pos (9U)
#define TSC_IOSCR_G3_IO2_Msk (0x1U << TSC_IOSCR_G3_IO2_Pos)
#define TSC_IOSCR_G3_IO2 TSC_IOSCR_G3_IO2_Msk
#define TSC_IOSCR_G3_IO3_Pos (10U)
#define TSC_IOSCR_G3_IO3_Msk (0x1U << TSC_IOSCR_G3_IO3_Pos)
#define TSC_IOSCR_G3_IO3 TSC_IOSCR_G3_IO3_Msk
#define TSC_IOSCR_G3_IO4_Pos (11U)
#define TSC_IOSCR_G3_IO4_Msk (0x1U << TSC_IOSCR_G3_IO4_Pos)
#define TSC_IOSCR_G3_IO4 TSC_IOSCR_G3_IO4_Msk
#define TSC_IOSCR_G4_IO1_Pos (12U)
#define TSC_IOSCR_G4_IO1_Msk (0x1U << TSC_IOSCR_G4_IO1_Pos)
#define TSC_IOSCR_G4_IO1 TSC_IOSCR_G4_IO1_Msk
#define TSC_IOSCR_G4_IO2_Pos (13U)
#define TSC_IOSCR_G4_IO2_Msk (0x1U << TSC_IOSCR_G4_IO2_Pos)
#define TSC_IOSCR_G4_IO2 TSC_IOSCR_G4_IO2_Msk
#define TSC_IOSCR_G4_IO3_Pos (14U)
#define TSC_IOSCR_G4_IO3_Msk (0x1U << TSC_IOSCR_G4_IO3_Pos)
#define TSC_IOSCR_G4_IO3 TSC_IOSCR_G4_IO3_Msk
#define TSC_IOSCR_G4_IO4_Pos (15U)
#define TSC_IOSCR_G4_IO4_Msk (0x1U << TSC_IOSCR_G4_IO4_Pos)
#define TSC_IOSCR_G4_IO4 TSC_IOSCR_G4_IO4_Msk
#define TSC_IOSCR_G5_IO1_Pos (16U)
#define TSC_IOSCR_G5_IO1_Msk (0x1U << TSC_IOSCR_G5_IO1_Pos)
#define TSC_IOSCR_G5_IO1 TSC_IOSCR_G5_IO1_Msk
#define TSC_IOSCR_G5_IO2_Pos (17U)
#define TSC_IOSCR_G5_IO2_Msk (0x1U << TSC_IOSCR_G5_IO2_Pos)
#define TSC_IOSCR_G5_IO2 TSC_IOSCR_G5_IO2_Msk
#define TSC_IOSCR_G5_IO3_Pos (18U)
#define TSC_IOSCR_G5_IO3_Msk (0x1U << TSC_IOSCR_G5_IO3_Pos)
#define TSC_IOSCR_G5_IO3 TSC_IOSCR_G5_IO3_Msk
#define TSC_IOSCR_G5_IO4_Pos (19U)
#define TSC_IOSCR_G5_IO4_Msk (0x1U << TSC_IOSCR_G5_IO4_Pos)
#define TSC_IOSCR_G5_IO4 TSC_IOSCR_G5_IO4_Msk
#define TSC_IOSCR_G6_IO1_Pos (20U)
#define TSC_IOSCR_G6_IO1_Msk (0x1U << TSC_IOSCR_G6_IO1_Pos)
#define TSC_IOSCR_G6_IO1 TSC_IOSCR_G6_IO1_Msk
#define TSC_IOSCR_G6_IO2_Pos (21U)
#define TSC_IOSCR_G6_IO2_Msk (0x1U << TSC_IOSCR_G6_IO2_Pos)
#define TSC_IOSCR_G6_IO2 TSC_IOSCR_G6_IO2_Msk
#define TSC_IOSCR_G6_IO3_Pos (22U)
#define TSC_IOSCR_G6_IO3_Msk (0x1U << TSC_IOSCR_G6_IO3_Pos)
#define TSC_IOSCR_G6_IO3 TSC_IOSCR_G6_IO3_Msk
#define TSC_IOSCR_G6_IO4_Pos (23U)
#define TSC_IOSCR_G6_IO4_Msk (0x1U << TSC_IOSCR_G6_IO4_Pos)
#define TSC_IOSCR_G6_IO4 TSC_IOSCR_G6_IO4_Msk
#define TSC_IOSCR_G7_IO1_Pos (24U)
#define TSC_IOSCR_G7_IO1_Msk (0x1U << TSC_IOSCR_G7_IO1_Pos)
#define TSC_IOSCR_G7_IO1 TSC_IOSCR_G7_IO1_Msk
#define TSC_IOSCR_G7_IO2_Pos (25U)
#define TSC_IOSCR_G7_IO2_Msk (0x1U << TSC_IOSCR_G7_IO2_Pos)
#define TSC_IOSCR_G7_IO2 TSC_IOSCR_G7_IO2_Msk
#define TSC_IOSCR_G7_IO3_Pos (26U)
#define TSC_IOSCR_G7_IO3_Msk (0x1U << TSC_IOSCR_G7_IO3_Pos)
#define TSC_IOSCR_G7_IO3 TSC_IOSCR_G7_IO3_Msk
#define TSC_IOSCR_G7_IO4_Pos (27U)
#define TSC_IOSCR_G7_IO4_Msk (0x1U << TSC_IOSCR_G7_IO4_Pos)
#define TSC_IOSCR_G7_IO4 TSC_IOSCR_G7_IO4_Msk
#define TSC_IOSCR_G8_IO1_Pos (28U)
#define TSC_IOSCR_G8_IO1_Msk (0x1U << TSC_IOSCR_G8_IO1_Pos)
#define TSC_IOSCR_G8_IO1 TSC_IOSCR_G8_IO1_Msk
#define TSC_IOSCR_G8_IO2_Pos (29U)
#define TSC_IOSCR_G8_IO2_Msk (0x1U << TSC_IOSCR_G8_IO2_Pos)
#define TSC_IOSCR_G8_IO2 TSC_IOSCR_G8_IO2_Msk
#define TSC_IOSCR_G8_IO3_Pos (30U)
#define TSC_IOSCR_G8_IO3_Msk (0x1U << TSC_IOSCR_G8_IO3_Pos)
#define TSC_IOSCR_G8_IO3 TSC_IOSCR_G8_IO3_Msk
#define TSC_IOSCR_G8_IO4_Pos (31U)
#define TSC_IOSCR_G8_IO4_Msk (0x1U << TSC_IOSCR_G8_IO4_Pos)
#define TSC_IOSCR_G8_IO4 TSC_IOSCR_G8_IO4_Msk


#define TSC_IOCCR_G1_IO1_Pos (0U)
#define TSC_IOCCR_G1_IO1_Msk (0x1U << TSC_IOCCR_G1_IO1_Pos)
#define TSC_IOCCR_G1_IO1 TSC_IOCCR_G1_IO1_Msk
#define TSC_IOCCR_G1_IO2_Pos (1U)
#define TSC_IOCCR_G1_IO2_Msk (0x1U << TSC_IOCCR_G1_IO2_Pos)
#define TSC_IOCCR_G1_IO2 TSC_IOCCR_G1_IO2_Msk
#define TSC_IOCCR_G1_IO3_Pos (2U)
#define TSC_IOCCR_G1_IO3_Msk (0x1U << TSC_IOCCR_G1_IO3_Pos)
#define TSC_IOCCR_G1_IO3 TSC_IOCCR_G1_IO3_Msk
#define TSC_IOCCR_G1_IO4_Pos (3U)
#define TSC_IOCCR_G1_IO4_Msk (0x1U << TSC_IOCCR_G1_IO4_Pos)
#define TSC_IOCCR_G1_IO4 TSC_IOCCR_G1_IO4_Msk
#define TSC_IOCCR_G2_IO1_Pos (4U)
#define TSC_IOCCR_G2_IO1_Msk (0x1U << TSC_IOCCR_G2_IO1_Pos)
#define TSC_IOCCR_G2_IO1 TSC_IOCCR_G2_IO1_Msk
#define TSC_IOCCR_G2_IO2_Pos (5U)
#define TSC_IOCCR_G2_IO2_Msk (0x1U << TSC_IOCCR_G2_IO2_Pos)
#define TSC_IOCCR_G2_IO2 TSC_IOCCR_G2_IO2_Msk
#define TSC_IOCCR_G2_IO3_Pos (6U)
#define TSC_IOCCR_G2_IO3_Msk (0x1U << TSC_IOCCR_G2_IO3_Pos)
#define TSC_IOCCR_G2_IO3 TSC_IOCCR_G2_IO3_Msk
#define TSC_IOCCR_G2_IO4_Pos (7U)
#define TSC_IOCCR_G2_IO4_Msk (0x1U << TSC_IOCCR_G2_IO4_Pos)
#define TSC_IOCCR_G2_IO4 TSC_IOCCR_G2_IO4_Msk
#define TSC_IOCCR_G3_IO1_Pos (8U)
#define TSC_IOCCR_G3_IO1_Msk (0x1U << TSC_IOCCR_G3_IO1_Pos)
#define TSC_IOCCR_G3_IO1 TSC_IOCCR_G3_IO1_Msk
#define TSC_IOCCR_G3_IO2_Pos (9U)
#define TSC_IOCCR_G3_IO2_Msk (0x1U << TSC_IOCCR_G3_IO2_Pos)
#define TSC_IOCCR_G3_IO2 TSC_IOCCR_G3_IO2_Msk
#define TSC_IOCCR_G3_IO3_Pos (10U)
#define TSC_IOCCR_G3_IO3_Msk (0x1U << TSC_IOCCR_G3_IO3_Pos)
#define TSC_IOCCR_G3_IO3 TSC_IOCCR_G3_IO3_Msk
#define TSC_IOCCR_G3_IO4_Pos (11U)
#define TSC_IOCCR_G3_IO4_Msk (0x1U << TSC_IOCCR_G3_IO4_Pos)
#define TSC_IOCCR_G3_IO4 TSC_IOCCR_G3_IO4_Msk
#define TSC_IOCCR_G4_IO1_Pos (12U)
#define TSC_IOCCR_G4_IO1_Msk (0x1U << TSC_IOCCR_G4_IO1_Pos)
#define TSC_IOCCR_G4_IO1 TSC_IOCCR_G4_IO1_Msk
#define TSC_IOCCR_G4_IO2_Pos (13U)
#define TSC_IOCCR_G4_IO2_Msk (0x1U << TSC_IOCCR_G4_IO2_Pos)
#define TSC_IOCCR_G4_IO2 TSC_IOCCR_G4_IO2_Msk
#define TSC_IOCCR_G4_IO3_Pos (14U)
#define TSC_IOCCR_G4_IO3_Msk (0x1U << TSC_IOCCR_G4_IO3_Pos)
#define TSC_IOCCR_G4_IO3 TSC_IOCCR_G4_IO3_Msk
#define TSC_IOCCR_G4_IO4_Pos (15U)
#define TSC_IOCCR_G4_IO4_Msk (0x1U << TSC_IOCCR_G4_IO4_Pos)
#define TSC_IOCCR_G4_IO4 TSC_IOCCR_G4_IO4_Msk
#define TSC_IOCCR_G5_IO1_Pos (16U)
#define TSC_IOCCR_G5_IO1_Msk (0x1U << TSC_IOCCR_G5_IO1_Pos)
#define TSC_IOCCR_G5_IO1 TSC_IOCCR_G5_IO1_Msk
#define TSC_IOCCR_G5_IO2_Pos (17U)
#define TSC_IOCCR_G5_IO2_Msk (0x1U << TSC_IOCCR_G5_IO2_Pos)
#define TSC_IOCCR_G5_IO2 TSC_IOCCR_G5_IO2_Msk
#define TSC_IOCCR_G5_IO3_Pos (18U)
#define TSC_IOCCR_G5_IO3_Msk (0x1U << TSC_IOCCR_G5_IO3_Pos)
#define TSC_IOCCR_G5_IO3 TSC_IOCCR_G5_IO3_Msk
#define TSC_IOCCR_G5_IO4_Pos (19U)
#define TSC_IOCCR_G5_IO4_Msk (0x1U << TSC_IOCCR_G5_IO4_Pos)
#define TSC_IOCCR_G5_IO4 TSC_IOCCR_G5_IO4_Msk
#define TSC_IOCCR_G6_IO1_Pos (20U)
#define TSC_IOCCR_G6_IO1_Msk (0x1U << TSC_IOCCR_G6_IO1_Pos)
#define TSC_IOCCR_G6_IO1 TSC_IOCCR_G6_IO1_Msk
#define TSC_IOCCR_G6_IO2_Pos (21U)
#define TSC_IOCCR_G6_IO2_Msk (0x1U << TSC_IOCCR_G6_IO2_Pos)
#define TSC_IOCCR_G6_IO2 TSC_IOCCR_G6_IO2_Msk
#define TSC_IOCCR_G6_IO3_Pos (22U)
#define TSC_IOCCR_G6_IO3_Msk (0x1U << TSC_IOCCR_G6_IO3_Pos)
#define TSC_IOCCR_G6_IO3 TSC_IOCCR_G6_IO3_Msk
#define TSC_IOCCR_G6_IO4_Pos (23U)
#define TSC_IOCCR_G6_IO4_Msk (0x1U << TSC_IOCCR_G6_IO4_Pos)
#define TSC_IOCCR_G6_IO4 TSC_IOCCR_G6_IO4_Msk
#define TSC_IOCCR_G7_IO1_Pos (24U)
#define TSC_IOCCR_G7_IO1_Msk (0x1U << TSC_IOCCR_G7_IO1_Pos)
#define TSC_IOCCR_G7_IO1 TSC_IOCCR_G7_IO1_Msk
#define TSC_IOCCR_G7_IO2_Pos (25U)
#define TSC_IOCCR_G7_IO2_Msk (0x1U << TSC_IOCCR_G7_IO2_Pos)
#define TSC_IOCCR_G7_IO2 TSC_IOCCR_G7_IO2_Msk
#define TSC_IOCCR_G7_IO3_Pos (26U)
#define TSC_IOCCR_G7_IO3_Msk (0x1U << TSC_IOCCR_G7_IO3_Pos)
#define TSC_IOCCR_G7_IO3 TSC_IOCCR_G7_IO3_Msk
#define TSC_IOCCR_G7_IO4_Pos (27U)
#define TSC_IOCCR_G7_IO4_Msk (0x1U << TSC_IOCCR_G7_IO4_Pos)
#define TSC_IOCCR_G7_IO4 TSC_IOCCR_G7_IO4_Msk
#define TSC_IOCCR_G8_IO1_Pos (28U)
#define TSC_IOCCR_G8_IO1_Msk (0x1U << TSC_IOCCR_G8_IO1_Pos)
#define TSC_IOCCR_G8_IO1 TSC_IOCCR_G8_IO1_Msk
#define TSC_IOCCR_G8_IO2_Pos (29U)
#define TSC_IOCCR_G8_IO2_Msk (0x1U << TSC_IOCCR_G8_IO2_Pos)
#define TSC_IOCCR_G8_IO2 TSC_IOCCR_G8_IO2_Msk
#define TSC_IOCCR_G8_IO3_Pos (30U)
#define TSC_IOCCR_G8_IO3_Msk (0x1U << TSC_IOCCR_G8_IO3_Pos)
#define TSC_IOCCR_G8_IO3 TSC_IOCCR_G8_IO3_Msk
#define TSC_IOCCR_G8_IO4_Pos (31U)
#define TSC_IOCCR_G8_IO4_Msk (0x1U << TSC_IOCCR_G8_IO4_Pos)
#define TSC_IOCCR_G8_IO4 TSC_IOCCR_G8_IO4_Msk


#define TSC_IOGCSR_G1E_Pos (0U)
#define TSC_IOGCSR_G1E_Msk (0x1U << TSC_IOGCSR_G1E_Pos)
#define TSC_IOGCSR_G1E TSC_IOGCSR_G1E_Msk
#define TSC_IOGCSR_G2E_Pos (1U)
#define TSC_IOGCSR_G2E_Msk (0x1U << TSC_IOGCSR_G2E_Pos)
#define TSC_IOGCSR_G2E TSC_IOGCSR_G2E_Msk
#define TSC_IOGCSR_G3E_Pos (2U)
#define TSC_IOGCSR_G3E_Msk (0x1U << TSC_IOGCSR_G3E_Pos)
#define TSC_IOGCSR_G3E TSC_IOGCSR_G3E_Msk
#define TSC_IOGCSR_G4E_Pos (3U)
#define TSC_IOGCSR_G4E_Msk (0x1U << TSC_IOGCSR_G4E_Pos)
#define TSC_IOGCSR_G4E TSC_IOGCSR_G4E_Msk
#define TSC_IOGCSR_G5E_Pos (4U)
#define TSC_IOGCSR_G5E_Msk (0x1U << TSC_IOGCSR_G5E_Pos)
#define TSC_IOGCSR_G5E TSC_IOGCSR_G5E_Msk
#define TSC_IOGCSR_G6E_Pos (5U)
#define TSC_IOGCSR_G6E_Msk (0x1U << TSC_IOGCSR_G6E_Pos)
#define TSC_IOGCSR_G6E TSC_IOGCSR_G6E_Msk
#define TSC_IOGCSR_G7E_Pos (6U)
#define TSC_IOGCSR_G7E_Msk (0x1U << TSC_IOGCSR_G7E_Pos)
#define TSC_IOGCSR_G7E TSC_IOGCSR_G7E_Msk
#define TSC_IOGCSR_G8E_Pos (7U)
#define TSC_IOGCSR_G8E_Msk (0x1U << TSC_IOGCSR_G8E_Pos)
#define TSC_IOGCSR_G8E TSC_IOGCSR_G8E_Msk
#define TSC_IOGCSR_G1S_Pos (16U)
#define TSC_IOGCSR_G1S_Msk (0x1U << TSC_IOGCSR_G1S_Pos)
#define TSC_IOGCSR_G1S TSC_IOGCSR_G1S_Msk
#define TSC_IOGCSR_G2S_Pos (17U)
#define TSC_IOGCSR_G2S_Msk (0x1U << TSC_IOGCSR_G2S_Pos)
#define TSC_IOGCSR_G2S TSC_IOGCSR_G2S_Msk
#define TSC_IOGCSR_G3S_Pos (18U)
#define TSC_IOGCSR_G3S_Msk (0x1U << TSC_IOGCSR_G3S_Pos)
#define TSC_IOGCSR_G3S TSC_IOGCSR_G3S_Msk
#define TSC_IOGCSR_G4S_Pos (19U)
#define TSC_IOGCSR_G4S_Msk (0x1U << TSC_IOGCSR_G4S_Pos)
#define TSC_IOGCSR_G4S TSC_IOGCSR_G4S_Msk
#define TSC_IOGCSR_G5S_Pos (20U)
#define TSC_IOGCSR_G5S_Msk (0x1U << TSC_IOGCSR_G5S_Pos)
#define TSC_IOGCSR_G5S TSC_IOGCSR_G5S_Msk
#define TSC_IOGCSR_G6S_Pos (21U)
#define TSC_IOGCSR_G6S_Msk (0x1U << TSC_IOGCSR_G6S_Pos)
#define TSC_IOGCSR_G6S TSC_IOGCSR_G6S_Msk
#define TSC_IOGCSR_G7S_Pos (22U)
#define TSC_IOGCSR_G7S_Msk (0x1U << TSC_IOGCSR_G7S_Pos)
#define TSC_IOGCSR_G7S TSC_IOGCSR_G7S_Msk
#define TSC_IOGCSR_G8S_Pos (23U)
#define TSC_IOGCSR_G8S_Msk (0x1U << TSC_IOGCSR_G8S_Pos)
#define TSC_IOGCSR_G8S TSC_IOGCSR_G8S_Msk


#define TSC_IOGXCR_CNT_Pos (0U)
#define TSC_IOGXCR_CNT_Msk (0x3FFFU << TSC_IOGXCR_CNT_Pos)
#define TSC_IOGXCR_CNT TSC_IOGXCR_CNT_Msk







#define USART_CR1_UE_Pos (0U)
#define USART_CR1_UE_Msk (0x1U << USART_CR1_UE_Pos)
#define USART_CR1_UE USART_CR1_UE_Msk
#define USART_CR1_UESM_Pos (1U)
#define USART_CR1_UESM_Msk (0x1U << USART_CR1_UESM_Pos)
#define USART_CR1_UESM USART_CR1_UESM_Msk
#define USART_CR1_RE_Pos (2U)
#define USART_CR1_RE_Msk (0x1U << USART_CR1_RE_Pos)
#define USART_CR1_RE USART_CR1_RE_Msk
#define USART_CR1_TE_Pos (3U)
#define USART_CR1_TE_Msk (0x1U << USART_CR1_TE_Pos)
#define USART_CR1_TE USART_CR1_TE_Msk
#define USART_CR1_IDLEIE_Pos (4U)
#define USART_CR1_IDLEIE_Msk (0x1U << USART_CR1_IDLEIE_Pos)
#define USART_CR1_IDLEIE USART_CR1_IDLEIE_Msk
#define USART_CR1_RXNEIE_Pos (5U)
#define USART_CR1_RXNEIE_Msk (0x1U << USART_CR1_RXNEIE_Pos)
#define USART_CR1_RXNEIE USART_CR1_RXNEIE_Msk
#define USART_CR1_TCIE_Pos (6U)
#define USART_CR1_TCIE_Msk (0x1U << USART_CR1_TCIE_Pos)
#define USART_CR1_TCIE USART_CR1_TCIE_Msk
#define USART_CR1_TXEIE_Pos (7U)
#define USART_CR1_TXEIE_Msk (0x1U << USART_CR1_TXEIE_Pos)
#define USART_CR1_TXEIE USART_CR1_TXEIE_Msk
#define USART_CR1_PEIE_Pos (8U)
#define USART_CR1_PEIE_Msk (0x1U << USART_CR1_PEIE_Pos)
#define USART_CR1_PEIE USART_CR1_PEIE_Msk
#define USART_CR1_PS_Pos (9U)
#define USART_CR1_PS_Msk (0x1U << USART_CR1_PS_Pos)
#define USART_CR1_PS USART_CR1_PS_Msk
#define USART_CR1_PCE_Pos (10U)
#define USART_CR1_PCE_Msk (0x1U << USART_CR1_PCE_Pos)
#define USART_CR1_PCE USART_CR1_PCE_Msk
#define USART_CR1_WAKE_Pos (11U)
#define USART_CR1_WAKE_Msk (0x1U << USART_CR1_WAKE_Pos)
#define USART_CR1_WAKE USART_CR1_WAKE_Msk
#define USART_CR1_M_Pos (12U)
#define USART_CR1_M_Msk (0x1U << USART_CR1_M_Pos)
#define USART_CR1_M USART_CR1_M_Msk
#define USART_CR1_M0_Pos (12U)
#define USART_CR1_M0_Msk (0x1U << USART_CR1_M0_Pos)
#define USART_CR1_M0 USART_CR1_M0_Msk
#define USART_CR1_MME_Pos (13U)
#define USART_CR1_MME_Msk (0x1U << USART_CR1_MME_Pos)
#define USART_CR1_MME USART_CR1_MME_Msk
#define USART_CR1_CMIE_Pos (14U)
#define USART_CR1_CMIE_Msk (0x1U << USART_CR1_CMIE_Pos)
#define USART_CR1_CMIE USART_CR1_CMIE_Msk
#define USART_CR1_OVER8_Pos (15U)
#define USART_CR1_OVER8_Msk (0x1U << USART_CR1_OVER8_Pos)
#define USART_CR1_OVER8 USART_CR1_OVER8_Msk
#define USART_CR1_DEDT_Pos (16U)
#define USART_CR1_DEDT_Msk (0x1FU << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT USART_CR1_DEDT_Msk
#define USART_CR1_DEDT_0 (0x01U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_1 (0x02U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_2 (0x04U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_3 (0x08U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_4 (0x10U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEAT_Pos (21U)
#define USART_CR1_DEAT_Msk (0x1FU << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT USART_CR1_DEAT_Msk
#define USART_CR1_DEAT_0 (0x01U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_1 (0x02U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_2 (0x04U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_3 (0x08U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_4 (0x10U << USART_CR1_DEAT_Pos)
#define USART_CR1_RTOIE_Pos (26U)
#define USART_CR1_RTOIE_Msk (0x1U << USART_CR1_RTOIE_Pos)
#define USART_CR1_RTOIE USART_CR1_RTOIE_Msk
#define USART_CR1_EOBIE_Pos (27U)
#define USART_CR1_EOBIE_Msk (0x1U << USART_CR1_EOBIE_Pos)
#define USART_CR1_EOBIE USART_CR1_EOBIE_Msk


#define USART_CR2_ADDM7_Pos (4U)
#define USART_CR2_ADDM7_Msk (0x1U << USART_CR2_ADDM7_Pos)
#define USART_CR2_ADDM7 USART_CR2_ADDM7_Msk
#define USART_CR2_LBDL_Pos (5U)
#define USART_CR2_LBDL_Msk (0x1U << USART_CR2_LBDL_Pos)
#define USART_CR2_LBDL USART_CR2_LBDL_Msk
#define USART_CR2_LBDIE_Pos (6U)
#define USART_CR2_LBDIE_Msk (0x1U << USART_CR2_LBDIE_Pos)
#define USART_CR2_LBDIE USART_CR2_LBDIE_Msk
#define USART_CR2_LBCL_Pos (8U)
#define USART_CR2_LBCL_Msk (0x1U << USART_CR2_LBCL_Pos)
#define USART_CR2_LBCL USART_CR2_LBCL_Msk
#define USART_CR2_CPHA_Pos (9U)
#define USART_CR2_CPHA_Msk (0x1U << USART_CR2_CPHA_Pos)
#define USART_CR2_CPHA USART_CR2_CPHA_Msk
#define USART_CR2_CPOL_Pos (10U)
#define USART_CR2_CPOL_Msk (0x1U << USART_CR2_CPOL_Pos)
#define USART_CR2_CPOL USART_CR2_CPOL_Msk
#define USART_CR2_CLKEN_Pos (11U)
#define USART_CR2_CLKEN_Msk (0x1U << USART_CR2_CLKEN_Pos)
#define USART_CR2_CLKEN USART_CR2_CLKEN_Msk
#define USART_CR2_STOP_Pos (12U)
#define USART_CR2_STOP_Msk (0x3U << USART_CR2_STOP_Pos)
#define USART_CR2_STOP USART_CR2_STOP_Msk
#define USART_CR2_STOP_0 (0x1U << USART_CR2_STOP_Pos)
#define USART_CR2_STOP_1 (0x2U << USART_CR2_STOP_Pos)
#define USART_CR2_LINEN_Pos (14U)
#define USART_CR2_LINEN_Msk (0x1U << USART_CR2_LINEN_Pos)
#define USART_CR2_LINEN USART_CR2_LINEN_Msk
#define USART_CR2_SWAP_Pos (15U)
#define USART_CR2_SWAP_Msk (0x1U << USART_CR2_SWAP_Pos)
#define USART_CR2_SWAP USART_CR2_SWAP_Msk
#define USART_CR2_RXINV_Pos (16U)
#define USART_CR2_RXINV_Msk (0x1U << USART_CR2_RXINV_Pos)
#define USART_CR2_RXINV USART_CR2_RXINV_Msk
#define USART_CR2_TXINV_Pos (17U)
#define USART_CR2_TXINV_Msk (0x1U << USART_CR2_TXINV_Pos)
#define USART_CR2_TXINV USART_CR2_TXINV_Msk
#define USART_CR2_DATAINV_Pos (18U)
#define USART_CR2_DATAINV_Msk (0x1U << USART_CR2_DATAINV_Pos)
#define USART_CR2_DATAINV USART_CR2_DATAINV_Msk
#define USART_CR2_MSBFIRST_Pos (19U)
#define USART_CR2_MSBFIRST_Msk (0x1U << USART_CR2_MSBFIRST_Pos)
#define USART_CR2_MSBFIRST USART_CR2_MSBFIRST_Msk
#define USART_CR2_ABREN_Pos (20U)
#define USART_CR2_ABREN_Msk (0x1U << USART_CR2_ABREN_Pos)
#define USART_CR2_ABREN USART_CR2_ABREN_Msk
#define USART_CR2_ABRMODE_Pos (21U)
#define USART_CR2_ABRMODE_Msk (0x3U << USART_CR2_ABRMODE_Pos)
#define USART_CR2_ABRMODE USART_CR2_ABRMODE_Msk
#define USART_CR2_ABRMODE_0 (0x1U << USART_CR2_ABRMODE_Pos)
#define USART_CR2_ABRMODE_1 (0x2U << USART_CR2_ABRMODE_Pos)
#define USART_CR2_RTOEN_Pos (23U)
#define USART_CR2_RTOEN_Msk (0x1U << USART_CR2_RTOEN_Pos)
#define USART_CR2_RTOEN USART_CR2_RTOEN_Msk
#define USART_CR2_ADD_Pos (24U)
#define USART_CR2_ADD_Msk (0xFFU << USART_CR2_ADD_Pos)
#define USART_CR2_ADD USART_CR2_ADD_Msk


#define USART_CR3_EIE_Pos (0U)
#define USART_CR3_EIE_Msk (0x1U << USART_CR3_EIE_Pos)
#define USART_CR3_EIE USART_CR3_EIE_Msk
#define USART_CR3_IREN_Pos (1U)
#define USART_CR3_IREN_Msk (0x1U << USART_CR3_IREN_Pos)
#define USART_CR3_IREN USART_CR3_IREN_Msk
#define USART_CR3_IRLP_Pos (2U)
#define USART_CR3_IRLP_Msk (0x1U << USART_CR3_IRLP_Pos)
#define USART_CR3_IRLP USART_CR3_IRLP_Msk
#define USART_CR3_HDSEL_Pos (3U)
#define USART_CR3_HDSEL_Msk (0x1U << USART_CR3_HDSEL_Pos)
#define USART_CR3_HDSEL USART_CR3_HDSEL_Msk
#define USART_CR3_NACK_Pos (4U)
#define USART_CR3_NACK_Msk (0x1U << USART_CR3_NACK_Pos)
#define USART_CR3_NACK USART_CR3_NACK_Msk
#define USART_CR3_SCEN_Pos (5U)
#define USART_CR3_SCEN_Msk (0x1U << USART_CR3_SCEN_Pos)
#define USART_CR3_SCEN USART_CR3_SCEN_Msk
#define USART_CR3_DMAR_Pos (6U)
#define USART_CR3_DMAR_Msk (0x1U << USART_CR3_DMAR_Pos)
#define USART_CR3_DMAR USART_CR3_DMAR_Msk
#define USART_CR3_DMAT_Pos (7U)
#define USART_CR3_DMAT_Msk (0x1U << USART_CR3_DMAT_Pos)
#define USART_CR3_DMAT USART_CR3_DMAT_Msk
#define USART_CR3_RTSE_Pos (8U)
#define USART_CR3_RTSE_Msk (0x1U << USART_CR3_RTSE_Pos)
#define USART_CR3_RTSE USART_CR3_RTSE_Msk
#define USART_CR3_CTSE_Pos (9U)
#define USART_CR3_CTSE_Msk (0x1U << USART_CR3_CTSE_Pos)
#define USART_CR3_CTSE USART_CR3_CTSE_Msk
#define USART_CR3_CTSIE_Pos (10U)
#define USART_CR3_CTSIE_Msk (0x1U << USART_CR3_CTSIE_Pos)
#define USART_CR3_CTSIE USART_CR3_CTSIE_Msk
#define USART_CR3_ONEBIT_Pos (11U)
#define USART_CR3_ONEBIT_Msk (0x1U << USART_CR3_ONEBIT_Pos)
#define USART_CR3_ONEBIT USART_CR3_ONEBIT_Msk
#define USART_CR3_OVRDIS_Pos (12U)
#define USART_CR3_OVRDIS_Msk (0x1U << USART_CR3_OVRDIS_Pos)
#define USART_CR3_OVRDIS USART_CR3_OVRDIS_Msk
#define USART_CR3_DDRE_Pos (13U)
#define USART_CR3_DDRE_Msk (0x1U << USART_CR3_DDRE_Pos)
#define USART_CR3_DDRE USART_CR3_DDRE_Msk
#define USART_CR3_DEM_Pos (14U)
#define USART_CR3_DEM_Msk (0x1U << USART_CR3_DEM_Pos)
#define USART_CR3_DEM USART_CR3_DEM_Msk
#define USART_CR3_DEP_Pos (15U)
#define USART_CR3_DEP_Msk (0x1U << USART_CR3_DEP_Pos)
#define USART_CR3_DEP USART_CR3_DEP_Msk
#define USART_CR3_SCARCNT_Pos (17U)
#define USART_CR3_SCARCNT_Msk (0x7U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT USART_CR3_SCARCNT_Msk
#define USART_CR3_SCARCNT_0 (0x1U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT_1 (0x2U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT_2 (0x4U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_WUS_Pos (20U)
#define USART_CR3_WUS_Msk (0x3U << USART_CR3_WUS_Pos)
#define USART_CR3_WUS USART_CR3_WUS_Msk
#define USART_CR3_WUS_0 (0x1U << USART_CR3_WUS_Pos)
#define USART_CR3_WUS_1 (0x2U << USART_CR3_WUS_Pos)
#define USART_CR3_WUFIE_Pos (22U)
#define USART_CR3_WUFIE_Msk (0x1U << USART_CR3_WUFIE_Pos)
#define USART_CR3_WUFIE USART_CR3_WUFIE_Msk


#define USART_BRR_DIV_FRACTION_Pos (0U)
#define USART_BRR_DIV_FRACTION_Msk (0xFU << USART_BRR_DIV_FRACTION_Pos)
#define USART_BRR_DIV_FRACTION USART_BRR_DIV_FRACTION_Msk
#define USART_BRR_DIV_MANTISSA_Pos (4U)
#define USART_BRR_DIV_MANTISSA_Msk (0xFFFU << USART_BRR_DIV_MANTISSA_Pos)
#define USART_BRR_DIV_MANTISSA USART_BRR_DIV_MANTISSA_Msk


#define USART_GTPR_PSC_Pos (0U)
#define USART_GTPR_PSC_Msk (0xFFU << USART_GTPR_PSC_Pos)
#define USART_GTPR_PSC USART_GTPR_PSC_Msk
#define USART_GTPR_GT_Pos (8U)
#define USART_GTPR_GT_Msk (0xFFU << USART_GTPR_GT_Pos)
#define USART_GTPR_GT USART_GTPR_GT_Msk



#define USART_RTOR_RTO_Pos (0U)
#define USART_RTOR_RTO_Msk (0xFFFFFFU << USART_RTOR_RTO_Pos)
#define USART_RTOR_RTO USART_RTOR_RTO_Msk
#define USART_RTOR_BLEN_Pos (24U)
#define USART_RTOR_BLEN_Msk (0xFFU << USART_RTOR_BLEN_Pos)
#define USART_RTOR_BLEN USART_RTOR_BLEN_Msk


#define USART_RQR_ABRRQ_Pos (0U)
#define USART_RQR_ABRRQ_Msk (0x1U << USART_RQR_ABRRQ_Pos)
#define USART_RQR_ABRRQ USART_RQR_ABRRQ_Msk
#define USART_RQR_SBKRQ_Pos (1U)
#define USART_RQR_SBKRQ_Msk (0x1U << USART_RQR_SBKRQ_Pos)
#define USART_RQR_SBKRQ USART_RQR_SBKRQ_Msk
#define USART_RQR_MMRQ_Pos (2U)
#define USART_RQR_MMRQ_Msk (0x1U << USART_RQR_MMRQ_Pos)
#define USART_RQR_MMRQ USART_RQR_MMRQ_Msk
#define USART_RQR_RXFRQ_Pos (3U)
#define USART_RQR_RXFRQ_Msk (0x1U << USART_RQR_RXFRQ_Pos)
#define USART_RQR_RXFRQ USART_RQR_RXFRQ_Msk
#define USART_RQR_TXFRQ_Pos (4U)
#define USART_RQR_TXFRQ_Msk (0x1U << USART_RQR_TXFRQ_Pos)
#define USART_RQR_TXFRQ USART_RQR_TXFRQ_Msk


#define USART_ISR_PE_Pos (0U)
#define USART_ISR_PE_Msk (0x1U << USART_ISR_PE_Pos)
#define USART_ISR_PE USART_ISR_PE_Msk
#define USART_ISR_FE_Pos (1U)
#define USART_ISR_FE_Msk (0x1U << USART_ISR_FE_Pos)
#define USART_ISR_FE USART_ISR_FE_Msk
#define USART_ISR_NE_Pos (2U)
#define USART_ISR_NE_Msk (0x1U << USART_ISR_NE_Pos)
#define USART_ISR_NE USART_ISR_NE_Msk
#define USART_ISR_ORE_Pos (3U)
#define USART_ISR_ORE_Msk (0x1U << USART_ISR_ORE_Pos)
#define USART_ISR_ORE USART_ISR_ORE_Msk
#define USART_ISR_IDLE_Pos (4U)
#define USART_ISR_IDLE_Msk (0x1U << USART_ISR_IDLE_Pos)
#define USART_ISR_IDLE USART_ISR_IDLE_Msk
#define USART_ISR_RXNE_Pos (5U)
#define USART_ISR_RXNE_Msk (0x1U << USART_ISR_RXNE_Pos)
#define USART_ISR_RXNE USART_ISR_RXNE_Msk
#define USART_ISR_TC_Pos (6U)
#define USART_ISR_TC_Msk (0x1U << USART_ISR_TC_Pos)
#define USART_ISR_TC USART_ISR_TC_Msk
#define USART_ISR_TXE_Pos (7U)
#define USART_ISR_TXE_Msk (0x1U << USART_ISR_TXE_Pos)
#define USART_ISR_TXE USART_ISR_TXE_Msk
#define USART_ISR_LBDF_Pos (8U)
#define USART_ISR_LBDF_Msk (0x1U << USART_ISR_LBDF_Pos)
#define USART_ISR_LBDF USART_ISR_LBDF_Msk
#define USART_ISR_CTSIF_Pos (9U)
#define USART_ISR_CTSIF_Msk (0x1U << USART_ISR_CTSIF_Pos)
#define USART_ISR_CTSIF USART_ISR_CTSIF_Msk
#define USART_ISR_CTS_Pos (10U)
#define USART_ISR_CTS_Msk (0x1U << USART_ISR_CTS_Pos)
#define USART_ISR_CTS USART_ISR_CTS_Msk
#define USART_ISR_RTOF_Pos (11U)
#define USART_ISR_RTOF_Msk (0x1U << USART_ISR_RTOF_Pos)
#define USART_ISR_RTOF USART_ISR_RTOF_Msk
#define USART_ISR_EOBF_Pos (12U)
#define USART_ISR_EOBF_Msk (0x1U << USART_ISR_EOBF_Pos)
#define USART_ISR_EOBF USART_ISR_EOBF_Msk
#define USART_ISR_ABRE_Pos (14U)
#define USART_ISR_ABRE_Msk (0x1U << USART_ISR_ABRE_Pos)
#define USART_ISR_ABRE USART_ISR_ABRE_Msk
#define USART_ISR_ABRF_Pos (15U)
#define USART_ISR_ABRF_Msk (0x1U << USART_ISR_ABRF_Pos)
#define USART_ISR_ABRF USART_ISR_ABRF_Msk
#define USART_ISR_BUSY_Pos (16U)
#define USART_ISR_BUSY_Msk (0x1U << USART_ISR_BUSY_Pos)
#define USART_ISR_BUSY USART_ISR_BUSY_Msk
#define USART_ISR_CMF_Pos (17U)
#define USART_ISR_CMF_Msk (0x1U << USART_ISR_CMF_Pos)
#define USART_ISR_CMF USART_ISR_CMF_Msk
#define USART_ISR_SBKF_Pos (18U)
#define USART_ISR_SBKF_Msk (0x1U << USART_ISR_SBKF_Pos)
#define USART_ISR_SBKF USART_ISR_SBKF_Msk
#define USART_ISR_RWU_Pos (19U)
#define USART_ISR_RWU_Msk (0x1U << USART_ISR_RWU_Pos)
#define USART_ISR_RWU USART_ISR_RWU_Msk
#define USART_ISR_WUF_Pos (20U)
#define USART_ISR_WUF_Msk (0x1U << USART_ISR_WUF_Pos)
#define USART_ISR_WUF USART_ISR_WUF_Msk
#define USART_ISR_TEACK_Pos (21U)
#define USART_ISR_TEACK_Msk (0x1U << USART_ISR_TEACK_Pos)
#define USART_ISR_TEACK USART_ISR_TEACK_Msk
#define USART_ISR_REACK_Pos (22U)
#define USART_ISR_REACK_Msk (0x1U << USART_ISR_REACK_Pos)
#define USART_ISR_REACK USART_ISR_REACK_Msk


#define USART_ICR_PECF_Pos (0U)
#define USART_ICR_PECF_Msk (0x1U << USART_ICR_PECF_Pos)
#define USART_ICR_PECF USART_ICR_PECF_Msk
#define USART_ICR_FECF_Pos (1U)
#define USART_ICR_FECF_Msk (0x1U << USART_ICR_FECF_Pos)
#define USART_ICR_FECF USART_ICR_FECF_Msk
#define USART_ICR_NCF_Pos (2U)
#define USART_ICR_NCF_Msk (0x1U << USART_ICR_NCF_Pos)
#define USART_ICR_NCF USART_ICR_NCF_Msk
#define USART_ICR_ORECF_Pos (3U)
#define USART_ICR_ORECF_Msk (0x1U << USART_ICR_ORECF_Pos)
#define USART_ICR_ORECF USART_ICR_ORECF_Msk
#define USART_ICR_IDLECF_Pos (4U)
#define USART_ICR_IDLECF_Msk (0x1U << USART_ICR_IDLECF_Pos)
#define USART_ICR_IDLECF USART_ICR_IDLECF_Msk
#define USART_ICR_TCCF_Pos (6U)
#define USART_ICR_TCCF_Msk (0x1U << USART_ICR_TCCF_Pos)
#define USART_ICR_TCCF USART_ICR_TCCF_Msk
#define USART_ICR_LBDCF_Pos (8U)
#define USART_ICR_LBDCF_Msk (0x1U << USART_ICR_LBDCF_Pos)
#define USART_ICR_LBDCF USART_ICR_LBDCF_Msk
#define USART_ICR_CTSCF_Pos (9U)
#define USART_ICR_CTSCF_Msk (0x1U << USART_ICR_CTSCF_Pos)
#define USART_ICR_CTSCF USART_ICR_CTSCF_Msk
#define USART_ICR_RTOCF_Pos (11U)
#define USART_ICR_RTOCF_Msk (0x1U << USART_ICR_RTOCF_Pos)
#define USART_ICR_RTOCF USART_ICR_RTOCF_Msk
#define USART_ICR_EOBCF_Pos (12U)
#define USART_ICR_EOBCF_Msk (0x1U << USART_ICR_EOBCF_Pos)
#define USART_ICR_EOBCF USART_ICR_EOBCF_Msk
#define USART_ICR_CMCF_Pos (17U)
#define USART_ICR_CMCF_Msk (0x1U << USART_ICR_CMCF_Pos)
#define USART_ICR_CMCF USART_ICR_CMCF_Msk
#define USART_ICR_WUCF_Pos (20U)
#define USART_ICR_WUCF_Msk (0x1U << USART_ICR_WUCF_Pos)
#define USART_ICR_WUCF USART_ICR_WUCF_Msk


#define USART_RDR_RDR_Pos (0U)
#define USART_RDR_RDR_Msk (0x1FFU << USART_RDR_RDR_Pos)
#define USART_RDR_RDR USART_RDR_RDR_Msk


#define USART_TDR_TDR_Pos (0U)
#define USART_TDR_TDR_Msk (0x1FFU << USART_TDR_TDR_Pos)
#define USART_TDR_TDR USART_TDR_TDR_Msk






#define USB_CNTR (USB_BASE + 0x40U)
#define USB_ISTR (USB_BASE + 0x44U)
#define USB_FNR (USB_BASE + 0x48U)
#define USB_DADDR (USB_BASE + 0x4CU)
#define USB_BTABLE (USB_BASE + 0x50U)


#define USB_ISTR_CTR ((uint16_t)0x8000U)
#define USB_ISTR_PMAOVR ((uint16_t)0x4000U)
#define USB_ISTR_ERR ((uint16_t)0x2000U)
#define USB_ISTR_WKUP ((uint16_t)0x1000U)
#define USB_ISTR_SUSP ((uint16_t)0x0800U)
#define USB_ISTR_RESET ((uint16_t)0x0400U)
#define USB_ISTR_SOF ((uint16_t)0x0200U)
#define USB_ISTR_ESOF ((uint16_t)0x0100U)
#define USB_ISTR_DIR ((uint16_t)0x0010U)
#define USB_ISTR_EP_ID ((uint16_t)0x000FU)


#define USB_ISTR_PMAOVRM USB_ISTR_PMAOVR

#define USB_CLR_CTR (~USB_ISTR_CTR)
#define USB_CLR_PMAOVR (~USB_ISTR_PMAOVR)
#define USB_CLR_ERR (~USB_ISTR_ERR)
#define USB_CLR_WKUP (~USB_ISTR_WKUP)
#define USB_CLR_SUSP (~USB_ISTR_SUSP)
#define USB_CLR_RESET (~USB_ISTR_RESET)
#define USB_CLR_SOF (~USB_ISTR_SOF)
#define USB_CLR_ESOF (~USB_ISTR_ESOF)


#define USB_CLR_PMAOVRM USB_CLR_PMAOVR


#define USB_CNTR_CTRM ((uint16_t)0x8000U)
#define USB_CNTR_PMAOVR ((uint16_t)0x4000U)
#define USB_CNTR_ERRM ((uint16_t)0x2000U)
#define USB_CNTR_WKUPM ((uint16_t)0x1000U)
#define USB_CNTR_SUSPM ((uint16_t)0x0800U)
#define USB_CNTR_RESETM ((uint16_t)0x0400U)
#define USB_CNTR_SOFM ((uint16_t)0x0200U)
#define USB_CNTR_ESOFM ((uint16_t)0x0100U)
#define USB_CNTR_RESUME ((uint16_t)0x0010U)
#define USB_CNTR_FSUSP ((uint16_t)0x0008U)
#define USB_CNTR_LPMODE ((uint16_t)0x0004U)
#define USB_CNTR_PDWN ((uint16_t)0x0002U)
#define USB_CNTR_FRES ((uint16_t)0x0001U)


#define USB_CNTR_PMAOVRM USB_CNTR_PMAOVR
#define USB_CNTR_LP_MODE USB_CNTR_LPMODE


#define USB_FNR_RXDP ((uint16_t)0x8000U)
#define USB_FNR_RXDM ((uint16_t)0x4000U)
#define USB_FNR_LCK ((uint16_t)0x2000U)
#define USB_FNR_LSOF ((uint16_t)0x1800U)
#define USB_FNR_FN ((uint16_t)0x07FFU)


#define USB_DADDR_EF ((uint8_t)0x80U)
#define USB_DADDR_ADD ((uint8_t)0x7FU)


#define USB_EP0R USB_BASE
#define USB_EP1R (USB_BASE + 0x04U)
#define USB_EP2R (USB_BASE + 0x08U)
#define USB_EP3R (USB_BASE + 0x0CU)
#define USB_EP4R (USB_BASE + 0x10U)
#define USB_EP5R (USB_BASE + 0x14U)
#define USB_EP6R (USB_BASE + 0x18U)
#define USB_EP7R (USB_BASE + 0x1CU)

#define USB_EP_CTR_RX ((uint16_t)0x8000U)
#define USB_EP_DTOG_RX ((uint16_t)0x4000U)
#define USB_EPRX_STAT ((uint16_t)0x3000U)
#define USB_EP_SETUP ((uint16_t)0x0800U)
#define USB_EP_T_FIELD ((uint16_t)0x0600U)
#define USB_EP_KIND ((uint16_t)0x0100U)
#define USB_EP_CTR_TX ((uint16_t)0x0080U)
#define USB_EP_DTOG_TX ((uint16_t)0x0040U)
#define USB_EPTX_STAT ((uint16_t)0x0030U)
#define USB_EPADDR_FIELD ((uint16_t)0x000FU)


#define USB_EPREG_MASK (USB_EP_CTR_RX|USB_EP_SETUP|USB_EP_T_FIELD|USB_EP_KIND|USB_EP_CTR_TX|USB_EPADDR_FIELD)

#define USB_EP_TYPE_MASK ((uint16_t)0x0600U)
#define USB_EP_BULK ((uint16_t)0x0000U)
#define USB_EP_CONTROL ((uint16_t)0x0200U)
#define USB_EP_ISOCHRONOUS ((uint16_t)0x0400U)
#define USB_EP_INTERRUPT ((uint16_t)0x0600U)
#define USB_EP_T_MASK ((uint16_t) ~USB_EP_T_FIELD & USB_EPREG_MASK)

#define USB_EPKIND_MASK ((uint16_t) ~USB_EP_KIND & USB_EPREG_MASK)

#define USB_EP_TX_DIS ((uint16_t)0x0000U)
#define USB_EP_TX_STALL ((uint16_t)0x0010U)
#define USB_EP_TX_NAK ((uint16_t)0x0020U)
#define USB_EP_TX_VALID ((uint16_t)0x0030U)
#define USB_EPTX_DTOG1 ((uint16_t)0x0010U)
#define USB_EPTX_DTOG2 ((uint16_t)0x0020U)
#define USB_EPTX_DTOGMASK (USB_EPTX_STAT|USB_EPREG_MASK)

#define USB_EP_RX_DIS ((uint16_t)0x0000U)
#define USB_EP_RX_STALL ((uint16_t)0x1000U)
#define USB_EP_RX_NAK ((uint16_t)0x2000U)
#define USB_EP_RX_VALID ((uint16_t)0x3000U)
#define USB_EPRX_DTOG1 ((uint16_t)0x1000U)
#define USB_EPRX_DTOG2 ((uint16_t)0x2000U)
#define USB_EPRX_DTOGMASK (USB_EPRX_STAT|USB_EPREG_MASK)







#define WWDG_CR_T_Pos (0U)
#define WWDG_CR_T_Msk (0x7FU << WWDG_CR_T_Pos)
#define WWDG_CR_T WWDG_CR_T_Msk
#define WWDG_CR_T_0 (0x01U << WWDG_CR_T_Pos)
#define WWDG_CR_T_1 (0x02U << WWDG_CR_T_Pos)
#define WWDG_CR_T_2 (0x04U << WWDG_CR_T_Pos)
#define WWDG_CR_T_3 (0x08U << WWDG_CR_T_Pos)
#define WWDG_CR_T_4 (0x10U << WWDG_CR_T_Pos)
#define WWDG_CR_T_5 (0x20U << WWDG_CR_T_Pos)
#define WWDG_CR_T_6 (0x40U << WWDG_CR_T_Pos)


#define WWDG_CR_T0 WWDG_CR_T_0
#define WWDG_CR_T1 WWDG_CR_T_1
#define WWDG_CR_T2 WWDG_CR_T_2
#define WWDG_CR_T3 WWDG_CR_T_3
#define WWDG_CR_T4 WWDG_CR_T_4
#define WWDG_CR_T5 WWDG_CR_T_5
#define WWDG_CR_T6 WWDG_CR_T_6

#define WWDG_CR_WDGA_Pos (7U)
#define WWDG_CR_WDGA_Msk (0x1U << WWDG_CR_WDGA_Pos)
#define WWDG_CR_WDGA WWDG_CR_WDGA_Msk


#define WWDG_CFR_W_Pos (0U)
#define WWDG_CFR_W_Msk (0x7FU << WWDG_CFR_W_Pos)
#define WWDG_CFR_W WWDG_CFR_W_Msk
#define WWDG_CFR_W_0 (0x01U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_1 (0x02U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_2 (0x04U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_3 (0x08U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_4 (0x10U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_5 (0x20U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_6 (0x40U << WWDG_CFR_W_Pos)


#define WWDG_CFR_W0 WWDG_CFR_W_0
#define WWDG_CFR_W1 WWDG_CFR_W_1
#define WWDG_CFR_W2 WWDG_CFR_W_2
#define WWDG_CFR_W3 WWDG_CFR_W_3
#define WWDG_CFR_W4 WWDG_CFR_W_4
#define WWDG_CFR_W5 WWDG_CFR_W_5
#define WWDG_CFR_W6 WWDG_CFR_W_6

#define WWDG_CFR_WDGTB_Pos (7U)
#define WWDG_CFR_WDGTB_Msk (0x3U << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_WDGTB WWDG_CFR_WDGTB_Msk
#define WWDG_CFR_WDGTB_0 (0x1U << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_WDGTB_1 (0x2U << WWDG_CFR_WDGTB_Pos)


#define WWDG_CFR_WDGTB0 WWDG_CFR_WDGTB_0
#define WWDG_CFR_WDGTB1 WWDG_CFR_WDGTB_1

#define WWDG_CFR_EWI_Pos (9U)
#define WWDG_CFR_EWI_Msk (0x1U << WWDG_CFR_EWI_Pos)
#define WWDG_CFR_EWI WWDG_CFR_EWI_Msk


#define WWDG_SR_EWIF_Pos (0U)
#define WWDG_SR_EWIF_Msk (0x1U << WWDG_SR_EWIF_Pos)
#define WWDG_SR_EWIF WWDG_SR_EWIF_Msk
# 12785 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_ADC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == ADC1) || ((INSTANCE) == ADC2) || ((INSTANCE) == ADC3) || ((INSTANCE) == ADC4))




#define IS_ADC_MULTIMODE_MASTER_INSTANCE(INSTANCE) (((INSTANCE) == ADC1) || ((INSTANCE) == ADC3))


#define IS_ADC_COMMON_INSTANCE(INSTANCE) (((INSTANCE) == ADC12_COMMON) || ((INSTANCE) == ADC34_COMMON))



#define IS_CAN_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CAN)


#define IS_COMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == COMP1) || ((INSTANCE) == COMP2) || ((INSTANCE) == COMP3) || ((INSTANCE) == COMP4) || ((INSTANCE) == COMP5) || ((INSTANCE) == COMP6) || ((INSTANCE) == COMP7))







#define IS_COMP_COMMON_INSTANCE(COMMON_INSTANCE) (((COMMON_INSTANCE) == COMP12_COMMON) || ((COMMON_INSTANCE) == COMP34_COMMON) || ((COMMON_INSTANCE) == COMP56_COMMON))




#define IS_COMP_DAC1SWITCH_INSTANCE(INSTANCE) ((INSTANCE) == COMP1)


#define IS_COMP_WINDOWMODE_INSTANCE(INSTANCE) (((INSTANCE) == COMP2) || ((INSTANCE) == COMP4) || ((INSTANCE) == COMP6))




#define IS_CRC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CRC)


#define IS_DAC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DAC1)

#define IS_DAC_CHANNEL_INSTANCE(INSTANCE,CHANNEL) ((((INSTANCE) == DAC1) && (((CHANNEL) == DAC_CHANNEL_1) || ((CHANNEL) == DAC_CHANNEL_2))))





#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || ((INSTANCE) == DMA1_Channel2) || ((INSTANCE) == DMA1_Channel3) || ((INSTANCE) == DMA1_Channel4) || ((INSTANCE) == DMA1_Channel5) || ((INSTANCE) == DMA1_Channel6) || ((INSTANCE) == DMA1_Channel7) || ((INSTANCE) == DMA2_Channel1) || ((INSTANCE) == DMA2_Channel2) || ((INSTANCE) == DMA2_Channel3) || ((INSTANCE) == DMA2_Channel4) || ((INSTANCE) == DMA2_Channel5))
# 12846 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOC) || ((INSTANCE) == GPIOD) || ((INSTANCE) == GPIOE) || ((INSTANCE) == GPIOF))






#define IS_GPIO_AF_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOC) || ((INSTANCE) == GPIOD) || ((INSTANCE) == GPIOE) || ((INSTANCE) == GPIOF))






#define IS_GPIO_LOCK_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOD))




#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || ((INSTANCE) == I2C2))



#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)


#define IS_I2S_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI2) || ((INSTANCE) == SPI3))

#define IS_I2S_EXT_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2S2ext) || ((INSTANCE) == I2S3ext))



#define IS_OPAMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == OPAMP1) || ((INSTANCE) == OPAMP2) || ((INSTANCE) == OPAMP3) || ((INSTANCE) == OPAMP4))





#define IS_IWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IWDG)


#define IS_RTC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RTC)


#define IS_SMBUS_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || ((INSTANCE) == I2C2))



#define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || ((INSTANCE) == SPI2) || ((INSTANCE) == SPI3))




#define IS_TIM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 12912 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CC1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 12923 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CC2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 12932 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CC3_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_CC4_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_CC5_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TIM_CC6_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))






#define IS_TIM_ADVANCED_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TIM_CLOCK_SELECT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 12974 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 12999 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 13008 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_HALL_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))



#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TIM_ETR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))






#define IS_TIM_XOR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 13049 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_MASTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 13060 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_SLAVE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 13069 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_SYNCHRO_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15))
# 13080 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE) ((INSTANCE) == TIM2)



#define IS_TIM_DMABURST_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 13095 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_BREAK_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))







#define IS_TIM_CCX_INSTANCE(INSTANCE,CHANNEL) ((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4) || ((CHANNEL) == TIM_CHANNEL_5) || ((CHANNEL) == TIM_CHANNEL_6))) || (((INSTANCE) == TIM2) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM3) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM4) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM8) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4) || ((CHANNEL) == TIM_CHANNEL_5) || ((CHANNEL) == TIM_CHANNEL_6))) || (((INSTANCE) == TIM15) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))) || (((INSTANCE) == TIM16) && (((CHANNEL) == TIM_CHANNEL_1))) || (((INSTANCE) == TIM17) && (((CHANNEL) == TIM_CHANNEL_1))))
# 13149 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_CCXN_INSTANCE(INSTANCE,CHANNEL) ((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))) || (((INSTANCE) == TIM8) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))) || (((INSTANCE) == TIM15) && ((CHANNEL) == TIM_CHANNEL_1)) || (((INSTANCE) == TIM16) && ((CHANNEL) == TIM_CHANNEL_1)) || (((INSTANCE) == TIM17) && ((CHANNEL) == TIM_CHANNEL_1)))
# 13170 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8))







#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))







#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 13197 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_BKIN2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TIM_TRGO2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TIM_DMA_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM6) || ((INSTANCE) == TIM7) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 13220 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_DMA_CC_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM3) || ((INSTANCE) == TIM4) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
# 13231 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM15) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))







#define IS_TIM_REMAP_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8) || ((INSTANCE) == TIM16))





#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM8))




#define IS_TSC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == TSC)


#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5))






#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5))






#define IS_UART_LIN_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5))






#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5))






#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_UART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3))




#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == USART2) || ((INSTANCE) == USART3) || ((INSTANCE) == UART4) || ((INSTANCE) == UART5))






#define IS_UART_DMA_INSTANCE(INSTANCE) (1)


#define IS_USB_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB)


#define IS_WWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == WWDG)
# 13340 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
#define ADC1_IRQn ADC1_2_IRQn
#define SDADC1_IRQn ADC4_IRQn
#define COMP1_2_IRQn COMP1_2_3_IRQn
#define COMP2_IRQn COMP1_2_3_IRQn
#define COMP_IRQn COMP1_2_3_IRQn
#define COMP4_6_IRQn COMP4_5_6_IRQn
#define TIM15_IRQn TIM1_BRK_TIM15_IRQn
#define TIM18_DAC2_IRQn TIM1_CC_IRQn
#define TIM17_IRQn TIM1_TRG_COM_TIM17_IRQn
#define TIM16_IRQn TIM1_UP_TIM16_IRQn
#define TIM6_DAC1_IRQn TIM6_DAC_IRQn
#define TIM7_DAC2_IRQn TIM7_IRQn
#define TIM12_IRQn TIM8_BRK_IRQn
#define TIM14_IRQn TIM8_TRG_COM_IRQn
#define TIM13_IRQn TIM8_UP_IRQn
#define CEC_IRQn USBWakeUp_IRQn
#define USBWakeUp_IRQn USBWakeUp_RMP_IRQn
#define CAN_TX_IRQn USB_HP_CAN_TX_IRQn
#define CAN_RX0_IRQn USB_LP_CAN_RX0_IRQn



#define ADC1_IRQHandler ADC1_2_IRQHandler
#define SDADC1_IRQHandler ADC4_IRQHandler
#define COMP1_2_IRQHandler COMP1_2_3_IRQHandler
#define COMP2_IRQHandler COMP1_2_3_IRQHandler
#define COMP_IRQHandler COMP1_2_3_IRQHandler
#define COMP4_6_IRQHandler COMP4_5_6_IRQHandler
#define TIM15_IRQHandler TIM1_BRK_TIM15_IRQHandler
#define TIM18_DAC2_IRQHandler TIM1_CC_IRQHandler
#define TIM17_IRQHandler TIM1_TRG_COM_TIM17_IRQHandler
#define TIM16_IRQHandler TIM1_UP_TIM16_IRQHandler
#define TIM6_DAC1_IRQHandler TIM6_DAC_IRQHandler
#define TIM7_DAC2_IRQHandler TIM7_IRQHandler
#define TIM12_IRQHandler TIM8_BRK_IRQHandler
#define TIM14_IRQHandler TIM8_TRG_COM_IRQHandler
#define TIM13_IRQHandler TIM8_UP_IRQHandler
#define CEC_IRQHandler USBWakeUp_IRQHandler
#define USBWakeUp_IRQHandler USBWakeUp_RMP_IRQHandler
#define CAN_TX_IRQHandler USB_HP_CAN_TX_IRQHandler
#define CAN_RX0_IRQHandler USB_LP_CAN_RX0_IRQHandler
# 153 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h" 2
# 180 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
typedef enum
{
  RESET = 0,
  SET = !RESET
} FlagStatus, ITStatus;

typedef enum
{
  DISABLE = 0,
  ENABLE = !DISABLE
} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))

typedef enum
{
  ERROR = 0,
  SUCCESS = !ERROR
} ErrorStatus;
# 207 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
#define SET_BIT(REG,BIT) ((REG) |= (BIT))

#define CLEAR_BIT(REG,BIT) ((REG) &= ~(BIT))

#define READ_BIT(REG,BIT) ((REG) & (BIT))

#define CLEAR_REG(REG) ((REG) = (0x0))

#define WRITE_REG(REG,VAL) ((REG) = (VAL))

#define READ_REG(REG) ((REG))

#define MODIFY_REG(REG,CLEARMASK,SETMASK) WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))

#define POSITION_VAL(VAL) (__CLZ(__RBIT(VAL)))



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h" 1
# 226 "./lib/main/STM32F3/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h" 2
# 47 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h" 2



# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 1 3
# 27 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define _STDIO_H_ 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 1 3
# 13 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 3
#define _ANSIDECL_H_ 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\newlib.h" 1 3







#define __NEWLIB_H__ 1
# 21 "c:\\armtc\\gcc\\arm-none-eabi\\include\\newlib.h" 3
#define _WANT_IO_LONG_LONG 1


#define _WANT_REGISTER_FINI 1
# 40 "c:\\armtc\\gcc\\arm-none-eabi\\include\\newlib.h" 3
#define _MB_LEN_MAX 1
# 50 "c:\\armtc\\gcc\\arm-none-eabi\\include\\newlib.h" 3
#define HAVE_INITFINI_ARRAY 1



#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1


#define _LDBL_EQ_DBL 1


#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1
# 92 "c:\\armtc\\gcc\\arm-none-eabi\\include\\newlib.h" 3
#define _RETARGETABLE_LOCKING 1
# 16 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\config.h" 1 3

#define __SYS_CONFIG_H__ 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\ieeefp.h" 1 3
# 77 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\ieeefp.h" 3
#define __IEEE_LITTLE_ENDIAN 



#define __OBSOLETE_MATH_DEFAULT 0
# 454 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\ieeefp.h" 3
#define __OBSOLETE_MATH __OBSOLETE_MATH_DEFAULT
# 5 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\config.h" 2 3
# 220 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\config.h" 3
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 246 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\config.h" 3
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 17 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 2 3






#define _HAVE_STDC 
# 44 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 3
#define _BEGIN_STD_C 
#define _END_STD_C 
#define _NOTHROW 



#define _PTR void *
#define _AND ,
#define _NOARGS void
#define _CONST const
#define _VOLATILE volatile
#define _SIGNED signed
#define _DOTS , ...
#define _VOID void






#define _EXFUN_NOTHROW(name,proto) name proto _NOTHROW
#define _EXFUN(name,proto) name proto
#define _EXPARM(name,proto) (* name) proto
#define _EXFNPTR(name,proto) (* name) proto

#define _DEFUN(name,arglist,args) name(args)
#define _DEFUN_VOID(name) name(_NOARGS)
#define _CAST_VOID (void)

#define _LONG_DOUBLE long double


#define _PARAMS(paramlist) paramlist
# 101 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 3
#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 127 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 3
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 30 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3

#define _FSTDIO 

#define __need_size_t 
#define __need_NULL 
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 1 3
# 41 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define _SYS_CDEFS_H_ 



# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 1 3 4
# 187 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 






# 216 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 238 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 401 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL
# 46 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 2 3

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 
# 76 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __has_extension __has_feature


#define __has_feature(x) 0





#define __has_builtin(x) 0






#define __BEGIN_DECLS 
#define __END_DECLS 
# 105 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1






#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 175 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile
# 239 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __weak_symbol __attribute__((__weak__))
# 252 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))


#define __alloc_size(x) __attribute__((__alloc_size__(x)))




#define __alloc_align(x) __attribute__((__alloc_align__(x)))
# 356 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __generic(expr,t,yes,no) _Generic(expr, t: yes, default: no)
# 374 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __min_size(x) static (x)





#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__(x)))
#define __nonnull_all __attribute__((__nonnull__))






#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))






#define __returns_twice __attribute__((__returns_twice__))





#define __unreachable() __builtin_unreachable()
# 442 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __restrict restrict
# 475 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __null_sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))


#define __hidden __attribute__((__visibility__("hidden")))
# 497 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 508 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 530 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 547 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 601 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))






#define _Nonnull 
#define _Nullable 
#define _Null_unspecified 
#define __NULLABILITY_PRAGMA_PUSH 
#define __NULLABILITY_PRAGMA_POP 
# 661 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
# 680 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\cdefs.h" 3
#define __lock_annotate(x) 





#define __lockable __lock_annotate(lockable)


#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))

#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))



#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))

#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))



#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))


#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))

#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))



#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))

#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))

#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))



#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)


#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))
# 36 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3
# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 1 3 4
# 39 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 161 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 267 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 328 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
typedef unsigned int wchar_t;
# 347 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t
# 401 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
} max_align_t;
# 37 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3


#define __need___va_list 
# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdarg.h" 1 3 4
# 34 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stdarg.h" 3 4
#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
# 41 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3





typedef __gnuc_va_list va_list;
#define _VA_LIST_DEFINED 
# 60 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 1 3
# 11 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _SYS_REENT_H_ 

# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\_ansi.h" 1 3
# 14 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 1 3 4
# 15 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 1 3
# 20 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 3
#define _SYS__TYPES_H 



# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_types.h" 1 3





#define _MACHINE__TYPES_H 
# 25 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\lock.h" 1 3

#define __SYS_LOCK_H__ 
# 33 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;
#define _LOCK_RECURSIVE_T _LOCK_T

#define __LOCK_INIT(class,lock) extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock

#define __LOCK_INIT_RECURSIVE(class,lock) __LOCK_INIT(class,lock)

extern void __retarget_lock_init(_LOCK_T *lock);
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
#define __lock_acquire_recursive(lock) __retarget_lock_acquire_recursive(lock)
extern int __retarget_lock_try_acquire(_LOCK_T lock);
#define __lock_try_acquire(lock) __retarget_lock_try_acquire(lock)
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) __retarget_lock_try_acquire_recursive(lock)

extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
#define __lock_release_recursive(lock) __retarget_lock_release_recursive(lock)
# 26 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 125 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 3
#undef __size_t



typedef unsigned int __size_t;
# 144 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 3
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 156 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef _ssize_t __ssize_t;

#define __need_wint_t 
# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 1 3 4
# 161 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_size_t
# 347 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t
# 401 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 160 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;



#define _CLOCK_T_ unsigned long


typedef unsigned long __clock_t;




#define _TIME_T_ __int_least64_t

typedef __int_least64_t __time_t;

#define _CLOCKID_T_ unsigned long
typedef unsigned long __clockid_t;

#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;


typedef __builtin_va_list __va_list;
# 16 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 2 3

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 38 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}





#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
# 117 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 178 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_SMALL_CHECK_INIT(ptr) 


struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 312 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 569 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};





#define _REENT_STDIO_STREAM(var,index) &(var)->__sf[index]


#define _REENT_INIT(var) { 0, _REENT_STDIO_STREAM(&(var), 0), _REENT_STDIO_STREAM(&(var), 1), _REENT_STDIO_STREAM(&(var), 2), 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
# 707 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = _REENT_STDIO_STREAM(var, 0); (var)->_stdout = _REENT_STDIO_STREAM(var, 1); (var)->_stderr = _REENT_STDIO_STREAM(var, 2); (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 721 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))



#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }







#define _Kmax (sizeof (size_t) << 3)







#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 788 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\reent.h" 3
#define _REENT _impure_ptr


#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)
# 61 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 1 3
# 28 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
#define __BIT_TYPES_DEFINED__ 1
# 60 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 3
#define _SYS_TYPES_H 

# 1 "c:\\armtc\\gcc\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h" 1 3 4
# 63 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 2 3




# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\endian.h" 1 3

#define __MACHINE_ENDIAN_H__ 



# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_endian.h" 1 3
# 31 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\_endian.h" 3
#define _LITTLE_ENDIAN 1234
#define _BIG_ENDIAN 4321
#define _PDP_ENDIAN 3412




#define _BYTE_ORDER _LITTLE_ENDIAN
# 7 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\endian.h" 2 3


#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0






#define LITTLE_ENDIAN _LITTLE_ENDIAN
#define BIG_ENDIAN _BIG_ENDIAN
#define PDP_ENDIAN _PDP_ENDIAN
#define BYTE_ORDER _BYTE_ORDER



#define __bswap16(_x) __builtin_bswap16(_x)
#define __bswap32(_x) __builtin_bswap32(_x)
#define __bswap64(_x) __builtin_bswap64(_x)
# 57 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\endian.h" 3
#define __htonl(_x) __bswap32(_x)
#define __htons(_x) __bswap16(_x)
#define __ntohl(_x) __bswap32(_x)
#define __ntohs(_x) __bswap16(_x)
# 68 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 1 3
# 13 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 3
#define _SYS_SELECT_H 
# 25 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_sigset.h" 1 3
# 39 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_sigset.h" 3
#define _SYS__SIGSET_H_ 

typedef unsigned long __sigset_t;
# 26 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timeval.h" 1 3
# 30 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timeval.h" 3
#define _SYS__TIMEVAL_H_ 




typedef __suseconds_t suseconds_t;
#define _SUSECONDS_T_DECLARED 



typedef __int_least64_t time_t;
#define __time_t_defined 
#define _TIME_T_DECLARED 




#define _TIMEVAL_DEFINED 




struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};




#define timerclear(tvp) ((tvp)->tv_sec = (tvp)->tv_usec = 0)
#define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec)
#define timercmp(tvp,uvp,cmp) (((tvp)->tv_sec == (uvp)->tv_sec) ? ((tvp)->tv_usec cmp (uvp)->tv_usec) : ((tvp)->tv_sec cmp (uvp)->tv_sec))



#define timeradd(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec + (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec + (uvp)->tv_usec; if ((vvp)->tv_usec >= 1000000) { (vvp)->tv_sec++; (vvp)->tv_usec -= 1000000; } } while (0)
# 75 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timeval.h" 3
#define timersub(tvp,uvp,vvp) do { (vvp)->tv_sec = (tvp)->tv_sec - (uvp)->tv_sec; (vvp)->tv_usec = (tvp)->tv_usec - (uvp)->tv_usec; if ((vvp)->tv_usec < 0) { (vvp)->tv_sec--; (vvp)->tv_usec += 1000000; } } while (0)
# 27 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\timespec.h" 1 3
# 35 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\timespec.h" 3
#define _SYS_TIMESPEC_H_ 


# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timespec.h" 1 3
# 35 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timespec.h" 3
#define _SYS__TIMESPEC_H_ 
# 45 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\timespec.h" 2 3


#define TIMEVAL_TO_TIMESPEC(tv,ts) do { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; } while (0)




#define TIMESPEC_TO_TIMEVAL(tv,ts) do { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; } while (0)
# 58 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 2 3


#define _SIGSET_T_DECLARED 
typedef __sigset_t sigset_t;


#define _SYS_TYPES_FD_SET 







#define FD_SETSIZE 64


typedef unsigned long fd_mask;
#define NFDBITS (sizeof (fd_mask) * 8)

#define _howmany(x,y) (((x)+((y)-1))/(y))




typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;

#define fd_set _types_fd_set

#define FD_SET(n,p) ((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
#define FD_CLR(n,p) ((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
#define FD_ISSET(n,p) ((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
#define FD_ZERO(p) (__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
# 71 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\select.h" 3


int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;



# 69 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 2 3
#define physadr physadr_t
#define quad quad_t


typedef __uint32_t in_addr_t;
#define _IN_ADDR_T_DECLARED 



typedef __uint16_t in_port_t;
#define _IN_PORT_T_DECLARED 







typedef unsigned char u_char;
#define __u_char_defined 


typedef unsigned short u_short;
#define __u_short_defined 


typedef unsigned int u_int;
#define __u_int_defined 


typedef unsigned long u_long;
#define __u_long_defined 

#define _BSDTYPES_DEFINED 




typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;
#define _BLKCNT_T_DECLARED 



typedef __blksize_t blksize_t;
#define _BLKSIZE_T_DECLARED 



typedef unsigned long clock_t;
#define __clock_t_defined 
#define _CLOCK_T_DECLARED 
# 135 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 3
typedef long daddr_t;
#define __daddr_t_defined 


typedef char * caddr_t;
#define __caddr_t_defined 



typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
#define _FSBLKCNT_T_DECLARED 



typedef __id_t id_t;
#define _ID_T_DECLARED 



typedef __ino_t ino_t;
#define _INO_T_DECLARED 
# 173 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 3
typedef __off_t off_t;
#define _OFF_T_DECLARED 


typedef __dev_t dev_t;
#define _DEV_T_DECLARED 


typedef __uid_t uid_t;
#define _UID_T_DECLARED 


typedef __gid_t gid_t;
#define _GID_T_DECLARED 



typedef __pid_t pid_t;
#define _PID_T_DECLARED 



typedef __key_t key_t;
#define _KEY_T_DECLARED 



typedef _ssize_t ssize_t;
#define _SSIZE_T_DECLARED 



typedef __mode_t mode_t;
#define _MODE_T_DECLARED 



typedef __nlink_t nlink_t;
#define _NLINK_T_DECLARED 



typedef __clockid_t clockid_t;
#define __clockid_t_defined 
#define _CLOCKID_T_DECLARED 



typedef __timer_t timer_t;
#define __timer_t_defined 
#define _TIMER_T_DECLARED 



typedef __useconds_t useconds_t;
#define _USECONDS_T_DECLARED 







typedef __int64_t sbintime_t;


# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 1 3
# 19 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 3
#define _SYS__PTHREADTYPES_H_ 



# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\sched.h" 1 3
# 22 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\sched.h" 3
#define _SYS_SCHED_H_ 
# 35 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\sched.h" 3
#define SCHED_OTHER 0


#define SCHED_FIFO 1
#define SCHED_RR 2
# 48 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\sched.h" 3
struct sched_param {
  int sched_priority;
# 61 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\sched.h" 3
};
# 24 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 2 3
# 32 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef __uint32_t pthread_t;



#define PTHREAD_SCOPE_PROCESS 0
#define PTHREAD_SCOPE_SYSTEM 1


#define PTHREAD_INHERIT_SCHED 1


#define PTHREAD_EXPLICIT_SCHED 2


#define PTHREAD_CREATE_DETACHED 0
#define PTHREAD_CREATE_JOINABLE 1
# 61 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;





  int detachstate;
} pthread_attr_t;
# 154 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef __uint32_t pthread_mutex_t;

typedef struct {
  int is_initialized;
# 168 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\_pthreadtypes.h" 3
  int recursive;
} pthread_mutexattr_t;


#define _PTHREAD_MUTEX_INITIALIZER ((pthread_mutex_t) 0xFFFFFFFF)



typedef __uint32_t pthread_cond_t;

#define _PTHREAD_COND_INITIALIZER ((pthread_cond_t) 0xFFFFFFFF)

typedef struct {
  int is_initialized;
  clock_t clock;



} pthread_condattr_t;



typedef __uint32_t pthread_key_t;

typedef struct {
  int is_initialized;
  int init_executed;
} pthread_once_t;

#define _PTHREAD_ONCE_INIT { 1, 0 }
# 240 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 2 3
# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\machine\\types.h" 1 3
# 241 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\types.h" 2 3



#undef __need_inttypes
# 62 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3




typedef __FILE FILE;
#define __FILE_defined 





typedef _fpos_t fpos_t;





# 1 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\stdio.h" 1 3

#define _NEWLIB_STDIO_H 
# 13 "c:\\armtc\\gcc\\arm-none-eabi\\include\\sys\\stdio.h" 3
#define _flockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))







#define _funlockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
# 80 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 2 3

#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008

#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SORD 0x2000



#define __SL64 0x8000


#define __SNLK 0x0001
#define __SWID 0x2000
# 114 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2

#define EOF (-1)




#define BUFSIZ 1024





#define FOPEN_MAX 20





#define FILENAME_MAX 1024





#define L_tmpnam FILENAME_MAX



#define P_tmpdir "/tmp"



#define SEEK_SET 0


#define SEEK_CUR 1


#define SEEK_END 2


#define TMP_MAX 26

#define stdin (_REENT->_stdin)
#define stdout (_REENT->_stdout)
#define stderr (_REENT->_stderr)

#define _stdin_r(x) ((x)->_stdin)
#define _stdout_r(x) ((x)->_stdout)
#define _stderr_r(x) ((x)->_stderr)







#define __VALIST __gnuc_va_list






char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);
# 396 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 577 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 601 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;


#define fropen(__cookie,__fn) funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)

#define fwopen(__cookie,__fn) funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
# 654 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define __sgetc_raw_r(__ptr,__f) (--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
# 683 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define __sgetc_r(__ptr,__p) __sgetc_raw_r(__ptr, __p)



static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 719 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define __sfeof(p) ((int)(((p)->_flags & __SEOF) != 0))
#define __sferror(p) ((int)(((p)->_flags & __SERR) != 0))
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)



#define feof(p) __sfeof(p)
#define ferror(p) __sferror(p)
#define clearerr(p) __sclearerr(p)


#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)







static __inline int
_getchar_unlocked(void)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return ((--(((_ptr)->_stdin))->_r < 0 ? __srget_r(_ptr, ((_ptr)->_stdin)) : (int)(*(((_ptr)->_stdin))->_p++)));
}

static __inline int
_putchar_unlocked(int _c)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return (__sputc_r(_ptr, _c, ((_ptr)->_stdout)));
}
# 767 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3
#define getchar_unlocked() _getchar_unlocked()
#define putchar_unlocked(_c) _putchar_unlocked(_c)





#define fast_putc(x,p) (--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))







#define L_ctermid 16
# 797 "c:\\armtc\\gcc\\arm-none-eabi\\include\\stdio.h" 3

# 51 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h" 2







# 57 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
typedef enum
{
  HAL_OK = 0x00U,
  HAL_ERROR = 0x01U,
  HAL_BUSY = 0x02U,
  HAL_TIMEOUT = 0x03
} HAL_StatusTypeDef;




typedef enum
{
  HAL_UNLOCKED = 0x00U,
  HAL_LOCKED = 0x01
} HAL_LockTypeDef;


#define HAL_MAX_DELAY 0xFFFFFFFFU

#define HAL_IS_BIT_SET(REG,BIT) (((REG) & (BIT)) != RESET)
#define HAL_IS_BIT_CLR(REG,BIT) (((REG) & (BIT)) == RESET)

#define __HAL_LINKDMA(__HANDLE__,__PPP_DMA_FIELD_,__DMA_HANDLE_) do{ (__HANDLE__)->__PPP_DMA_FIELD_ = &(__DMA_HANDLE_); (__DMA_HANDLE_).Parent = (__HANDLE__); } while(0U)





#define UNUSED(x) ((void)(x))
# 103 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
#define __HAL_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0U)




#define __HAL_LOCK(__HANDLE__) do{ if((__HANDLE__)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (__HANDLE__)->Lock = HAL_LOCKED; } }while (0U)
# 120 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
#define __HAL_UNLOCK(__HANDLE__) do{ (__HANDLE__)->Lock = HAL_UNLOCKED; }while (0U)







#define __weak __attribute__((weak))
# 139 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
#define __ALIGN_END __attribute__ ((aligned (4)))


#define __ALIGN_BEGIN 
# 164 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
#define __NOINLINE __attribute__ ( (noinline) )
# 46 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h" 2
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_DBP_TIMEOUT_VALUE (100U)

#define RCC_LSE_TIMEOUT_VALUE LSE_STARTUP_TIMEOUT
#define CLOCKSWITCH_TIMEOUT_VALUE (5000U)
#define HSE_TIMEOUT_VALUE HSE_STARTUP_TIMEOUT
#define HSI_TIMEOUT_VALUE (2U)
#define LSI_TIMEOUT_VALUE (2U)
#define PLL_TIMEOUT_VALUE (2U)







#define RCC_OFFSET (RCC_BASE - PERIPH_BASE)
#define RCC_CR_OFFSET 0x00
#define RCC_CFGR_OFFSET 0x04
#define RCC_CIR_OFFSET 0x08
#define RCC_BDCR_OFFSET 0x20
#define RCC_CSR_OFFSET 0x24
# 94 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_CR_OFFSET_BB (RCC_OFFSET + RCC_CR_OFFSET)
#define RCC_CFGR_OFFSET_BB (RCC_OFFSET + RCC_CFGR_OFFSET)
#define RCC_CIR_OFFSET_BB (RCC_OFFSET + RCC_CIR_OFFSET)
#define RCC_BDCR_OFFSET_BB (RCC_OFFSET + RCC_BDCR_OFFSET)
#define RCC_CSR_OFFSET_BB (RCC_OFFSET + RCC_CSR_OFFSET)



#define RCC_HSION_BIT_NUMBER POSITION_VAL(RCC_CR_HSION)
#define RCC_CR_HSION_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_HSION_BIT_NUMBER * 4U)))

#define RCC_HSEON_BIT_NUMBER POSITION_VAL(RCC_CR_HSEON)
#define RCC_CR_HSEON_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_HSEON_BIT_NUMBER * 4U)))

#define RCC_CSSON_BIT_NUMBER POSITION_VAL(RCC_CR_CSSON)
#define RCC_CR_CSSON_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_CSSON_BIT_NUMBER * 4U)))

#define RCC_PLLON_BIT_NUMBER POSITION_VAL(RCC_CR_PLLON)
#define RCC_CR_PLLON_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CR_OFFSET_BB * 32U) + (RCC_PLLON_BIT_NUMBER * 4U)))



#define RCC_LSION_BIT_NUMBER POSITION_VAL(RCC_CSR_LSION)
#define RCC_CSR_LSION_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CSR_OFFSET_BB * 32U) + (RCC_LSION_BIT_NUMBER * 4U)))


#define RCC_RMVF_BIT_NUMBER POSITION_VAL(RCC_CSR_RMVF)
#define RCC_CSR_RMVF_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_CSR_OFFSET_BB * 32U) + (RCC_RMVF_BIT_NUMBER * 4U)))



#define RCC_LSEON_BIT_NUMBER POSITION_VAL(RCC_BDCR_LSEON)
#define RCC_BDCR_LSEON_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_LSEON_BIT_NUMBER * 4U)))


#define RCC_LSEBYP_BIT_NUMBER POSITION_VAL(RCC_BDCR_LSEBYP)
#define RCC_BDCR_LSEBYP_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_LSEBYP_BIT_NUMBER * 4U)))


#define RCC_RTCEN_BIT_NUMBER POSITION_VAL(RCC_BDCR_RTCEN)
#define RCC_BDCR_RTCEN_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_RTCEN_BIT_NUMBER * 4U)))


#define RCC_BDRST_BIT_NUMBER POSITION_VAL(RCC_BDCR_BDRST)
#define RCC_BDCR_BDRST_BB ((uint32_t)(PERIPH_BB_BASE + (RCC_BDCR_OFFSET_BB * 32U) + (RCC_BDRST_BIT_NUMBER * 4U)))






#define RCC_CR_BYTE2_ADDRESS ((uint32_t)(RCC_BASE + RCC_CR_OFFSET + 0x02U))


#define RCC_CIR_BYTE1_ADDRESS ((uint32_t)(RCC_BASE + RCC_CIR_OFFSET + 0x01U))


#define RCC_CIR_BYTE2_ADDRESS ((uint32_t)(RCC_BASE + RCC_CIR_OFFSET + 0x02U))


#define CR_REG_INDEX ((uint8_t)1U)
#define BDCR_REG_INDEX ((uint8_t)2U)
#define CSR_REG_INDEX ((uint8_t)3U)
#define CFGR_REG_INDEX ((uint8_t)4U)

#define RCC_FLAG_MASK ((uint8_t)0x1FU)
# 168 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define IS_RCC_PLLSOURCE(__SOURCE__) (((__SOURCE__) == RCC_PLLSOURCE_HSI) || ((__SOURCE__) == RCC_PLLSOURCE_HSE))

#define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) || (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE))




#define IS_RCC_HSE(__HSE__) (((__HSE__) == RCC_HSE_OFF) || ((__HSE__) == RCC_HSE_ON) || ((__HSE__) == RCC_HSE_BYPASS))

#define IS_RCC_LSE(__LSE__) (((__LSE__) == RCC_LSE_OFF) || ((__LSE__) == RCC_LSE_ON) || ((__LSE__) == RCC_LSE_BYPASS))

#define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON))
#define IS_RCC_CALIBRATION_VALUE(__VALUE__) ((__VALUE__) <= 0x1FU)
#define IS_RCC_LSI(__LSI__) (((__LSI__) == RCC_LSI_OFF) || ((__LSI__) == RCC_LSI_ON))
#define IS_RCC_PLL(__PLL__) (((__PLL__) == RCC_PLL_NONE) || ((__PLL__) == RCC_PLL_OFF) || ((__PLL__) == RCC_PLL_ON))
# 194 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define IS_RCC_PLL_DIV(__DIV__) (((__DIV__) == RCC_PLL_DIV2) || ((__DIV__) == RCC_PLL_DIV3) || ((__DIV__) == RCC_PLL_DIV4))



#define IS_RCC_HSE_PREDIV(DIV) (((DIV) == RCC_HSE_PREDIV_DIV1) || ((DIV) == RCC_HSE_PREDIV_DIV2) || ((DIV) == RCC_HSE_PREDIV_DIV3) || ((DIV) == RCC_HSE_PREDIV_DIV4) || ((DIV) == RCC_HSE_PREDIV_DIV5) || ((DIV) == RCC_HSE_PREDIV_DIV6) || ((DIV) == RCC_HSE_PREDIV_DIV7) || ((DIV) == RCC_HSE_PREDIV_DIV8) || ((DIV) == RCC_HSE_PREDIV_DIV9) || ((DIV) == RCC_HSE_PREDIV_DIV10) || ((DIV) == RCC_HSE_PREDIV_DIV11) || ((DIV) == RCC_HSE_PREDIV_DIV12) || ((DIV) == RCC_HSE_PREDIV_DIV13) || ((DIV) == RCC_HSE_PREDIV_DIV14) || ((DIV) == RCC_HSE_PREDIV_DIV15) || ((DIV) == RCC_HSE_PREDIV_DIV16))
# 208 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define IS_RCC_PLL_MUL(__MUL__) (((__MUL__) == RCC_PLL_MUL2) || ((__MUL__) == RCC_PLL_MUL3) || ((__MUL__) == RCC_PLL_MUL4) || ((__MUL__) == RCC_PLL_MUL5) || ((__MUL__) == RCC_PLL_MUL6) || ((__MUL__) == RCC_PLL_MUL7) || ((__MUL__) == RCC_PLL_MUL8) || ((__MUL__) == RCC_PLL_MUL9) || ((__MUL__) == RCC_PLL_MUL10) || ((__MUL__) == RCC_PLL_MUL11) || ((__MUL__) == RCC_PLL_MUL12) || ((__MUL__) == RCC_PLL_MUL13) || ((__MUL__) == RCC_PLL_MUL14) || ((__MUL__) == RCC_PLL_MUL15) || ((__MUL__) == RCC_PLL_MUL16))







#define IS_RCC_CLOCKTYPE(CLK) ((((CLK) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) || (((CLK) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) || (((CLK) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1) || (((CLK) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2))



#define IS_RCC_SYSCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_HSI) || ((__SOURCE__) == RCC_SYSCLKSOURCE_HSE) || ((__SOURCE__) == RCC_SYSCLKSOURCE_PLLCLK))


#define IS_RCC_SYSCLKSOURCE_STATUS(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSI) || ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSE) || ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_PLLCLK))


#define IS_RCC_HCLK(__HCLK__) (((__HCLK__) == RCC_SYSCLK_DIV1) || ((__HCLK__) == RCC_SYSCLK_DIV2) || ((__HCLK__) == RCC_SYSCLK_DIV4) || ((__HCLK__) == RCC_SYSCLK_DIV8) || ((__HCLK__) == RCC_SYSCLK_DIV16) || ((__HCLK__) == RCC_SYSCLK_DIV64) || ((__HCLK__) == RCC_SYSCLK_DIV128) || ((__HCLK__) == RCC_SYSCLK_DIV256) || ((__HCLK__) == RCC_SYSCLK_DIV512))




#define IS_RCC_PCLK(__PCLK__) (((__PCLK__) == RCC_HCLK_DIV1) || ((__PCLK__) == RCC_HCLK_DIV2) || ((__PCLK__) == RCC_HCLK_DIV4) || ((__PCLK__) == RCC_HCLK_DIV8) || ((__PCLK__) == RCC_HCLK_DIV16))


#define IS_RCC_MCO(__MCO__) ((__MCO__) == RCC_MCO)
#define IS_RCC_RTCCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_RTCCLKSOURCE_NO_CLK) || ((__SOURCE__) == RCC_RTCCLKSOURCE_LSE) || ((__SOURCE__) == RCC_RTCCLKSOURCE_LSI) || ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV32))




#define IS_RCC_USART2CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_USART2CLKSOURCE_PCLK1) || ((__SOURCE__) == RCC_USART2CLKSOURCE_SYSCLK) || ((__SOURCE__) == RCC_USART2CLKSOURCE_LSE) || ((__SOURCE__) == RCC_USART2CLKSOURCE_HSI))





#define IS_RCC_USART3CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_USART3CLKSOURCE_PCLK1) || ((__SOURCE__) == RCC_USART3CLKSOURCE_SYSCLK) || ((__SOURCE__) == RCC_USART3CLKSOURCE_LSE) || ((__SOURCE__) == RCC_USART3CLKSOURCE_HSI))




#define IS_RCC_I2C1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_I2C1CLKSOURCE_HSI) || ((__SOURCE__) == RCC_I2C1CLKSOURCE_SYSCLK))
# 267 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
typedef struct
{
  uint32_t PLLState;


  uint32_t PLLSource;


  uint32_t PLLMUL;







} RCC_PLLInitTypeDef;




typedef struct
{
  uint32_t OscillatorType;


  uint32_t HSEState;



  uint32_t HSEPredivValue;



  uint32_t LSEState;


  uint32_t HSIState;


  uint32_t HSICalibrationValue;


  uint32_t LSIState;


  RCC_PLLInitTypeDef PLL;

} RCC_OscInitTypeDef;




typedef struct
{
  uint32_t ClockType;


  uint32_t SYSCLKSource;


  uint32_t AHBCLKDivider;


  uint32_t APB1CLKDivider;


  uint32_t APB2CLKDivider;

} RCC_ClkInitTypeDef;
# 355 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_PLLSOURCE_HSI RCC_CFGR_PLLSRC_HSI_DIV2

#define RCC_PLLSOURCE_HSE RCC_CFGR_PLLSRC_HSE_PREDIV
# 366 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_OSCILLATORTYPE_NONE (0x00000000U)
#define RCC_OSCILLATORTYPE_HSE (0x00000001U)
#define RCC_OSCILLATORTYPE_HSI (0x00000002U)
#define RCC_OSCILLATORTYPE_LSE (0x00000004U)
#define RCC_OSCILLATORTYPE_LSI (0x00000008U)







#define RCC_HSE_OFF (0x00000000U)
#define RCC_HSE_ON RCC_CR_HSEON
#define RCC_HSE_BYPASS ((uint32_t)(RCC_CR_HSEBYP | RCC_CR_HSEON))







#define RCC_LSE_OFF (0x00000000U)
#define RCC_LSE_ON RCC_BDCR_LSEON
#define RCC_LSE_BYPASS ((uint32_t)(RCC_BDCR_LSEBYP | RCC_BDCR_LSEON))
# 399 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_HSI_OFF (0x00000000U)
#define RCC_HSI_ON RCC_CR_HSION

#define RCC_HSICALIBRATION_DEFAULT (0x10U)
# 411 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_LSI_OFF (0x00000000U)
#define RCC_LSI_ON RCC_CSR_LSION
# 421 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_PLL_NONE (0x00000000U)
#define RCC_PLL_OFF (0x00000001U)
#define RCC_PLL_ON (0x00000002U)
# 432 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_CLOCKTYPE_SYSCLK (0x00000001U)
#define RCC_CLOCKTYPE_HCLK (0x00000002U)
#define RCC_CLOCKTYPE_PCLK1 (0x00000004U)
#define RCC_CLOCKTYPE_PCLK2 (0x00000008U)
# 444 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_SYSCLKSOURCE_HSI RCC_CFGR_SW_HSI
#define RCC_SYSCLKSOURCE_HSE RCC_CFGR_SW_HSE
#define RCC_SYSCLKSOURCE_PLLCLK RCC_CFGR_SW_PLL
# 455 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_SYSCLKSOURCE_STATUS_HSI RCC_CFGR_SWS_HSI
#define RCC_SYSCLKSOURCE_STATUS_HSE RCC_CFGR_SWS_HSE
#define RCC_SYSCLKSOURCE_STATUS_PLLCLK RCC_CFGR_SWS_PLL
# 466 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_SYSCLK_DIV1 RCC_CFGR_HPRE_DIV1
#define RCC_SYSCLK_DIV2 RCC_CFGR_HPRE_DIV2
#define RCC_SYSCLK_DIV4 RCC_CFGR_HPRE_DIV4
#define RCC_SYSCLK_DIV8 RCC_CFGR_HPRE_DIV8
#define RCC_SYSCLK_DIV16 RCC_CFGR_HPRE_DIV16
#define RCC_SYSCLK_DIV64 RCC_CFGR_HPRE_DIV64
#define RCC_SYSCLK_DIV128 RCC_CFGR_HPRE_DIV128
#define RCC_SYSCLK_DIV256 RCC_CFGR_HPRE_DIV256
#define RCC_SYSCLK_DIV512 RCC_CFGR_HPRE_DIV512
# 483 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_HCLK_DIV1 RCC_CFGR_PPRE1_DIV1
#define RCC_HCLK_DIV2 RCC_CFGR_PPRE1_DIV2
#define RCC_HCLK_DIV4 RCC_CFGR_PPRE1_DIV4
#define RCC_HCLK_DIV8 RCC_CFGR_PPRE1_DIV8
#define RCC_HCLK_DIV16 RCC_CFGR_PPRE1_DIV16
# 496 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_RTCCLKSOURCE_NO_CLK RCC_BDCR_RTCSEL_NOCLOCK
#define RCC_RTCCLKSOURCE_LSE RCC_BDCR_RTCSEL_LSE
#define RCC_RTCCLKSOURCE_LSI RCC_BDCR_RTCSEL_LSI
#define RCC_RTCCLKSOURCE_HSE_DIV32 RCC_BDCR_RTCSEL_HSE







#define RCC_PLL_MUL2 RCC_CFGR_PLLMUL2
#define RCC_PLL_MUL3 RCC_CFGR_PLLMUL3
#define RCC_PLL_MUL4 RCC_CFGR_PLLMUL4
#define RCC_PLL_MUL5 RCC_CFGR_PLLMUL5
#define RCC_PLL_MUL6 RCC_CFGR_PLLMUL6
#define RCC_PLL_MUL7 RCC_CFGR_PLLMUL7
#define RCC_PLL_MUL8 RCC_CFGR_PLLMUL8
#define RCC_PLL_MUL9 RCC_CFGR_PLLMUL9
#define RCC_PLL_MUL10 RCC_CFGR_PLLMUL10
#define RCC_PLL_MUL11 RCC_CFGR_PLLMUL11
#define RCC_PLL_MUL12 RCC_CFGR_PLLMUL12
#define RCC_PLL_MUL13 RCC_CFGR_PLLMUL13
#define RCC_PLL_MUL14 RCC_CFGR_PLLMUL14
#define RCC_PLL_MUL15 RCC_CFGR_PLLMUL15
#define RCC_PLL_MUL16 RCC_CFGR_PLLMUL16
# 559 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_HSE_PREDIV_DIV1 RCC_CFGR2_PREDIV_DIV1
#define RCC_HSE_PREDIV_DIV2 RCC_CFGR2_PREDIV_DIV2
#define RCC_HSE_PREDIV_DIV3 RCC_CFGR2_PREDIV_DIV3
#define RCC_HSE_PREDIV_DIV4 RCC_CFGR2_PREDIV_DIV4
#define RCC_HSE_PREDIV_DIV5 RCC_CFGR2_PREDIV_DIV5
#define RCC_HSE_PREDIV_DIV6 RCC_CFGR2_PREDIV_DIV6
#define RCC_HSE_PREDIV_DIV7 RCC_CFGR2_PREDIV_DIV7
#define RCC_HSE_PREDIV_DIV8 RCC_CFGR2_PREDIV_DIV8
#define RCC_HSE_PREDIV_DIV9 RCC_CFGR2_PREDIV_DIV9
#define RCC_HSE_PREDIV_DIV10 RCC_CFGR2_PREDIV_DIV10
#define RCC_HSE_PREDIV_DIV11 RCC_CFGR2_PREDIV_DIV11
#define RCC_HSE_PREDIV_DIV12 RCC_CFGR2_PREDIV_DIV12
#define RCC_HSE_PREDIV_DIV13 RCC_CFGR2_PREDIV_DIV13
#define RCC_HSE_PREDIV_DIV14 RCC_CFGR2_PREDIV_DIV14
#define RCC_HSE_PREDIV_DIV15 RCC_CFGR2_PREDIV_DIV15
#define RCC_HSE_PREDIV_DIV16 RCC_CFGR2_PREDIV_DIV16
# 585 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_USART2CLKSOURCE_PCLK1 RCC_CFGR3_USART2SW_PCLK
#define RCC_USART2CLKSOURCE_SYSCLK RCC_CFGR3_USART2SW_SYSCLK
#define RCC_USART2CLKSOURCE_LSE RCC_CFGR3_USART2SW_LSE
#define RCC_USART2CLKSOURCE_HSI RCC_CFGR3_USART2SW_HSI
# 599 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_USART3CLKSOURCE_PCLK1 RCC_CFGR3_USART3SW_PCLK
#define RCC_USART3CLKSOURCE_SYSCLK RCC_CFGR3_USART3SW_SYSCLK
#define RCC_USART3CLKSOURCE_LSE RCC_CFGR3_USART3SW_LSE
#define RCC_USART3CLKSOURCE_HSI RCC_CFGR3_USART3SW_HSI
# 612 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_I2C1CLKSOURCE_HSI RCC_CFGR3_I2C1SW_HSI
#define RCC_I2C1CLKSOURCE_SYSCLK RCC_CFGR3_I2C1SW_SYSCLK







#define RCC_MCO1 (0x00000000U)
#define RCC_MCO RCC_MCO1
# 631 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_IT_LSIRDY ((uint8_t)RCC_CIR_LSIRDYF)
#define RCC_IT_LSERDY ((uint8_t)RCC_CIR_LSERDYF)
#define RCC_IT_HSIRDY ((uint8_t)RCC_CIR_HSIRDYF)
#define RCC_IT_HSERDY ((uint8_t)RCC_CIR_HSERDYF)
#define RCC_IT_PLLRDY ((uint8_t)RCC_CIR_PLLRDYF)
#define RCC_IT_CSS ((uint8_t)RCC_CIR_CSSF)
# 652 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define RCC_FLAG_HSIRDY ((uint8_t)((CR_REG_INDEX << 5U) | POSITION_VAL(RCC_CR_HSIRDY)))
#define RCC_FLAG_HSERDY ((uint8_t)((CR_REG_INDEX << 5U) | POSITION_VAL(RCC_CR_HSERDY)))
#define RCC_FLAG_PLLRDY ((uint8_t)((CR_REG_INDEX << 5U) | POSITION_VAL(RCC_CR_PLLRDY)))


#define RCC_FLAG_LSIRDY ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_LSIRDY)))

#define RCC_FLAG_V18PWRRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_V18PWRRSTF)))

#define RCC_FLAG_OBLRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_OBLRSTF)))
#define RCC_FLAG_PINRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_PINRSTF)))
#define RCC_FLAG_PORRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_PORRSTF)))
#define RCC_FLAG_SFTRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_SFTRSTF)))
#define RCC_FLAG_IWDGRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_IWDGRSTF)))
#define RCC_FLAG_WWDGRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_WWDGRSTF)))
#define RCC_FLAG_LPWRRST ((uint8_t)((CSR_REG_INDEX << 5U) | POSITION_VAL(RCC_CSR_LPWRRSTF)))


#define RCC_FLAG_LSERDY ((uint8_t)((BDCR_REG_INDEX << 5U) | POSITION_VAL(RCC_BDCR_LSERDY)))



#define RCC_FLAG_MCO ((uint8_t)((CFGR_REG_INDEX << 5U) | POSITION_VAL(RCC_CFGR_MCOF)))
# 698 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GPIOA_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_GPIOB_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_GPIOC_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOCEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOCEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_GPIOD_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIODEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIODEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_GPIOF_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOFEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOFEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_CRC_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_DMA1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_SRAM_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_SRAMEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_SRAMEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_FLITF_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_FLITFEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_FLITFEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TSC_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_GPIOA_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIOAEN))
#define __HAL_RCC_GPIOB_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIOBEN))
#define __HAL_RCC_GPIOC_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIOCEN))
#define __HAL_RCC_GPIOD_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIODEN))
#define __HAL_RCC_GPIOF_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIOFEN))
#define __HAL_RCC_CRC_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_CRCEN))
#define __HAL_RCC_DMA1_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_DMA1EN))
#define __HAL_RCC_SRAM_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_SRAMEN))
#define __HAL_RCC_FLITF_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_FLITFEN))
#define __HAL_RCC_TSC_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_TSCEN))
# 790 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_TIM2_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TIM6_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_WWDG_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_USART2_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_USART3_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART3EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_I2C1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_PWR_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_DAC1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_DAC1EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DAC1EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_TIM2_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_TIM2EN))
#define __HAL_RCC_TIM6_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_TIM6EN))
#define __HAL_RCC_WWDG_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_WWDGEN))
#define __HAL_RCC_USART2_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_USART2EN))
#define __HAL_RCC_USART3_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_USART3EN))
#define __HAL_RCC_I2C1_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_I2C1EN))
#define __HAL_RCC_PWR_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_PWREN))
#define __HAL_RCC_DAC1_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_DAC1EN))
# 866 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_SYSCFG_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TIM15_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM15EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM15EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TIM16_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM16EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM16EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TIM17_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM17EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM17EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_USART1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_SYSCFG_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_SYSCFGEN))
#define __HAL_RCC_TIM15_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_TIM15EN))
#define __HAL_RCC_TIM16_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_TIM16EN))
#define __HAL_RCC_TIM17_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_TIM17EN))
#define __HAL_RCC_USART1_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_USART1EN))
# 918 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GPIOA_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOAEN)) != RESET)
#define __HAL_RCC_GPIOB_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOBEN)) != RESET)
#define __HAL_RCC_GPIOC_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOCEN)) != RESET)
#define __HAL_RCC_GPIOD_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIODEN)) != RESET)
#define __HAL_RCC_GPIOF_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOFEN)) != RESET)
#define __HAL_RCC_CRC_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) != RESET)
#define __HAL_RCC_DMA1_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) != RESET)
#define __HAL_RCC_SRAM_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) != RESET)
#define __HAL_RCC_FLITF_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) != RESET)
#define __HAL_RCC_TSC_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_TSCEN)) != RESET)

#define __HAL_RCC_GPIOA_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOAEN)) == RESET)
#define __HAL_RCC_GPIOB_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOBEN)) == RESET)
#define __HAL_RCC_GPIOC_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOCEN)) == RESET)
#define __HAL_RCC_GPIOD_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIODEN)) == RESET)
#define __HAL_RCC_GPIOF_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOFEN)) == RESET)
#define __HAL_RCC_CRC_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_CRCEN)) == RESET)
#define __HAL_RCC_DMA1_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_DMA1EN)) == RESET)
#define __HAL_RCC_SRAM_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_SRAMEN)) == RESET)
#define __HAL_RCC_FLITF_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_FLITFEN)) == RESET)
#define __HAL_RCC_TSC_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_TSCEN)) == RESET)
# 950 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_TIM2_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) != RESET)
#define __HAL_RCC_TIM6_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) != RESET)
#define __HAL_RCC_WWDG_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) != RESET)
#define __HAL_RCC_USART2_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) != RESET)
#define __HAL_RCC_USART3_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) != RESET)
#define __HAL_RCC_I2C1_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) != RESET)
#define __HAL_RCC_PWR_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) != RESET)
#define __HAL_RCC_DAC1_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_DAC1EN)) != RESET)

#define __HAL_RCC_TIM2_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM2EN)) == RESET)
#define __HAL_RCC_TIM6_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM6EN)) == RESET)
#define __HAL_RCC_WWDG_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_WWDGEN)) == RESET)
#define __HAL_RCC_USART2_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USART2EN)) == RESET)
#define __HAL_RCC_USART3_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USART3EN)) == RESET)
#define __HAL_RCC_I2C1_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_I2C1EN)) == RESET)
#define __HAL_RCC_PWR_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_PWREN)) == RESET)
#define __HAL_RCC_DAC1_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_DAC1EN)) == RESET)
# 978 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_SYSCFG_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_SYSCFGEN)) != RESET)
#define __HAL_RCC_TIM15_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) != RESET)
#define __HAL_RCC_TIM16_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) != RESET)
#define __HAL_RCC_TIM17_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) != RESET)
#define __HAL_RCC_USART1_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) != RESET)

#define __HAL_RCC_SYSCFG_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_SYSCFGEN)) == RESET)
#define __HAL_RCC_TIM15_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM15EN)) == RESET)
#define __HAL_RCC_TIM16_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM16EN)) == RESET)
#define __HAL_RCC_TIM17_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM17EN)) == RESET)
#define __HAL_RCC_USART1_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_USART1EN)) == RESET)
# 997 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_AHB_FORCE_RESET() (RCC->AHBRSTR = 0xFFFFFFFFU)
#define __HAL_RCC_GPIOA_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIOARST))
#define __HAL_RCC_GPIOB_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIOBRST))
#define __HAL_RCC_GPIOC_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIOCRST))
#define __HAL_RCC_GPIOD_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIODRST))
#define __HAL_RCC_GPIOF_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIOFRST))
#define __HAL_RCC_TSC_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_TSCRST))

#define __HAL_RCC_AHB_RELEASE_RESET() (RCC->AHBRSTR = 0x00000000U)
#define __HAL_RCC_GPIOA_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIOARST))
#define __HAL_RCC_GPIOB_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIOBRST))
#define __HAL_RCC_GPIOC_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIOCRST))
#define __HAL_RCC_GPIOD_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIODRST))
#define __HAL_RCC_GPIOF_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIOFRST))
#define __HAL_RCC_TSC_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_TSCRST))
# 1020 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_APB1_FORCE_RESET() (RCC->APB1RSTR = 0xFFFFFFFFU)
#define __HAL_RCC_TIM2_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM2RST))
#define __HAL_RCC_TIM6_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM6RST))
#define __HAL_RCC_WWDG_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_WWDGRST))
#define __HAL_RCC_USART2_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_USART2RST))
#define __HAL_RCC_USART3_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_USART3RST))
#define __HAL_RCC_I2C1_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_I2C1RST))
#define __HAL_RCC_PWR_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_PWRRST))
#define __HAL_RCC_DAC1_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_DAC1RST))

#define __HAL_RCC_APB1_RELEASE_RESET() (RCC->APB1RSTR = 0x00000000U)
#define __HAL_RCC_TIM2_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM2RST))
#define __HAL_RCC_TIM6_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM6RST))
#define __HAL_RCC_WWDG_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_WWDGRST))
#define __HAL_RCC_USART2_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART2RST))
#define __HAL_RCC_USART3_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USART3RST))
#define __HAL_RCC_I2C1_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST))
#define __HAL_RCC_PWR_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_PWRRST))
#define __HAL_RCC_DAC1_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_DAC1RST))
# 1047 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_APB2_FORCE_RESET() (RCC->APB2RSTR = 0xFFFFFFFFU)
#define __HAL_RCC_SYSCFG_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_SYSCFGRST))
#define __HAL_RCC_TIM15_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM15RST))
#define __HAL_RCC_TIM16_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM16RST))
#define __HAL_RCC_TIM17_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM17RST))
#define __HAL_RCC_USART1_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_USART1RST))

#define __HAL_RCC_APB2_RELEASE_RESET() (RCC->APB2RSTR = 0x00000000U)
#define __HAL_RCC_SYSCFG_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_SYSCFGRST))
#define __HAL_RCC_TIM15_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM15RST))
#define __HAL_RCC_TIM16_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM16RST))
#define __HAL_RCC_TIM17_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM17RST))
#define __HAL_RCC_USART1_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_USART1RST))
# 1082 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_HSI_ENABLE() (*(__IO uint32_t *) RCC_CR_HSION_BB = ENABLE)
#define __HAL_RCC_HSI_DISABLE() (*(__IO uint32_t *) RCC_CR_HSION_BB = DISABLE)
# 1092 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(_HSICALIBRATIONVALUE_) (MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (uint32_t)(_HSICALIBRATIONVALUE_) << POSITION_VAL(RCC_CR_HSITRIM)))
# 1108 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_LSI_ENABLE() (*(__IO uint32_t *) RCC_CSR_LSION_BB = ENABLE)






#define __HAL_RCC_LSI_DISABLE() (*(__IO uint32_t *) RCC_CSR_LSION_BB = DISABLE)
# 1147 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_HSE_CONFIG(__STATE__) do{ if ((__STATE__) == RCC_HSE_ON) { SET_BIT(RCC->CR, RCC_CR_HSEON); } else if ((__STATE__) == RCC_HSE_OFF) { CLEAR_BIT(RCC->CR, RCC_CR_HSEON); CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP); } else if ((__STATE__) == RCC_HSE_BYPASS) { SET_BIT(RCC->CR, RCC_CR_HSEBYP); SET_BIT(RCC->CR, RCC_CR_HSEON); } else { CLEAR_BIT(RCC->CR, RCC_CR_HSEON); CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP); } }while(0U)
# 1195 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_LSE_CONFIG(__STATE__) do{ if ((__STATE__) == RCC_LSE_ON) { SET_BIT(RCC->BDCR, RCC_BDCR_LSEON); } else if ((__STATE__) == RCC_LSE_OFF) { CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON); CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); } else if ((__STATE__) == RCC_LSE_BYPASS) { SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); SET_BIT(RCC->BDCR, RCC_BDCR_LSEON); } else { CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON); CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP); } }while(0U)
# 1275 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_USART1_CONFIG(__USART1CLKSOURCE__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_USART1SW, (uint32_t)(__USART1CLKSOURCE__))
# 1326 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_USART1_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_USART1SW)))
# 1337 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_USART2_CONFIG(__USART2CLKSOURCE__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_USART2SW, (uint32_t)(__USART2CLKSOURCE__))
# 1347 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_USART2_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_USART2SW)))
# 1359 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_USART3_CONFIG(__USART3CLKSOURCE__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_USART3SW, (uint32_t)(__USART3CLKSOURCE__))
# 1369 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_USART3_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_USART3SW)))
# 1385 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_I2C1_CONFIG(__I2C1CLKSOURCE__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, (uint32_t)(__I2C1CLKSOURCE__))







#define __HAL_RCC_GET_I2C1_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_I2C1SW)))
# 1408 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_PLL_ENABLE() (*(__IO uint32_t *) RCC_CR_PLLON_BB = ENABLE)




#define __HAL_RCC_PLL_DISABLE() (*(__IO uint32_t *) RCC_CR_PLLON_BB = DISABLE)
# 1422 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_PLL_OSCSOURCE() ((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC)))
# 1440 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_SYSCLK_CONFIG(__SYSCLKSOURCE__) MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__SYSCLKSOURCE__))
# 1450 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_SYSCLK_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR,RCC_CFGR_SWS)))
# 1503 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__,__MCODIV__) MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO, (__MCOCLKSOURCE__))
# 1538 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_RTC_CONFIG(__RTC_CLKSOURCE__) MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, (__RTC_CLKSOURCE__))
# 1547 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_RTC_SOURCE() (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL))




#define __HAL_RCC_RTC_ENABLE() (*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = ENABLE)




#define __HAL_RCC_RTC_DISABLE() (*(__IO uint32_t *) RCC_BDCR_RTCEN_BB = DISABLE)





#define __HAL_RCC_BACKUPRESET_FORCE() (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = ENABLE)



#define __HAL_RCC_BACKUPRESET_RELEASE() (*(__IO uint32_t *) RCC_BDCR_BDRST_BB = DISABLE)
# 1587 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_ENABLE_IT(__INTERRUPT__) (*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS |= (__INTERRUPT__))
# 1598 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_DISABLE_IT(__INTERRUPT__) (*(__IO uint8_t *) RCC_CIR_BYTE1_ADDRESS &= (uint8_t)(~(__INTERRUPT__)))
# 1610 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_CLEAR_IT(__INTERRUPT__) (*(__IO uint8_t *) RCC_CIR_BYTE2_ADDRESS = (__INTERRUPT__))
# 1623 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_IT(__INTERRUPT__) ((RCC->CIR & (__INTERRUPT__)) == (__INTERRUPT__))





#define __HAL_RCC_CLEAR_RESET_FLAGS() (*(__IO uint32_t *)RCC_CSR_RMVF_BB = ENABLE)
# 1680 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
#define __HAL_RCC_GET_FLAG(__FLAG__) (((((__FLAG__) >> 5U) == CR_REG_INDEX) ? RCC->CR : (((__FLAG__) >> 5U) == BDCR_REG_INDEX)? RCC->BDCR : (((__FLAG__) >> 5U) == CFGR_REG_INDEX)? RCC->CFGR : RCC->CSR) & (1U << ((__FLAG__) & RCC_FLAG_MASK)))
# 1694 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __STM32F3xx_HAL_RCC_EX_H 
# 69 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_MCO1SOURCE(SOURCE) (((SOURCE) == RCC_MCO1SOURCE_NOCLOCK) || ((SOURCE) == RCC_MCO1SOURCE_LSI) || ((SOURCE) == RCC_MCO1SOURCE_LSE) || ((SOURCE) == RCC_MCO1SOURCE_SYSCLK) || ((SOURCE) == RCC_MCO1SOURCE_HSI) || ((SOURCE) == RCC_MCO1SOURCE_HSE) || ((SOURCE) == RCC_MCO1SOURCE_PLLCLK_DIV2))
# 104 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_PERIPHCLOCK(SELECTION) ((SELECTION) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_ADC34 | RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB))
# 213 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_USART1CLKSOURCE(SOURCE) (((SOURCE) == RCC_USART1CLKSOURCE_PCLK2) || ((SOURCE) == RCC_USART1CLKSOURCE_SYSCLK) || ((SOURCE) == RCC_USART1CLKSOURCE_LSE) || ((SOURCE) == RCC_USART1CLKSOURCE_HSI))



#define IS_RCC_I2C2CLKSOURCE(SOURCE) (((SOURCE) == RCC_I2C2CLKSOURCE_HSI) || ((SOURCE) == RCC_I2C2CLKSOURCE_SYSCLK))

#define IS_RCC_ADC12PLLCLK_DIV(ADCCLK) (((ADCCLK) == RCC_ADC12PLLCLK_OFF) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV1) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV2) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV4) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV6) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV8) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV10) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV12) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV16) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV32) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV64) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV128) || ((ADCCLK) == RCC_ADC12PLLCLK_DIV256))






#define IS_RCC_I2SCLKSOURCE(SOURCE) (((SOURCE) == RCC_I2SCLKSOURCE_SYSCLK) || ((SOURCE) == RCC_I2SCLKSOURCE_EXT))

#define IS_RCC_TIM1CLKSOURCE(SOURCE) (((SOURCE) == RCC_TIM1CLK_HCLK) || ((SOURCE) == RCC_TIM1CLK_PLLCLK))

#define IS_RCC_UART4CLKSOURCE(SOURCE) (((SOURCE) == RCC_UART4CLKSOURCE_PCLK1) || ((SOURCE) == RCC_UART4CLKSOURCE_SYSCLK) || ((SOURCE) == RCC_UART4CLKSOURCE_LSE) || ((SOURCE) == RCC_UART4CLKSOURCE_HSI))



#define IS_RCC_UART5CLKSOURCE(SOURCE) (((SOURCE) == RCC_UART5CLKSOURCE_PCLK1) || ((SOURCE) == RCC_UART5CLKSOURCE_SYSCLK) || ((SOURCE) == RCC_UART5CLKSOURCE_LSE) || ((SOURCE) == RCC_UART5CLKSOURCE_HSI))
# 284 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_ADC34PLLCLK_DIV(ADCCLK) (((ADCCLK) == RCC_ADC34PLLCLK_OFF) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV1) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV2) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV4) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV6) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV8) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV10) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV12) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV16) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV32) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV64) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV128) || ((ADCCLK) == RCC_ADC34PLLCLK_DIV256))






#define IS_RCC_TIM8CLKSOURCE(SOURCE) (((SOURCE) == RCC_TIM8CLK_HCLK) || ((SOURCE) == RCC_TIM8CLK_PLLCLK))
# 338 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_USBCLKSOURCE(SOURCE) (((SOURCE) == RCC_USBCLKSOURCE_PLL) || ((SOURCE) == RCC_USBCLKSOURCE_PLL_DIV1_5))
# 350 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define IS_RCC_MCODIV(DIV) (((DIV) == RCC_MCODIV_1))


#define IS_RCC_LSE_DRIVE(__DRIVE__) (((__DRIVE__) == RCC_LSEDRIVE_LOW) || ((__DRIVE__) == RCC_LSEDRIVE_MEDIUMLOW) || ((__DRIVE__) == RCC_LSEDRIVE_MEDIUMHIGH) || ((__DRIVE__) == RCC_LSEDRIVE_HIGH))
# 502 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
typedef struct
{
  uint32_t PeriphClockSelection;


  uint32_t RTCClockSelection;


  uint32_t Usart1ClockSelection;


  uint32_t Usart2ClockSelection;


  uint32_t Usart3ClockSelection;


  uint32_t Uart4ClockSelection;


  uint32_t Uart5ClockSelection;


  uint32_t I2c1ClockSelection;


  uint32_t I2c2ClockSelection;


  uint32_t Adc12ClockSelection;


  uint32_t Adc34ClockSelection;


  uint32_t I2sClockSelection;


  uint32_t Tim1ClockSelection;


  uint32_t Tim8ClockSelection;


  uint32_t USBClockSelection;


}RCC_PeriphCLKInitTypeDef;
# 965 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_MCO1SOURCE_NOCLOCK RCC_CFGR_MCO_NOCLOCK
#define RCC_MCO1SOURCE_LSI RCC_CFGR_MCO_LSI
#define RCC_MCO1SOURCE_LSE RCC_CFGR_MCO_LSE
#define RCC_MCO1SOURCE_SYSCLK RCC_CFGR_MCO_SYSCLK
#define RCC_MCO1SOURCE_HSI RCC_CFGR_MCO_HSI
#define RCC_MCO1SOURCE_HSE RCC_CFGR_MCO_HSE



#define RCC_MCO1SOURCE_PLLCLK_DIV2 RCC_CFGR_MCO_PLL
# 1032 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_PERIPHCLK_USART1 (0x00000001U)
#define RCC_PERIPHCLK_USART2 (0x00000002U)
#define RCC_PERIPHCLK_USART3 (0x00000004U)
#define RCC_PERIPHCLK_UART4 (0x00000008U)
#define RCC_PERIPHCLK_UART5 (0x00000010U)
#define RCC_PERIPHCLK_I2C1 (0x00000020U)
#define RCC_PERIPHCLK_I2C2 (0x00000040U)
#define RCC_PERIPHCLK_ADC12 (0x00000080U)
#define RCC_PERIPHCLK_ADC34 (0x00000100U)
#define RCC_PERIPHCLK_I2S (0x00000200U)
#define RCC_PERIPHCLK_TIM1 (0x00001000U)
#define RCC_PERIPHCLK_TIM8 (0x00002000U)
#define RCC_PERIPHCLK_RTC (0x00010000U)
#define RCC_PERIPHCLK_USB (0x00020000U)
# 1309 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_USART1CLKSOURCE_PCLK2 RCC_CFGR3_USART1SW_PCLK2
#define RCC_USART1CLKSOURCE_SYSCLK RCC_CFGR3_USART1SW_SYSCLK
#define RCC_USART1CLKSOURCE_LSE RCC_CFGR3_USART1SW_LSE
#define RCC_USART1CLKSOURCE_HSI RCC_CFGR3_USART1SW_HSI
# 1321 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_I2C2CLKSOURCE_HSI RCC_CFGR3_I2C2SW_HSI
#define RCC_I2C2CLKSOURCE_SYSCLK RCC_CFGR3_I2C2SW_SYSCLK
# 1333 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_ADC12PLLCLK_OFF RCC_CFGR2_ADCPRE12_NO
#define RCC_ADC12PLLCLK_DIV1 RCC_CFGR2_ADCPRE12_DIV1
#define RCC_ADC12PLLCLK_DIV2 RCC_CFGR2_ADCPRE12_DIV2
#define RCC_ADC12PLLCLK_DIV4 RCC_CFGR2_ADCPRE12_DIV4
#define RCC_ADC12PLLCLK_DIV6 RCC_CFGR2_ADCPRE12_DIV6
#define RCC_ADC12PLLCLK_DIV8 RCC_CFGR2_ADCPRE12_DIV8
#define RCC_ADC12PLLCLK_DIV10 RCC_CFGR2_ADCPRE12_DIV10
#define RCC_ADC12PLLCLK_DIV12 RCC_CFGR2_ADCPRE12_DIV12
#define RCC_ADC12PLLCLK_DIV16 RCC_CFGR2_ADCPRE12_DIV16
#define RCC_ADC12PLLCLK_DIV32 RCC_CFGR2_ADCPRE12_DIV32
#define RCC_ADC12PLLCLK_DIV64 RCC_CFGR2_ADCPRE12_DIV64
#define RCC_ADC12PLLCLK_DIV128 RCC_CFGR2_ADCPRE12_DIV128
#define RCC_ADC12PLLCLK_DIV256 RCC_CFGR2_ADCPRE12_DIV256
# 1354 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_I2SCLKSOURCE_SYSCLK RCC_CFGR_I2SSRC_SYSCLK
#define RCC_I2SCLKSOURCE_EXT RCC_CFGR_I2SSRC_EXT







#define RCC_TIM1CLK_HCLK RCC_CFGR3_TIM1SW_HCLK
#define RCC_TIM1CLK_PLLCLK RCC_CFGR3_TIM1SW_PLL
# 1373 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_UART4CLKSOURCE_PCLK1 RCC_CFGR3_UART4SW_PCLK
#define RCC_UART4CLKSOURCE_SYSCLK RCC_CFGR3_UART4SW_SYSCLK
#define RCC_UART4CLKSOURCE_LSE RCC_CFGR3_UART4SW_LSE
#define RCC_UART4CLKSOURCE_HSI RCC_CFGR3_UART4SW_HSI
# 1385 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_UART5CLKSOURCE_PCLK1 RCC_CFGR3_UART5SW_PCLK
#define RCC_UART5CLKSOURCE_SYSCLK RCC_CFGR3_UART5SW_SYSCLK
#define RCC_UART5CLKSOURCE_LSE RCC_CFGR3_UART5SW_LSE
#define RCC_UART5CLKSOURCE_HSI RCC_CFGR3_UART5SW_HSI
# 1569 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_ADC34PLLCLK_OFF RCC_CFGR2_ADCPRE34_NO
#define RCC_ADC34PLLCLK_DIV1 RCC_CFGR2_ADCPRE34_DIV1
#define RCC_ADC34PLLCLK_DIV2 RCC_CFGR2_ADCPRE34_DIV2
#define RCC_ADC34PLLCLK_DIV4 RCC_CFGR2_ADCPRE34_DIV4
#define RCC_ADC34PLLCLK_DIV6 RCC_CFGR2_ADCPRE34_DIV6
#define RCC_ADC34PLLCLK_DIV8 RCC_CFGR2_ADCPRE34_DIV8
#define RCC_ADC34PLLCLK_DIV10 RCC_CFGR2_ADCPRE34_DIV10
#define RCC_ADC34PLLCLK_DIV12 RCC_CFGR2_ADCPRE34_DIV12
#define RCC_ADC34PLLCLK_DIV16 RCC_CFGR2_ADCPRE34_DIV16
#define RCC_ADC34PLLCLK_DIV32 RCC_CFGR2_ADCPRE34_DIV32
#define RCC_ADC34PLLCLK_DIV64 RCC_CFGR2_ADCPRE34_DIV64
#define RCC_ADC34PLLCLK_DIV128 RCC_CFGR2_ADCPRE34_DIV128
#define RCC_ADC34PLLCLK_DIV256 RCC_CFGR2_ADCPRE34_DIV256
# 1590 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_TIM8CLK_HCLK RCC_CFGR3_TIM8SW_HCLK
#define RCC_TIM8CLK_PLLCLK RCC_CFGR3_TIM8SW_PLL
# 1744 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_USBCLKSOURCE_PLL RCC_CFGR_USBPRE_DIV1
#define RCC_USBCLKSOURCE_PLL_DIV1_5 RCC_CFGR_USBPRE_DIV1_5
# 1773 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_MCODIV_1 (0x00000000U)
# 1785 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define RCC_LSEDRIVE_LOW (0x00000000U)
#define RCC_LSEDRIVE_MEDIUMLOW RCC_BDCR_LSEDRV_1
#define RCC_LSEDRIVE_MEDIUMHIGH RCC_BDCR_LSEDRV_0
#define RCC_LSEDRIVE_HIGH RCC_BDCR_LSEDRV
# 1842 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_PLL_CONFIG(__RCC_PLLSource__,__PLLMUL__) MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL | RCC_CFGR_PLLSRC, (uint32_t)((__PLLMUL__)|(__RCC_PLLSource__)))
# 1868 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_HSE_PREDIV_CONFIG(__HSE_PREDIV_VALUE__) MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (uint32_t)(__HSE_PREDIV_VALUE__))





#define __HAL_RCC_HSE_GET_PREDIV() READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV)
# 1905 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_DMA2_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA2EN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA2EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_GPIOE_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOEEN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOEEN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_ADC12_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_ADC12EN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_ADC12EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_ADC1_CLK_ENABLE() __HAL_RCC_ADC12_CLK_ENABLE()
#define __HAL_RCC_ADC2_CLK_ENABLE() __HAL_RCC_ADC12_CLK_ENABLE()

#define __HAL_RCC_DMA2_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_DMA2EN))
#define __HAL_RCC_GPIOE_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_GPIOEEN))
#define __HAL_RCC_ADC12_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_ADC12EN))

#define __HAL_RCC_ADC1_CLK_DISABLE() __HAL_RCC_ADC12_CLK_DISABLE()
#define __HAL_RCC_ADC2_CLK_DISABLE() __HAL_RCC_ADC12_CLK_DISABLE()





#define __HAL_RCC_ADC34_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->AHBENR, RCC_AHBENR_ADC34EN); tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_ADC34EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_ADC34_CLK_DISABLE() (RCC->AHBENR &= ~(RCC_AHBENR_ADC34EN))
# 2066 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM3_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_TIM4_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM4EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_SPI2_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_SPI3_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI3EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_UART4_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART4EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART4EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_UART5_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_UART5EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_UART5EN); UNUSED(tmpreg); } while(0U)






#define __HAL_RCC_I2C2_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_TIM3_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_TIM3EN))
#define __HAL_RCC_TIM4_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_TIM4EN))
#define __HAL_RCC_SPI2_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_SPI2EN))
#define __HAL_RCC_SPI3_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_SPI3EN))
#define __HAL_RCC_UART4_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_UART4EN))
#define __HAL_RCC_UART5_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_UART5EN))
#define __HAL_RCC_I2C2_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_I2C2EN))
# 2250 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM7_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_TIM7_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_TIM7EN))
# 2268 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_USB_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_USB_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_USBEN))






#define __HAL_RCC_CAN1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB1ENR, RCC_APB1ENR_CANEN); tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CANEN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_CAN1_CLK_DISABLE() (RCC->APB1ENR &= ~(RCC_APB1ENR_CANEN))
# 2318 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_SPI1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_SPI1_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_SPI1EN))





#define __HAL_RCC_TIM8_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM8EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM8EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_TIM8_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_TIM8EN))
# 2424 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM1_CLK_ENABLE() do { __IO uint32_t tmpreg; SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); UNUSED(tmpreg); } while(0U)







#define __HAL_RCC_TIM1_CLK_DISABLE() (RCC->APB2ENR &= ~(RCC_APB2ENR_TIM1EN))
# 2480 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_DMA2_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) != RESET)
#define __HAL_RCC_GPIOE_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOEEN)) != RESET)
#define __HAL_RCC_ADC12_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_ADC12EN)) != RESET)

#define __HAL_RCC_DMA2_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_DMA2EN)) == RESET)
#define __HAL_RCC_GPIOE_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_GPIOEEN)) == RESET)
#define __HAL_RCC_ADC12_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_ADC12EN)) == RESET)





#define __HAL_RCC_ADC34_IS_CLK_ENABLED() ((RCC->AHBENR & (RCC_AHBENR_ADC34EN)) != RESET)

#define __HAL_RCC_ADC34_IS_CLK_DISABLED() ((RCC->AHBENR & (RCC_AHBENR_ADC34EN)) == RESET)
# 2546 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM3_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) != RESET)
#define __HAL_RCC_TIM4_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) != RESET)
#define __HAL_RCC_SPI2_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) != RESET)
#define __HAL_RCC_SPI3_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) != RESET)
#define __HAL_RCC_UART4_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) != RESET)
#define __HAL_RCC_UART5_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) != RESET)
#define __HAL_RCC_I2C2_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) != RESET)

#define __HAL_RCC_TIM3_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM3EN)) == RESET)
#define __HAL_RCC_TIM4_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM4EN)) == RESET)
#define __HAL_RCC_SPI2_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_SPI2EN)) == RESET)
#define __HAL_RCC_SPI3_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_SPI3EN)) == RESET)
#define __HAL_RCC_UART4_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_UART4EN)) == RESET)
#define __HAL_RCC_UART5_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_UART5EN)) == RESET)
#define __HAL_RCC_I2C2_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_I2C2EN)) == RESET)
# 2604 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM7_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) != RESET)

#define __HAL_RCC_TIM7_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_TIM7EN)) == RESET)
# 2616 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_USB_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) != RESET)

#define __HAL_RCC_USB_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_USBEN)) == RESET)






#define __HAL_RCC_CAN1_IS_CLK_ENABLED() ((RCC->APB1ENR & (RCC_APB1ENR_CANEN)) != RESET)

#define __HAL_RCC_CAN1_IS_CLK_DISABLED() ((RCC->APB1ENR & (RCC_APB1ENR_CANEN)) == RESET)
# 2648 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_SPI1_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) != RESET)

#define __HAL_RCC_SPI1_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_SPI1EN)) == RESET)





#define __HAL_RCC_TIM8_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) != RESET)

#define __HAL_RCC_TIM8_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM8EN)) == RESET)
# 2694 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM1_IS_CLK_ENABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) != RESET)

#define __HAL_RCC_TIM1_IS_CLK_DISABLED() ((RCC->APB2ENR & (RCC_APB2ENR_TIM1EN)) == RESET)
# 2729 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GPIOE_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_GPIOERST))
#define __HAL_RCC_ADC12_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_ADC12RST))

#define __HAL_RCC_ADC1_FORCE_RESET() __HAL_RCC_ADC12_FORCE_RESET()
#define __HAL_RCC_ADC2_FORCE_RESET() __HAL_RCC_ADC12_FORCE_RESET()

#define __HAL_RCC_GPIOE_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_GPIOERST))
#define __HAL_RCC_ADC12_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_ADC12RST))

#define __HAL_RCC_ADC1_RELEASE_RESET() __HAL_RCC_ADC12_RELEASE_RESET()
#define __HAL_RCC_ADC2_RELEASE_RESET() __HAL_RCC_ADC12_RELEASE_RESET()





#define __HAL_RCC_ADC34_FORCE_RESET() (RCC->AHBRSTR |= (RCC_AHBRSTR_ADC34RST))

#define __HAL_RCC_ADC34_RELEASE_RESET() (RCC->AHBRSTR &= ~(RCC_AHBRSTR_ADC34RST))
# 2800 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM3_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM3RST))
#define __HAL_RCC_TIM4_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM4RST))
#define __HAL_RCC_SPI2_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_SPI2RST))
#define __HAL_RCC_SPI3_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_SPI3RST))
#define __HAL_RCC_UART4_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_UART4RST))
#define __HAL_RCC_UART5_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_UART5RST))
#define __HAL_RCC_I2C2_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_I2C2RST))

#define __HAL_RCC_TIM3_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM3RST))
#define __HAL_RCC_TIM4_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM4RST))
#define __HAL_RCC_SPI2_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI2RST))
#define __HAL_RCC_SPI3_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_SPI3RST))
#define __HAL_RCC_UART4_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART4RST))
#define __HAL_RCC_UART5_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_UART5RST))
#define __HAL_RCC_I2C2_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C2RST))
# 2858 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM7_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_TIM7RST))

#define __HAL_RCC_TIM7_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_TIM7RST))
# 2870 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_USB_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_USBRST))

#define __HAL_RCC_USB_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_USBRST))






#define __HAL_RCC_CAN1_FORCE_RESET() (RCC->APB1RSTR |= (RCC_APB1RSTR_CANRST))

#define __HAL_RCC_CAN1_RELEASE_RESET() (RCC->APB1RSTR &= ~(RCC_APB1RSTR_CANRST))
# 2899 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_SPI1_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_SPI1RST))

#define __HAL_RCC_SPI1_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_SPI1RST))





#define __HAL_RCC_TIM8_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM8RST))

#define __HAL_RCC_TIM8_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM8RST))
# 2945 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM1_FORCE_RESET() (RCC->APB2RSTR |= (RCC_APB2RSTR_TIM1RST))

#define __HAL_RCC_TIM1_RELEASE_RESET() (RCC->APB2RSTR &= ~(RCC_APB2RSTR_TIM1RST))
# 3165 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_I2C2_CONFIG(__I2C2CLKSource__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C2SW, (uint32_t)(__I2C2CLKSource__))







#define __HAL_RCC_GET_I2C2_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_I2C2SW)))
# 3199 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_ADC12_CONFIG(__ADC12CLKSource__) MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, (uint32_t)(__ADC12CLKSource__))
# 3218 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GET_ADC12_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_ADCPRE12)))
# 3233 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM1_CONFIG(__TIM1CLKSource__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_TIM1SW, (uint32_t)(__TIM1CLKSource__))







#define __HAL_RCC_GET_TIM1_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_TIM1SW)))
# 3258 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_I2S_CONFIG(__I2SCLKSource__) MODIFY_REG(RCC->CFGR, RCC_CFGR_I2SSRC, (uint32_t)(__I2SCLKSource__))
# 3267 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GET_I2S_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_I2SSRC)))
# 3284 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_UART4_CONFIG(__UART4CLKSource__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_UART4SW, (uint32_t)(__UART4CLKSource__))
# 3294 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GET_UART4_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_UART4SW)))
# 3304 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_UART5_CONFIG(__UART5CLKSource__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_UART5SW, (uint32_t)(__UART5CLKSource__))
# 3314 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GET_UART5_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_UART5SW)))
# 3344 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_ADC34_CONFIG(__ADC34CLKSource__) MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE34, (uint32_t)(__ADC34CLKSource__))
# 3363 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_GET_ADC34_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_ADCPRE34)))
# 3378 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_TIM8_CONFIG(__TIM8CLKSource__) MODIFY_REG(RCC->CFGR3, RCC_CFGR3_TIM8SW, (uint32_t)(__TIM8CLKSource__))







#define __HAL_RCC_GET_TIM8_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_TIM8SW)))
# 3626 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_USB_CONFIG(__USBCLKSource__) MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, (uint32_t)(__USBCLKSource__))







#define __HAL_RCC_GET_USB_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_USBPRE)))
# 3796 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
#define __HAL_RCC_LSEDRIVE_CONFIG(__RCC_LSEDRIVE__) (MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, (uint32_t)(__RCC_LSEDRIVE__) ))
# 3816 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk);
# 1695 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h" 2
# 1706 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
void HAL_RCC_DeInit(void);
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency);
# 1719 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv);
void HAL_RCC_EnableCSS(void);

void HAL_RCC_NMI_IRQHandler(void);

void HAL_RCC_CSSCallback(void);
void HAL_RCC_DisableCSS(void);
uint32_t HAL_RCC_GetSysClockFreq(void);
uint32_t HAL_RCC_GetHCLKFreq(void);
uint32_t HAL_RCC_GetPCLK1Freq(void);
uint32_t HAL_RCC_GetPCLK2Freq(void);
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t *pFLatency);
# 181 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define __STM32F3xx_HAL_GPIO_H 
# 63 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
typedef struct
{
  uint32_t Pin;


  uint32_t Mode;


  uint32_t Pull;


  uint32_t Speed;


  uint32_t Alternate;

}GPIO_InitTypeDef;




typedef enum
{
  GPIO_PIN_RESET = 0U,
  GPIO_PIN_SET
}GPIO_PinState;
# 100 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define GPIO_PIN_0 ((uint16_t)0x0001U)
#define GPIO_PIN_1 ((uint16_t)0x0002U)
#define GPIO_PIN_2 ((uint16_t)0x0004U)
#define GPIO_PIN_3 ((uint16_t)0x0008U)
#define GPIO_PIN_4 ((uint16_t)0x0010U)
#define GPIO_PIN_5 ((uint16_t)0x0020U)
#define GPIO_PIN_6 ((uint16_t)0x0040U)
#define GPIO_PIN_7 ((uint16_t)0x0080U)
#define GPIO_PIN_8 ((uint16_t)0x0100U)
#define GPIO_PIN_9 ((uint16_t)0x0200U)
#define GPIO_PIN_10 ((uint16_t)0x0400U)
#define GPIO_PIN_11 ((uint16_t)0x0800U)
#define GPIO_PIN_12 ((uint16_t)0x1000U)
#define GPIO_PIN_13 ((uint16_t)0x2000U)
#define GPIO_PIN_14 ((uint16_t)0x4000U)
#define GPIO_PIN_15 ((uint16_t)0x8000U)
#define GPIO_PIN_All ((uint16_t)0xFFFFU)

#define GPIO_PIN_MASK (0x0000FFFFU)
# 133 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define GPIO_MODE_INPUT (0x00000000U)
#define GPIO_MODE_OUTPUT_PP (0x00000001U)
#define GPIO_MODE_OUTPUT_OD (0x00000011U)
#define GPIO_MODE_AF_PP (0x00000002U)
#define GPIO_MODE_AF_OD (0x00000012U)
#define GPIO_MODE_ANALOG (0x00000003U)
#define GPIO_MODE_IT_RISING (0x10110000U)
#define GPIO_MODE_IT_FALLING (0x10210000U)
#define GPIO_MODE_IT_RISING_FALLING (0x10310000U)
#define GPIO_MODE_EVT_RISING (0x10120000U)
#define GPIO_MODE_EVT_FALLING (0x10220000U)
#define GPIO_MODE_EVT_RISING_FALLING (0x10320000U)
# 153 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define GPIO_SPEED_FREQ_LOW (0x00000000U)
#define GPIO_SPEED_FREQ_MEDIUM (0x00000001U)
#define GPIO_SPEED_FREQ_HIGH (0x00000003U)
# 164 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define GPIO_NOPULL (0x00000000U)
#define GPIO_PULLUP (0x00000001U)
#define GPIO_PULLDOWN (0x00000002U)
# 186 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))







#define __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))







#define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))







#define __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))







#define __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__) (EXTI->SWIER |= (__EXTI_LINE__))
# 228 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define IS_GPIO_PIN_ACTION(ACTION) (((ACTION) == GPIO_PIN_RESET) || ((ACTION) == GPIO_PIN_SET))

#define IS_GPIO_PIN(__PIN__) ((((__PIN__) & GPIO_PIN_MASK) != 0x00U) && (((__PIN__) & ~GPIO_PIN_MASK) == 0x00U))


#define IS_GPIO_MODE(__MODE__) (((__MODE__) == GPIO_MODE_INPUT) || ((__MODE__) == GPIO_MODE_OUTPUT_PP) || ((__MODE__) == GPIO_MODE_OUTPUT_OD) || ((__MODE__) == GPIO_MODE_AF_PP) || ((__MODE__) == GPIO_MODE_AF_OD) || ((__MODE__) == GPIO_MODE_IT_RISING) || ((__MODE__) == GPIO_MODE_IT_FALLING) || ((__MODE__) == GPIO_MODE_IT_RISING_FALLING) || ((__MODE__) == GPIO_MODE_EVT_RISING) || ((__MODE__) == GPIO_MODE_EVT_FALLING) || ((__MODE__) == GPIO_MODE_EVT_RISING_FALLING) || ((__MODE__) == GPIO_MODE_ANALOG))
# 246 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
#define IS_GPIO_SPEED(__SPEED__) (((__SPEED__) == GPIO_SPEED_FREQ_LOW) || ((__SPEED__) == GPIO_SPEED_FREQ_MEDIUM) || ((__SPEED__) == GPIO_SPEED_FREQ_HIGH))



#define IS_GPIO_PULL(__PULL__) (((__PULL__) == GPIO_NOPULL) || ((__PULL__) == GPIO_PULLUP) || ((__PULL__) == GPIO_PULLDOWN))







# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio_ex.h"
#define __STM32F3xx_HAL_GPIO_EX_H 
# 189 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio_ex.h"
#define GPIO_AF0_RTC_50Hz ((uint8_t)0x00U)
#define GPIO_AF0_MCO ((uint8_t)0x00U)
#define GPIO_AF0_TAMPER ((uint8_t)0x00U)
#define GPIO_AF0_SWJ ((uint8_t)0x00U)
#define GPIO_AF0_TRACE ((uint8_t)0x00U)




#define GPIO_AF1_TIM2 ((uint8_t)0x01U)
#define GPIO_AF1_TIM15 ((uint8_t)0x01U)
#define GPIO_AF1_TIM16 ((uint8_t)0x01U)
#define GPIO_AF1_TIM17 ((uint8_t)0x01U)
#define GPIO_AF1_EVENTOUT ((uint8_t)0x01U)



#define GPIO_AF2_TIM1 ((uint8_t)0x02U)
#define GPIO_AF2_TIM2 ((uint8_t)0x02U)
#define GPIO_AF2_TIM3 ((uint8_t)0x02U)
#define GPIO_AF2_TIM4 ((uint8_t)0x02U)
#define GPIO_AF2_TIM8 ((uint8_t)0x02U)
#define GPIO_AF2_TIM15 ((uint8_t)0x02U)
#define GPIO_AF2_COMP1 ((uint8_t)0x02U)



#define GPIO_AF3_TSC ((uint8_t)0x03U)
#define GPIO_AF3_TIM8 ((uint8_t)0x03U)
#define GPIO_AF3_COMP7 ((uint8_t)0x03U)
#define GPIO_AF3_TIM15 ((uint8_t)0x03U)




#define GPIO_AF4_TIM1 ((uint8_t)0x04U)
#define GPIO_AF4_TIM8 ((uint8_t)0x04U)
#define GPIO_AF4_TIM16 ((uint8_t)0x04U)
#define GPIO_AF4_TIM17 ((uint8_t)0x04U)
#define GPIO_AF4_I2C1 ((uint8_t)0x04U)
#define GPIO_AF4_I2C2 ((uint8_t)0x04U)




#define GPIO_AF5_SPI1 ((uint8_t)0x05U)
#define GPIO_AF5_SPI2 ((uint8_t)0x05U)
#define GPIO_AF5_SPI3 ((uint8_t)0x05U)
#define GPIO_AF5_I2S ((uint8_t)0x05U)
#define GPIO_AF5_I2S2ext ((uint8_t)0x05U)
#define GPIO_AF5_TIM8 ((uint8_t)0x05U)
#define GPIO_AF5_IR ((uint8_t)0x05U)
#define GPIO_AF5_UART4 ((uint8_t)0x05U)
#define GPIO_AF5_UART5 ((uint8_t)0x05U)



#define GPIO_AF6_SPI2 ((uint8_t)0x06U)
#define GPIO_AF6_SPI3 ((uint8_t)0x06U)
#define GPIO_AF6_I2S3ext ((uint8_t)0x06U)
#define GPIO_AF6_TIM1 ((uint8_t)0x06U)
#define GPIO_AF6_TIM8 ((uint8_t)0x06U)
#define GPIO_AF6_IR ((uint8_t)0x06U)




#define GPIO_AF7_USART1 ((uint8_t)0x07U)
#define GPIO_AF7_USART2 ((uint8_t)0x07U)
#define GPIO_AF7_USART3 ((uint8_t)0x07U)
#define GPIO_AF7_COMP3 ((uint8_t)0x07U)
#define GPIO_AF7_COMP5 ((uint8_t)0x07U)
#define GPIO_AF7_COMP6 ((uint8_t)0x07U)
#define GPIO_AF7_CAN ((uint8_t)0x07U)




#define GPIO_AF8_COMP1 ((uint8_t)0x08U)
#define GPIO_AF8_COMP2 ((uint8_t)0x08U)
#define GPIO_AF8_COMP3 ((uint8_t)0x08U)
#define GPIO_AF8_COMP4 ((uint8_t)0x08U)
#define GPIO_AF8_COMP5 ((uint8_t)0x08U)
#define GPIO_AF8_COMP6 ((uint8_t)0x08U)




#define GPIO_AF9_CAN ((uint8_t)0x09U)
#define GPIO_AF9_TIM1 ((uint8_t)0x09U)
#define GPIO_AF9_TIM8 ((uint8_t)0x09U)
#define GPIO_AF9_TIM15 ((uint8_t)0x09U)




#define GPIO_AF10_TIM2 ((uint8_t)0xAU)
#define GPIO_AF10_TIM3 ((uint8_t)0xAU)
#define GPIO_AF10_TIM4 ((uint8_t)0xAU)
#define GPIO_AF10_TIM8 ((uint8_t)0xAU)
#define GPIO_AF10_TIM17 ((uint8_t)0xAU)



#define GPIO_AF11_TIM1 ((uint8_t)0x0BU)
#define GPIO_AF11_TIM8 ((uint8_t)0x0BU)




#define GPIO_AF12_TIM1 ((uint8_t)0xCU)





#define GPIO_AF14_USB ((uint8_t)0x0EU)



#define GPIO_AF15_EVENTOUT ((uint8_t)0x0FU)

#define IS_GPIO_AF(AF) (((AF) <= (uint8_t)0x0CU) || ((AF) == (uint8_t)0x0EU) || ((AF) == (uint8_t)0x0FU))
# 1497 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio_ex.h"
#define GPIO_GET_INDEX(__GPIOx__) (((__GPIOx__) == (GPIOA))? 0U : ((__GPIOx__) == (GPIOB))? 1U : ((__GPIOx__) == (GPIOC))? 2U : ((__GPIOx__) == (GPIOD))? 3U : ((__GPIOx__) == (GPIOE))? 4U : 5U)
# 259 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h" 2
# 271 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init);
void HAL_GPIO_DeInit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin);
# 283 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
# 185 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define __STM32F3xx_HAL_DMA_H 
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
typedef struct
{
  uint32_t Direction;



  uint32_t PeriphInc;


  uint32_t MemInc;


  uint32_t PeriphDataAlignment;


  uint32_t MemDataAlignment;


  uint32_t Mode;




  uint32_t Priority;

} DMA_InitTypeDef;




typedef enum
{
  HAL_DMA_STATE_RESET = 0x00U,
  HAL_DMA_STATE_READY = 0x01U,
  HAL_DMA_STATE_BUSY = 0x02U,
  HAL_DMA_STATE_TIMEOUT = 0x03
}HAL_DMA_StateTypeDef;




typedef enum
{
  HAL_DMA_FULL_TRANSFER = 0x00U,
  HAL_DMA_HALF_TRANSFER = 0x01
}HAL_DMA_LevelCompleteTypeDef;




typedef enum
{
  HAL_DMA_XFER_CPLT_CB_ID = 0x00U,
  HAL_DMA_XFER_HALFCPLT_CB_ID = 0x01U,
  HAL_DMA_XFER_ERROR_CB_ID = 0x02U,
  HAL_DMA_XFER_ABORT_CB_ID = 0x03U,
  HAL_DMA_XFER_ALL_CB_ID = 0x04
}HAL_DMA_CallbackIDTypeDef;




typedef struct __DMA_HandleTypeDef
{
  DMA_Channel_TypeDef *Instance;

  DMA_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  HAL_DMA_StateTypeDef State;

  void *Parent;

  void (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferErrorCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferAbortCallback)( struct __DMA_HandleTypeDef * hdma);

  volatile uint32_t ErrorCode;

  DMA_TypeDef *DmaBaseAddress;

  uint32_t ChannelIndex;
} DMA_HandleTypeDef;
# 165 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define HAL_DMA_ERROR_NONE (0x00000000U)
#define HAL_DMA_ERROR_TE (0x00000001U)
#define HAL_DMA_ERROR_NO_XFER (0x00000004U)
#define HAL_DMA_ERROR_TIMEOUT (0x00000020U)
#define HAL_DMA_ERROR_NOT_SUPPORTED (0x00000100U)







#define DMA_PERIPH_TO_MEMORY (0x00000000U)
#define DMA_MEMORY_TO_PERIPH ((uint32_t)DMA_CCR_DIR)
#define DMA_MEMORY_TO_MEMORY ((uint32_t)DMA_CCR_MEM2MEM)
# 188 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define DMA_PINC_ENABLE ((uint32_t)DMA_CCR_PINC)
#define DMA_PINC_DISABLE (0x00000000U)







#define DMA_MINC_ENABLE ((uint32_t)DMA_CCR_MINC)
#define DMA_MINC_DISABLE (0x00000000U)







#define DMA_PDATAALIGN_BYTE (0x00000000U)
#define DMA_PDATAALIGN_HALFWORD ((uint32_t)DMA_CCR_PSIZE_0)
#define DMA_PDATAALIGN_WORD ((uint32_t)DMA_CCR_PSIZE_1)







#define DMA_MDATAALIGN_BYTE (0x00000000U)
#define DMA_MDATAALIGN_HALFWORD ((uint32_t)DMA_CCR_MSIZE_0)
#define DMA_MDATAALIGN_WORD ((uint32_t)DMA_CCR_MSIZE_1)







#define DMA_NORMAL (0x00000000U)
#define DMA_CIRCULAR ((uint32_t)DMA_CCR_CIRC)







#define DMA_PRIORITY_LOW (0x00000000U)
#define DMA_PRIORITY_MEDIUM ((uint32_t)DMA_CCR_PL_0)
#define DMA_PRIORITY_HIGH ((uint32_t)DMA_CCR_PL_1)
#define DMA_PRIORITY_VERY_HIGH ((uint32_t)DMA_CCR_PL)
# 247 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define DMA_IT_TC ((uint32_t)DMA_CCR_TCIE)
#define DMA_IT_HT ((uint32_t)DMA_CCR_HTIE)
#define DMA_IT_TE ((uint32_t)DMA_CCR_TEIE)







#define DMA_FLAG_GL1 (0x00000001U)
#define DMA_FLAG_TC1 (0x00000002U)
#define DMA_FLAG_HT1 (0x00000004U)
#define DMA_FLAG_TE1 (0x00000008U)
#define DMA_FLAG_GL2 (0x00000010U)
#define DMA_FLAG_TC2 (0x00000020U)
#define DMA_FLAG_HT2 (0x00000040U)
#define DMA_FLAG_TE2 (0x00000080U)
#define DMA_FLAG_GL3 (0x00000100U)
#define DMA_FLAG_TC3 (0x00000200U)
#define DMA_FLAG_HT3 (0x00000400U)
#define DMA_FLAG_TE3 (0x00000800U)
#define DMA_FLAG_GL4 (0x00001000U)
#define DMA_FLAG_TC4 (0x00002000U)
#define DMA_FLAG_HT4 (0x00004000U)
#define DMA_FLAG_TE4 (0x00008000U)
#define DMA_FLAG_GL5 (0x00010000U)
#define DMA_FLAG_TC5 (0x00020000U)
#define DMA_FLAG_HT5 (0x00040000U)
#define DMA_FLAG_TE5 (0x00080000U)
#define DMA_FLAG_GL6 (0x00100000U)
#define DMA_FLAG_TC6 (0x00200000U)
#define DMA_FLAG_HT6 (0x00400000U)
#define DMA_FLAG_TE6 (0x00800000U)
#define DMA_FLAG_GL7 (0x01000000U)
#define DMA_FLAG_TC7 (0x02000000U)
#define DMA_FLAG_HT7 (0x04000000U)
#define DMA_FLAG_TE7 (0x08000000U)
# 303 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DMA_STATE_RESET)






#define __HAL_DMA_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CCR |= DMA_CCR_EN)






#define __HAL_DMA_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CCR &= ~DMA_CCR_EN)
# 332 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define __HAL_DMA_ENABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->CCR |= (__INTERRUPT__))
# 344 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define __HAL_DMA_DISABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->CCR &= ~(__INTERRUPT__))
# 356 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define __HAL_DMA_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) (((__HANDLE__)->Instance->CCR & (__INTERRUPT__)))







#define __HAL_DMA_GET_COUNTER(__HANDLE__) ((__HANDLE__)->Instance->CNDTR)






# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __STM32F3xx_HAL_DMA_EX_H 
# 71 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel7))? DMA_FLAG_TC7 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel1))? DMA_FLAG_TC1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel2))? DMA_FLAG_TC2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel3))? DMA_FLAG_TC3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel4))? DMA_FLAG_TC4 : DMA_FLAG_TC5)
# 90 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel7))? DMA_FLAG_HT7 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel1))? DMA_FLAG_HT1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel2))? DMA_FLAG_HT2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel3))? DMA_FLAG_HT3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel4))? DMA_FLAG_HT4 : DMA_FLAG_HT5)
# 109 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel7))? DMA_FLAG_TE7 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel1))? DMA_FLAG_TE1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel2))? DMA_FLAG_TE2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel3))? DMA_FLAG_TE3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel4))? DMA_FLAG_TE4 : DMA_FLAG_TE5)
# 128 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__) (((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_GL1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_GL2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_GL3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_GL4 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_GL5 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_GL6 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel7))? DMA_FLAG_GL7 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel1))? DMA_FLAG_GL1 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel2))? DMA_FLAG_GL2 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel3))? DMA_FLAG_GL3 : ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA2_Channel4))? DMA_FLAG_GL4 : DMA_FLAG_GL5)
# 153 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_GET_FLAG(__HANDLE__,__FLAG__) (((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Channel7)? (DMA2->ISR & (__FLAG__)) : (DMA1->ISR & (__FLAG__)))
# 168 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma_ex.h"
#define __HAL_DMA_CLEAR_FLAG(__HANDLE__,__FLAG__) (((uint32_t)((__HANDLE__)->Instance) > (uint32_t)DMA1_Channel7)? (DMA2->IFCR = (__FLAG__)) : (DMA1->IFCR = (__FLAG__)))
# 372 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h" 2
# 382 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_DeInit (DMA_HandleTypeDef *hdma);
# 392 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Start (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout);
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma));
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID);
# 408 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma);
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma);
# 423 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
#define IS_DMA_BUFFER_SIZE(SIZE) (((SIZE) >= 0x1U) && ((SIZE) < 0x10000U))

#define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_PERIPH_TO_MEMORY ) || ((DIRECTION) == DMA_MEMORY_TO_PERIPH) || ((DIRECTION) == DMA_MEMORY_TO_MEMORY))



#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PINC_ENABLE) || ((STATE) == DMA_PINC_DISABLE))


#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MINC_ENABLE) || ((STATE) == DMA_MINC_DISABLE))


#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PDATAALIGN_BYTE) || ((SIZE) == DMA_PDATAALIGN_HALFWORD) || ((SIZE) == DMA_PDATAALIGN_WORD))



#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MDATAALIGN_BYTE) || ((SIZE) == DMA_MDATAALIGN_HALFWORD) || ((SIZE) == DMA_MDATAALIGN_WORD ))



#define IS_DMA_MODE(MODE) (((MODE) == DMA_NORMAL ) || ((MODE) == DMA_CIRCULAR))


#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_PRIORITY_LOW ) || ((PRIORITY) == DMA_PRIORITY_MEDIUM) || ((PRIORITY) == DMA_PRIORITY_HIGH) || ((PRIORITY) == DMA_PRIORITY_VERY_HIGH))
# 189 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define __STM32F3xx_HAL_CORTEX_H 
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
typedef struct
{
  uint8_t Enable;

  uint8_t Number;

  uint32_t BaseAddress;
  uint8_t Size;

  uint8_t SubRegionDisable;

  uint8_t TypeExtField;

  uint8_t AccessPermission;

  uint8_t DisableExec;

  uint8_t IsShareable;

  uint8_t IsCacheable;

  uint8_t IsBufferable;

}MPU_Region_InitTypeDef;
# 106 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define NVIC_PRIORITYGROUP_0 (0x00000007U)

#define NVIC_PRIORITYGROUP_1 (0x00000006U)

#define NVIC_PRIORITYGROUP_2 (0x00000005U)

#define NVIC_PRIORITYGROUP_3 (0x00000004U)

#define NVIC_PRIORITYGROUP_4 (0x00000003U)
# 123 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define SYSTICK_CLKSOURCE_HCLK_DIV8 (0x00000000U)
#define SYSTICK_CLKSOURCE_HCLK (0x00000004U)
# 133 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define MPU_HFNMI_PRIVDEF_NONE (0x00000000U)
#define MPU_HARDFAULT_NMI (0x00000002U)
#define MPU_PRIVILEGED_DEFAULT (0x00000004U)
#define MPU_HFNMI_PRIVDEF (0x00000006U)







#define MPU_REGION_ENABLE ((uint8_t)0x01U)
#define MPU_REGION_DISABLE ((uint8_t)0x00U)







#define MPU_INSTRUCTION_ACCESS_ENABLE ((uint8_t)0x00U)
#define MPU_INSTRUCTION_ACCESS_DISABLE ((uint8_t)0x01U)







#define MPU_ACCESS_SHAREABLE ((uint8_t)0x01U)
#define MPU_ACCESS_NOT_SHAREABLE ((uint8_t)0x00U)







#define MPU_ACCESS_CACHEABLE ((uint8_t)0x01U)
#define MPU_ACCESS_NOT_CACHEABLE ((uint8_t)0x00U)







#define MPU_ACCESS_BUFFERABLE ((uint8_t)0x01U)
#define MPU_ACCESS_NOT_BUFFERABLE ((uint8_t)0x00U)







#define MPU_TEX_LEVEL0 ((uint8_t)0x00U)
#define MPU_TEX_LEVEL1 ((uint8_t)0x01U)
#define MPU_TEX_LEVEL2 ((uint8_t)0x02U)







#define MPU_REGION_SIZE_32B ((uint8_t)0x04U)
#define MPU_REGION_SIZE_64B ((uint8_t)0x05U)
#define MPU_REGION_SIZE_128B ((uint8_t)0x06U)
#define MPU_REGION_SIZE_256B ((uint8_t)0x07U)
#define MPU_REGION_SIZE_512B ((uint8_t)0x08U)
#define MPU_REGION_SIZE_1KB ((uint8_t)0x09U)
#define MPU_REGION_SIZE_2KB ((uint8_t)0x0AU)
#define MPU_REGION_SIZE_4KB ((uint8_t)0x0BU)
#define MPU_REGION_SIZE_8KB ((uint8_t)0x0CU)
#define MPU_REGION_SIZE_16KB ((uint8_t)0x0DU)
#define MPU_REGION_SIZE_32KB ((uint8_t)0x0EU)
#define MPU_REGION_SIZE_64KB ((uint8_t)0x0FU)
#define MPU_REGION_SIZE_128KB ((uint8_t)0x10U)
#define MPU_REGION_SIZE_256KB ((uint8_t)0x11U)
#define MPU_REGION_SIZE_512KB ((uint8_t)0x12U)
#define MPU_REGION_SIZE_1MB ((uint8_t)0x13U)
#define MPU_REGION_SIZE_2MB ((uint8_t)0x14U)
#define MPU_REGION_SIZE_4MB ((uint8_t)0x15U)
#define MPU_REGION_SIZE_8MB ((uint8_t)0x16U)
#define MPU_REGION_SIZE_16MB ((uint8_t)0x17U)
#define MPU_REGION_SIZE_32MB ((uint8_t)0x18U)
#define MPU_REGION_SIZE_64MB ((uint8_t)0x19U)
#define MPU_REGION_SIZE_128MB ((uint8_t)0x1AU)
#define MPU_REGION_SIZE_256MB ((uint8_t)0x1BU)
#define MPU_REGION_SIZE_512MB ((uint8_t)0x1CU)
#define MPU_REGION_SIZE_1GB ((uint8_t)0x1DU)
#define MPU_REGION_SIZE_2GB ((uint8_t)0x1EU)
#define MPU_REGION_SIZE_4GB ((uint8_t)0x1FU)







#define MPU_REGION_NO_ACCESS ((uint8_t)0x00U)
#define MPU_REGION_PRIV_RW ((uint8_t)0x01U)
#define MPU_REGION_PRIV_RW_URO ((uint8_t)0x02U)
#define MPU_REGION_FULL_ACCESS ((uint8_t)0x03U)
#define MPU_REGION_PRIV_RO ((uint8_t)0x05U)
#define MPU_REGION_PRIV_RO_URO ((uint8_t)0x06U)







#define MPU_REGION_NUMBER0 ((uint8_t)0x00U)
#define MPU_REGION_NUMBER1 ((uint8_t)0x01U)
#define MPU_REGION_NUMBER2 ((uint8_t)0x02U)
#define MPU_REGION_NUMBER3 ((uint8_t)0x03U)
#define MPU_REGION_NUMBER4 ((uint8_t)0x04U)
#define MPU_REGION_NUMBER5 ((uint8_t)0x05U)
#define MPU_REGION_NUMBER6 ((uint8_t)0x06U)
#define MPU_REGION_NUMBER7 ((uint8_t)0x07U)
# 276 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn);
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn);
void HAL_NVIC_SystemReset(void);
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);
# 291 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init);

uint32_t HAL_NVIC_GetPriorityGrouping(void);
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority);
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn);
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);
void HAL_SYSTICK_IRQHandler(void);
void HAL_SYSTICK_Callback(void);
# 317 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PRIORITYGROUP_0) || ((GROUP) == NVIC_PRIORITYGROUP_1) || ((GROUP) == NVIC_PRIORITYGROUP_2) || ((GROUP) == NVIC_PRIORITYGROUP_3) || ((GROUP) == NVIC_PRIORITYGROUP_4))





#define IS_NVIC_PREEMPTION_PRIORITY(PRIORITY) ((PRIORITY) < 0x10U)

#define IS_NVIC_SUB_PRIORITY(PRIORITY) ((PRIORITY) < 0x10U)

#define IS_NVIC_DEVICE_IRQ(IRQ) ((IRQ) >= 0x00)




#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SYSTICK_CLKSOURCE_HCLK) || ((SOURCE) == SYSTICK_CLKSOURCE_HCLK_DIV8))






#define IS_MPU_REGION_ENABLE(STATE) (((STATE) == MPU_REGION_ENABLE) || ((STATE) == MPU_REGION_DISABLE))


#define IS_MPU_INSTRUCTION_ACCESS(STATE) (((STATE) == MPU_INSTRUCTION_ACCESS_ENABLE) || ((STATE) == MPU_INSTRUCTION_ACCESS_DISABLE))


#define IS_MPU_ACCESS_SHAREABLE(STATE) (((STATE) == MPU_ACCESS_SHAREABLE) || ((STATE) == MPU_ACCESS_NOT_SHAREABLE))


#define IS_MPU_ACCESS_CACHEABLE(STATE) (((STATE) == MPU_ACCESS_CACHEABLE) || ((STATE) == MPU_ACCESS_NOT_CACHEABLE))


#define IS_MPU_ACCESS_BUFFERABLE(STATE) (((STATE) == MPU_ACCESS_BUFFERABLE) || ((STATE) == MPU_ACCESS_NOT_BUFFERABLE))


#define IS_MPU_TEX_LEVEL(TYPE) (((TYPE) == MPU_TEX_LEVEL0) || ((TYPE) == MPU_TEX_LEVEL1) || ((TYPE) == MPU_TEX_LEVEL2))



#define IS_MPU_REGION_PERMISSION_ATTRIBUTE(TYPE) (((TYPE) == MPU_REGION_NO_ACCESS) || ((TYPE) == MPU_REGION_PRIV_RW) || ((TYPE) == MPU_REGION_PRIV_RW_URO) || ((TYPE) == MPU_REGION_FULL_ACCESS) || ((TYPE) == MPU_REGION_PRIV_RO) || ((TYPE) == MPU_REGION_PRIV_RO_URO))






#define IS_MPU_REGION_NUMBER(NUMBER) (((NUMBER) == MPU_REGION_NUMBER0) || ((NUMBER) == MPU_REGION_NUMBER1) || ((NUMBER) == MPU_REGION_NUMBER2) || ((NUMBER) == MPU_REGION_NUMBER3) || ((NUMBER) == MPU_REGION_NUMBER4) || ((NUMBER) == MPU_REGION_NUMBER5) || ((NUMBER) == MPU_REGION_NUMBER6) || ((NUMBER) == MPU_REGION_NUMBER7))
# 374 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define IS_MPU_REGION_SIZE(SIZE) (((SIZE) == MPU_REGION_SIZE_32B) || ((SIZE) == MPU_REGION_SIZE_64B) || ((SIZE) == MPU_REGION_SIZE_128B) || ((SIZE) == MPU_REGION_SIZE_256B) || ((SIZE) == MPU_REGION_SIZE_512B) || ((SIZE) == MPU_REGION_SIZE_1KB) || ((SIZE) == MPU_REGION_SIZE_2KB) || ((SIZE) == MPU_REGION_SIZE_4KB) || ((SIZE) == MPU_REGION_SIZE_8KB) || ((SIZE) == MPU_REGION_SIZE_16KB) || ((SIZE) == MPU_REGION_SIZE_32KB) || ((SIZE) == MPU_REGION_SIZE_64KB) || ((SIZE) == MPU_REGION_SIZE_128KB) || ((SIZE) == MPU_REGION_SIZE_256KB) || ((SIZE) == MPU_REGION_SIZE_512KB) || ((SIZE) == MPU_REGION_SIZE_1MB) || ((SIZE) == MPU_REGION_SIZE_2MB) || ((SIZE) == MPU_REGION_SIZE_4MB) || ((SIZE) == MPU_REGION_SIZE_8MB) || ((SIZE) == MPU_REGION_SIZE_16MB) || ((SIZE) == MPU_REGION_SIZE_32MB) || ((SIZE) == MPU_REGION_SIZE_64MB) || ((SIZE) == MPU_REGION_SIZE_128MB) || ((SIZE) == MPU_REGION_SIZE_256MB) || ((SIZE) == MPU_REGION_SIZE_512MB) || ((SIZE) == MPU_REGION_SIZE_1GB) || ((SIZE) == MPU_REGION_SIZE_2GB) || ((SIZE) == MPU_REGION_SIZE_4GB))
# 403 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
#define IS_MPU_SUB_REGION_DISABLE(SUBREGION) ((SUBREGION) < (uint16_t)0x00FFU)
# 418 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
void HAL_MPU_Disable(void);
void HAL_MPU_Enable(uint32_t MPU_Control);
# 193 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
#define __STM32F3xx_ADC_H 
# 49 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __STM32F3xx_ADC_EX_H 
# 59 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
struct __ADC_HandleTypeDef;
# 79 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
typedef struct
{
  uint32_t ClockPrescaler;






  uint32_t Resolution;

  uint32_t DataAlign;



  uint32_t ScanConvMode;






  uint32_t EOCSelection;

  uint32_t LowPowerAutoWait;






  uint32_t ContinuousConvMode;


  uint32_t NbrOfConversion;



  uint32_t DiscontinuousConvMode;



  uint32_t NbrOfDiscConversion;


  uint32_t ExternalTrigConv;



  uint32_t ExternalTrigConvEdge;


  uint32_t DMAContinuousRequests;




  uint32_t Overrun;






}ADC_InitTypeDef;
# 155 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
typedef struct
{
  uint32_t Channel;


  uint32_t Rank;


  uint32_t SamplingTime;
# 172 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
  uint32_t SingleDiff;
# 182 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
  uint32_t OffsetNumber;


  uint32_t Offset;



}ADC_ChannelConfTypeDef;
# 206 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
typedef struct
{
  uint32_t InjectedChannel;


  uint32_t InjectedRank;


  uint32_t InjectedSamplingTime;
# 223 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
  uint32_t InjectedSingleDiff;
# 233 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
  uint32_t InjectedOffsetNumber;


  uint32_t InjectedOffset;



  uint32_t InjectedNbrOfConversion;




  uint32_t InjectedDiscontinuousConvMode;







  uint32_t AutoInjectedConv;







  uint32_t QueueInjectedContext;
# 270 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
  uint32_t ExternalTrigInjecConv;




  uint32_t ExternalTrigInjecConvEdge;




}ADC_InjectionConfTypeDef;




typedef struct
{
  uint32_t ContextQueue;



  uint32_t ChannelCount;
}ADC_InjectionConfigTypeDef;






typedef struct
{
  uint32_t WatchdogNumber;



  uint32_t WatchdogMode;


  uint32_t Channel;




  uint32_t ITMode;

  uint32_t HighThreshold;



  uint32_t LowThreshold;



}ADC_AnalogWDGConfTypeDef;
# 334 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
typedef struct
{
  uint32_t Mode;

  uint32_t DMAAccessMode;





  uint32_t TwoSamplingDelay;



}ADC_MultiModeTypeDef;
# 519 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define HAL_ADC_ERROR_NONE (0x00U)
#define HAL_ADC_ERROR_INTERNAL (0x01U)

#define HAL_ADC_ERROR_OVR (0x02U)
#define HAL_ADC_ERROR_DMA (0x04U)
#define HAL_ADC_ERROR_JQOVF (0x08U)
# 536 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_CLOCK_ASYNC_DIV1 (0x00000000U)




#define ADC_CLOCK_SYNC_PCLK_DIV1 ((uint32_t)ADC12_CCR_CKMODE_0)
#define ADC_CLOCK_SYNC_PCLK_DIV2 ((uint32_t)ADC12_CCR_CKMODE_1)
#define ADC_CLOCK_SYNC_PCLK_DIV4 ((uint32_t)ADC12_CCR_CKMODE)
# 554 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_CLOCKPRESCALER(ADC_CLOCK) (((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV1) || ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV1) || ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV2) || ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV4) )
# 565 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_RESOLUTION_12B (0x00000000U)
#define ADC_RESOLUTION_10B ((uint32_t)ADC_CFGR_RES_0)
#define ADC_RESOLUTION_8B ((uint32_t)ADC_CFGR_RES_1)
#define ADC_RESOLUTION_6B ((uint32_t)ADC_CFGR_RES)







#define ADC_DATAALIGN_RIGHT (0x00000000U)
#define ADC_DATAALIGN_LEFT ((uint32_t)ADC_CFGR_ALIGN)







#define ADC_SCAN_DISABLE (0x00000000U)
#define ADC_SCAN_ENABLE (0x00000001U)







#define ADC_EXTERNALTRIGCONVEDGE_NONE (0x00000000U)
#define ADC_EXTERNALTRIGCONVEDGE_RISING ((uint32_t)ADC_CFGR_EXTEN_0)
#define ADC_EXTERNALTRIGCONVEDGE_FALLING ((uint32_t)ADC_CFGR_EXTEN_1)
#define ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING ((uint32_t)ADC_CFGR_EXTEN)
# 612 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_EXTERNALTRIGCONV_T1_CC1 ADC1_2_EXTERNALTRIG_T1_CC1
#define ADC_EXTERNALTRIGCONV_T1_CC2 ADC1_2_EXTERNALTRIG_T1_CC2
#define ADC_EXTERNALTRIGCONV_T2_CC2 ADC1_2_EXTERNALTRIG_T2_CC2
#define ADC_EXTERNALTRIGCONV_T3_CC4 ADC1_2_EXTERNALTRIG_T3_CC4
#define ADC_EXTERNALTRIGCONV_T4_CC4 ADC1_2_EXTERNALTRIG_T4_CC4
#define ADC_EXTERNALTRIGCONV_T6_TRGO ADC1_2_EXTERNALTRIG_T6_TRGO
#define ADC_EXTERNALTRIGCONV_EXT_IT11 ADC1_2_EXTERNALTRIG_EXT_IT11


#define ADC_EXTERNALTRIGCONV_T2_CC1 ADC3_4_EXTERNALTRIG_T2_CC1
#define ADC_EXTERNALTRIGCONV_T2_CC3 ADC3_4_EXTERNALTRIG_T2_CC3
#define ADC_EXTERNALTRIGCONV_T3_CC1 ADC3_4_EXTERNALTRIG_T3_CC1
#define ADC_EXTERNALTRIGCONV_T4_CC1 ADC3_4_EXTERNALTRIG_T4_CC1
#define ADC_EXTERNALTRIGCONV_T7_TRGO ADC3_4_EXTERNALTRIG_T7_TRGO
#define ADC_EXTERNALTRIGCONV_T8_CC1 ADC3_4_EXTERNALTRIG_T8_CC1
#define ADC_EXTERNALTRIGCONV_EXT_IT2 ADC3_4_EXTERNALTRIG_EXT_IT2




#define ADC_EXTERNALTRIGCONV_T1_CC3 ADC1_2_EXTERNALTRIG_T1_CC3
#define ADC_EXTERNALTRIGCONV_T1_TRGO ADC1_2_EXTERNALTRIG_T1_TRGO
#define ADC_EXTERNALTRIGCONV_T1_TRGO2 ADC1_2_EXTERNALTRIG_T1_TRGO2
#define ADC_EXTERNALTRIGCONV_T2_TRGO ADC1_2_EXTERNALTRIG_T2_TRGO
#define ADC_EXTERNALTRIGCONV_T3_TRGO ADC1_2_EXTERNALTRIG_T3_TRGO
#define ADC_EXTERNALTRIGCONV_T4_TRGO ADC1_2_EXTERNALTRIG_T4_TRGO
#define ADC_EXTERNALTRIGCONV_T8_TRGO ADC1_2_EXTERNALTRIG_T8_TRGO
#define ADC_EXTERNALTRIGCONV_T8_TRGO2 ADC1_2_EXTERNALTRIG_T8_TRGO2
#define ADC_EXTERNALTRIGCONV_T15_TRGO ADC1_2_EXTERNALTRIG_T15_TRGO

#define ADC_SOFTWARE_START (0x00000001U)
# 796 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_EOC_SINGLE_CONV ((uint32_t) ADC_ISR_EOC)
#define ADC_EOC_SEQ_CONV ((uint32_t) ADC_ISR_EOS)







#define ADC_OVR_DATA_OVERWRITTEN (0x00000000U)
#define ADC_OVR_DATA_PRESERVED (0x00000001U)
# 816 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_CHANNEL_1 ((uint32_t)(ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_2 ((uint32_t)(ADC_SQR3_SQ10_1))
#define ADC_CHANNEL_3 ((uint32_t)(ADC_SQR3_SQ10_1 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_4 ((uint32_t)(ADC_SQR3_SQ10_2))
#define ADC_CHANNEL_5 ((uint32_t)(ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_6 ((uint32_t)(ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_1))
#define ADC_CHANNEL_7 ((uint32_t)(ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_1 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_8 ((uint32_t)(ADC_SQR3_SQ10_3))
#define ADC_CHANNEL_9 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_10 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_1))
#define ADC_CHANNEL_11 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_1 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_12 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_2))
#define ADC_CHANNEL_13 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_14 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_1))
#define ADC_CHANNEL_15 ((uint32_t)(ADC_SQR3_SQ10_3 | ADC_SQR3_SQ10_2 | ADC_SQR3_SQ10_1 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_16 ((uint32_t)(ADC_SQR3_SQ10_4))
#define ADC_CHANNEL_17 ((uint32_t)(ADC_SQR3_SQ10_4 | ADC_SQR3_SQ10_0))
#define ADC_CHANNEL_18 ((uint32_t)(ADC_SQR3_SQ10_4 | ADC_SQR3_SQ10_1))


#define ADC_CHANNEL_VOPAMP1 ADC_CHANNEL_15
#define ADC_CHANNEL_TEMPSENSOR ADC_CHANNEL_16
#define ADC_CHANNEL_VBAT ADC_CHANNEL_17


#define ADC_CHANNEL_VOPAMP2 ADC_CHANNEL_17
#define ADC_CHANNEL_VOPAMP3 ADC_CHANNEL_17
#define ADC_CHANNEL_VOPAMP4 ADC_CHANNEL_17



#define ADC_CHANNEL_VREFINT ((uint32_t)ADC_CHANNEL_18)







#define ADC_SAMPLETIME_1CYCLE_5 (0x00000000U)
#define ADC_SAMPLETIME_2CYCLES_5 ((uint32_t)ADC_SMPR2_SMP10_0)
#define ADC_SAMPLETIME_4CYCLES_5 ((uint32_t)ADC_SMPR2_SMP10_1)
#define ADC_SAMPLETIME_7CYCLES_5 ((uint32_t)(ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10_0))
#define ADC_SAMPLETIME_19CYCLES_5 ((uint32_t)ADC_SMPR2_SMP10_2)
#define ADC_SAMPLETIME_61CYCLES_5 ((uint32_t)(ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_0))
#define ADC_SAMPLETIME_181CYCLES_5 ((uint32_t)(ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1))
#define ADC_SAMPLETIME_601CYCLES_5 ((uint32_t)ADC_SMPR2_SMP10)







#define ADC_SINGLE_ENDED (0x00000000U)
#define ADC_DIFFERENTIAL_ENDED (0x00000001U)







#define ADC_OFFSET_NONE (0x00U)
#define ADC_OFFSET_1 (0x01U)
#define ADC_OFFSET_2 (0x02U)
#define ADC_OFFSET_3 (0x03U)
#define ADC_OFFSET_4 (0x04U)







#define ADC_REGULAR_RANK_1 (0x00000001U)
#define ADC_REGULAR_RANK_2 (0x00000002U)
#define ADC_REGULAR_RANK_3 (0x00000003U)
#define ADC_REGULAR_RANK_4 (0x00000004U)
#define ADC_REGULAR_RANK_5 (0x00000005U)
#define ADC_REGULAR_RANK_6 (0x00000006U)
#define ADC_REGULAR_RANK_7 (0x00000007U)
#define ADC_REGULAR_RANK_8 (0x00000008U)
#define ADC_REGULAR_RANK_9 (0x00000009U)
#define ADC_REGULAR_RANK_10 (0x0000000AU)
#define ADC_REGULAR_RANK_11 (0x0000000BU)
#define ADC_REGULAR_RANK_12 (0x0000000CU)
#define ADC_REGULAR_RANK_13 (0x0000000DU)
#define ADC_REGULAR_RANK_14 (0x0000000EU)
#define ADC_REGULAR_RANK_15 (0x0000000FU)
#define ADC_REGULAR_RANK_16 (0x00000010U)







#define ADC_INJECTED_RANK_1 (0x00000001U)
#define ADC_INJECTED_RANK_2 (0x00000002U)
#define ADC_INJECTED_RANK_3 (0x00000003U)
#define ADC_INJECTED_RANK_4 (0x00000004U)







#define ADC_EXTERNALTRIGINJECCONV_EDGE_NONE (0x00000000U)
#define ADC_EXTERNALTRIGINJECCONV_EDGE_RISING ((uint32_t)ADC_JSQR_JEXTEN_0)
#define ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING ((uint32_t)ADC_JSQR_JEXTEN_1)
#define ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING ((uint32_t)ADC_JSQR_JEXTEN)
# 943 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_EXTERNALTRIGINJECCONV_T2_CC1 ADC1_2_EXTERNALTRIGINJEC_T2_CC1
#define ADC_EXTERNALTRIGINJECCONV_T3_CC1 ADC1_2_EXTERNALTRIGINJEC_T3_CC1
#define ADC_EXTERNALTRIGINJECCONV_T3_CC3 ADC1_2_EXTERNALTRIGINJEC_T3_CC3
#define ADC_EXTERNALTRIGINJECCONV_T3_CC4 ADC1_2_EXTERNALTRIGINJEC_T3_CC4
#define ADC_EXTERNALTRIGINJECCONV_T6_TRGO ADC1_2_EXTERNALTRIGINJEC_T6_TRGO
#define ADC_EXTERNALTRIGINJECCONV_EXT_IT15 ADC1_2_EXTERNALTRIGINJEC_EXT_IT15


#define ADC_EXTERNALTRIGINJECCONV_T1_CC3 ADC3_4_EXTERNALTRIGINJEC_T1_CC3
#define ADC_EXTERNALTRIGINJECCONV_T4_CC3 ADC3_4_EXTERNALTRIGINJEC_T4_CC3
#define ADC_EXTERNALTRIGINJECCONV_T4_CC4 ADC3_4_EXTERNALTRIGINJEC_T4_CC4
#define ADC_EXTERNALTRIGINJECCONV_T7_TRGO ADC3_4_EXTERNALTRIGINJEC_T7_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T8_CC2 ADC3_4_EXTERNALTRIGINJEC_T8_CC2




#define ADC_EXTERNALTRIGINJECCONV_T1_CC4 ADC1_2_EXTERNALTRIGINJEC_T1_CC4
#define ADC_EXTERNALTRIGINJECCONV_T1_TRGO ADC1_2_EXTERNALTRIGINJEC_T1_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T1_TRGO2 ADC1_2_EXTERNALTRIGINJEC_T1_TRGO2
#define ADC_EXTERNALTRIGINJECCONV_T2_TRGO ADC1_2_EXTERNALTRIGINJEC_T2_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T3_TRGO ADC1_2_EXTERNALTRIGINJEC_T3_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T4_TRGO ADC1_2_EXTERNALTRIGINJEC_T4_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T8_CC4 ADC1_2_EXTERNALTRIGINJEC_T8_CC4
#define ADC_EXTERNALTRIGINJECCONV_T8_TRGO ADC1_2_EXTERNALTRIGINJEC_T8_TRGO
#define ADC_EXTERNALTRIGINJECCONV_T8_TRGO2 ADC1_2_EXTERNALTRIGINJEC_T8_TRGO2
#define ADC_EXTERNALTRIGINJECCONV_T15_TRGO ADC1_2_EXTERNALTRIGINJEC_T15_TRGO

#define ADC_INJECTED_SOFTWARE_START (0x00000001U)
# 998 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_EXTTRIGINJEC(INJTRIG) (((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T2_CC1) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC1) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T6_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_EXT_IT15) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_CC3) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T7_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_CC2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_TRGO2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T2_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC3) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_TRGO2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T15_TRGO) || ((INJTRIG) == ADC_INJECTED_SOFTWARE_START) )
# 1171 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_MODE_INDEPENDENT ((uint32_t)(0x00000000U))
#define ADC_DUALMODE_REGSIMULT_INJECSIMULT ((uint32_t)(ADC12_CCR_MULTI_0))
#define ADC_DUALMODE_REGSIMULT_ALTERTRIG ((uint32_t)(ADC12_CCR_MULTI_1))
#define ADC_DUALMODE_REGINTERL_INJECSIMULT ((uint32_t)(ADC12_CCR_MULTI_1 | ADC12_CCR_MULTI_0))
#define ADC_DUALMODE_INJECSIMULT ((uint32_t)(ADC12_CCR_MULTI_2 | ADC12_CCR_MULTI_0))
#define ADC_DUALMODE_REGSIMULT ((uint32_t)(ADC12_CCR_MULTI_2 | ADC12_CCR_MULTI_1))
#define ADC_DUALMODE_INTERL ((uint32_t)(ADC12_CCR_MULTI_2 | ADC12_CCR_MULTI_1 | ADC12_CCR_MULTI_0))
#define ADC_DUALMODE_ALTERTRIG ((uint32_t)(ADC12_CCR_MULTI_3 | ADC12_CCR_MULTI_0))
# 1187 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_DMAACCESSMODE_DISABLED (0x00000000U)
#define ADC_DMAACCESSMODE_12_10_BITS ((uint32_t)ADC12_CCR_MDMA_1)
#define ADC_DMAACCESSMODE_8_6_BITS ((uint32_t)ADC12_CCR_MDMA)







#define ADC_TWOSAMPLINGDELAY_1CYCLE ((uint32_t)(0x00000000U))
#define ADC_TWOSAMPLINGDELAY_2CYCLES ((uint32_t)(ADC12_CCR_DELAY_0))
#define ADC_TWOSAMPLINGDELAY_3CYCLES ((uint32_t)(ADC12_CCR_DELAY_1))
#define ADC_TWOSAMPLINGDELAY_4CYCLES ((uint32_t)(ADC12_CCR_DELAY_1 | ADC12_CCR_DELAY_0))
#define ADC_TWOSAMPLINGDELAY_5CYCLES ((uint32_t)(ADC12_CCR_DELAY_2))
#define ADC_TWOSAMPLINGDELAY_6CYCLES ((uint32_t)(ADC12_CCR_DELAY_2 | ADC12_CCR_DELAY_0))
#define ADC_TWOSAMPLINGDELAY_7CYCLES ((uint32_t)(ADC12_CCR_DELAY_2 | ADC12_CCR_DELAY_1))
#define ADC_TWOSAMPLINGDELAY_8CYCLES ((uint32_t)(ADC12_CCR_DELAY_2 | ADC12_CCR_DELAY_1 | ADC12_CCR_DELAY_0))
#define ADC_TWOSAMPLINGDELAY_9CYCLES ((uint32_t)(ADC12_CCR_DELAY_3))
#define ADC_TWOSAMPLINGDELAY_10CYCLES ((uint32_t)(ADC12_CCR_DELAY_3 | ADC12_CCR_DELAY_0))
#define ADC_TWOSAMPLINGDELAY_11CYCLES ((uint32_t)(ADC12_CCR_DELAY_3 | ADC12_CCR_DELAY_1))
#define ADC_TWOSAMPLINGDELAY_12CYCLES ((uint32_t)(ADC12_CCR_DELAY_3 | ADC12_CCR_DELAY_1 | ADC12_CCR_DELAY_0))







#define ADC_ANALOGWATCHDOG_1 (0x00000001U)
#define ADC_ANALOGWATCHDOG_2 (0x00000002U)
#define ADC_ANALOGWATCHDOG_3 (0x00000003U)







#define ADC_ANALOGWATCHDOG_NONE ( 0x00000000U)
#define ADC_ANALOGWATCHDOG_SINGLE_REG ((uint32_t)(ADC_CFGR_AWD1SGL | ADC_CFGR_AWD1EN))
#define ADC_ANALOGWATCHDOG_SINGLE_INJEC ((uint32_t)(ADC_CFGR_AWD1SGL | ADC_CFGR_JAWD1EN))
#define ADC_ANALOGWATCHDOG_SINGLE_REGINJEC ((uint32_t)(ADC_CFGR_AWD1SGL | ADC_CFGR_AWD1EN | ADC_CFGR_JAWD1EN))
#define ADC_ANALOGWATCHDOG_ALL_REG ((uint32_t) ADC_CFGR_AWD1EN)
#define ADC_ANALOGWATCHDOG_ALL_INJEC ((uint32_t) ADC_CFGR_JAWD1EN)
#define ADC_ANALOGWATCHDOG_ALL_REGINJEC ((uint32_t)(ADC_CFGR_AWD1EN | ADC_CFGR_JAWD1EN))







#define ADC_REGULAR_GROUP ((uint32_t)(ADC_FLAG_EOC | ADC_FLAG_EOS))
#define ADC_INJECTED_GROUP ((uint32_t)(ADC_FLAG_JEOC | ADC_FLAG_JEOS))
#define ADC_REGULAR_INJECTED_GROUP ((uint32_t)(ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_JEOC | ADC_FLAG_JEOS))
# 1251 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_AWD1_EVENT ((uint32_t)ADC_FLAG_AWD1)
#define ADC_AWD2_EVENT ((uint32_t)ADC_FLAG_AWD2)
#define ADC_AWD3_EVENT ((uint32_t)ADC_FLAG_AWD3)
#define ADC_OVR_EVENT ((uint32_t)ADC_FLAG_OVR)
#define ADC_JQOVF_EVENT ((uint32_t)ADC_FLAG_JQOVF)

#define ADC_AWD_EVENT ADC_AWD1_EVENT







#define ADC_IT_RDY ADC_IER_RDY
#define ADC_IT_EOSMP ADC_IER_EOSMP
#define ADC_IT_EOC ADC_IER_EOC
#define ADC_IT_EOS ADC_IER_EOS
#define ADC_IT_OVR ADC_IER_OVR
#define ADC_IT_JEOC ADC_IER_JEOC
#define ADC_IT_JEOS ADC_IER_JEOS
#define ADC_IT_AWD1 ADC_IER_AWD1
#define ADC_IT_AWD2 ADC_IER_AWD2
#define ADC_IT_AWD3 ADC_IER_AWD3
#define ADC_IT_JQOVF ADC_IER_JQOVF

#define ADC_IT_AWD ADC_IT_AWD1







#define ADC_FLAG_RDY ADC_ISR_ADRD
#define ADC_FLAG_EOSMP ADC_ISR_EOSMP
#define ADC_FLAG_EOC ADC_ISR_EOC
#define ADC_FLAG_EOS ADC_ISR_EOS
#define ADC_FLAG_OVR ADC_ISR_OVR
#define ADC_FLAG_JEOC ADC_ISR_JEOC
#define ADC_FLAG_JEOS ADC_ISR_JEOS
#define ADC_FLAG_AWD1 ADC_ISR_AWD1
#define ADC_FLAG_AWD2 ADC_ISR_AWD2
#define ADC_FLAG_AWD3 ADC_ISR_AWD3
#define ADC_FLAG_JQOVF ADC_ISR_JQOVF

#define ADC_FLAG_AWD ADC_FLAG_AWD1
# 1545 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC1_2_EXTERNALTRIG_T1_CC1 (0x00000000U)
#define ADC1_2_EXTERNALTRIG_T1_CC2 ((uint32_t)ADC_CFGR_EXTSEL_0)
#define ADC1_2_EXTERNALTRIG_T1_CC3 ((uint32_t)ADC_CFGR_EXTSEL_1)
#define ADC1_2_EXTERNALTRIG_T2_CC2 ((uint32_t)(ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_T3_TRGO ((uint32_t)ADC_CFGR_EXTSEL_2)
#define ADC1_2_EXTERNALTRIG_T4_CC4 ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_EXT_IT11 ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1))
#define ADC1_2_EXTERNALTRIG_T8_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_T8_TRGO2 ((uint32_t) ADC_CFGR_EXTSEL_3)
#define ADC1_2_EXTERNALTRIG_T1_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_T1_TRGO2 ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1))
#define ADC1_2_EXTERNALTRIG_T2_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_T4_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2))
#define ADC1_2_EXTERNALTRIG_T6_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0))
#define ADC1_2_EXTERNALTRIG_T15_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1))
#define ADC1_2_EXTERNALTRIG_T3_CC4 ((uint32_t)ADC_CFGR_EXTSEL)


#define ADC3_4_EXTERNALTRIG_T3_CC1 (0x00000000U)
#define ADC3_4_EXTERNALTRIG_T2_CC3 ((uint32_t)ADC_CFGR_EXTSEL_0)
#define ADC3_4_EXTERNALTRIG_T1_CC3 ((uint32_t)ADC_CFGR_EXTSEL_1)
#define ADC3_4_EXTERNALTRIG_T8_CC1 ((uint32_t)(ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T8_TRGO ((uint32_t)ADC_CFGR_EXTSEL_2)
#define ADC3_4_EXTERNALTRIG_EXT_IT2 ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T4_CC1 ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1))
#define ADC3_4_EXTERNALTRIG_T2_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T8_TRGO2 ((uint32_t)ADC_CFGR_EXTSEL_3)
#define ADC3_4_EXTERNALTRIG_T1_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T1_TRGO2 ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1))
#define ADC3_4_EXTERNALTRIG_T3_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T4_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2))
#define ADC3_4_EXTERNALTRIG_T7_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0))
#define ADC3_4_EXTERNALTRIG_T15_TRGO ((uint32_t)(ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1))
#define ADC3_4_EXTERNALTRIG_T2_CC1 ((uint32_t)ADC_CFGR_EXTSEL)
# 1671 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC1_2_EXTERNALTRIGINJEC_T1_TRGO (0x00000000U)
#define ADC1_2_EXTERNALTRIGINJEC_T1_CC4 ((uint32_t)ADC_JSQR_JEXTSEL_0)
#define ADC1_2_EXTERNALTRIGINJEC_T2_TRGO ((uint32_t)ADC_JSQR_JEXTSEL_1)
#define ADC1_2_EXTERNALTRIGINJEC_T2_CC1 ((uint32_t)(ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_T3_CC4 ((uint32_t)ADC_JSQR_JEXTSEL_2)
#define ADC1_2_EXTERNALTRIGINJEC_T4_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_EXT_IT15 ((uint32_t)(ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1))
#define ADC1_2_EXTERNALTRIGINJEC_T8_CC4 ((uint32_t)(ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_T1_TRGO2 ((uint32_t)ADC_JSQR_JEXTSEL_3)
#define ADC1_2_EXTERNALTRIGINJEC_T8_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_T8_TRGO2 ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1))
#define ADC1_2_EXTERNALTRIGINJEC_T3_CC3 ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_T3_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2))
#define ADC1_2_EXTERNALTRIGINJEC_T3_CC1 ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0))
#define ADC1_2_EXTERNALTRIGINJEC_T6_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1))
#define ADC1_2_EXTERNALTRIGINJEC_T15_TRGO ((uint32_t)ADC_JSQR_JEXTSEL)
# 1696 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC3_4_EXTERNALTRIGINJEC_T1_TRGO (0x00000000U)
#define ADC3_4_EXTERNALTRIGINJEC_T1_CC4 ((uint32_t)ADC_JSQR_JEXTSEL_0)
#define ADC3_4_EXTERNALTRIGINJEC_T4_CC3 ((uint32_t)ADC_JSQR_JEXTSEL_1 | 0x10000U)
#define ADC3_4_EXTERNALTRIGINJEC_T8_CC2 ((uint32_t)(ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC3_4_EXTERNALTRIGINJEC_T8_CC4 ((uint32_t)ADC_JSQR_JEXTSEL_2)





#define ADC3_4_EXTERNALTRIGINJEC_T4_CC4 ((uint32_t)(ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1))
#define ADC3_4_EXTERNALTRIGINJEC_T4_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC3_4_EXTERNALTRIGINJEC_T1_TRGO2 ((uint32_t)ADC_JSQR_JEXTSEL_3)
#define ADC3_4_EXTERNALTRIGINJEC_T8_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0))
#define ADC3_4_EXTERNALTRIGINJEC_T8_TRGO2 ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1))
#define ADC3_4_EXTERNALTRIGINJEC_T1_CC3 ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0))
#define ADC3_4_EXTERNALTRIGINJEC_T3_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2))
#define ADC3_4_EXTERNALTRIGINJEC_T2_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0))
#define ADC3_4_EXTERNALTRIGINJEC_T7_TRGO ((uint32_t)(ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1))
#define ADC3_4_EXTERNALTRIGINJEC_T15_TRGO ((uint32_t)ADC_JSQR_JEXTSEL)
# 1795 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_FLAG_ALL (ADC_FLAG_RDY | ADC_FLAG_EOSMP | ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_JEOC | ADC_FLAG_JEOS | ADC_FLAG_OVR | ADC_FLAG_AWD1 | ADC_FLAG_AWD2 | ADC_FLAG_AWD3 | ADC_FLAG_JQOVF)




#define ADC_FLAG_POSTCONV_ALL (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_JEOC | ADC_FLAG_JEOS | ADC_FLAG_OVR | ADC_FLAG_AWD1 | ADC_FLAG_AWD2 | ADC_FLAG_AWD3 | ADC_FLAG_JQOVF)
# 1934 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_ENABLE(__HANDLE__) (SET_BIT((__HANDLE__)->Instance->CR, ADC_CR_ADEN))
# 1947 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_DISABLE(__HANDLE__) do{ SET_BIT((__HANDLE__)->Instance->CR, ADC_CR_ADDIS); __HAL_ADC_CLEAR_FLAG((__HANDLE__), (ADC_FLAG_EOSMP | ADC_FLAG_RDY)); } while(0U)
# 1971 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_ENABLE_IT(__HANDLE__,__INTERRUPT__) (SET_BIT((__HANDLE__)->Instance->IER, (__INTERRUPT__)))
# 1992 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_DISABLE_IT(__HANDLE__,__INTERRUPT__) (CLEAR_BIT((__HANDLE__)->Instance->IER, (__INTERRUPT__)))
# 2012 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) (((__HANDLE__)->Instance->IER & (__INTERRUPT__)) == (__INTERRUPT__))
# 2033 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_GET_FLAG(__HANDLE__,__FLAG__) ((((__HANDLE__)->Instance->ISR) & (__FLAG__)) == (__FLAG__))
# 2056 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define __HAL_ADC_CLEAR_FLAG(__HANDLE__,__FLAG__) (WRITE_REG((__HANDLE__)->Instance->ISR, (__FLAG__)))






#define __HAL_ADC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_ADC_STATE_RESET)
# 2187 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_ENABLING_CONDITIONS(__HANDLE__) (( HAL_IS_BIT_CLR((__HANDLE__)->Instance->CR , (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART |ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN ) ) ) ? SET : RESET)
# 2199 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_IS_ENABLE(__HANDLE__) (( ((((__HANDLE__)->Instance->CR) & (ADC_CR_ADEN | ADC_CR_ADDIS)) == ADC_CR_ADEN) && ((((__HANDLE__)->Instance->ISR) & ADC_FLAG_RDY) == ADC_FLAG_RDY) ) ? SET : RESET)
# 2210 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_IS_SOFTWARE_START_REGULAR(__HANDLE__) (((__HANDLE__)->Instance->CFGR & ADC_CFGR_EXTEN) == RESET)
# 2219 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_IS_SOFTWARE_START_INJECTED(__HANDLE__) (((__HANDLE__)->Instance->JSQR & ADC_JSQR_JEXTEN) == RESET)







#define ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(__HANDLE__) (( (((__HANDLE__)->Instance->CR) & (ADC_CR_ADSTART | ADC_CR_JADSTART)) == RESET ) ? RESET : SET)
# 2236 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_IS_CONVERSION_ONGOING_REGULAR(__HANDLE__) (( (((__HANDLE__)->Instance->CR) & ADC_CR_ADSTART) == RESET ) ? RESET : SET)
# 2245 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_IS_CONVERSION_ONGOING_INJECTED(__HANDLE__) (( (((__HANDLE__)->Instance->CR) & ADC_CR_JADSTART) == RESET ) ? RESET : SET)
# 2255 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_GET_RESOLUTION(__HANDLE__) (((__HANDLE__)->Instance->CFGR) & ADC_CFGR_RES)
# 2264 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_STATE_CLR_SET MODIFY_REG






#define ADC_CLEAR_ERRORCODE(__HANDLE__) ((__HANDLE__)->ErrorCode = HAL_ADC_ERROR_NONE)







#define ADC_SMPR1(_SAMPLETIME_,_CHANNELNB_) ((_SAMPLETIME_) << (3U * (_CHANNELNB_)))







#define ADC_SMPR2(_SAMPLETIME_,_CHANNELNB_) ((_SAMPLETIME_) << (3U * ((_CHANNELNB_) - 10U)))







#define ADC_SQR1_RK(_CHANNELNB_,_RANKNB_) ((_CHANNELNB_) << (6U * (_RANKNB_)))







#define ADC_SQR2_RK(_CHANNELNB_,_RANKNB_) ((_CHANNELNB_) << (6U * ((_RANKNB_) - 5U)))







#define ADC_SQR3_RK(_CHANNELNB_,_RANKNB_) ((_CHANNELNB_) << (6U * ((_RANKNB_) - 10U)))







#define ADC_SQR4_RK(_CHANNELNB_,_RANKNB_) ((_CHANNELNB_) << (6U * ((_RANKNB_) - 15U)))







#define ADC_JSQR_RK(_CHANNELNB_,_RANKNB_) ((_CHANNELNB_) << (6U * (_RANKNB_) +2U))







#define ADC_CFGR_AWD1CH_SHIFT(_CHANNEL_) ((_CHANNEL_) << 26U)






#define ADC_CFGR_AWD23CR(_CHANNEL_) (1U << (_CHANNEL_))






#define ADC_CFGR_INJECT_AUTO_CONVERSION(_INJECT_AUTO_CONVERSION_) ((_INJECT_AUTO_CONVERSION_) << 25U)






#define ADC_CFGR_INJECT_CONTEXT_QUEUE(_INJECT_CONTEXT_QUEUE_MODE_) ((_INJECT_CONTEXT_QUEUE_MODE_) << 21U)






#define ADC_CFGR_INJECT_DISCCONTINUOUS(_INJECT_DISCONTINUOUS_MODE_) ((_INJECT_DISCONTINUOUS_MODE_) << 20U)






#define ADC_CFGR_REG_DISCCONTINUOUS(_REG_DISCONTINUOUS_MODE_) ((_REG_DISCONTINUOUS_MODE_) << 16U)






#define ADC_CFGR_DISCONTINUOUS_NUM(_NBR_DISCONTINUOUS_CONV_) (((_NBR_DISCONTINUOUS_CONV_) - 1U) << 17U)






#define ADC_CFGR_AUTOWAIT(_AUTOWAIT_) ((_AUTOWAIT_) << 14U)






#define ADC_CFGR_CONTINUOUS(_CONTINUOUS_MODE_) ((_CONTINUOUS_MODE_) << 13U)
# 2401 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_CFGR_OVERRUN(_OVERRUN_MODE_) ( ( (_OVERRUN_MODE_) != (ADC_OVR_DATA_PRESERVED) )? (ADC_CFGR_OVRMOD) : (0x00000000U) )
# 2411 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_CFGR_DMACONTREQ(_DMACONTREQ_MODE_) ((_DMACONTREQ_MODE_) << 1U)
# 2431 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_CFGR_EXTSEL_SET(__HANDLE__,__EXT_TRIG_CONV__) (( ((((__HANDLE__)->Instance) == ADC3) || (((__HANDLE__)->Instance) == ADC4)) )? ( ( (__EXT_TRIG_CONV__) == ADC_EXTERNALTRIGCONV_T2_TRGO )? (ADC3_4_EXTERNALTRIG_T2_TRGO) : ( ( (__EXT_TRIG_CONV__) == ADC_EXTERNALTRIGCONV_T3_TRGO )? (ADC3_4_EXTERNALTRIG_T3_TRGO) : ( ( (__EXT_TRIG_CONV__) == ADC_EXTERNALTRIGCONV_T8_TRGO )? (ADC3_4_EXTERNALTRIG_T8_TRGO) : (__EXT_TRIG_CONV__) ) ) ) : (__EXT_TRIG_CONV__) )
# 2519 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_JSQR_JEXTSEL_SET(__HANDLE__,__EXT_TRIG_INJECTCONV__) (( ((((__HANDLE__)->Instance) == ADC3) || (((__HANDLE__)->Instance) == ADC4)) )? ( ( (__EXT_TRIG_INJECTCONV__) == ADC_EXTERNALTRIGINJECCONV_T2_TRGO )? (ADC3_4_EXTERNALTRIGINJEC_T2_TRGO) : ( ( (__EXT_TRIG_INJECTCONV__) == ADC_EXTERNALTRIGINJECCONV_T4_TRGO )? (ADC3_4_EXTERNALTRIGINJEC_T4_TRGO) : ( ( (__EXT_TRIG_INJECTCONV__) == ADC_EXTERNALTRIGINJECCONV_T8_CC4 )? (ADC3_4_EXTERNALTRIGINJEC_T8_CC4) : ( ( (__EXT_TRIG_INJECTCONV__) == ADC_EXTERNALTRIGINJECCONV_T4_CC3 )? (ADC3_4_EXTERNALTRIGINJEC_T4_CC3) : (__EXT_TRIG_INJECTCONV__) ) ) ) ) : (__EXT_TRIG_INJECTCONV__) )
# 2602 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_OFR_CHANNEL(_CHANNEL_) ((_CHANNEL_) << 26U)






#define ADC_DIFSEL_CHANNEL(_CHANNEL_) (1U << (_CHANNEL_))






#define ADC_CALFACT_DIFF_SET(_Calibration_Factor_) ((_Calibration_Factor_) << 16U)






#define ADC_CALFACT_DIFF_GET(_Calibration_Factor_) ((_Calibration_Factor_) >> 16U)






#define ADC_TRX_HIGHTHRESHOLD(_Threshold_) ((_Threshold_) << 16U)






#define ADC_CCR_MULTI_DMACONTREQ(_DMAContReq_MODE_) ((_DMAContReq_MODE_) << 13U)






#define ADC_DISABLING_CONDITIONS(__HANDLE__) (( ( ((__HANDLE__)->Instance->CR) & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN ) ? SET : RESET)
# 2662 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_OFFSET_SHIFT_RESOLUTION(__HANDLE__,_Offset_) ((_Offset_) << ((((__HANDLE__)->Instance->CFGR & ADC_CFGR_RES) >> 3U)*2U))
# 2677 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(__HANDLE__,_Threshold_) ((_Threshold_) << ((((__HANDLE__)->Instance->CFGR & ADC_CFGR_RES) >> 3U)*2U))
# 2691 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(__HANDLE__,_Threshold_) ( ((__HANDLE__)->Instance->CFGR & ADC_CFGR_RES) != (ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ? ((_Threshold_) >> (4U- ((((__HANDLE__)->Instance->CFGR & ADC_CFGR_RES) >> 3U)*2U))) : (_Threshold_) << 2U )
# 2704 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_MASTER_INSTANCE(__HANDLE__) ( ( ((((__HANDLE__)->Instance) == ADC1) || (((__HANDLE__)->Instance) == ADC2)) )? (ADC1) : (ADC3) )
# 2733 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_COMMON_REGISTER(__HANDLE__) ( ( ((((__HANDLE__)->Instance) == ADC1) || (((__HANDLE__)->Instance) == ADC2)) )? (ADC1_2_COMMON) : (ADC3_4_COMMON) )
# 2761 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_COMMON_CCR_MULTI(__HANDLE__) ( ( ((((__HANDLE__)->Instance) == ADC1) || (((__HANDLE__)->Instance) == ADC2)) )? (ADC1_2_COMMON->CCR & ADC12_CCR_MULTI) : (ADC3_4_COMMON->CCR & ADC34_CCR_MULTI) )
# 2793 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_NONMULTIMODE_OR_MULTIMODEMASTER(__HANDLE__) ((ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_MODE_INDEPENDENT) || (IS_ADC_MULTIMODE_MASTER_INSTANCE((__HANDLE__)->Instance)) )
# 2813 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(__HANDLE__) ((ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_MODE_INDEPENDENT) || (ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_DUALMODE_INJECSIMULT) || (ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_DUALMODE_ALTERTRIG) || (IS_ADC_MULTIMODE_MASTER_INSTANCE((__HANDLE__)->Instance)) )
# 2835 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(__HANDLE__) ((ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_MODE_INDEPENDENT) || (ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_DUALMODE_REGSIMULT) || (ADC_COMMON_CCR_MULTI(__HANDLE__) == ADC_DUALMODE_INTERL) || (IS_ADC_MULTIMODE_MASTER_INSTANCE((__HANDLE__)->Instance)) )
# 2856 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_MULTIMODE_AUTO_INJECTED(__HANDLE__) (( (((__HANDLE__)->Instance) == ADC1) || (((__HANDLE__)->Instance) == ADC2) )? (ADC1->CFGR & ADC_CFGR_JAUTO) : (ADC3->CFGR & ADC_CFGR_JAUTO) )
# 2887 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_COMMON_ADC_OTHER(__HANDLE__,__HANDLE_OTHER_ADC__) ( ( ((__HANDLE__)->Instance == ADC1) )? ((__HANDLE_OTHER_ADC__)->Instance = ADC2) : ( ( ((__HANDLE__)->Instance == ADC2) )? ((__HANDLE_OTHER_ADC__)->Instance = ADC1) : ( ( ((__HANDLE__)->Instance == ADC3) )? ((__HANDLE_OTHER_ADC__)->Instance = ADC4) : ( ( ((__HANDLE__)->Instance == ADC4) )? ((__HANDLE_OTHER_ADC__)->Instance = ADC3) : ((__HANDLE_OTHER_ADC__)->Instance = NULL) ) ) ) )
# 2940 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define ADC_MULTI_SLAVE(__HANDLE_MASTER__,__HANDLE_SLAVE__) ( ( ((__HANDLE_MASTER__)->Instance == ADC1) )? ((__HANDLE_SLAVE__)->Instance = ADC2) : ( ( ((__HANDLE_MASTER__)->Instance == ADC3) )? ((__HANDLE_SLAVE__)->Instance = ADC4) : ((__HANDLE_SLAVE__)->Instance = NULL) ) )
# 2970 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_RESOLUTION(RESOLUTION) (((RESOLUTION) == ADC_RESOLUTION_12B) || ((RESOLUTION) == ADC_RESOLUTION_10B) || ((RESOLUTION) == ADC_RESOLUTION_8B) || ((RESOLUTION) == ADC_RESOLUTION_6B) )




#define IS_ADC_RESOLUTION_8_6_BITS(RESOLUTION) (((RESOLUTION) == ADC_RESOLUTION_8B) || ((RESOLUTION) == ADC_RESOLUTION_6B) )



#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DATAALIGN_RIGHT) || ((ALIGN) == ADC_DATAALIGN_LEFT) )


#define IS_ADC_SCAN_MODE(SCAN_MODE) (((SCAN_MODE) == ADC_SCAN_DISABLE) || ((SCAN_MODE) == ADC_SCAN_ENABLE) )


#define IS_ADC_EOC_SELECTION(EOC_SELECTION) (((EOC_SELECTION) == ADC_EOC_SINGLE_CONV) || ((EOC_SELECTION) == ADC_EOC_SEQ_CONV) )


#define IS_ADC_OVERRUN(OVR) (((OVR) == ADC_OVR_DATA_PRESERVED) || ((OVR) == ADC_OVR_DATA_OVERWRITTEN) )


#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_1) || ((CHANNEL) == ADC_CHANNEL_2) || ((CHANNEL) == ADC_CHANNEL_3) || ((CHANNEL) == ADC_CHANNEL_4) || ((CHANNEL) == ADC_CHANNEL_5) || ((CHANNEL) == ADC_CHANNEL_6) || ((CHANNEL) == ADC_CHANNEL_7) || ((CHANNEL) == ADC_CHANNEL_8) || ((CHANNEL) == ADC_CHANNEL_9) || ((CHANNEL) == ADC_CHANNEL_10) || ((CHANNEL) == ADC_CHANNEL_11) || ((CHANNEL) == ADC_CHANNEL_12) || ((CHANNEL) == ADC_CHANNEL_13) || ((CHANNEL) == ADC_CHANNEL_14) || ((CHANNEL) == ADC_CHANNEL_15) || ((CHANNEL) == ADC_CHANNEL_TEMPSENSOR) || ((CHANNEL) == ADC_CHANNEL_VBAT) || ((CHANNEL) == ADC_CHANNEL_VREFINT) || ((CHANNEL) == ADC_CHANNEL_VOPAMP1) || ((CHANNEL) == ADC_CHANNEL_VOPAMP2) || ((CHANNEL) == ADC_CHANNEL_VOPAMP3) || ((CHANNEL) == ADC_CHANNEL_VOPAMP4) )
# 3014 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_DIFF_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_1) || ((CHANNEL) == ADC_CHANNEL_2) || ((CHANNEL) == ADC_CHANNEL_3) || ((CHANNEL) == ADC_CHANNEL_4) || ((CHANNEL) == ADC_CHANNEL_5) || ((CHANNEL) == ADC_CHANNEL_6) || ((CHANNEL) == ADC_CHANNEL_7) || ((CHANNEL) == ADC_CHANNEL_8) || ((CHANNEL) == ADC_CHANNEL_9) || ((CHANNEL) == ADC_CHANNEL_10) || ((CHANNEL) == ADC_CHANNEL_11) || ((CHANNEL) == ADC_CHANNEL_12) || ((CHANNEL) == ADC_CHANNEL_13) || ((CHANNEL) == ADC_CHANNEL_14) )
# 3029 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SAMPLETIME_1CYCLE_5) || ((TIME) == ADC_SAMPLETIME_2CYCLES_5) || ((TIME) == ADC_SAMPLETIME_4CYCLES_5) || ((TIME) == ADC_SAMPLETIME_7CYCLES_5) || ((TIME) == ADC_SAMPLETIME_19CYCLES_5) || ((TIME) == ADC_SAMPLETIME_61CYCLES_5) || ((TIME) == ADC_SAMPLETIME_181CYCLES_5) || ((TIME) == ADC_SAMPLETIME_601CYCLES_5) )
# 3038 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_SINGLE_DIFFERENTIAL(SING_DIFF) (((SING_DIFF) == ADC_SINGLE_ENDED) || ((SING_DIFF) == ADC_DIFFERENTIAL_ENDED) )


#define IS_ADC_OFFSET_NUMBER(OFFSET_NUMBER) (((OFFSET_NUMBER) == ADC_OFFSET_NONE) || ((OFFSET_NUMBER) == ADC_OFFSET_1) || ((OFFSET_NUMBER) == ADC_OFFSET_2) || ((OFFSET_NUMBER) == ADC_OFFSET_3) || ((OFFSET_NUMBER) == ADC_OFFSET_4) )





#define IS_ADC_REGULAR_RANK(CHANNEL) (((CHANNEL) == ADC_REGULAR_RANK_1 ) || ((CHANNEL) == ADC_REGULAR_RANK_2 ) || ((CHANNEL) == ADC_REGULAR_RANK_3 ) || ((CHANNEL) == ADC_REGULAR_RANK_4 ) || ((CHANNEL) == ADC_REGULAR_RANK_5 ) || ((CHANNEL) == ADC_REGULAR_RANK_6 ) || ((CHANNEL) == ADC_REGULAR_RANK_7 ) || ((CHANNEL) == ADC_REGULAR_RANK_8 ) || ((CHANNEL) == ADC_REGULAR_RANK_9 ) || ((CHANNEL) == ADC_REGULAR_RANK_10) || ((CHANNEL) == ADC_REGULAR_RANK_11) || ((CHANNEL) == ADC_REGULAR_RANK_12) || ((CHANNEL) == ADC_REGULAR_RANK_13) || ((CHANNEL) == ADC_REGULAR_RANK_14) || ((CHANNEL) == ADC_REGULAR_RANK_15) || ((CHANNEL) == ADC_REGULAR_RANK_16) )
# 3064 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_EXTTRIG_EDGE(EDGE) (((EDGE) == ADC_EXTERNALTRIGCONVEDGE_NONE) || ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_RISING) || ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_FALLING) || ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING) )
# 3073 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_EXTTRIG(REGTRIG) (((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC1) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC2) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T2_CC2) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T3_CC4) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T4_CC4) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T6_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_EXT_IT11) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T2_CC1) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T2_CC3) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T3_CC1) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T4_CC1) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T7_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T8_CC1) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_EXT_IT2) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC3) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_TRGO2) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T2_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T3_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T4_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T8_TRGO) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T8_TRGO2) || ((REGTRIG) == ADC_EXTERNALTRIGCONV_T15_TRGO) || ((REGTRIG) == ADC_SOFTWARE_START) )
# 3240 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_EXTTRIGINJEC_EDGE(EDGE) (((EDGE) == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE) || ((EDGE) == ADC_EXTERNALTRIGINJECCONV_EDGE_RISING) || ((EDGE) == ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING) || ((EDGE) == ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING) )
# 3250 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_EXTTRIGINJEC(INJTRIG) (((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T2_CC1) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC1) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T6_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_EXT_IT15) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_CC3) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T7_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_CC2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T1_TRGO2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T2_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_CC3) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T3_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T4_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_CC4) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_TRGO) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T8_TRGO2) || ((INJTRIG) == ADC_EXTERNALTRIGINJECCONV_T15_TRGO) || ((INJTRIG) == ADC_INJECTED_SOFTWARE_START) )
# 3401 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_INJECTED_RANK(CHANNEL) (((CHANNEL) == ADC_INJECTED_RANK_1) || ((CHANNEL) == ADC_INJECTED_RANK_2) || ((CHANNEL) == ADC_INJECTED_RANK_3) || ((CHANNEL) == ADC_INJECTED_RANK_4) )




#define IS_ADC_MODE(MODE) (((MODE) == ADC_MODE_INDEPENDENT) || ((MODE) == ADC_DUALMODE_REGSIMULT_INJECSIMULT) || ((MODE) == ADC_DUALMODE_REGSIMULT_ALTERTRIG) || ((MODE) == ADC_DUALMODE_REGINTERL_INJECSIMULT) || ((MODE) == ADC_DUALMODE_INJECSIMULT) || ((MODE) == ADC_DUALMODE_REGSIMULT) || ((MODE) == ADC_DUALMODE_INTERL) || ((MODE) == ADC_DUALMODE_ALTERTRIG) )
# 3415 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_DMA_ACCESS_MODE(MODE) (((MODE) == ADC_DMAACCESSMODE_DISABLED) || ((MODE) == ADC_DMAACCESSMODE_12_10_BITS) || ((MODE) == ADC_DMAACCESSMODE_8_6_BITS) )



#define IS_ADC_SAMPLING_DELAY(DELAY) (((DELAY) == ADC_TWOSAMPLINGDELAY_1CYCLE) || ((DELAY) == ADC_TWOSAMPLINGDELAY_2CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_3CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_4CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_5CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_6CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_7CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_8CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_9CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_10CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_11CYCLES) || ((DELAY) == ADC_TWOSAMPLINGDELAY_12CYCLES) )
# 3432 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_ANALOG_WATCHDOG_NUMBER(WATCHDOG) (((WATCHDOG) == ADC_ANALOGWATCHDOG_1) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_2) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_3) )



#define IS_ADC_ANALOG_WATCHDOG_MODE(WATCHDOG) (((WATCHDOG) == ADC_ANALOGWATCHDOG_NONE) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_SINGLE_REG) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_SINGLE_INJEC) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_ALL_REG) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_ALL_INJEC) || ((WATCHDOG) == ADC_ANALOGWATCHDOG_ALL_REGINJEC) )







#define IS_ADC_CONVERSION_GROUP(CONVERSION) (((CONVERSION) == ADC_REGULAR_GROUP) || ((CONVERSION) == ADC_INJECTED_GROUP) || ((CONVERSION) == ADC_REGULAR_INJECTED_GROUP) )



#define IS_ADC_EVENT_TYPE(EVENT) (((EVENT) == ADC_AWD_EVENT) || ((EVENT) == ADC_AWD2_EVENT) || ((EVENT) == ADC_AWD3_EVENT) || ((EVENT) == ADC_OVR_EVENT) || ((EVENT) == ADC_JQOVF_EVENT) )
# 3458 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_RANGE(RESOLUTION,ADC_VALUE) ((((RESOLUTION) == ADC_RESOLUTION_12B) && ((ADC_VALUE) <= (0x0FFFU))) || (((RESOLUTION) == ADC_RESOLUTION_10B) && ((ADC_VALUE) <= (0x03FFU))) || (((RESOLUTION) == ADC_RESOLUTION_8B) && ((ADC_VALUE) <= (0x00FFU))) || (((RESOLUTION) == ADC_RESOLUTION_6B) && ((ADC_VALUE) <= (0x003FU))) )
# 3470 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_INJECTED_NB_CONV(LENGTH) (((LENGTH) >= (1U)) && ((LENGTH) <= (4U)))







#define IS_ADC_REGULAR_NB_CONV(LENGTH) (((LENGTH) >= (1U)) && ((LENGTH) <= (16U)))







#define IS_ADC_REGULAR_DISCONT_NUMBER(NUMBER) (((NUMBER) >= (1U)) && ((NUMBER) <= (8U)))
# 3499 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
#define IS_ADC_CALFACT(_Calibration_Factor_) ((_Calibration_Factor_) <= (0x7FU))
# 3877 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(struct __ADC_HandleTypeDef* hadc, uint32_t SingleDiff);
uint32_t HAL_ADCEx_Calibration_GetValue(struct __ADC_HandleTypeDef *hadc, uint32_t SingleDiff);
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(struct __ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint32_t CalibrationFactor);
# 3890 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(struct __ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(struct __ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(struct __ADC_HandleTypeDef* hadc, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(struct __ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(struct __ADC_HandleTypeDef* hadc);






HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(struct __ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(struct __ADC_HandleTypeDef *hadc);
uint32_t HAL_ADCEx_MultiModeGetValue(struct __ADC_HandleTypeDef *hadc);







HAL_StatusTypeDef HAL_ADCEx_RegularStop(struct __ADC_HandleTypeDef* hadc);

HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(struct __ADC_HandleTypeDef* hadc);

HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(struct __ADC_HandleTypeDef* hadc);





HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(struct __ADC_HandleTypeDef *hadc);






uint32_t HAL_ADCEx_InjectedGetValue(struct __ADC_HandleTypeDef* hadc, uint32_t InjectedRank);


void HAL_ADCEx_InjectedConvCpltCallback(struct __ADC_HandleTypeDef* hadc);





void HAL_ADCEx_InjectedQueueOverflowCallback(struct __ADC_HandleTypeDef* hadc);
void HAL_ADCEx_LevelOutOfWindow2Callback(struct __ADC_HandleTypeDef* hadc);
void HAL_ADCEx_LevelOutOfWindow3Callback(struct __ADC_HandleTypeDef* hadc);
# 3954 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(struct __ADC_HandleTypeDef* hadc,ADC_InjectionConfTypeDef* sConfigInjected);





HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(struct __ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode);
# 50 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h" 2
# 72 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
#define HAL_ADC_STATE_RESET (0x00000000U)
#define HAL_ADC_STATE_READY (0x00000001U)
#define HAL_ADC_STATE_BUSY_INTERNAL (0x00000002U)
#define HAL_ADC_STATE_TIMEOUT (0x00000004U)


#define HAL_ADC_STATE_ERROR_INTERNAL (0x00000010U)
#define HAL_ADC_STATE_ERROR_CONFIG (0x00000020U)
#define HAL_ADC_STATE_ERROR_DMA (0x00000040U)


#define HAL_ADC_STATE_REG_BUSY (0x00000100U)

#define HAL_ADC_STATE_REG_EOC (0x00000200U)
#define HAL_ADC_STATE_REG_OVR (0x00000400U)
#define HAL_ADC_STATE_REG_EOSMP (0x00000800U)


#define HAL_ADC_STATE_INJ_BUSY (0x00001000U)

#define HAL_ADC_STATE_INJ_EOC (0x00002000U)
#define HAL_ADC_STATE_INJ_JQOVF (0x00004000U)


#define HAL_ADC_STATE_AWD1 (0x00010000U)
#define HAL_ADC_STATE_AWD2 (0x00020000U)
#define HAL_ADC_STATE_AWD3 (0x00040000U)


#define HAL_ADC_STATE_MULTIMODE_SLAVE (0x00100000U)





typedef struct __ADC_HandleTypeDef
{
  ADC_TypeDef *Instance;

  ADC_InitTypeDef Init;

  DMA_HandleTypeDef *DMA_Handle;

  HAL_LockTypeDef Lock;

  volatile uint32_t State;

  volatile uint32_t ErrorCode;





  ADC_InjectionConfigTypeDef InjectionConfig ;





}ADC_HandleTypeDef;
# 146 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
#define __HAL_ADC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_ADC_STATE_RESET)
# 163 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc);
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc);
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc);
# 175 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout);
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc);
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc);


HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length);
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc);


uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc);


void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc);
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc);
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc);
# 205 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig);
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig);
# 216 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc);
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc);
# 197 "./src/main/target/stm32f3xx_hal_conf.h" 2
# 216 "./src/main/target/stm32f3xx_hal_conf.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __STM32F3xx_HAL_DAC_H 
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
typedef enum
{
  HAL_DAC_STATE_RESET = 0x00U,
  HAL_DAC_STATE_READY = 0x01U,
  HAL_DAC_STATE_BUSY = 0x02U,
  HAL_DAC_STATE_TIMEOUT = 0x03U,
  HAL_DAC_STATE_ERROR = 0x04

}HAL_DAC_StateTypeDef;




typedef struct
{
  uint32_t DAC_Trigger;


  uint32_t DAC_OutputBuffer;




  uint32_t DAC_OutputSwitch;




}DAC_ChannelConfTypeDef;




typedef struct __DAC_HandleTypeDef
{
  DAC_TypeDef *Instance;

  volatile HAL_DAC_StateTypeDef State;

  HAL_LockTypeDef Lock;

  DMA_HandleTypeDef *DMA_Handle1;

  DMA_HandleTypeDef *DMA_Handle2;

  volatile uint32_t ErrorCode;

}DAC_HandleTypeDef;
# 124 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define HAL_DAC_ERROR_NONE 0x00
#define HAL_DAC_ERROR_DMAUNDERRUNCH1 0x01
#define HAL_DAC_ERROR_DMAUNDERRUNCH2 0x02
#define HAL_DAC_ERROR_DMA 0x04







#define DAC_LFSRUNMASK_BIT0 (0x00000000U)
#define DAC_LFSRUNMASK_BITS1_0 ((uint32_t)DAC_CR_MAMP1_0)
#define DAC_LFSRUNMASK_BITS2_0 ((uint32_t)DAC_CR_MAMP1_1)
#define DAC_LFSRUNMASK_BITS3_0 ((uint32_t)DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
#define DAC_LFSRUNMASK_BITS4_0 ((uint32_t)DAC_CR_MAMP1_2)
#define DAC_LFSRUNMASK_BITS5_0 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_0)
#define DAC_LFSRUNMASK_BITS6_0 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_1)
#define DAC_LFSRUNMASK_BITS7_0 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
#define DAC_LFSRUNMASK_BITS8_0 ((uint32_t)DAC_CR_MAMP1_3)
#define DAC_LFSRUNMASK_BITS9_0 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_0)
#define DAC_LFSRUNMASK_BITS10_0 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_1)
#define DAC_LFSRUNMASK_BITS11_0 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_1 (0x00000000U)
#define DAC_TRIANGLEAMPLITUDE_3 ((uint32_t)DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_7 ((uint32_t)DAC_CR_MAMP1_1)
#define DAC_TRIANGLEAMPLITUDE_15 ((uint32_t)DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_31 ((uint32_t)DAC_CR_MAMP1_2)
#define DAC_TRIANGLEAMPLITUDE_63 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_127 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_1)
#define DAC_TRIANGLEAMPLITUDE_255 ((uint32_t)DAC_CR_MAMP1_2 | DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_511 ((uint32_t)DAC_CR_MAMP1_3)
#define DAC_TRIANGLEAMPLITUDE_1023 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_0)
#define DAC_TRIANGLEAMPLITUDE_2047 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_1)
#define DAC_TRIANGLEAMPLITUDE_4095 ((uint32_t)DAC_CR_MAMP1_3 | DAC_CR_MAMP1_1 | DAC_CR_MAMP1_0)
# 167 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define DAC_OUTPUTBUFFER_ENABLE (0x00000000U)
#define DAC_OUTPUTBUFFER_DISABLE ((uint32_t)DAC_CR_BOFF1)
# 189 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define DAC_ALIGN_12B_R (0x00000000U)
#define DAC_ALIGN_12B_L (0x00000004U)
#define DAC_ALIGN_8B_R (0x00000008U)
# 200 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define DAC_FLAG_DMAUDR1 ((uint32_t)DAC_SR_DMAUDR1)
#define DAC_FLAG_DMAUDR2 ((uint32_t)DAC_SR_DMAUDR2)







#define DAC_IT_DMAUDR1 ((uint32_t)DAC_CR_DMAUDRIE1)
#define DAC_IT_DMAUDR2 ((uint32_t)DAC_CR_DMAUDRIE2)
# 230 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DAC_STATE_RESET)






#define __HAL_DAC_ENABLE(__HANDLE__,__DAC_Channel__) ((__HANDLE__)->Instance->CR |= (DAC_CR_EN1 << (__DAC_Channel__)))







#define __HAL_DAC_DISABLE(__HANDLE__,__DAC_Channel__) ((__HANDLE__)->Instance->CR &= ~(DAC_CR_EN1 << (__DAC_Channel__)))






#define DAC_DHR12R1_ALIGNMENT(__ALIGNMENT__) ((0x00000008U) + (__ALIGNMENT__))





#define DAC_DHR12R2_ALIGNMENT(__ALIGNMENT__) ((0x00000014U) + (__ALIGNMENT__))





#define DAC_DHR12RD_ALIGNMENT(__ALIGNMENT__) ((0x00000020U) + (__ALIGNMENT__))
# 274 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_ENABLE_IT(__HANDLE__,__INTERRUPT__) (((__HANDLE__)->Instance->CR) |= (__INTERRUPT__))
# 284 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_DISABLE_IT(__HANDLE__,__INTERRUPT__) (((__HANDLE__)->Instance->CR) &= ~(__INTERRUPT__))
# 294 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) (((__HANDLE__)->Instance->CR & (__INTERRUPT__)) == (__INTERRUPT__))
# 304 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_GET_FLAG(__HANDLE__,__FLAG__) ((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))
# 314 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define __HAL_DAC_CLEAR_FLAG(__HANDLE__,__FLAG__) (((__HANDLE__)->Instance->SR) = (__FLAG__))
# 326 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUNMASK_BIT0) || ((VALUE) == DAC_LFSRUNMASK_BITS1_0) || ((VALUE) == DAC_LFSRUNMASK_BITS2_0) || ((VALUE) == DAC_LFSRUNMASK_BITS3_0) || ((VALUE) == DAC_LFSRUNMASK_BITS4_0) || ((VALUE) == DAC_LFSRUNMASK_BITS5_0) || ((VALUE) == DAC_LFSRUNMASK_BITS6_0) || ((VALUE) == DAC_LFSRUNMASK_BITS7_0) || ((VALUE) == DAC_LFSRUNMASK_BITS8_0) || ((VALUE) == DAC_LFSRUNMASK_BITS9_0) || ((VALUE) == DAC_LFSRUNMASK_BITS10_0) || ((VALUE) == DAC_LFSRUNMASK_BITS11_0) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_1) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_3) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_7) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_15) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_31) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_63) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_127) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_255) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_511) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_1023) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_2047) || ((VALUE) == DAC_TRIANGLEAMPLITUDE_4095))
# 351 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
#define IS_DAC_OUTPUT_BUFFER_STATE(STATE) (((STATE) == DAC_OUTPUTBUFFER_ENABLE) || ((STATE) == DAC_OUTPUTBUFFER_DISABLE))







#define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_ALIGN_12B_R) || ((ALIGN) == DAC_ALIGN_12B_L) || ((ALIGN) == DAC_ALIGN_8B_R))



#define IS_DAC_DATA(DATA) ((DATA) <= 0xFFF0U)
# 373 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h"
#define __STM32F3xx_HAL_DAC_EX_H 
# 112 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h"
#define DAC_TRIGGER_NONE (0x00000000U)

#define DAC_TRIGGER_T2_TRGO ((uint32_t)(DAC_CR_TSEL1_2 | DAC_CR_TEN1))
#define DAC_TRIGGER_T4_TRGO ((uint32_t)(DAC_CR_TSEL1_2 | DAC_CR_TSEL1_0 | DAC_CR_TEN1))
#define DAC_TRIGGER_T15_TRGO ((uint32_t)(DAC_CR_TSEL1_1 | DAC_CR_TSEL1_0 | DAC_CR_TEN1))
#define DAC_TRIGGER_T6_TRGO ((uint32_t)DAC_CR_TEN1)
#define DAC_TRIGGER_T7_TRGO ((uint32_t)(DAC_CR_TSEL1_1 | DAC_CR_TEN1))
#define DAC_TRIGGER_T3_TRGO ((uint32_t)(DAC_CR_TSEL1_0 | DAC_CR_TEN1))

#define DAC_TRIGGER_T8_TRGO DAC_TRIGGER_T3_TRGO


#define DAC_TRIGGER_EXT_IT9 ((uint32_t)(DAC_CR_TSEL1_2 | DAC_CR_TSEL1_1 | DAC_CR_TEN1))
#define DAC_TRIGGER_SOFTWARE ((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1))

#define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_TRIGGER_NONE) || ((TRIGGER) == DAC_TRIGGER_T2_TRGO) || ((TRIGGER) == DAC_TRIGGER_T3_TRGO) || ((TRIGGER) == DAC_TRIGGER_T4_TRGO) || ((TRIGGER) == DAC_TRIGGER_T15_TRGO) || ((TRIGGER) == DAC_TRIGGER_T6_TRGO) || ((TRIGGER) == DAC_TRIGGER_T7_TRGO) || ((TRIGGER) == DAC_TRIGGER_EXT_IT9) || ((TRIGGER) == DAC_TRIGGER_SOFTWARE))
# 247 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h"
#define DAC_CHANNEL_1 (0x00000000U)
#define DAC_CHANNEL_2 (0x00000010U)
# 289 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h"
#define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_CHANNEL_1) || ((CHANNEL) == DAC_CHANNEL_2))
# 319 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac_ex.h"
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac);
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2);
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude);
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude);





void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac);
void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac);
void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac);
void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac);
# 374 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h" 2
# 385 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac);
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef* hdac);
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac);
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac);
# 398 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment);
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel);
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel);

void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac);
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac);
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac);
void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac);
# 419 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data);
# 429 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dac.h"
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef* hdac);
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac);
# 217 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __STM32F3xx_HAL_FLASH_H 
# 58 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define FLASH_TIMEOUT_VALUE (50000U)
# 67 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define IS_FLASH_TYPEPROGRAM(VALUE) (((VALUE) == FLASH_TYPEPROGRAM_HALFWORD) || ((VALUE) == FLASH_TYPEPROGRAM_WORD) || ((VALUE) == FLASH_TYPEPROGRAM_DOUBLEWORD))



#define IS_FLASH_LATENCY(__LATENCY__) (((__LATENCY__) == FLASH_LATENCY_0) || ((__LATENCY__) == FLASH_LATENCY_1) || ((__LATENCY__) == FLASH_LATENCY_2))
# 87 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
typedef enum
{
  FLASH_PROC_NONE = 0U,
  FLASH_PROC_PAGEERASE = 1U,
  FLASH_PROC_MASSERASE = 2U,
  FLASH_PROC_PROGRAMHALFWORD = 3U,
  FLASH_PROC_PROGRAMWORD = 4U,
  FLASH_PROC_PROGRAMDOUBLEWORD = 5U
} FLASH_ProcedureTypeDef;




typedef struct
{
  volatile FLASH_ProcedureTypeDef ProcedureOnGoing;

  volatile uint32_t DataRemaining;

  volatile uint32_t Address;

  volatile uint64_t Data;

  HAL_LockTypeDef Lock;

  volatile uint32_t ErrorCode;

} FLASH_ProcessTypeDef;
# 129 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define HAL_FLASH_ERROR_NONE 0x00U
#define HAL_FLASH_ERROR_PROG 0x01U
#define HAL_FLASH_ERROR_WRP 0x02U
# 140 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define FLASH_TYPEPROGRAM_HALFWORD (0x01U)
#define FLASH_TYPEPROGRAM_WORD (0x02U)
#define FLASH_TYPEPROGRAM_DOUBLEWORD (0x03U)
# 151 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define FLASH_LATENCY_0 (0x00000000U)
#define FLASH_LATENCY_1 FLASH_ACR_LATENCY_0
#define FLASH_LATENCY_2 FLASH_ACR_LATENCY_1
# 163 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define FLASH_FLAG_BSY FLASH_SR_BSY
#define FLASH_FLAG_PGERR FLASH_SR_PGERR
#define FLASH_FLAG_WRPERR FLASH_SR_WRPERR
#define FLASH_FLAG_EOP FLASH_SR_EOP







#define FLASH_IT_EOP FLASH_CR_EOPIE
#define FLASH_IT_ERR FLASH_CR_ERRIE
# 200 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE() (FLASH->ACR |= FLASH_ACR_HLFCYA)





#define __HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE() (FLASH->ACR &= (~FLASH_ACR_HLFCYA))
# 226 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_SET_LATENCY(__LATENCY__) (FLASH->ACR = (FLASH->ACR&(~FLASH_ACR_LATENCY)) | (__LATENCY__))
# 237 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_GET_LATENCY() (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))
# 251 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_PREFETCH_BUFFER_ENABLE() (FLASH->ACR |= FLASH_ACR_PRFTBE)





#define __HAL_FLASH_PREFETCH_BUFFER_DISABLE() (FLASH->ACR &= (~FLASH_ACR_PRFTBE))
# 276 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_ENABLE_IT(__INTERRUPT__) SET_BIT((FLASH->CR), (__INTERRUPT__))
# 286 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_DISABLE_IT(__INTERRUPT__) CLEAR_BIT((FLASH->CR), (uint32_t)(__INTERRUPT__))
# 298 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_GET_FLAG(__FLAG__) (((FLASH->SR) & (__FLAG__)) == (__FLAG__))
# 309 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
#define __HAL_FLASH_CLEAR_FLAG(__FLAG__) ((FLASH->SR) = (__FLAG__))
# 320 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define __STM32F3xx_HAL_FLASH_EX_H 
# 59 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define FLASH_SIZE_DATA_REGISTER (0x1FFFF7CCU)
# 68 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define IS_FLASH_TYPEERASE(VALUE) (((VALUE) == FLASH_TYPEERASE_PAGES) || ((VALUE) == FLASH_TYPEERASE_MASSERASE))


#define IS_OPTIONBYTE(VALUE) ((VALUE) <= (OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_DATA))

#define IS_WRPSTATE(VALUE) (((VALUE) == OB_WRPSTATE_DISABLE) || ((VALUE) == OB_WRPSTATE_ENABLE))


#define IS_OB_DATA_ADDRESS(ADDRESS) (((ADDRESS) == OB_DATA_ADDRESS_DATA0) || ((ADDRESS) == OB_DATA_ADDRESS_DATA1))

#define IS_OB_RDP_LEVEL(LEVEL) (((LEVEL) == OB_RDP_LEVEL_0) || ((LEVEL) == OB_RDP_LEVEL_1))



#define IS_OB_IWDG_SOURCE(SOURCE) (((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))

#define IS_OB_STOP_SOURCE(SOURCE) (((SOURCE) == OB_STOP_NO_RST) || ((SOURCE) == OB_STOP_RST))

#define IS_OB_STDBY_SOURCE(SOURCE) (((SOURCE) == OB_STDBY_NO_RST) || ((SOURCE) == OB_STDBY_RST))

#define IS_OB_BOOT1(BOOT1) (((BOOT1) == OB_BOOT1_RESET) || ((BOOT1) == OB_BOOT1_SET))

#define IS_OB_VDDA_ANALOG(ANALOG) (((ANALOG) == OB_VDDA_ANALOG_ON) || ((ANALOG) == OB_VDDA_ANALOG_OFF))

#define IS_OB_SRAM_PARITY(PARITY) (((PARITY) == OB_SRAM_PARITY_SET) || ((PARITY) == OB_SRAM_PARITY_RESET))







#define IS_OB_WRP(PAGE) (((PAGE) != 0x0000000U))



#define IS_FLASH_PROGRAM_ADDRESS(ADDRESS) (((ADDRESS) >= FLASH_BASE) && (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x100U) ? ((ADDRESS) <= 0x0803FFFFU) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x80U) ? ((ADDRESS) <= 0x0801FFFFU) : ((ADDRESS) <= 0x0800FFFFU))))
# 124 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define IS_FLASH_NB_PAGES(ADDRESS,NBPAGES) (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x100U) ? ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1U <= 0x0803FFFFU) : (((*((uint16_t *)FLASH_SIZE_DATA_REGISTER)) == 0x80U) ? ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1U <= 0x0801FFFFU) : ((ADDRESS)+((NBPAGES)*FLASH_PAGE_SIZE)-1U <= 0x0800FFFFU)))
# 153 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
typedef struct
{
  uint32_t TypeErase;


  uint32_t PageAddress;


  uint32_t NbPages;


} FLASH_EraseInitTypeDef;




typedef struct
{
  uint32_t OptionType;


  uint32_t WRPState;


  uint32_t WRPPage;


  uint8_t RDPLevel;


  uint8_t USERConfig;
# 196 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
  uint32_t DATAAddress;


  uint8_t DATAData;

} FLASH_OBProgramInitTypeDef;
# 214 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define FLASH_PAGE_SIZE 0x800







#define FLASH_TYPEERASE_PAGES (0x00U)
#define FLASH_TYPEERASE_MASSERASE (0x01U)
# 236 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OPTIONBYTE_WRP (0x01U)
#define OPTIONBYTE_RDP (0x02U)
#define OPTIONBYTE_USER (0x04U)
#define OPTIONBYTE_DATA (0x08U)
# 248 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_WRPSTATE_DISABLE (0x00U)
#define OB_WRPSTATE_ENABLE (0x01U)
# 258 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_WRP_PAGES0TO1 (0x00000001U)
#define OB_WRP_PAGES2TO3 (0x00000002U)
#define OB_WRP_PAGES4TO5 (0x00000004U)
#define OB_WRP_PAGES6TO7 (0x00000008U)
#define OB_WRP_PAGES8TO9 (0x00000010U)
#define OB_WRP_PAGES10TO11 (0x00000020U)
#define OB_WRP_PAGES12TO13 (0x00000040U)
#define OB_WRP_PAGES14TO15 (0x00000080U)
#define OB_WRP_PAGES16TO17 (0x00000100U)
#define OB_WRP_PAGES18TO19 (0x00000200U)
#define OB_WRP_PAGES20TO21 (0x00000400U)
#define OB_WRP_PAGES22TO23 (0x00000800U)
#define OB_WRP_PAGES24TO25 (0x00001000U)
#define OB_WRP_PAGES26TO27 (0x00002000U)
#define OB_WRP_PAGES28TO29 (0x00004000U)
#define OB_WRP_PAGES30TO31 (0x00008000U)



#define OB_WRP_PAGES32TO33 (0x00010000U)
#define OB_WRP_PAGES34TO35 (0x00020000U)
#define OB_WRP_PAGES36TO37 (0x00040000U)
#define OB_WRP_PAGES38TO39 (0x00080000U)
#define OB_WRP_PAGES40TO41 (0x00100000U)
#define OB_WRP_PAGES42TO43 (0x00200000U)
#define OB_WRP_PAGES44TO45 (0x00400000U)
#define OB_WRP_PAGES46TO47 (0x00800000U)
#define OB_WRP_PAGES48TO49 (0x01000000U)
#define OB_WRP_PAGES50TO51 (0x02000000U)
#define OB_WRP_PAGES52TO53 (0x04000000U)
#define OB_WRP_PAGES54TO55 (0x08000000U)
#define OB_WRP_PAGES56TO57 (0x10000000U)
#define OB_WRP_PAGES58TO59 (0x20000000U)
#define OB_WRP_PAGES60TO61 (0x40000000U)
#define OB_WRP_PAGES62TO127 (0x80000000U)
# 315 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_WRP_PAGES0TO15MASK (0x000000FFU)
#define OB_WRP_PAGES16TO31MASK (0x0000FF00U)



#define OB_WRP_PAGES32TO47MASK (0x00FF0000U)
#define OB_WRP_PAGES48TO127MASK (0xFF000000U)
# 332 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_WRP_PAGES32TO47MASK (0x00FF0000U)
#define OB_WRP_PAGES48TO127MASK (0xFF000000U)






#define OB_WRP_ALLPAGES (0xFFFFFFFFU)
# 358 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_RDP_LEVEL_0 ((uint8_t)0xAAU)
#define OB_RDP_LEVEL_1 ((uint8_t)0xBBU)
#define OB_RDP_LEVEL_2 ((uint8_t)0xCCU)
# 369 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_IWDG_SW ((uint8_t)0x01U)
#define OB_IWDG_HW ((uint8_t)0x00U)







#define OB_STOP_NO_RST ((uint8_t)0x02U)
#define OB_STOP_RST ((uint8_t)0x00U)







#define OB_STDBY_NO_RST ((uint8_t)0x04U)
#define OB_STDBY_RST ((uint8_t)0x00U)







#define OB_BOOT1_RESET ((uint8_t)0x00U)
#define OB_BOOT1_SET ((uint8_t)0x10U)







#define OB_VDDA_ANALOG_ON ((uint8_t)0x20U)
#define OB_VDDA_ANALOG_OFF ((uint8_t)0x00U)







#define OB_SRAM_PARITY_SET ((uint8_t)0x00U)
#define OB_SRAM_PARITY_RESET ((uint8_t)0x40U)
# 436 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
#define OB_DATA_ADDRESS_DATA0 (0x1FFFF804U)
#define OB_DATA_ADDRESS_DATA1 (0x1FFFF806U)
# 459 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError);
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit);
# 470 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash_ex.h"
HAL_StatusTypeDef HAL_FLASHEx_OBErase(void);
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit);
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress);
# 321 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h" 2
# 331 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data);
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data);


void HAL_FLASH_IRQHandler(void);

void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue);
void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue);
# 348 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_Lock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void);
# 362 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
uint32_t HAL_FLASH_GetError(void);
# 376 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_flash.h"
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
# 221 "./src/main/target/stm32f3xx_hal_conf.h" 2
# 244 "./src/main/target/stm32f3xx_hal_conf.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __STM32F3xx_HAL_I2C_H 
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
typedef struct
{
  uint32_t Timing;



  uint32_t OwnAddress1;


  uint32_t AddressingMode;


  uint32_t DualAddressMode;


  uint32_t OwnAddress2;


  uint32_t OwnAddress2Masks;


  uint32_t GeneralCallMode;


  uint32_t NoStretchMode;


} I2C_InitTypeDef;
# 124 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_STATE_RESET = 0x00U,
  HAL_I2C_STATE_READY = 0x20U,
  HAL_I2C_STATE_BUSY = 0x24U,
  HAL_I2C_STATE_BUSY_TX = 0x21U,
  HAL_I2C_STATE_BUSY_RX = 0x22U,
  HAL_I2C_STATE_LISTEN = 0x28U,
  HAL_I2C_STATE_BUSY_TX_LISTEN = 0x29U,

  HAL_I2C_STATE_BUSY_RX_LISTEN = 0x2AU,

  HAL_I2C_STATE_ABORT = 0x60U,
  HAL_I2C_STATE_TIMEOUT = 0xA0U,
  HAL_I2C_STATE_ERROR = 0xE0U

} HAL_I2C_StateTypeDef;
# 164 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_MODE_NONE = 0x00U,
  HAL_I2C_MODE_MASTER = 0x10U,
  HAL_I2C_MODE_SLAVE = 0x20U,
  HAL_I2C_MODE_MEM = 0x40U

} HAL_I2C_ModeTypeDef;
# 181 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define HAL_I2C_ERROR_NONE (0x00000000U)
#define HAL_I2C_ERROR_BERR (0x00000001U)
#define HAL_I2C_ERROR_ARLO (0x00000002U)
#define HAL_I2C_ERROR_AF (0x00000004U)
#define HAL_I2C_ERROR_OVR (0x00000008U)
#define HAL_I2C_ERROR_DMA (0x00000010U)
#define HAL_I2C_ERROR_TIMEOUT (0x00000020U)
#define HAL_I2C_ERROR_SIZE (0x00000040U)
# 197 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
typedef struct __I2C_HandleTypeDef
{
  I2C_TypeDef *Instance;

  I2C_InitTypeDef Init;

  uint8_t *pBuffPtr;

  uint16_t XferSize;

  volatile uint16_t XferCount;

  volatile uint32_t XferOptions;


  volatile uint32_t PreviousState;

  HAL_StatusTypeDef(*XferISR)(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_I2C_StateTypeDef State;

  volatile HAL_I2C_ModeTypeDef Mode;

  volatile uint32_t ErrorCode;

  volatile uint32_t AddrEventCount;
} I2C_HandleTypeDef;
# 246 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define I2C_FIRST_FRAME ((uint32_t)I2C_SOFTEND_MODE)
#define I2C_FIRST_AND_NEXT_FRAME ((uint32_t)(I2C_RELOAD_MODE | I2C_SOFTEND_MODE))
#define I2C_NEXT_FRAME ((uint32_t)(I2C_RELOAD_MODE | I2C_SOFTEND_MODE))
#define I2C_FIRST_AND_LAST_FRAME ((uint32_t)I2C_AUTOEND_MODE)
#define I2C_LAST_FRAME ((uint32_t)I2C_AUTOEND_MODE)







#define I2C_ADDRESSINGMODE_7BIT (0x00000001U)
#define I2C_ADDRESSINGMODE_10BIT (0x00000002U)







#define I2C_DUALADDRESS_DISABLE (0x00000000U)
#define I2C_DUALADDRESS_ENABLE I2C_OAR2_OA2EN







#define I2C_OA2_NOMASK ((uint8_t)0x00U)
#define I2C_OA2_MASK01 ((uint8_t)0x01U)
#define I2C_OA2_MASK02 ((uint8_t)0x02U)
#define I2C_OA2_MASK03 ((uint8_t)0x03U)
#define I2C_OA2_MASK04 ((uint8_t)0x04U)
#define I2C_OA2_MASK05 ((uint8_t)0x05U)
#define I2C_OA2_MASK06 ((uint8_t)0x06U)
#define I2C_OA2_MASK07 ((uint8_t)0x07U)







#define I2C_GENERALCALL_DISABLE (0x00000000U)
#define I2C_GENERALCALL_ENABLE I2C_CR1_GCEN







#define I2C_NOSTRETCH_DISABLE (0x00000000U)
#define I2C_NOSTRETCH_ENABLE I2C_CR1_NOSTRETCH







#define I2C_MEMADD_SIZE_8BIT (0x00000001U)
#define I2C_MEMADD_SIZE_16BIT (0x00000002U)







#define I2C_DIRECTION_TRANSMIT (0x00000000U)
#define I2C_DIRECTION_RECEIVE (0x00000001U)







#define I2C_RELOAD_MODE I2C_CR2_RELOAD
#define I2C_AUTOEND_MODE I2C_CR2_AUTOEND
#define I2C_SOFTEND_MODE (0x00000000U)







#define I2C_NO_STARTSTOP (0x00000000U)
#define I2C_GENERATE_STOP I2C_CR2_STOP
#define I2C_GENERATE_START_READ (uint32_t)(I2C_CR2_START | I2C_CR2_RD_WRN)
#define I2C_GENERATE_START_WRITE I2C_CR2_START
# 351 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define I2C_IT_ERRI I2C_CR1_ERRIE
#define I2C_IT_TCI I2C_CR1_TCIE
#define I2C_IT_STOPI I2C_CR1_STOPIE
#define I2C_IT_NACKI I2C_CR1_NACKIE
#define I2C_IT_ADDRI I2C_CR1_ADDRIE
#define I2C_IT_RXI I2C_CR1_RXIE
#define I2C_IT_TXI I2C_CR1_TXIE







#define I2C_FLAG_TXE I2C_ISR_TXE
#define I2C_FLAG_TXIS I2C_ISR_TXIS
#define I2C_FLAG_RXNE I2C_ISR_RXNE
#define I2C_FLAG_ADDR I2C_ISR_ADDR
#define I2C_FLAG_AF I2C_ISR_NACKF
#define I2C_FLAG_STOPF I2C_ISR_STOPF
#define I2C_FLAG_TC I2C_ISR_TC
#define I2C_FLAG_TCR I2C_ISR_TCR
#define I2C_FLAG_BERR I2C_ISR_BERR
#define I2C_FLAG_ARLO I2C_ISR_ARLO
#define I2C_FLAG_OVR I2C_ISR_OVR
#define I2C_FLAG_PECERR I2C_ISR_PECERR
#define I2C_FLAG_TIMEOUT I2C_ISR_TIMEOUT
#define I2C_FLAG_ALERT I2C_ISR_ALERT
#define I2C_FLAG_BUSY I2C_ISR_BUSY
#define I2C_FLAG_DIR I2C_ISR_DIR
# 399 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_I2C_STATE_RESET)
# 415 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_ENABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->CR1 |= (__INTERRUPT__))
# 431 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_DISABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->CR1 &= (~(__INTERRUPT__)))
# 447 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) ((((__HANDLE__)->Instance->CR1 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# 472 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_GET_FLAG(__HANDLE__,__FLAG__) (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) == (__FLAG__)) ? SET : RESET)
# 491 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define __HAL_I2C_CLEAR_FLAG(__HANDLE__,__FLAG__) (((__FLAG__) == I2C_FLAG_TXE) ? ((__HANDLE__)->Instance->ISR |= (__FLAG__)) : ((__HANDLE__)->Instance->ICR = (__FLAG__)))






#define __HAL_I2C_ENABLE(__HANDLE__) (SET_BIT((__HANDLE__)->Instance->CR1, I2C_CR1_PE))





#define __HAL_I2C_DISABLE(__HANDLE__) (CLEAR_BIT((__HANDLE__)->Instance->CR1, I2C_CR1_PE))





#define __HAL_I2C_GENERATE_NACK(__HANDLE__) (SET_BIT((__HANDLE__)->Instance->CR2, I2C_CR2_NACK))





# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
#define __STM32F3xx_HAL_I2C_EX_H 
# 65 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
#define I2C_ANALOGFILTER_ENABLE 0x00000000U
#define I2C_ANALOGFILTER_DISABLE I2C_CR1_ANFOFF







#define I2C_FMP_NOT_SUPPORTED 0xAAAA0000U
#define I2C_FASTMODEPLUS_PB6 SYSCFG_CFGR1_I2C_PB6_FMP
#define I2C_FASTMODEPLUS_PB7 SYSCFG_CFGR1_I2C_PB7_FMP
#define I2C_FASTMODEPLUS_PB8 SYSCFG_CFGR1_I2C_PB8_FMP
#define I2C_FASTMODEPLUS_PB9 SYSCFG_CFGR1_I2C_PB9_FMP
#define I2C_FASTMODEPLUS_I2C1 SYSCFG_CFGR1_I2C1_FMP

#define I2C_FASTMODEPLUS_I2C2 SYSCFG_CFGR1_I2C2_FMP






#define I2C_FASTMODEPLUS_I2C3 (uint32_t)(0x00000400U | I2C_FMP_NOT_SUPPORTED)
# 111 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter);
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus);
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus);
# 131 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c_ex.h"
#define IS_I2C_ANALOG_FILTER(FILTER) (((FILTER) == I2C_ANALOGFILTER_ENABLE) || ((FILTER) == I2C_ANALOGFILTER_DISABLE))


#define IS_I2C_DIGITAL_FILTER(FILTER) ((FILTER) <= 0x0000000FU)

#define IS_I2C_FASTMODEPLUS(__CONFIG__) ((((__CONFIG__) & I2C_FMP_NOT_SUPPORTED) != I2C_FMP_NOT_SUPPORTED) && ((((__CONFIG__) & (I2C_FASTMODEPLUS_PB6)) == I2C_FASTMODEPLUS_PB6) || (((__CONFIG__) & (I2C_FASTMODEPLUS_PB7)) == I2C_FASTMODEPLUS_PB7) || (((__CONFIG__) & (I2C_FASTMODEPLUS_PB8)) == I2C_FASTMODEPLUS_PB8) || (((__CONFIG__) & (I2C_FASTMODEPLUS_PB9)) == I2C_FASTMODEPLUS_PB9) || (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C1)) == I2C_FASTMODEPLUS_I2C1) || (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C2)) == I2C_FASTMODEPLUS_I2C2) || (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C3)) == I2C_FASTMODEPLUS_I2C3)))
# 517 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h" 2
# 527 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c);
# 540 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);

HAL_StatusTypeDef HAL_I2C_Master_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Master_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Sequential_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
# 579 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode);
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c);
# 599 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c);
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c);
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c);
# 625 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define IS_I2C_ADDRESSING_MODE(MODE) (((MODE) == I2C_ADDRESSINGMODE_7BIT) || ((MODE) == I2C_ADDRESSINGMODE_10BIT))


#define IS_I2C_DUAL_ADDRESS(ADDRESS) (((ADDRESS) == I2C_DUALADDRESS_DISABLE) || ((ADDRESS) == I2C_DUALADDRESS_ENABLE))


#define IS_I2C_OWN_ADDRESS2_MASK(MASK) (((MASK) == I2C_OA2_NOMASK) || ((MASK) == I2C_OA2_MASK01) || ((MASK) == I2C_OA2_MASK02) || ((MASK) == I2C_OA2_MASK03) || ((MASK) == I2C_OA2_MASK04) || ((MASK) == I2C_OA2_MASK05) || ((MASK) == I2C_OA2_MASK06) || ((MASK) == I2C_OA2_MASK07))
# 640 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
#define IS_I2C_GENERAL_CALL(CALL) (((CALL) == I2C_GENERALCALL_DISABLE) || ((CALL) == I2C_GENERALCALL_ENABLE))


#define IS_I2C_NO_STRETCH(STRETCH) (((STRETCH) == I2C_NOSTRETCH_DISABLE) || ((STRETCH) == I2C_NOSTRETCH_ENABLE))


#define IS_I2C_MEMADD_SIZE(SIZE) (((SIZE) == I2C_MEMADD_SIZE_8BIT) || ((SIZE) == I2C_MEMADD_SIZE_16BIT))


#define IS_TRANSFER_MODE(MODE) (((MODE) == I2C_RELOAD_MODE) || ((MODE) == I2C_AUTOEND_MODE) || ((MODE) == I2C_SOFTEND_MODE))



#define IS_TRANSFER_REQUEST(REQUEST) (((REQUEST) == I2C_GENERATE_STOP) || ((REQUEST) == I2C_GENERATE_START_READ) || ((REQUEST) == I2C_GENERATE_START_WRITE) || ((REQUEST) == I2C_NO_STARTSTOP))




#define IS_I2C_TRANSFER_OPTIONS_REQUEST(REQUEST) (((REQUEST) == I2C_FIRST_FRAME) || ((REQUEST) == I2C_FIRST_AND_NEXT_FRAME) || ((REQUEST) == I2C_NEXT_FRAME) || ((REQUEST) == I2C_FIRST_AND_LAST_FRAME) || ((REQUEST) == I2C_LAST_FRAME))





#define I2C_RESET_CR2(__HANDLE__) ((__HANDLE__)->Instance->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN)))

#define I2C_GET_ADDR_MATCH(__HANDLE__) (((__HANDLE__)->Instance->ISR & I2C_ISR_ADDCODE) >> 16U)
#define I2C_GET_DIR(__HANDLE__) (((__HANDLE__)->Instance->ISR & I2C_ISR_DIR) >> 16U)
#define I2C_GET_STOP_MODE(__HANDLE__) ((__HANDLE__)->Instance->CR2 & I2C_CR2_AUTOEND)
#define I2C_GET_OWN_ADDRESS1(__HANDLE__) ((__HANDLE__)->Instance->OAR1 & I2C_OAR1_OA1)
#define I2C_GET_OWN_ADDRESS2(__HANDLE__) ((__HANDLE__)->Instance->OAR2 & I2C_OAR2_OA2)

#define IS_I2C_OWN_ADDRESS1(ADDRESS1) ((ADDRESS1) <= 0x000003FFU)
#define IS_I2C_OWN_ADDRESS2(ADDRESS2) ((ADDRESS2) <= (uint16_t)0x00FFU)

#define I2C_MEM_ADD_MSB(__ADDRESS__) ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0xFF00U))) >> 8U)))
#define I2C_MEM_ADD_LSB(__ADDRESS__) ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FFU))))

#define I2C_GENERATE_START(__ADDMODE__,__ADDRESS__) (((__ADDMODE__) == I2C_ADDRESSINGMODE_7BIT) ? (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN)) : (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_ADD10) | (I2C_CR2_START)) & (~I2C_CR2_RD_WRN)))
# 245 "./src/main/target/stm32f3xx_hal_conf.h" 2
# 264 "./src/main/target/stm32f3xx_hal_conf.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define __STM32F3xx_HAL_PCD_H 
# 68 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
typedef enum
{
  HAL_PCD_STATE_RESET = 0x00U,
  HAL_PCD_STATE_READY = 0x01U,
  HAL_PCD_STATE_ERROR = 0x02U,
  HAL_PCD_STATE_BUSY = 0x03U,
  HAL_PCD_STATE_TIMEOUT = 0x04U
} PCD_StateTypeDef;




typedef enum
{
  PCD_EP_DBUF_OUT,
  PCD_EP_DBUF_IN,
  PCD_EP_DBUF_ERR,
}PCD_EP_DBUF_DIR;




typedef enum
{
  PCD_EP_NOBUF,
  PCD_EP_BUF0,
  PCD_EP_BUF1
}PCD_EP_BUF_NUM;




typedef struct
{
  uint32_t dev_endpoints;



  uint32_t speed;


  uint32_t ep0_mps;


  uint32_t phy_itface;


  uint32_t Sof_enable;


  uint32_t low_power_enable;


  uint32_t lpm_enable;


  uint32_t battery_charging_enable;


}PCD_InitTypeDef;

typedef struct
{
  uint8_t num;


  uint8_t is_in;


  uint8_t is_stall;


  uint8_t type;


  uint16_t pmaadress;



  uint16_t pmaaddr0;



  uint16_t pmaaddr1;



  uint8_t doublebuffer;


  uint32_t maxpacket;


  uint8_t *xfer_buff;


  uint32_t xfer_len;

  uint32_t xfer_count;

}PCD_EPTypeDef;

typedef USB_TypeDef PCD_TypeDef;




typedef struct
{
  PCD_TypeDef *Instance;
  PCD_InitTypeDef Init;
  volatile uint8_t USB_Address;
  PCD_EPTypeDef IN_ep[15];
  PCD_EPTypeDef OUT_ep[15];
  HAL_LockTypeDef Lock;
  volatile PCD_StateTypeDef State;
  uint32_t Setup[12];
  void *pData;

} PCD_HandleTypeDef;






# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd_ex.h"
#define __STM32F3xx_HAL_PCD_EX_H 
# 76 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd_ex.h"
#define PCD_EP_TX_ADDRESS(USBx,bEpNum) ((uint16_t *)((uint32_t)((((USBx)->BTABLE+(bEpNum)*8)*2+ ((uint32_t)(USBx) + 0x400U)))))
#define PCD_EP_TX_CNT(USBx,bEpNum) ((uint16_t *)((uint32_t)((((USBx)->BTABLE+(bEpNum)*8+2)*2+ ((uint32_t)(USBx) + 0x400U)))))
#define PCD_EP_RX_ADDRESS(USBx,bEpNum) ((uint16_t *)((uint32_t)((((USBx)->BTABLE+(bEpNum)*8+4)*2+ ((uint32_t)(USBx) + 0x400U)))))
#define PCD_EP_RX_CNT(USBx,bEpNum) ((uint16_t *)((uint32_t)((((USBx)->BTABLE+(bEpNum)*8+6)*2+ ((uint32_t)(USBx) + 0x400U)))))


#define PCD_SET_EP_RX_CNT(USBx,bEpNum,wCount) { uint16_t *pdwReg =PCD_EP_RX_CNT((USBx),(bEpNum)); PCD_SET_EP_CNT_RX_REG((pdwReg), (wCount)) }
# 117 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd_ex.h"
HAL_StatusTypeDef HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                     uint16_t ep_addr,
                                     uint16_t ep_kind,
                                     uint32_t pmaadress);

void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state);
# 195 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h" 2
# 204 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SPEED_HIGH 0U
#define PCD_SPEED_FULL 2U







#define PCD_PHY_EMBEDDED 2U
# 226 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define __HAL_PCD_GET_FLAG(__HANDLE__,__INTERRUPT__) ((((__HANDLE__)->Instance->ISTR) & (__INTERRUPT__)) == (__INTERRUPT__))
#define __HAL_PCD_CLEAR_FLAG(__HANDLE__,__INTERRUPT__) ((((__HANDLE__)->Instance->ISTR) = (uint16_t)(~(__INTERRUPT__))))

#define __HAL_USB_WAKEUP_EXTI_ENABLE_IT() EXTI->IMR |= USB_WAKEUP_EXTI_LINE
#define __HAL_USB_WAKEUP_EXTI_DISABLE_IT() EXTI->IMR &= ~(USB_WAKEUP_EXTI_LINE)
#define __HAL_USB_EXTI_GENERATE_SWIT(__EXTILINE__) (EXTI->SWIER |= (__EXTILINE__))

#define __HAL_USB_WAKEUP_EXTI_GET_FLAG() EXTI->PR & (USB_WAKEUP_EXTI_LINE)
#define __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG() EXTI->PR = USB_WAKEUP_EXTI_LINE

#define __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE() do { EXTI->FTSR &= ~(USB_WAKEUP_EXTI_LINE); EXTI->RTSR |= USB_WAKEUP_EXTI_LINE; } while(0U)




#define __HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE() do { EXTI->FTSR |= (USB_WAKEUP_EXTI_LINE); EXTI->RTSR &= ~(USB_WAKEUP_EXTI_LINE); } while(0U)




#define __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE() do { EXTI->RTSR &= ~(USB_WAKEUP_EXTI_LINE); EXTI->FTSR &= ~(USB_WAKEUP_EXTI_LINE); EXTI->RTSR |= USB_WAKEUP_EXTI_LINE; EXTI->FTSR |= USB_WAKEUP_EXTI_LINE; } while(0U)
# 265 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeInit (PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd);
# 278 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd);
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd);

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd);
# 301 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address);
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type);
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
# 322 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd);
# 338 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define USB_WAKEUP_EXTI_LINE ((uint32_t)EXTI_IMR_MR18)







#define DEP0CTL_MPS_64 0U
#define DEP0CTL_MPS_32 1U
#define DEP0CTL_MPS_16 2U
#define DEP0CTL_MPS_8 3U

#define PCD_EP0MPS_64 DEP0CTL_MPS_64
#define PCD_EP0MPS_32 DEP0CTL_MPS_32
#define PCD_EP0MPS_16 DEP0CTL_MPS_16
#define PCD_EP0MPS_08 DEP0CTL_MPS_8







#define PCD_EP_TYPE_CTRL 0U
#define PCD_EP_TYPE_ISOC 1U
#define PCD_EP_TYPE_BULK 2U
#define PCD_EP_TYPE_INTR 3U







#define PCD_ENDP0 ((uint8_t)0U)
#define PCD_ENDP1 ((uint8_t)1U)
#define PCD_ENDP2 ((uint8_t)2U)
#define PCD_ENDP3 ((uint8_t)3U)
#define PCD_ENDP4 ((uint8_t)4U)
#define PCD_ENDP5 ((uint8_t)5U)
#define PCD_ENDP6 ((uint8_t)6U)
#define PCD_ENDP7 ((uint8_t)7U)







#define PCD_SNG_BUF 0U
#define PCD_DBL_BUF 1U
# 405 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_ENDPOINT(USBx,bEpNum,wRegValue) (*((uint16_t *)(((uint32_t)(&(USBx)->EP0R + (bEpNum) * 2U))))= (uint16_t)(wRegValue))


#define PCD_GET_ENDPOINT(USBx,bEpNum) (*((uint16_t *)(((uint32_t)(&(USBx)->EP0R + (bEpNum) * 2U)))))
# 419 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EPTYPE(USBx,bEpNum,wType) (PCD_SET_ENDPOINT((USBx), (bEpNum), ((((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & ((uint32_t)(USB_EP_T_MASK))) | ((uint32_t)(wType)) )))
# 428 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_EPTYPE(USBx,bEpNum) (((uint16_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EP_T_FIELD)
# 439 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_FreeUserBuffer(USBx,bEpNum,bDir) { if ((bDir) == PCD_EP_DBUF_OUT) { PCD_TX_DTOG((USBx), (bEpNum)); } else if ((bDir) == PCD_EP_DBUF_IN) { PCD_RX_DTOG((USBx), (bEpNum)); }}
# 458 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_DB_DIR(USBx,bEpNum) { if ((uint16_t)(*PCD_EP_RX_CNT((USBx), (bEpNum)) & 0xFC00U) != 0U) return(PCD_EP_DBUF_OUT); else if (((uint16_t)(*PCD_EP_TX_CNT((USBx), (bEpNum))) & 0x03FFU) != 0U) return(PCD_EP_DBUF_IN); else return(PCD_EP_DBUF_ERR);}
# 475 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_TX_STATUS(USBx,bEpNum,wState) { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPTX_DTOGMASK); if((USB_EPTX_DTOG1 & (wState))!= 0U) { _wRegVal ^=(uint16_t) USB_EPTX_DTOG1; } if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U) { _wRegVal ^=(uint16_t) USB_EPTX_DTOG2; } PCD_SET_ENDPOINT((USBx), (bEpNum), (((uint32_t)(_wRegVal)) | USB_EP_CTR_RX|USB_EP_CTR_TX)); }
# 498 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_RX_STATUS(USBx,bEpNum,wState) { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPRX_DTOGMASK); if((USB_EPRX_DTOG1 & (wState))!= 0U) { _wRegVal ^= (uint16_t) USB_EPRX_DTOG1; } if((USB_EPRX_DTOG2 & ((uint32_t)(wState)))!= 0U) { _wRegVal ^= (uint16_t) USB_EPRX_DTOG2; } PCD_SET_ENDPOINT((USBx), (bEpNum), (((uint32_t)(_wRegVal)) | USB_EP_CTR_RX|USB_EP_CTR_TX)); }
# 523 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_TXRX_STATUS(USBx,bEpNum,wStaterx,wStatetx) { register uint32_t _wRegVal; _wRegVal = PCD_GET_ENDPOINT((USBx), (bEpNum)) & (USB_EPRX_DTOGMASK |USB_EPTX_STAT) ; if((USB_EPRX_DTOG1 & ((wStaterx)))!= 0U) { _wRegVal ^= USB_EPRX_DTOG1; } if((USB_EPRX_DTOG2 & (wStaterx))!= 0U) { _wRegVal ^= USB_EPRX_DTOG2; } if((USB_EPTX_DTOG1 & (wStatetx))!= 0U) { _wRegVal ^= USB_EPTX_DTOG1; } if((USB_EPTX_DTOG2 & (wStatetx))!= 0U) { _wRegVal ^= USB_EPTX_DTOG2; } PCD_SET_ENDPOINT((USBx), (bEpNum), _wRegVal | USB_EP_CTR_RX|USB_EP_CTR_TX); }
# 557 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_EP_TX_STATUS(USBx,bEpNum) (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPTX_STAT)
#define PCD_GET_EP_RX_STATUS(USBx,bEpNum) (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPRX_STAT)







#define PCD_SET_EP_TX_VALID(USBx,bEpNum) (PCD_SET_EP_TX_STATUS((USBx), (bEpNum), USB_EP_TX_VALID))

#define PCD_SET_EP_RX_VALID(USBx,bEpNum) (PCD_SET_EP_RX_STATUS((USBx), (bEpNum), USB_EP_RX_VALID))







#define PCD_GET_EP_TX_STALL_STATUS(USBx,bEpNum) (PCD_GET_EP_TX_STATUS((USBx), (bEpNum)) == USB_EP_TX_STALL)

#define PCD_GET_EP_RX_STALL_STATUS(USBx,bEpNum) (PCD_GET_EP_RX_STATUS((USBx), (bEpNum)) == USB_EP_RX_STALL)
# 587 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_KIND(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), (USB_EP_CTR_RX|USB_EP_CTR_TX|((((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) | USB_EP_KIND) & USB_EPREG_MASK))))

#define PCD_CLEAR_EP_KIND(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), (USB_EP_CTR_RX|USB_EP_CTR_TX|((((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPKIND_MASK))))
# 598 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_OUT_STATUS(USBx,bEpNum) PCD_SET_EP_KIND((USBx), (bEpNum))
#define PCD_CLEAR_OUT_STATUS(USBx,bEpNum) PCD_CLEAR_EP_KIND((USBx), (bEpNum))







#define PCD_SET_EP_DBUF(USBx,bEpNum) PCD_SET_EP_KIND((USBx), (bEpNum))
#define PCD_CLEAR_EP_DBUF(USBx,bEpNum) PCD_CLEAR_EP_KIND((USBx), (bEpNum))







#define PCD_CLEAR_RX_EP_CTR(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), PCD_GET_ENDPOINT((USBx), (bEpNum)) & 0x7FFFU & USB_EPREG_MASK))

#define PCD_CLEAR_TX_EP_CTR(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), PCD_GET_ENDPOINT((USBx), (bEpNum)) & 0xFF7FU & USB_EPREG_MASK))
# 627 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_RX_DTOG(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX | (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPREG_MASK)))

#define PCD_TX_DTOG(USBx,bEpNum) (PCD_SET_ENDPOINT((USBx), (bEpNum), USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX | (((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPREG_MASK)))
# 638 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_CLEAR_RX_DTOG(USBx,bEpNum) if((((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EP_DTOG_RX) != 0) { PCD_RX_DTOG((USBx),(bEpNum)); }



#define PCD_CLEAR_TX_DTOG(USBx,bEpNum) if((((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EP_DTOG_TX) != 0) { PCD_TX_DTOG((USBx),(bEpNum)); }
# 654 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_ADDRESS(USBx,bEpNum,bAddr) PCD_SET_ENDPOINT((USBx), (bEpNum), USB_EP_CTR_RX|USB_EP_CTR_TX|(((uint32_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)))) & USB_EPREG_MASK) | (bAddr))
# 663 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_EP_ADDRESS(USBx,bEpNum) ((uint8_t)(PCD_GET_ENDPOINT((USBx), (bEpNum)) & USB_EPADDR_FIELD))
# 672 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_TX_ADDRESS(USBx,bEpNum,wAddr) (*PCD_EP_TX_ADDRESS((USBx), (bEpNum)) = (((wAddr) >> 1U) << 1U))
#define PCD_SET_EP_RX_ADDRESS(USBx,bEpNum,wAddr) (*PCD_EP_RX_ADDRESS((USBx), (bEpNum)) = (((wAddr) >> 1U) << 1U))







#define PCD_GET_EP_TX_ADDRESS(USBx,bEpNum) ((uint16_t)*PCD_EP_TX_ADDRESS((USBx), (bEpNum)))
#define PCD_GET_EP_RX_ADDRESS(USBx,bEpNum) ((uint16_t)*PCD_EP_RX_ADDRESS((USBx), (bEpNum)))
# 691 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_CALC_BLK32(dwReg,wCount,wNBlocks) { (wNBlocks) = (wCount) >> 5U; if(((wCount) & 0x1fU) == 0U) { (wNBlocks)--; } *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10U) | (uint16_t)0x8000U); }
# 701 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_CALC_BLK2(dwReg,wCount,wNBlocks) { (wNBlocks) = (wCount) >> 1U; if(((wCount) & 0x1U) != 0U) { (wNBlocks)++; } *pdwReg = (uint16_t)((wNBlocks) << 10U); }
# 710 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_CNT_RX_REG(dwReg,wCount) { uint16_t wNBlocks; if((wCount) > 62U) { PCD_CALC_BLK32((dwReg),(wCount),wNBlocks) } else { PCD_CALC_BLK2((dwReg),(wCount),wNBlocks) } }
# 722 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_RX_DBUF0_CNT(USBx,bEpNum,wCount) { uint16_t *pdwReg = PCD_EP_TX_CNT((USBx), (bEpNum)); PCD_SET_EP_CNT_RX_REG(pdwReg, (wCount)) }
# 734 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_TX_CNT(USBx,bEpNum,wCount) (*PCD_EP_TX_CNT((USBx), (bEpNum)) = (wCount))







#define PCD_GET_EP_TX_CNT(USBx,bEpNum) ((uint16_t)(*PCD_EP_TX_CNT((USBx), (bEpNum))) & 0x3ffU)
#define PCD_GET_EP_RX_CNT(USBx,bEpNum) ((uint16_t)(*PCD_EP_RX_CNT((USBx), (bEpNum))) & 0x3ffU)
# 752 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_DBUF0_ADDR(USBx,bEpNum,wBuf0Addr) (PCD_SET_EP_TX_ADDRESS((USBx), (bEpNum), (wBuf0Addr)))
#define PCD_SET_EP_DBUF1_ADDR(USBx,bEpNum,wBuf1Addr) (PCD_SET_EP_RX_ADDRESS((USBx), (bEpNum), (wBuf1Addr)))
# 763 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_DBUF_ADDR(USBx,bEpNum,wBuf0Addr,wBuf1Addr) { PCD_SET_EP_DBUF0_ADDR((USBx), (bEpNum), (wBuf0Addr)); PCD_SET_EP_DBUF1_ADDR((USBx), (bEpNum), (wBuf1Addr)); }
# 774 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_EP_DBUF0_ADDR(USBx,bEpNum) (PCD_GET_EP_TX_ADDRESS((USBx), (bEpNum)))
#define PCD_GET_EP_DBUF1_ADDR(USBx,bEpNum) (PCD_GET_EP_RX_ADDRESS((USBx), (bEpNum)))
# 786 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_DBUF0_CNT(USBx,bEpNum,bDir,wCount) { if((bDir) == PCD_EP_DBUF_OUT) {PCD_SET_EP_RX_DBUF0_CNT((USBx), (bEpNum),(wCount))} else if((bDir) == PCD_EP_DBUF_IN) { *PCD_EP_TX_CNT((USBx), (bEpNum)) = (uint32_t)(wCount); } }
# 796 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_DBUF1_CNT(USBx,bEpNum,bDir,wCount) { if((bDir) == PCD_EP_DBUF_OUT) { PCD_SET_EP_RX_CNT((USBx), (bEpNum),(wCount)) } else if((bDir) == PCD_EP_DBUF_IN) { *PCD_EP_RX_CNT((USBx), (bEpNum)) = (uint32_t)(wCount); } }
# 807 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_SET_EP_DBUF_CNT(USBx,bEpNum,bDir,wCount) { PCD_SET_EP_DBUF0_CNT((USBx), (bEpNum), (bDir), (wCount)) PCD_SET_EP_DBUF1_CNT((USBx), (bEpNum), (bDir), (wCount)) } /
# 818 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
#define PCD_GET_EP_DBUF0_CNT(USBx,bEpNum) (PCD_GET_EP_TX_CNT((USBx), (bEpNum)))
#define PCD_GET_EP_DBUF1_CNT(USBx,bEpNum) (PCD_GET_EP_RX_CNT((USBx), (bEpNum)))







#define IS_PCD_ALL_INSTANCE IS_USB_ALL_INSTANCE
# 836 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address);
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type);
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_ActiveRemoteWakeup(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeActiveRemoteWakeup(PCD_HandleTypeDef *hpcd);
# 857 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pcd.h"
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd);







void PCD_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes);
void PCD_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes);
# 265 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
#define __STM32F3xx_HAL_PWR_H 
# 65 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
#define PWR_WAKEUP_PIN1 ((uint32_t)PWR_CSR_EWUP1)
#define PWR_WAKEUP_PIN2 ((uint32_t)PWR_CSR_EWUP2)
#define PWR_WAKEUP_PIN3 ((uint32_t)PWR_CSR_EWUP3)







#define PWR_MAINREGULATOR_ON (0x00000000U)
#define PWR_LOWPOWERREGULATOR_ON PWR_CR_LPDS







#define PWR_SLEEPENTRY_WFI ((uint8_t)0x01U)
#define PWR_SLEEPENTRY_WFE ((uint8_t)0x02U)







#define PWR_STOPENTRY_WFI ((uint8_t)0x01U)
#define PWR_STOPENTRY_WFE ((uint8_t)0x02U)







#define PWR_FLAG_WU PWR_CSR_WUF
#define PWR_FLAG_SB PWR_CSR_SBF
#define PWR_FLAG_PVDO PWR_CSR_PVDO
#define PWR_FLAG_VREFINTRDY PWR_CSR_VREFINTRDYF
# 137 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
#define __HAL_PWR_GET_FLAG(__FLAG__) ((PWR->CSR & (__FLAG__)) == (__FLAG__))







#define __HAL_PWR_CLEAR_FLAG(__FLAG__) (PWR->CR |= (__FLAG__) << 2U)
# 156 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WAKEUP_PIN1) || ((PIN) == PWR_WAKEUP_PIN2) || ((PIN) == PWR_WAKEUP_PIN3))



#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_MAINREGULATOR_ON) || ((REGULATOR) == PWR_LOWPOWERREGULATOR_ON))


#define IS_PWR_SLEEP_ENTRY(ENTRY) (((ENTRY) == PWR_SLEEPENTRY_WFI) || ((ENTRY) == PWR_SLEEPENTRY_WFE))

#define IS_PWR_STOP_ENTRY(ENTRY) (((ENTRY) == PWR_STOPENTRY_WFI) || ((ENTRY) == PWR_STOPENTRY_WFE))






# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
#define __STM32F3xx_HAL_PWR_EX_H 
# 68 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
typedef struct
{
  uint32_t PVDLevel;


  uint32_t Mode;

}PWR_PVDTypeDef;
# 100 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
#define PWR_PVDLEVEL_0 PWR_CR_PLS_LEV0
#define PWR_PVDLEVEL_1 PWR_CR_PLS_LEV1
#define PWR_PVDLEVEL_2 PWR_CR_PLS_LEV2
#define PWR_PVDLEVEL_3 PWR_CR_PLS_LEV3
#define PWR_PVDLEVEL_4 PWR_CR_PLS_LEV4
#define PWR_PVDLEVEL_5 PWR_CR_PLS_LEV5
#define PWR_PVDLEVEL_6 PWR_CR_PLS_LEV6
#define PWR_PVDLEVEL_7 PWR_CR_PLS_LEV7







#define PWR_PVD_MODE_NORMAL (0x00000000U)
#define PWR_PVD_MODE_IT_RISING (0x00010001U)
#define PWR_PVD_MODE_IT_FALLING (0x00010002U)
#define PWR_PVD_MODE_IT_RISING_FALLING (0x00010003U)
#define PWR_PVD_MODE_EVENT_RISING (0x00020001U)
#define PWR_PVD_MODE_EVENT_FALLING (0x00020002U)
#define PWR_PVD_MODE_EVENT_RISING_FALLING (0x00020003U)




#define PWR_EXTI_LINE_PVD EXTI_IMR_MR16
# 165 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
#define __HAL_PWR_PVD_EXTI_ENABLE_IT() (EXTI->IMR |= (PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_DISABLE_IT() (EXTI->IMR &= ~(PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_GENERATE_SWIT() (EXTI->SWIER |= (PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_ENABLE_EVENT() (EXTI->EMR |= (PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_DISABLE_EVENT() (EXTI->EMR &= ~(PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE() CLEAR_BIT(EXTI->RTSR, PWR_EXTI_LINE_PVD)





#define __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE() CLEAR_BIT(EXTI->FTSR, PWR_EXTI_LINE_PVD)





#define __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE() __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();





#define __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE() EXTI->FTSR |= (PWR_EXTI_LINE_PVD)





#define __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE() EXTI->RTSR |= (PWR_EXTI_LINE_PVD)





#define __HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE() __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();





#define __HAL_PWR_PVD_EXTI_GET_FLAG() (EXTI->PR & (PWR_EXTI_LINE_PVD))





#define __HAL_PWR_PVD_EXTI_CLEAR_FLAG() (EXTI->PR = (PWR_EXTI_LINE_PVD))
# 259 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLEVEL_0) || ((LEVEL) == PWR_PVDLEVEL_1)|| ((LEVEL) == PWR_PVDLEVEL_2) || ((LEVEL) == PWR_PVDLEVEL_3)|| ((LEVEL) == PWR_PVDLEVEL_4) || ((LEVEL) == PWR_PVDLEVEL_5)|| ((LEVEL) == PWR_PVDLEVEL_6) || ((LEVEL) == PWR_PVDLEVEL_7))




#define IS_PWR_PVD_MODE(MODE) (((MODE) == PWR_PVD_MODE_IT_RISING)|| ((MODE) == PWR_PVD_MODE_IT_FALLING) || ((MODE) == PWR_PVD_MODE_IT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING) || ((MODE) == PWR_PVD_MODE_EVENT_FALLING) || ((MODE) == PWR_PVD_MODE_EVENT_RISING_FALLING) || ((MODE) == PWR_PVD_MODE_NORMAL))
# 300 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr_ex.h"
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD);
void HAL_PWR_EnablePVD(void);
void HAL_PWR_DisablePVD(void);
void HAL_PWR_PVD_IRQHandler(void);
void HAL_PWR_PVDCallback(void);
# 173 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h" 2
# 185 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
void HAL_PWR_DeInit(void);
# 196 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
void HAL_PWR_EnableBkUpAccess(void);
void HAL_PWR_DisableBkUpAccess(void);


void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx);
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx);


void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry);
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry);
void HAL_PWR_EnterSTANDBYMode(void);

void HAL_PWR_EnableSleepOnExit(void);
void HAL_PWR_DisableSleepOnExit(void);
void HAL_PWR_EnableSEVOnPend(void);
void HAL_PWR_DisableSEVOnPend(void);
# 269 "./src/main/target/stm32f3xx_hal_conf.h" 2
# 288 "./src/main/target/stm32f3xx_hal_conf.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __STM32F3xx_HAL_SPI_H 
# 63 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
typedef struct
{
  uint32_t Mode;


  uint32_t Direction;


  uint32_t DataSize;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t NSS;



  uint32_t BaudRatePrescaler;





  uint32_t FirstBit;


  uint32_t TIMode;


  uint32_t CRCCalculation;


  uint32_t CRCPolynomial;


  uint32_t CRCLength;



  uint32_t NSSPMode;





} SPI_InitTypeDef;




typedef enum
{
  HAL_SPI_STATE_RESET = 0x00U,
  HAL_SPI_STATE_READY = 0x01U,
  HAL_SPI_STATE_BUSY = 0x02U,
  HAL_SPI_STATE_BUSY_TX = 0x03U,
  HAL_SPI_STATE_BUSY_RX = 0x04U,
  HAL_SPI_STATE_BUSY_TX_RX = 0x05U,
  HAL_SPI_STATE_ERROR = 0x06U,
  HAL_SPI_STATE_ABORT = 0x07U
} HAL_SPI_StateTypeDef;




typedef struct __SPI_HandleTypeDef
{
  SPI_TypeDef *Instance;

  SPI_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint32_t CRCSize;

  void (*RxISR)(struct __SPI_HandleTypeDef *hspi);

  void (*TxISR)(struct __SPI_HandleTypeDef *hspi);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_SPI_StateTypeDef State;

  volatile uint32_t ErrorCode;

} SPI_HandleTypeDef;
# 180 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define HAL_SPI_ERROR_NONE (0x00000000U)
#define HAL_SPI_ERROR_MODF (0x00000001U)
#define HAL_SPI_ERROR_CRC (0x00000002U)
#define HAL_SPI_ERROR_OVR (0x00000004U)
#define HAL_SPI_ERROR_FRE (0x00000008U)
#define HAL_SPI_ERROR_DMA (0x00000010U)
#define HAL_SPI_ERROR_FLAG (0x00000020U)
#define HAL_SPI_ERROR_ABORT (0x00000040U)







#define SPI_MODE_SLAVE (0x00000000U)
#define SPI_MODE_MASTER (SPI_CR1_MSTR | SPI_CR1_SSI)







#define SPI_DIRECTION_2LINES (0x00000000U)
#define SPI_DIRECTION_2LINES_RXONLY SPI_CR1_RXONLY
#define SPI_DIRECTION_1LINE SPI_CR1_BIDIMODE







#define SPI_DATASIZE_4BIT (0x00000300U)
#define SPI_DATASIZE_5BIT (0x00000400U)
#define SPI_DATASIZE_6BIT (0x00000500U)
#define SPI_DATASIZE_7BIT (0x00000600U)
#define SPI_DATASIZE_8BIT (0x00000700U)
#define SPI_DATASIZE_9BIT (0x00000800U)
#define SPI_DATASIZE_10BIT (0x00000900U)
#define SPI_DATASIZE_11BIT (0x00000A00U)
#define SPI_DATASIZE_12BIT (0x00000B00U)
#define SPI_DATASIZE_13BIT (0x00000C00U)
#define SPI_DATASIZE_14BIT (0x00000D00U)
#define SPI_DATASIZE_15BIT (0x00000E00U)
#define SPI_DATASIZE_16BIT (0x00000F00U)







#define SPI_POLARITY_LOW (0x00000000U)
#define SPI_POLARITY_HIGH SPI_CR1_CPOL







#define SPI_PHASE_1EDGE (0x00000000U)
#define SPI_PHASE_2EDGE SPI_CR1_CPHA







#define SPI_NSS_SOFT SPI_CR1_SSM
#define SPI_NSS_HARD_INPUT (0x00000000U)
#define SPI_NSS_HARD_OUTPUT (SPI_CR2_SSOE << 16U)







#define SPI_NSS_PULSE_ENABLE SPI_CR2_NSSP
#define SPI_NSS_PULSE_DISABLE (0x00000000U)







#define SPI_BAUDRATEPRESCALER_2 (0x00000000U)
#define SPI_BAUDRATEPRESCALER_4 (SPI_CR1_BR_0)
#define SPI_BAUDRATEPRESCALER_8 (SPI_CR1_BR_1)
#define SPI_BAUDRATEPRESCALER_16 (SPI_CR1_BR_1 | SPI_CR1_BR_0)
#define SPI_BAUDRATEPRESCALER_32 (SPI_CR1_BR_2)
#define SPI_BAUDRATEPRESCALER_64 (SPI_CR1_BR_2 | SPI_CR1_BR_0)
#define SPI_BAUDRATEPRESCALER_128 (SPI_CR1_BR_2 | SPI_CR1_BR_1)
#define SPI_BAUDRATEPRESCALER_256 (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0)







#define SPI_FIRSTBIT_MSB (0x00000000U)
#define SPI_FIRSTBIT_LSB SPI_CR1_LSBFIRST







#define SPI_TIMODE_DISABLE (0x00000000U)
#define SPI_TIMODE_ENABLE SPI_CR2_FRF







#define SPI_CRCCALCULATION_DISABLE (0x00000000U)
#define SPI_CRCCALCULATION_ENABLE SPI_CR1_CRCEN
# 317 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define SPI_CRC_LENGTH_DATASIZE (0x00000000U)
#define SPI_CRC_LENGTH_8BIT (0x00000001U)
#define SPI_CRC_LENGTH_16BIT (0x00000002U)
# 332 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define SPI_RXFIFO_THRESHOLD SPI_CR2_FRXTH
#define SPI_RXFIFO_THRESHOLD_QF SPI_CR2_FRXTH
#define SPI_RXFIFO_THRESHOLD_HF (0x00000000U)
# 343 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define SPI_IT_TXE SPI_CR2_TXEIE
#define SPI_IT_RXNE SPI_CR2_RXNEIE
#define SPI_IT_ERR SPI_CR2_ERRIE







#define SPI_FLAG_RXNE SPI_SR_RXNE
#define SPI_FLAG_TXE SPI_SR_TXE
#define SPI_FLAG_BSY SPI_SR_BSY
#define SPI_FLAG_CRCERR SPI_SR_CRCERR
#define SPI_FLAG_MODF SPI_SR_MODF
#define SPI_FLAG_OVR SPI_SR_OVR
#define SPI_FLAG_FRE SPI_SR_FRE
#define SPI_FLAG_FTLVL SPI_SR_FTLVL
#define SPI_FLAG_FRLVL SPI_SR_FRLVL







#define SPI_FTLVL_EMPTY (0x00000000U)
#define SPI_FTLVL_QUARTER_FULL (0x00000800U)
#define SPI_FTLVL_HALF_FULL (0x00001000U)
#define SPI_FTLVL_FULL (0x00001800U)
# 381 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define SPI_FRLVL_EMPTY (0x00000000U)
#define SPI_FRLVL_QUARTER_FULL (0x00000200U)
#define SPI_FRLVL_HALF_FULL (0x00000400U)
#define SPI_FRLVL_FULL (0x00000600U)
# 403 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_SPI_STATE_RESET)
# 415 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_ENABLE_IT(__HANDLE__,__INTERRUPT__) SET_BIT((__HANDLE__)->Instance->CR2, (__INTERRUPT__))
# 427 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_DISABLE_IT(__HANDLE__,__INTERRUPT__) CLEAR_BIT((__HANDLE__)->Instance->CR2, (__INTERRUPT__))
# 439 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) ((((__HANDLE__)->Instance->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# 457 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_GET_FLAG(__HANDLE__,__FLAG__) ((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))






#define __HAL_SPI_CLEAR_CRCERRFLAG(__HANDLE__) ((__HANDLE__)->Instance->SR = (uint16_t)(~SPI_FLAG_CRCERR))






#define __HAL_SPI_CLEAR_MODFFLAG(__HANDLE__) do{ __IO uint32_t tmpreg_modf = 0x00U; tmpreg_modf = (__HANDLE__)->Instance->SR; CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE); UNUSED(tmpreg_modf); } while(0U)
# 484 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_CLEAR_OVRFLAG(__HANDLE__) do{ __IO uint32_t tmpreg_ovr = 0x00U; tmpreg_ovr = (__HANDLE__)->Instance->DR; tmpreg_ovr = (__HANDLE__)->Instance->SR; UNUSED(tmpreg_ovr); } while(0U)
# 497 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_CLEAR_FREFLAG(__HANDLE__) do{ __IO uint32_t tmpreg_fre = 0x00U; tmpreg_fre = (__HANDLE__)->Instance->SR; UNUSED(tmpreg_fre); }while(0U)
# 509 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define __HAL_SPI_ENABLE(__HANDLE__) SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE)






#define __HAL_SPI_DISABLE(__HANDLE__) CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE)
# 532 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define SPI_1LINE_TX(__HANDLE__) SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_BIDIOE)






#define SPI_1LINE_RX(__HANDLE__) CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_BIDIOE)






#define SPI_RESET_CRC(__HANDLE__) do{CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_CRCEN); SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_CRCEN);}while(0U)


#define IS_SPI_MODE(MODE) (((MODE) == SPI_MODE_SLAVE) || ((MODE) == SPI_MODE_MASTER))


#define IS_SPI_DIRECTION(MODE) (((MODE) == SPI_DIRECTION_2LINES) || ((MODE) == SPI_DIRECTION_2LINES_RXONLY) || ((MODE) == SPI_DIRECTION_1LINE))



#define IS_SPI_DIRECTION_2LINES(MODE) ((MODE) == SPI_DIRECTION_2LINES)

#define IS_SPI_DIRECTION_2LINES_OR_1LINE(MODE) (((MODE) == SPI_DIRECTION_2LINES) || ((MODE) == SPI_DIRECTION_1LINE))


#define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DATASIZE_16BIT) || ((DATASIZE) == SPI_DATASIZE_15BIT) || ((DATASIZE) == SPI_DATASIZE_14BIT) || ((DATASIZE) == SPI_DATASIZE_13BIT) || ((DATASIZE) == SPI_DATASIZE_12BIT) || ((DATASIZE) == SPI_DATASIZE_11BIT) || ((DATASIZE) == SPI_DATASIZE_10BIT) || ((DATASIZE) == SPI_DATASIZE_9BIT) || ((DATASIZE) == SPI_DATASIZE_8BIT) || ((DATASIZE) == SPI_DATASIZE_7BIT) || ((DATASIZE) == SPI_DATASIZE_6BIT) || ((DATASIZE) == SPI_DATASIZE_5BIT) || ((DATASIZE) == SPI_DATASIZE_4BIT))
# 575 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_POLARITY_LOW) || ((CPOL) == SPI_POLARITY_HIGH))


#define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_PHASE_1EDGE) || ((CPHA) == SPI_PHASE_2EDGE))


#define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_SOFT) || ((NSS) == SPI_NSS_HARD_INPUT) || ((NSS) == SPI_NSS_HARD_OUTPUT))



#define IS_SPI_NSSP(NSSP) (((NSSP) == SPI_NSS_PULSE_ENABLE) || ((NSSP) == SPI_NSS_PULSE_DISABLE))


#define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BAUDRATEPRESCALER_2) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_4) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_8) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_16) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_32) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_64) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_128) || ((PRESCALER) == SPI_BAUDRATEPRESCALER_256))
# 597 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
#define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FIRSTBIT_MSB) || ((BIT) == SPI_FIRSTBIT_LSB))


#define IS_SPI_TIMODE(MODE) (((MODE) == SPI_TIMODE_DISABLE) || ((MODE) == SPI_TIMODE_ENABLE))


#define IS_SPI_CRC_CALCULATION(CALCULATION) (((CALCULATION) == SPI_CRCCALCULATION_DISABLE) || ((CALCULATION) == SPI_CRCCALCULATION_ENABLE))


#define IS_SPI_CRC_LENGTH(LENGTH) (((LENGTH) == SPI_CRC_LENGTH_DATASIZE) || ((LENGTH) == SPI_CRC_LENGTH_8BIT) || ((LENGTH) == SPI_CRC_LENGTH_16BIT))



#define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) (((POLYNOMIAL) >= 0x1U) && ((POLYNOMIAL) <= 0xFFFFU) && (((POLYNOMIAL)&0x1U) != 0U))

#define IS_SPI_DMA_HANDLE(HANDLE) ((HANDLE) != NULL)







# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi_ex.h"
#define __STM32F3xx_HAL_SPI_EX_H 
# 68 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi_ex.h"
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi);
# 621 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h" 2
# 631 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi);
# 643 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size);
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi);

HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi);

void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
# 679 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_spi.h"
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi);
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi);
# 289 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __STM32F3xx_HAL_TIM_H 
# 62 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t CounterMode;


  uint32_t Period;



  uint32_t ClockDivision;


  uint32_t RepetitionCounter;
# 86 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
  uint32_t AutoReloadPreload;

} TIM_Base_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCFastMode;




  uint32_t OCIdleState;



  uint32_t OCNIdleState;


} TIM_OC_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCIdleState;



  uint32_t OCNIdleState;



  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICFilter;

} TIM_OnePulse_InitTypeDef;





typedef struct
{
  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICPrescaler;


  uint32_t ICFilter;

} TIM_IC_InitTypeDef;




typedef struct
{
  uint32_t EncoderMode;


  uint32_t IC1Polarity;


  uint32_t IC1Selection;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;


  uint32_t IC2Polarity;


  uint32_t IC2Selection;


  uint32_t IC2Prescaler;


  uint32_t IC2Filter;

} TIM_Encoder_InitTypeDef;





typedef struct
{
  uint32_t ClockSource;

  uint32_t ClockPolarity;

  uint32_t ClockPrescaler;

  uint32_t ClockFilter;

}TIM_ClockConfigTypeDef;




typedef struct
{
  uint32_t ClearInputState;

  uint32_t ClearInputSource;

  uint32_t ClearInputPolarity;

  uint32_t ClearInputPrescaler;

  uint32_t ClearInputFilter;

}TIM_ClearInputConfigTypeDef;




typedef struct {
  uint32_t SlaveMode;

  uint32_t InputTrigger;

  uint32_t TriggerPolarity;

  uint32_t TriggerPrescaler;

  uint32_t TriggerFilter;


}TIM_SlaveConfigTypeDef;




typedef enum
{
  HAL_TIM_STATE_RESET = 0x00U,
  HAL_TIM_STATE_READY = 0x01U,
  HAL_TIM_STATE_BUSY = 0x02U,
  HAL_TIM_STATE_TIMEOUT = 0x03U,
  HAL_TIM_STATE_ERROR = 0x04
}HAL_TIM_StateTypeDef;




typedef enum
{
  HAL_TIM_ACTIVE_CHANNEL_1 = 0x01U,
  HAL_TIM_ACTIVE_CHANNEL_2 = 0x02U,
  HAL_TIM_ACTIVE_CHANNEL_3 = 0x04U,
  HAL_TIM_ACTIVE_CHANNEL_4 = 0x08U,
  HAL_TIM_ACTIVE_CHANNEL_CLEARED = 0x00
}HAL_TIM_ActiveChannel;




typedef struct
{
  TIM_TypeDef *Instance;
  TIM_Base_InitTypeDef Init;
  HAL_TIM_ActiveChannel Channel;
  DMA_HandleTypeDef *hdma[7];

  HAL_LockTypeDef Lock;
  volatile HAL_TIM_StateTypeDef State;
}TIM_HandleTypeDef;
# 311 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_INPUTCHANNELPOLARITY_RISING (0x00000000U)
#define TIM_INPUTCHANNELPOLARITY_FALLING (TIM_CCER_CC1P)
#define TIM_INPUTCHANNELPOLARITY_BOTHEDGE (TIM_CCER_CC1P | TIM_CCER_CC1NP)







#define TIM_ETRPOLARITY_INVERTED (TIM_SMCR_ETP)
#define TIM_ETRPOLARITY_NONINVERTED (0x0000U)







#define TIM_ETRPRESCALER_DIV1 (0x0000U)
#define TIM_ETRPRESCALER_DIV2 (TIM_SMCR_ETPS_0)
#define TIM_ETRPRESCALER_DIV4 (TIM_SMCR_ETPS_1)
#define TIM_ETRPRESCALER_DIV8 (TIM_SMCR_ETPS)







#define TIM_COUNTERMODE_UP (0x0000U)
#define TIM_COUNTERMODE_DOWN TIM_CR1_DIR
#define TIM_COUNTERMODE_CENTERALIGNED1 TIM_CR1_CMS_0
#define TIM_COUNTERMODE_CENTERALIGNED2 TIM_CR1_CMS_1
#define TIM_COUNTERMODE_CENTERALIGNED3 TIM_CR1_CMS







#define TIM_CLOCKDIVISION_DIV1 (0x0000U)
#define TIM_CLOCKDIVISION_DIV2 (TIM_CR1_CKD_0)
#define TIM_CLOCKDIVISION_DIV4 (TIM_CR1_CKD_1)







#define TIM_AUTORELOAD_PRELOAD_DISABLE (0x0000U)
#define TIM_AUTORELOAD_PRELOAD_ENABLE (TIM_CR1_ARPE)
# 373 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_OCFAST_DISABLE (0x0000U)
#define TIM_OCFAST_ENABLE (TIM_CCMR1_OC1FE)







#define TIM_OCPOLARITY_HIGH (0x0000U)
#define TIM_OCPOLARITY_LOW (TIM_CCER_CC1P)







#define TIM_OCNPOLARITY_HIGH (0x0000U)
#define TIM_OCNPOLARITY_LOW (TIM_CCER_CC1NP)







#define TIM_OCIDLESTATE_SET (TIM_CR2_OIS1)
#define TIM_OCIDLESTATE_RESET (0x0000U)







#define TIM_OCNIDLESTATE_SET (TIM_CR2_OIS1N)
#define TIM_OCNIDLESTATE_RESET (0x0000U)







#define TIM_ICPOLARITY_RISING TIM_INPUTCHANNELPOLARITY_RISING
#define TIM_ICPOLARITY_FALLING TIM_INPUTCHANNELPOLARITY_FALLING
#define TIM_ICPOLARITY_BOTHEDGE TIM_INPUTCHANNELPOLARITY_BOTHEDGE







#define TIM_ICSELECTION_DIRECTTI (TIM_CCMR1_CC1S_0)

#define TIM_ICSELECTION_INDIRECTTI (TIM_CCMR1_CC1S_1)

#define TIM_ICSELECTION_TRC (TIM_CCMR1_CC1S)







#define TIM_ICPSC_DIV1 (0x0000U)
#define TIM_ICPSC_DIV2 (TIM_CCMR1_IC1PSC_0)
#define TIM_ICPSC_DIV4 (TIM_CCMR1_IC1PSC_1)
#define TIM_ICPSC_DIV8 (TIM_CCMR1_IC1PSC)







#define TIM_OPMODE_SINGLE (TIM_CR1_OPM)
#define TIM_OPMODE_REPETITIVE (0x0000U)







#define TIM_ENCODERMODE_TI1 (TIM_SMCR_SMS_0)
#define TIM_ENCODERMODE_TI2 (TIM_SMCR_SMS_1)
#define TIM_ENCODERMODE_TI12 (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)







#define TIM_IT_UPDATE (TIM_DIER_UIE)
#define TIM_IT_CC1 (TIM_DIER_CC1IE)
#define TIM_IT_CC2 (TIM_DIER_CC2IE)
#define TIM_IT_CC3 (TIM_DIER_CC3IE)
#define TIM_IT_CC4 (TIM_DIER_CC4IE)
#define TIM_IT_COM (TIM_DIER_COMIE)
#define TIM_IT_TRIGGER (TIM_DIER_TIE)
#define TIM_IT_BREAK (TIM_DIER_BIE)







#define TIM_COMMUTATION_TRGI (TIM_CR2_CCUS)
#define TIM_COMMUTATION_SOFTWARE (0x0000U)
# 495 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_DMA_UPDATE (TIM_DIER_UDE)
#define TIM_DMA_CC1 (TIM_DIER_CC1DE)
#define TIM_DMA_CC2 (TIM_DIER_CC2DE)
#define TIM_DMA_CC3 (TIM_DIER_CC3DE)
#define TIM_DMA_CC4 (TIM_DIER_CC4DE)
#define TIM_DMA_COM (TIM_DIER_COMDE)
#define TIM_DMA_TRIGGER (TIM_DIER_TDE)







#define TIM_FLAG_UPDATE (TIM_SR_UIF)
#define TIM_FLAG_CC1 (TIM_SR_CC1IF)
#define TIM_FLAG_CC2 (TIM_SR_CC2IF)
#define TIM_FLAG_CC3 (TIM_SR_CC3IF)
#define TIM_FLAG_CC4 (TIM_SR_CC4IF)
#define TIM_FLAG_COM (TIM_SR_COMIF)
#define TIM_FLAG_TRIGGER (TIM_SR_TIF)
#define TIM_FLAG_BREAK (TIM_SR_BIF)

#define TIM_FLAG_BREAK2 (TIM_SR_B2IF)

#define TIM_FLAG_CC1OF (TIM_SR_CC1OF)
#define TIM_FLAG_CC2OF (TIM_SR_CC2OF)
#define TIM_FLAG_CC3OF (TIM_SR_CC3OF)
#define TIM_FLAG_CC4OF (TIM_SR_CC4OF)







#define TIM_CLOCKSOURCE_ETRMODE2 (TIM_SMCR_ETPS_1)
#define TIM_CLOCKSOURCE_INTERNAL (TIM_SMCR_ETPS_0)
#define TIM_CLOCKSOURCE_ITR0 (0x0000U)
#define TIM_CLOCKSOURCE_ITR1 (TIM_SMCR_TS_0)
#define TIM_CLOCKSOURCE_ITR2 (TIM_SMCR_TS_1)
#define TIM_CLOCKSOURCE_ITR3 (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)
#define TIM_CLOCKSOURCE_TI1ED (TIM_SMCR_TS_2)
#define TIM_CLOCKSOURCE_TI1 (TIM_SMCR_TS_0 | TIM_SMCR_TS_2)
#define TIM_CLOCKSOURCE_TI2 (TIM_SMCR_TS_1 | TIM_SMCR_TS_2)
#define TIM_CLOCKSOURCE_ETRMODE1 (TIM_SMCR_TS)







#define TIM_CLOCKPOLARITY_INVERTED TIM_ETRPOLARITY_INVERTED
#define TIM_CLOCKPOLARITY_NONINVERTED TIM_ETRPOLARITY_NONINVERTED
#define TIM_CLOCKPOLARITY_RISING TIM_INPUTCHANNELPOLARITY_RISING
#define TIM_CLOCKPOLARITY_FALLING TIM_INPUTCHANNELPOLARITY_FALLING
#define TIM_CLOCKPOLARITY_BOTHEDGE TIM_INPUTCHANNELPOLARITY_BOTHEDGE







#define TIM_CLOCKPRESCALER_DIV1 TIM_ETRPRESCALER_DIV1
#define TIM_CLOCKPRESCALER_DIV2 TIM_ETRPRESCALER_DIV2
#define TIM_CLOCKPRESCALER_DIV4 TIM_ETRPRESCALER_DIV4
#define TIM_CLOCKPRESCALER_DIV8 TIM_ETRPRESCALER_DIV8







#define TIM_CLEARINPUTPOLARITY_INVERTED TIM_ETRPOLARITY_INVERTED
#define TIM_CLEARINPUTPOLARITY_NONINVERTED TIM_ETRPOLARITY_NONINVERTED







#define TIM_CLEARINPUTPRESCALER_DIV1 TIM_ETRPRESCALER_DIV1
#define TIM_CLEARINPUTPRESCALER_DIV2 TIM_ETRPRESCALER_DIV2
#define TIM_CLEARINPUTPRESCALER_DIV4 TIM_ETRPRESCALER_DIV4
#define TIM_CLEARINPUTPRESCALER_DIV8 TIM_ETRPRESCALER_DIV8







#define TIM_OSSR_ENABLE (TIM_BDTR_OSSR)
#define TIM_OSSR_DISABLE (0x0000U)







#define TIM_OSSI_ENABLE (TIM_BDTR_OSSI)
#define TIM_OSSI_DISABLE (0x0000U)







#define TIM_LOCKLEVEL_OFF (0x0000U)
#define TIM_LOCKLEVEL_1 (TIM_BDTR_LOCK_0)
#define TIM_LOCKLEVEL_2 (TIM_BDTR_LOCK_1)
#define TIM_LOCKLEVEL_3 (TIM_BDTR_LOCK)







#define TIM_BREAK_ENABLE (TIM_BDTR_BKE)
#define TIM_BREAK_DISABLE (0x0000U)







#define TIM_BREAKPOLARITY_LOW (0x0000U)
#define TIM_BREAKPOLARITY_HIGH (TIM_BDTR_BKP)






#define TIM_AUTOMATICOUTPUT_ENABLE (TIM_BDTR_AOE)
#define TIM_AUTOMATICOUTPUT_DISABLE (0x0000U)







#define TIM_TRGO_RESET (0x0000U)
#define TIM_TRGO_ENABLE (TIM_CR2_MMS_0)
#define TIM_TRGO_UPDATE (TIM_CR2_MMS_1)
#define TIM_TRGO_OC1 ((TIM_CR2_MMS_1 | TIM_CR2_MMS_0))
#define TIM_TRGO_OC1REF (TIM_CR2_MMS_2)
#define TIM_TRGO_OC2REF ((TIM_CR2_MMS_2 | TIM_CR2_MMS_0))
#define TIM_TRGO_OC3REF ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1))
#define TIM_TRGO_OC4REF ((TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0))







#define TIM_MASTERSLAVEMODE_ENABLE (0x0080U)
#define TIM_MASTERSLAVEMODE_DISABLE (0x0000U)







#define TIM_TS_ITR0 (0x0000U)
#define TIM_TS_ITR1 (0x0010U)
#define TIM_TS_ITR2 (0x0020U)
#define TIM_TS_ITR3 (0x0030U)
#define TIM_TS_TI1F_ED (0x0040U)
#define TIM_TS_TI1FP1 (0x0050U)
#define TIM_TS_TI2FP2 (0x0060U)
#define TIM_TS_ETRF (0x0070U)
#define TIM_TS_NONE (0xFFFFU)







#define TIM_TRIGGERPOLARITY_INVERTED TIM_ETRPOLARITY_INVERTED
#define TIM_TRIGGERPOLARITY_NONINVERTED TIM_ETRPOLARITY_NONINVERTED
#define TIM_TRIGGERPOLARITY_RISING TIM_INPUTCHANNELPOLARITY_RISING
#define TIM_TRIGGERPOLARITY_FALLING TIM_INPUTCHANNELPOLARITY_FALLING
#define TIM_TRIGGERPOLARITY_BOTHEDGE TIM_INPUTCHANNELPOLARITY_BOTHEDGE







#define TIM_TRIGGERPRESCALER_DIV1 TIM_ETRPRESCALER_DIV1
#define TIM_TRIGGERPRESCALER_DIV2 TIM_ETRPRESCALER_DIV2
#define TIM_TRIGGERPRESCALER_DIV4 TIM_ETRPRESCALER_DIV4
#define TIM_TRIGGERPRESCALER_DIV8 TIM_ETRPRESCALER_DIV8







#define TIM_TI1SELECTION_CH1 (0x0000U)
#define TIM_TI1SELECTION_XORCOMBINATION (TIM_CR2_TI1S)







#define TIM_DMABURSTLENGTH_1TRANSFER (0x00000000U)
#define TIM_DMABURSTLENGTH_2TRANSFERS (0x00000100U)
#define TIM_DMABURSTLENGTH_3TRANSFERS (0x00000200U)
#define TIM_DMABURSTLENGTH_4TRANSFERS (0x00000300U)
#define TIM_DMABURSTLENGTH_5TRANSFERS (0x00000400U)
#define TIM_DMABURSTLENGTH_6TRANSFERS (0x00000500U)
#define TIM_DMABURSTLENGTH_7TRANSFERS (0x00000600U)
#define TIM_DMABURSTLENGTH_8TRANSFERS (0x00000700U)
#define TIM_DMABURSTLENGTH_9TRANSFERS (0x00000800U)
#define TIM_DMABURSTLENGTH_10TRANSFERS (0x00000900U)
#define TIM_DMABURSTLENGTH_11TRANSFERS (0x00000A00U)
#define TIM_DMABURSTLENGTH_12TRANSFERS (0x00000B00U)
#define TIM_DMABURSTLENGTH_13TRANSFERS (0x00000C00U)
#define TIM_DMABURSTLENGTH_14TRANSFERS (0x00000D00U)
#define TIM_DMABURSTLENGTH_15TRANSFERS (0x00000E00U)
#define TIM_DMABURSTLENGTH_16TRANSFERS (0x00000F00U)
#define TIM_DMABURSTLENGTH_17TRANSFERS (0x00001000U)
#define TIM_DMABURSTLENGTH_18TRANSFERS (0x00001100U)







#define TIM_DMA_ID_UPDATE ((uint16_t) 0x0U)
#define TIM_DMA_ID_CC1 ((uint16_t) 0x1U)
#define TIM_DMA_ID_CC2 ((uint16_t) 0x2U)
#define TIM_DMA_ID_CC3 ((uint16_t) 0x3U)
#define TIM_DMA_ID_CC4 ((uint16_t) 0x4U)
#define TIM_DMA_ID_COMMUTATION ((uint16_t) 0x5U)
#define TIM_DMA_ID_TRIGGER ((uint16_t) 0x6U)







#define TIM_CCx_ENABLE (0x0001U)
#define TIM_CCx_DISABLE (0x0000U)
#define TIM_CCxN_ENABLE (0x0004U)
#define TIM_CCxN_DISABLE (0x0000U)
# 779 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_TIM_STATE_RESET)






#define __HAL_TIM_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1|=(TIM_CR1_CEN))






#define __HAL_TIM_MOE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->BDTR|=(TIM_BDTR_MOE))






#define __HAL_TIM_DISABLE(__HANDLE__) do { if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U) { if(((__HANDLE__)->Instance->CCER & TIM_CCER_CCxNE_MASK) == 0U) { (__HANDLE__)->Instance->CR1 &= ~(TIM_CR1_CEN); } } } while(0U)
# 818 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_MOE_DISABLE(__HANDLE__) do { if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0U) { if(((__HANDLE__)->Instance->CCER & TIM_CCER_CCxNE_MASK) == 0U) { (__HANDLE__)->Instance->BDTR &= ~(TIM_BDTR_MOE); } } } while(0U)
# 836 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(__HANDLE__) (__HANDLE__)->Instance->BDTR &= ~(TIM_BDTR_MOE)
# 853 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_ENABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))
# 870 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_DISABLE_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->DIER &= ~(__INTERRUPT__))
# 886 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_ENABLE_DMA(__HANDLE__,__DMA__) ((__HANDLE__)->Instance->DIER |= (__DMA__))
# 902 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_DISABLE_DMA(__HANDLE__,__DMA__) ((__HANDLE__)->Instance->DIER &= ~(__DMA__))
# 923 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_GET_FLAG(__HANDLE__,__FLAG__) (((__HANDLE__)->Instance->SR &(__FLAG__)) == (__FLAG__))
# 944 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_CLEAR_FLAG(__HANDLE__,__FLAG__) ((__HANDLE__)->Instance->SR = ~(__FLAG__))







#define __HAL_TIM_GET_IT_SOURCE(__HANDLE__,__INTERRUPT__) ((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)







#define __HAL_TIM_CLEAR_IT(__HANDLE__,__INTERRUPT__) ((__HANDLE__)->Instance->SR = ~(__INTERRUPT__))







#define __HAL_TIM_IS_TIM_COUNTING_DOWN(__HANDLE__) (((__HANDLE__)->Instance->CR1 &(TIM_CR1_DIR)) == (TIM_CR1_DIR))







#define __HAL_TIM_SET_PRESCALER(__HANDLE__,__PRESC__) ((__HANDLE__)->Instance->PSC = (__PRESC__))







#define __HAL_TIM_SET_COUNTER(__HANDLE__,__COUNTER__) ((__HANDLE__)->Instance->CNT = (__COUNTER__))






#define __HAL_TIM_GET_COUNTER(__HANDLE__) ((__HANDLE__)->Instance->CNT)
# 1001 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_SET_AUTORELOAD(__HANDLE__,__AUTORELOAD__) do{ (__HANDLE__)->Instance->ARR = (__AUTORELOAD__); (__HANDLE__)->Init.Period = (__AUTORELOAD__); } while(0U)
# 1012 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_GET_AUTORELOAD(__HANDLE__) ((__HANDLE__)->Instance->ARR)
# 1026 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_SET_CLOCKDIVISION(__HANDLE__,__CKD__) do{ (__HANDLE__)->Instance->CR1 &= (uint16_t)(~TIM_CR1_CKD); (__HANDLE__)->Instance->CR1 |= (__CKD__); (__HANDLE__)->Init.ClockDivision = (__CKD__); } while(0U)
# 1041 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_GET_CLOCKDIVISION(__HANDLE__) ((__HANDLE__)->Instance->CR1 & TIM_CR1_CKD)
# 1062 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_SET_ICPRESCALER(__HANDLE__,__CHANNEL__,__ICPSC__) do{ TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__)); TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__)); } while(0U)
# 1083 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_GET_ICPRESCALER(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC1PSC) : ((__CHANNEL__) == TIM_CHANNEL_2) ? (((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC2PSC) >> 8U) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC3PSC) : (((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC4PSC)) >> 8U)
# 1097 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_URS_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1|= (TIM_CR1_URS))
# 1111 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_URS_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1&=~(TIM_CR1_URS))
# 1129 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__,__POLARITY__) do{ TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__)); TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__)); }while(0U)
# 1147 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_CCER_CCxE_MASK ((uint32_t)(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E))
#define TIM_CCER_CCxNE_MASK ((uint32_t)(TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE))
# 1160 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define IS_TIM_COUNTER_MODE(MODE) (((MODE) == TIM_COUNTERMODE_UP) || ((MODE) == TIM_COUNTERMODE_DOWN) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED1) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED2) || ((MODE) == TIM_COUNTERMODE_CENTERALIGNED3))





#define IS_TIM_CLOCKDIVISION_DIV(DIV) (((DIV) == TIM_CLOCKDIVISION_DIV1) || ((DIV) == TIM_CLOCKDIVISION_DIV2) || ((DIV) == TIM_CLOCKDIVISION_DIV4))



#define IS_TIM_AUTORELOAD_PRELOAD(PRELOAD) (((PRELOAD) == TIM_AUTORELOAD_PRELOAD_DISABLE) || ((PRELOAD) == TIM_AUTORELOAD_PRELOAD_ENABLE))


#define IS_TIM_FAST_STATE(STATE) (((STATE) == TIM_OCFAST_DISABLE) || ((STATE) == TIM_OCFAST_ENABLE))


#define IS_TIM_OC_POLARITY(POLARITY) (((POLARITY) == TIM_OCPOLARITY_HIGH) || ((POLARITY) == TIM_OCPOLARITY_LOW))


#define IS_TIM_OCN_POLARITY(POLARITY) (((POLARITY) == TIM_OCNPOLARITY_HIGH) || ((POLARITY) == TIM_OCNPOLARITY_LOW))


#define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIDLESTATE_SET) || ((STATE) == TIM_OCIDLESTATE_RESET))


#define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIDLESTATE_SET) || ((STATE) == TIM_OCNIDLESTATE_RESET))



#define IS_TIM_IC_POLARITY(POLARITY) (((POLARITY) == TIM_ICPOLARITY_RISING) || ((POLARITY) == TIM_ICPOLARITY_FALLING) || ((POLARITY) == TIM_ICPOLARITY_BOTHEDGE))



#define IS_TIM_IC_SELECTION(SELECTION) (((SELECTION) == TIM_ICSELECTION_DIRECTTI) || ((SELECTION) == TIM_ICSELECTION_INDIRECTTI) || ((SELECTION) == TIM_ICSELECTION_TRC))



#define IS_TIM_IC_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ICPSC_DIV1) || ((PRESCALER) == TIM_ICPSC_DIV2) || ((PRESCALER) == TIM_ICPSC_DIV4) || ((PRESCALER) == TIM_ICPSC_DIV8))




#define IS_TIM_OPM_MODE(MODE) (((MODE) == TIM_OPMODE_SINGLE) || ((MODE) == TIM_OPMODE_REPETITIVE))


#define IS_TIM_ENCODER_MODE(MODE) (((MODE) == TIM_ENCODERMODE_TI1) || ((MODE) == TIM_ENCODERMODE_TI2) || ((MODE) == TIM_ENCODERMODE_TI12))



#define IS_TIM_DMA_SOURCE(SOURCE) ((((SOURCE) & 0xFFFF80FFU) == 0x00000000U) && ((SOURCE) != 0x00000000U))


#define IS_TIM_CLOCKSOURCE(CLOCK) (((CLOCK) == TIM_CLOCKSOURCE_INTERNAL) || ((CLOCK) == TIM_CLOCKSOURCE_ETRMODE2) || ((CLOCK) == TIM_CLOCKSOURCE_ITR0) || ((CLOCK) == TIM_CLOCKSOURCE_ITR1) || ((CLOCK) == TIM_CLOCKSOURCE_ITR2) || ((CLOCK) == TIM_CLOCKSOURCE_ITR3) || ((CLOCK) == TIM_CLOCKSOURCE_TI1ED) || ((CLOCK) == TIM_CLOCKSOURCE_TI1) || ((CLOCK) == TIM_CLOCKSOURCE_TI2) || ((CLOCK) == TIM_CLOCKSOURCE_ETRMODE1))
# 1223 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define IS_TIM_CLOCKPOLARITY(POLARITY) (((POLARITY) == TIM_CLOCKPOLARITY_INVERTED) || ((POLARITY) == TIM_CLOCKPOLARITY_NONINVERTED) || ((POLARITY) == TIM_CLOCKPOLARITY_RISING) || ((POLARITY) == TIM_CLOCKPOLARITY_FALLING) || ((POLARITY) == TIM_CLOCKPOLARITY_BOTHEDGE))





#define IS_TIM_CLOCKPRESCALER(PRESCALER) (((PRESCALER) == TIM_CLOCKPRESCALER_DIV1) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV2) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV4) || ((PRESCALER) == TIM_CLOCKPRESCALER_DIV8))




#define IS_TIM_CLOCKFILTER(ICFILTER) ((ICFILTER) <= 0xFU)

#define IS_TIM_CLEARINPUT_POLARITY(POLARITY) (((POLARITY) == TIM_CLEARINPUTPOLARITY_INVERTED) || ((POLARITY) == TIM_CLEARINPUTPOLARITY_NONINVERTED))


#define IS_TIM_CLEARINPUT_PRESCALER(PRESCALER) (((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV1) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV2) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV4) || ((PRESCALER) == TIM_CLEARINPUTPRESCALER_DIV8))




#define IS_TIM_CLEARINPUT_FILTER(ICFILTER) ((ICFILTER) <= 0xFU)

#define IS_TIM_OSSR_STATE(STATE) (((STATE) == TIM_OSSR_ENABLE) || ((STATE) == TIM_OSSR_DISABLE))


#define IS_TIM_OSSI_STATE(STATE) (((STATE) == TIM_OSSI_ENABLE) || ((STATE) == TIM_OSSI_DISABLE))


#define IS_TIM_LOCK_LEVEL(LEVEL) (((LEVEL) == TIM_LOCKLEVEL_OFF) || ((LEVEL) == TIM_LOCKLEVEL_1) || ((LEVEL) == TIM_LOCKLEVEL_2) || ((LEVEL) == TIM_LOCKLEVEL_3))




#define IS_TIM_BREAK_STATE(STATE) (((STATE) == TIM_BREAK_ENABLE) || ((STATE) == TIM_BREAK_DISABLE))


#define IS_TIM_BREAK_POLARITY(POLARITY) (((POLARITY) == TIM_BREAKPOLARITY_LOW) || ((POLARITY) == TIM_BREAKPOLARITY_HIGH))


#define IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE) (((STATE) == TIM_AUTOMATICOUTPUT_ENABLE) || ((STATE) == TIM_AUTOMATICOUTPUT_DISABLE))


#define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGO_RESET) || ((SOURCE) == TIM_TRGO_ENABLE) || ((SOURCE) == TIM_TRGO_UPDATE) || ((SOURCE) == TIM_TRGO_OC1) || ((SOURCE) == TIM_TRGO_OC1REF) || ((SOURCE) == TIM_TRGO_OC2REF) || ((SOURCE) == TIM_TRGO_OC3REF) || ((SOURCE) == TIM_TRGO_OC4REF))
# 1275 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define IS_TIM_MSM_STATE(STATE) (((STATE) == TIM_MASTERSLAVEMODE_ENABLE) || ((STATE) == TIM_MASTERSLAVEMODE_DISABLE))


#define IS_TIM_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_TI1F_ED) || ((SELECTION) == TIM_TS_TI1FP1) || ((SELECTION) == TIM_TS_TI2FP2) || ((SELECTION) == TIM_TS_ETRF))
# 1287 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_NONE))





#define IS_TIM_TRIGGERPOLARITY(POLARITY) (((POLARITY) == TIM_TRIGGERPOLARITY_INVERTED ) || ((POLARITY) == TIM_TRIGGERPOLARITY_NONINVERTED) || ((POLARITY) == TIM_TRIGGERPOLARITY_RISING ) || ((POLARITY) == TIM_TRIGGERPOLARITY_FALLING ) || ((POLARITY) == TIM_TRIGGERPOLARITY_BOTHEDGE ))





#define IS_TIM_TRIGGERPRESCALER(PRESCALER) (((PRESCALER) == TIM_TRIGGERPRESCALER_DIV1) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV2) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV4) || ((PRESCALER) == TIM_TRIGGERPRESCALER_DIV8))




#define IS_TIM_TRIGGERFILTER(ICFILTER) ((ICFILTER) <= 0xFU)

#define IS_TIM_TI1SELECTION(TI1SELECTION) (((TI1SELECTION) == TIM_TI1SELECTION_CH1) || ((TI1SELECTION) == TIM_TI1SELECTION_XORCOMBINATION))


#define IS_TIM_DMA_LENGTH(LENGTH) (((LENGTH) == TIM_DMABURSTLENGTH_1TRANSFER) || ((LENGTH) == TIM_DMABURSTLENGTH_2TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_3TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_4TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_5TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_6TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_7TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_8TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_9TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_10TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_11TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_12TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_13TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_14TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_15TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_16TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_17TRANSFERS) || ((LENGTH) == TIM_DMABURSTLENGTH_18TRANSFERS))
# 1328 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define IS_TIM_DMA_DATA_LENGTH(LENGTH) (((LENGTH) >= 0x1U) && ((LENGTH) < 0x10000U))

#define IS_TIM_IC_FILTER(ICFILTER) ((ICFILTER) <= 0xFU)







#define TIM_SET_ICPRESCALERVALUE(__HANDLE__,__CHANNEL__,__ICPSC__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= (__ICPSC__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= ((__ICPSC__) << 8U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= (__ICPSC__)) : ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8U)))
# 1349 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_RESET_ICPRESCALERVALUE(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC) : ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC))
# 1361 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_SET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__,__POLARITY__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER |= (__POLARITY__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 4U)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 8U)) : ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12U))))
# 1372 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
#define TIM_RESET_CAPTUREPOLARITY(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) : ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP)))
# 1383 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define __STM32F3xx_HAL_TIM_EX_H 
# 64 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
typedef struct
{

  uint32_t IC1Polarity;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;

  uint32_t Commutation_Delay;

} TIM_HallSensor_InitTypeDef;
# 125 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
typedef struct
{
  uint32_t OffStateRunMode;

  uint32_t OffStateIDLEMode;

  uint32_t LockLevel;

  uint32_t DeadTime;

  uint32_t BreakState;

  uint32_t BreakPolarity;

  uint32_t BreakFilter;

  uint32_t Break2State;

  uint32_t Break2Polarity;

  uint32_t Break2Filter;

  uint32_t AutomaticOutput;

} TIM_BreakDeadTimeConfigTypeDef;






typedef struct {
  uint32_t MasterOutputTrigger;

  uint32_t MasterOutputTrigger2;

  uint32_t MasterSlaveMode;

}TIM_MasterConfigTypeDef;
# 276 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define TIM_CHANNEL_1 (0x0000U)
#define TIM_CHANNEL_2 (0x0004U)
#define TIM_CHANNEL_3 (0x0008U)
#define TIM_CHANNEL_4 (0x000CU)
#define TIM_CHANNEL_5 (0x0010U)
#define TIM_CHANNEL_6 (0x0014U)
#define TIM_CHANNEL_ALL (0x003CU)







#define TIM_OCMODE_TIMING (0x0000U)
#define TIM_OCMODE_ACTIVE ((uint32_t)TIM_CCMR1_OC1M_0)
#define TIM_OCMODE_INACTIVE ((uint32_t)TIM_CCMR1_OC1M_1)
#define TIM_OCMODE_TOGGLE ((uint32_t)TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
#define TIM_OCMODE_PWM1 ((uint32_t)TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)
#define TIM_OCMODE_PWM2 ((uint32_t)TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
#define TIM_OCMODE_FORCED_ACTIVE ((uint32_t)TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)
#define TIM_OCMODE_FORCED_INACTIVE ((uint32_t)TIM_CCMR1_OC1M_2)

#define TIM_OCMODE_RETRIGERRABLE_OPM1 ((uint32_t)TIM_CCMR1_OC1M_3)
#define TIM_OCMODE_RETRIGERRABLE_OPM2 ((uint32_t)TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0)
#define TIM_OCMODE_COMBINED_PWM1 ((uint32_t)TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_2)
#define TIM_OCMODE_COMBINED_PWM2 ((uint32_t)TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_2)
#define TIM_OCMODE_ASSYMETRIC_PWM1 ((uint32_t)TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2)
#define TIM_OCMODE_ASSYMETRIC_PWM2 ((uint32_t)TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M)
# 313 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define TIM_CLEARINPUTSOURCE_ETR (0x0001U)
#define TIM_CLEARINPUTSOURCE_OCREFCLR (0x0002U)
#define TIM_CLEARINPUTSOURCE_NONE (0x0000U)







#define TIM_BREAK2_DISABLE (0x00000000U)
#define TIM_BREAK2_ENABLE ((uint32_t)TIM_BDTR_BK2E)







#define TIM_BREAK2POLARITY_LOW (0x00000000U)
#define TIM_BREAK2POLARITY_HIGH ((uint32_t)TIM_BDTR_BK2P)







#define TIM_TRGO2_RESET (0x00000000U)
#define TIM_TRGO2_ENABLE ((uint32_t)(TIM_CR2_MMS2_0))
#define TIM_TRGO2_UPDATE ((uint32_t)(TIM_CR2_MMS2_1))
#define TIM_TRGO2_OC1 ((uint32_t)(TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC1REF ((uint32_t)(TIM_CR2_MMS2_2))
#define TIM_TRGO2_OC2REF ((uint32_t)(TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC3REF ((uint32_t)(TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1))
#define TIM_TRGO2_OC4REF ((uint32_t)(TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC5REF ((uint32_t)(TIM_CR2_MMS2_3))
#define TIM_TRGO2_OC6REF ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC4REF_RISINGFALLING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1))
#define TIM_TRGO2_OC6REF_RISINGFALLING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC4REF_RISING_OC6REF_RISING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2))
#define TIM_TRGO2_OC4REF_RISING_OC6REF_FALLING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0))
#define TIM_TRGO2_OC5REF_RISING_OC6REF_RISING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 |TIM_CR2_MMS2_1))
#define TIM_TRGO2_OC5REF_RISING_OC6REF_FALLING ((uint32_t)(TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0))







#define TIM_SLAVEMODE_DISABLE (0x0000U)
#define TIM_SLAVEMODE_RESET ((uint32_t)(TIM_SMCR_SMS_2))
#define TIM_SLAVEMODE_GATED ((uint32_t)(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0))
#define TIM_SLAVEMODE_TRIGGER ((uint32_t)(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1))
#define TIM_SLAVEMODE_EXTERNAL1 ((uint32_t)(TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0))
#define TIM_SLAVEMODE_COMBINED_RESETTRIGGER ((uint32_t)(TIM_SMCR_SMS_3))







#define TIM_EVENTSOURCE_UPDATE TIM_EGR_UG
#define TIM_EVENTSOURCE_CC1 TIM_EGR_CC1G
#define TIM_EVENTSOURCE_CC2 TIM_EGR_CC2G
#define TIM_EVENTSOURCE_CC3 TIM_EGR_CC3G
#define TIM_EVENTSOURCE_CC4 TIM_EGR_CC4G
#define TIM_EVENTSOURCE_COM TIM_EGR_COMG
#define TIM_EVENTSOURCE_TRIGGER TIM_EGR_TG
#define TIM_EVENTSOURCE_BREAK TIM_EGR_BG
#define TIM_EVENTSOURCE_BREAK2 TIM_EGR_B2G







#define TIM_DMABASE_CR1 (0x00000000U)
#define TIM_DMABASE_CR2 (0x00000001U)
#define TIM_DMABASE_SMCR (0x00000002U)
#define TIM_DMABASE_DIER (0x00000003U)
#define TIM_DMABASE_SR (0x00000004U)
#define TIM_DMABASE_EGR (0x00000005U)
#define TIM_DMABASE_CCMR1 (0x00000006U)
#define TIM_DMABASE_CCMR2 (0x00000007U)
#define TIM_DMABASE_CCER (0x00000008U)
#define TIM_DMABASE_CNT (0x00000009U)
#define TIM_DMABASE_PSC (0x0000000AU)
#define TIM_DMABASE_ARR (0x0000000BU)
#define TIM_DMABASE_RCR (0x0000000CU)
#define TIM_DMABASE_CCR1 (0x0000000DU)
#define TIM_DMABASE_CCR2 (0x0000000EU)
#define TIM_DMABASE_CCR3 (0x0000000FU)
#define TIM_DMABASE_CCR4 (0x00000010U)
#define TIM_DMABASE_BDTR (0x00000011U)
#define TIM_DMABASE_DCR (0x00000012U)
#define TIM_DMABASE_CCMR3 (0x00000015U)
#define TIM_DMABASE_CCR5 (0x00000016U)
#define TIM_DMABASE_CCR6 (0x00000017U)
#define TIM_DMABASE_OR (0x00000018U)
# 481 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define TIM_TIM1_ADC1_NONE (0x00000000U)
#define TIM_TIM1_ADC1_AWD1 (0x00000001U)
#define TIM_TIM1_ADC1_AWD2 (0x00000002U)
#define TIM_TIM1_ADC1_AWD3 (0x00000003U)
#define TIM_TIM8_ADC2_NONE (0x00000000U)
#define TIM_TIM8_ADC2_AWD1 (0x00000001U)
#define TIM_TIM8_ADC2_AWD2 (0x00000002U)
#define TIM_TIM8_ADC2_AWD3 (0x00000003U)
#define TIM_TIM16_GPIO (0x00000000U)
#define TIM_TIM16_RTC (0x00000001U)
#define TIM_TIM16_HSE (0x00000002U)
#define TIM_TIM16_MCO (0x00000003U)







#define TIM_TIM1_ADC4_NONE (0x00000000U)
#define TIM_TIM1_ADC4_AWD1 (0x00000004U)
#define TIM_TIM1_ADC4_AWD2 (0x00000008U)
#define TIM_TIM1_ADC4_AWD3 (0x0000000CU)
#define TIM_TIM8_ADC3_NONE (0x00000000U)
#define TIM_TIM8_ADC3_AWD1 (0x00000004U)
#define TIM_TIM8_ADC3_AWD2 (0x00000008U)
#define TIM_TIM8_ADC3_AWD3 (0x0000000CU)
#define TIM_TIM16_NONE (0x00000000U)
# 584 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define TIM_GROUPCH5_NONE 0x00000000
#define TIM_GROUPCH5_OC1REFC (TIM_CCR5_GC5C1)
#define TIM_GROUPCH5_OC2REFC (TIM_CCR5_GC5C2)
#define TIM_GROUPCH5_OC3REFC (TIM_CCR5_GC5C3)
# 671 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_CHANNELS(CHANNEL) (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4) || ((CHANNEL) == TIM_CHANNEL_5) || ((CHANNEL) == TIM_CHANNEL_6) || ((CHANNEL) == TIM_CHANNEL_ALL))







#define IS_TIM_OPM_CHANNELS(CHANNEL) (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2))


#define IS_TIM_COMPLEMENTARY_CHANNELS(CHANNEL) (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))



#define IS_TIM_PWM_MODE(MODE) (((MODE) == TIM_OCMODE_PWM1) || ((MODE) == TIM_OCMODE_PWM2) || ((MODE) == TIM_OCMODE_COMBINED_PWM1) || ((MODE) == TIM_OCMODE_COMBINED_PWM2) || ((MODE) == TIM_OCMODE_ASSYMETRIC_PWM1) || ((MODE) == TIM_OCMODE_ASSYMETRIC_PWM2))






#define IS_TIM_OC_MODE(MODE) (((MODE) == TIM_OCMODE_TIMING) || ((MODE) == TIM_OCMODE_ACTIVE) || ((MODE) == TIM_OCMODE_INACTIVE) || ((MODE) == TIM_OCMODE_TOGGLE) || ((MODE) == TIM_OCMODE_FORCED_ACTIVE) || ((MODE) == TIM_OCMODE_FORCED_INACTIVE) || ((MODE) == TIM_OCMODE_RETRIGERRABLE_OPM1) || ((MODE) == TIM_OCMODE_RETRIGERRABLE_OPM2))
# 702 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_CLEARINPUT_SOURCE(MODE) (((MODE) == TIM_CLEARINPUTSOURCE_ETR) || ((MODE) == TIM_CLEARINPUTSOURCE_OCREFCLR) || ((MODE) == TIM_CLEARINPUTSOURCE_NONE))



#define IS_TIM_BREAK_FILTER(BRKFILTER) ((BRKFILTER) <= 0xFU)

#define IS_TIM_BREAK2_STATE(STATE) (((STATE) == TIM_BREAK2_ENABLE) || ((STATE) == TIM_BREAK2_DISABLE))


#define IS_TIM_BREAK2_POLARITY(POLARITY) (((POLARITY) == TIM_BREAK2POLARITY_LOW) || ((POLARITY) == TIM_BREAK2POLARITY_HIGH))


#define IS_TIM_TRGO2_SOURCE(SOURCE) (((SOURCE) == TIM_TRGO2_RESET) || ((SOURCE) == TIM_TRGO2_ENABLE) || ((SOURCE) == TIM_TRGO2_UPDATE) || ((SOURCE) == TIM_TRGO2_OC1) || ((SOURCE) == TIM_TRGO2_OC1REF) || ((SOURCE) == TIM_TRGO2_OC2REF) || ((SOURCE) == TIM_TRGO2_OC3REF) || ((SOURCE) == TIM_TRGO2_OC3REF) || ((SOURCE) == TIM_TRGO2_OC4REF) || ((SOURCE) == TIM_TRGO2_OC5REF) || ((SOURCE) == TIM_TRGO2_OC6REF) || ((SOURCE) == TIM_TRGO2_OC4REF_RISINGFALLING) || ((SOURCE) == TIM_TRGO2_OC6REF_RISINGFALLING) || ((SOURCE) == TIM_TRGO2_OC4REF_RISING_OC6REF_RISING) || ((SOURCE) == TIM_TRGO2_OC4REF_RISING_OC6REF_FALLING) || ((SOURCE) == TIM_TRGO2_OC5REF_RISING_OC6REF_RISING) || ((SOURCE) == TIM_TRGO2_OC5REF_RISING_OC6REF_FALLING))
# 732 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SLAVEMODE_DISABLE) || ((MODE) == TIM_SLAVEMODE_RESET) || ((MODE) == TIM_SLAVEMODE_GATED) || ((MODE) == TIM_SLAVEMODE_TRIGGER) || ((MODE) == TIM_SLAVEMODE_EXTERNAL1) || ((MODE) == TIM_SLAVEMODE_COMBINED_RESETTRIGGER))






#define IS_TIM_EVENT_SOURCE(SOURCE) ((((SOURCE) & 0xFFFFFE00U) == 0x00000000U) && ((SOURCE) != 0x00000000U))

#define IS_TIM_DMA_BASE(BASE) (((BASE) == TIM_DMABASE_CR1) || ((BASE) == TIM_DMABASE_CR2) || ((BASE) == TIM_DMABASE_SMCR) || ((BASE) == TIM_DMABASE_DIER) || ((BASE) == TIM_DMABASE_SR) || ((BASE) == TIM_DMABASE_EGR) || ((BASE) == TIM_DMABASE_CCMR1) || ((BASE) == TIM_DMABASE_CCMR2) || ((BASE) == TIM_DMABASE_CCER) || ((BASE) == TIM_DMABASE_CNT) || ((BASE) == TIM_DMABASE_PSC) || ((BASE) == TIM_DMABASE_ARR) || ((BASE) == TIM_DMABASE_RCR) || ((BASE) == TIM_DMABASE_CCR1) || ((BASE) == TIM_DMABASE_CCR2) || ((BASE) == TIM_DMABASE_CCR3) || ((BASE) == TIM_DMABASE_CCR4) || ((BASE) == TIM_DMABASE_BDTR) || ((BASE) == TIM_DMABASE_CCMR3) || ((BASE) == TIM_DMABASE_CCR5) || ((BASE) == TIM_DMABASE_CCR6) || ((BASE) == TIM_DMABASE_OR))
# 808 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_REMAP(REMAP1) (((REMAP1) == TIM_TIM1_ADC1_NONE) || ((REMAP1) == TIM_TIM1_ADC1_AWD1) || ((REMAP1) == TIM_TIM1_ADC1_AWD2) || ((REMAP1) == TIM_TIM1_ADC1_AWD3) || ((REMAP1) == TIM_TIM8_ADC2_NONE) || ((REMAP1) == TIM_TIM8_ADC2_AWD1) || ((REMAP1) == TIM_TIM8_ADC2_AWD2) || ((REMAP1) == TIM_TIM8_ADC2_AWD3) || ((REMAP1) == TIM_TIM16_GPIO) || ((REMAP1) == TIM_TIM16_RTC) || ((REMAP1) == TIM_TIM16_HSE) || ((REMAP1) == TIM_TIM16_MCO))
# 821 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_REMAP2(REMAP2) (((REMAP2) == TIM_TIM1_ADC4_NONE) || ((REMAP2) == TIM_TIM1_ADC4_AWD1) || ((REMAP2) == TIM_TIM1_ADC4_AWD2) || ((REMAP2) == TIM_TIM1_ADC4_AWD3) || ((REMAP2) == TIM_TIM8_ADC3_NONE) || ((REMAP2) == TIM_TIM8_ADC3_AWD1) || ((REMAP2) == TIM_TIM8_ADC3_AWD2) || ((REMAP2) == TIM_TIM8_ADC3_AWD3) || ((REMAP2) == TIM_TIM16_NONE))
# 887 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define IS_TIM_GROUPCH5(OCREF) ((((OCREF) & 0x1FFFFFFFU) == 0x00000000U))






#define IS_TIM_DEADTIME(DEADTIME) ((DEADTIME) <= 0xFFU)
# 993 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define __HAL_TIM_SET_COMPARE(__HANDLE__,__CHANNEL__,__COMPARE__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCR1 = (__COMPARE__)) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCR2 = (__COMPARE__)) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCR3 = (__COMPARE__)) : ((__CHANNEL__) == TIM_CHANNEL_4) ? ((__HANDLE__)->Instance->CCR4 = (__COMPARE__)) : ((__CHANNEL__) == TIM_CHANNEL_5) ? ((__HANDLE__)->Instance->CCR5 = (__COMPARE__)) : ((__HANDLE__)->Instance->CCR6 = (__COMPARE__)))
# 1014 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define __HAL_TIM_GET_COMPARE(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCR1) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCR2) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCR3) : ((__CHANNEL__) == TIM_CHANNEL_4) ? ((__HANDLE__)->Instance->CCR4) : ((__CHANNEL__) == TIM_CHANNEL_5) ? ((__HANDLE__)->Instance->CCR5) : ((__HANDLE__)->Instance->CCR6))
# 1035 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define __HAL_TIM_ENABLE_OCxPRELOAD(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC1PE) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC2PE) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC3PE) : ((__CHANNEL__) == TIM_CHANNEL_4) ? ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC4PE) : ((__CHANNEL__) == TIM_CHANNEL_5) ? ((__HANDLE__)->Instance->CCMR3 |= TIM_CCMR3_OC5PE) : ((__HANDLE__)->Instance->CCMR3 |= TIM_CCMR3_OC6PE))
# 1056 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
#define __HAL_TIM_DISABLE_OCxPRELOAD(__HANDLE__,__CHANNEL__) (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC1PE) : ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC2PE) : ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC3PE) : ((__CHANNEL__) == TIM_CHANNEL_4) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC4PE) : ((__CHANNEL__) == TIM_CHANNEL_5) ? ((__HANDLE__)->Instance->CCMR3 &= (uint16_t)~TIM_CCMR3_OC5PE) : ((__HANDLE__)->Instance->CCMR3 &= (uint16_t)~TIM_CCMR3_OC6PE))
# 1081 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim);

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim);


HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim);
# 1105 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1124 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1142 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);


HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 1156 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig);
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig);



HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap1, uint32_t Remap2);
# 1184 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t Channels);
# 1197 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim);
# 1208 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim);
# 1222 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma);
# 1384 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h" 2
# 1394 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);
# 1415 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1437 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1458 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1479 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 1497 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, TIM_Encoder_InitTypeDef* sConfig);
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1519 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);
# 1528 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel, uint32_t InputChannel);
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig);
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                                   uint32_t *BurstBuffer, uint32_t BurstLength, uint32_t DataLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                                  uint32_t *BurstBuffer, uint32_t BurstLength, uint32_t DataLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);
# 1558 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
# 1572 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);
# 1592 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure);
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter);
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma);
void TIM_DMAError(DMA_HandleTypeDef *hdma);
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma);
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState);
# 293 "./src/main/target/stm32f3xx_hal_conf.h" 2







# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __STM32F3xx_HAL_UART_H 
# 63 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
typedef struct
{
  uint32_t BaudRate;
# 74 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t HwFlowCtl;



  uint32_t OverSampling;


  uint32_t OneBitSampling;


}UART_InitTypeDef;




typedef struct
{
  uint32_t AdvFeatureInit;



  uint32_t TxPinLevelInvert;


  uint32_t RxPinLevelInvert;


  uint32_t DataInvert;



  uint32_t Swap;


  uint32_t OverrunDisable;


  uint32_t DMADisableonRxError;


  uint32_t AutoBaudRateEnable;


  uint32_t AutoBaudRateMode;



  uint32_t MSBFirst;

} UART_AdvFeatureInitTypeDef;




typedef struct
{
  uint32_t WakeUpEvent;




  uint16_t AddressLength;


  uint8_t Address;
} UART_WakeUpTypeDef;
# 196 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
typedef enum
{
  HAL_UART_STATE_RESET = 0x00U,

  HAL_UART_STATE_READY = 0x20U,

  HAL_UART_STATE_BUSY = 0x24U,

  HAL_UART_STATE_BUSY_TX = 0x21U,

  HAL_UART_STATE_BUSY_RX = 0x22U,

  HAL_UART_STATE_BUSY_TX_RX = 0x23U,


  HAL_UART_STATE_TIMEOUT = 0xA0U,

  HAL_UART_STATE_ERROR = 0xE0U

}HAL_UART_StateTypeDef;




typedef enum
{
  UART_CLOCKSOURCE_PCLK1 = 0x00U,
  UART_CLOCKSOURCE_PCLK2 = 0x01U,
  UART_CLOCKSOURCE_HSI = 0x02U,
  UART_CLOCKSOURCE_SYSCLK = 0x04U,
  UART_CLOCKSOURCE_LSE = 0x08U,
  UART_CLOCKSOURCE_UNDEFINED = 0x10U
}UART_ClockSourceTypeDef;




typedef struct
{
  USART_TypeDef *Instance;

  UART_InitTypeDef Init;

  UART_AdvFeatureInitTypeDef AdvancedInit;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_UART_StateTypeDef gState;



  volatile HAL_UART_StateTypeDef RxState;


  volatile uint32_t ErrorCode;

}UART_HandleTypeDef;
# 284 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define HAL_UART_ERROR_NONE (0x00000000U)
#define HAL_UART_ERROR_PE (0x00000001U)
#define HAL_UART_ERROR_NE (0x00000002U)
#define HAL_UART_ERROR_FE (0x00000004U)
#define HAL_UART_ERROR_ORE (0x00000008U)
#define HAL_UART_ERROR_DMA (0x00000010U)
#define HAL_UART_ERROR_BUSY (0x00000020U)







#define UART_STOPBITS_0_5 USART_CR2_STOP_0
#define UART_STOPBITS_1 (0x00000000U)
#define UART_STOPBITS_1_5 ((uint32_t)(USART_CR2_STOP_0 | USART_CR2_STOP_1))
#define UART_STOPBITS_2 ((uint32_t)USART_CR2_STOP_1)







#define UART_PARITY_NONE (0x00000000U)
#define UART_PARITY_EVEN ((uint32_t)USART_CR1_PCE)
#define UART_PARITY_ODD ((uint32_t)(USART_CR1_PCE | USART_CR1_PS))







#define UART_HWCONTROL_NONE (0x00000000U)
#define UART_HWCONTROL_RTS ((uint32_t)USART_CR3_RTSE)
#define UART_HWCONTROL_CTS ((uint32_t)USART_CR3_CTSE)
#define UART_HWCONTROL_RTS_CTS ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))







#define UART_MODE_RX ((uint32_t)USART_CR1_RE)
#define UART_MODE_TX ((uint32_t)USART_CR1_TE)
#define UART_MODE_TX_RX ((uint32_t)(USART_CR1_TE |USART_CR1_RE))







#define UART_STATE_DISABLE (0x00000000U)
#define UART_STATE_ENABLE ((uint32_t)USART_CR1_UE)







#define UART_OVERSAMPLING_16 (0x00000000U)
#define UART_OVERSAMPLING_8 ((uint32_t)USART_CR1_OVER8)







#define UART_ONE_BIT_SAMPLE_DISABLE (0x00000000U)
#define UART_ONE_BIT_SAMPLE_ENABLE ((uint32_t)USART_CR3_ONEBIT)







#define UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT (0x00000000U)
#define UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE ((uint32_t)USART_CR2_ABRMODE_0)
#define UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME ((uint32_t)USART_CR2_ABRMODE_1)
#define UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME ((uint32_t)USART_CR2_ABRMODE)







#define UART_RECEIVER_TIMEOUT_DISABLE (0x00000000U)
#define UART_RECEIVER_TIMEOUT_ENABLE ((uint32_t)USART_CR2_RTOEN)







#define UART_LIN_DISABLE (0x00000000U)
#define UART_LIN_ENABLE ((uint32_t)USART_CR2_LINEN)







#define UART_LINBREAKDETECTLENGTH_10B (0x00000000U)
#define UART_LINBREAKDETECTLENGTH_11B ((uint32_t)USART_CR2_LBDL)







#define UART_DMA_TX_DISABLE (0x00000000U)
#define UART_DMA_TX_ENABLE ((uint32_t)USART_CR3_DMAT)







#define UART_DMA_RX_DISABLE (0x00000000U)
#define UART_DMA_RX_ENABLE ((uint32_t)USART_CR3_DMAR)







#define UART_HALF_DUPLEX_DISABLE (0x00000000U)
#define UART_HALF_DUPLEX_ENABLE ((uint32_t)USART_CR3_HDSEL)







#define UART_ADDRESS_DETECT_4B (0x00000000U)
#define UART_ADDRESS_DETECT_7B ((uint32_t)USART_CR2_ADDM7)







#define UART_WAKEUPMETHOD_IDLELINE (0x00000000U)
#define UART_WAKEUPMETHOD_ADDRESSMARK ((uint32_t)USART_CR1_WAKE)
# 452 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define UART_FLAG_REACK (0x00400000U)
#define UART_FLAG_TEACK (0x00200000U)
#define UART_FLAG_WUF (0x00100000U)
#define UART_FLAG_RWU (0x00080000U)
#define UART_FLAG_SBKF (0x00040000U)
#define UART_FLAG_CMF (0x00020000U)
#define UART_FLAG_BUSY (0x00010000U)
#define UART_FLAG_ABRF (0x00008000U)
#define UART_FLAG_ABRE (0x00004000U)
#define UART_FLAG_EOBF (0x00001000U)
#define UART_FLAG_RTOF (0x00000800U)
#define UART_FLAG_CTS (0x00000400U)
#define UART_FLAG_CTSIF (0x00000200U)
#define UART_FLAG_LBDF (0x00000100U)
#define UART_FLAG_TXE (0x00000080U)
#define UART_FLAG_TC (0x00000040U)
#define UART_FLAG_RXNE (0x00000020U)
#define UART_FLAG_IDLE (0x00000010U)
#define UART_FLAG_ORE (0x00000008U)
#define UART_FLAG_NE (0x00000004U)
#define UART_FLAG_FE (0x00000002U)
#define UART_FLAG_PE (0x00000001U)
# 488 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define UART_IT_PE (0x0028U)
#define UART_IT_TXE (0x0727U)
#define UART_IT_TC (0x0626U)
#define UART_IT_RXNE (0x0525U)
#define UART_IT_IDLE (0x0424U)
#define UART_IT_LBD (0x0846U)
#define UART_IT_CTS (0x096AU)
#define UART_IT_CM (0x112EU)
#define UART_IT_WUF (0x1476U)
#define UART_IT_ERR (0x0060U)
#define UART_IT_ORE (0x0300U)
#define UART_IT_NE (0x0200U)
#define UART_IT_FE (0x0100U)







#define UART_CLEAR_PEF USART_ICR_PECF
#define UART_CLEAR_FEF USART_ICR_FECF
#define UART_CLEAR_NEF USART_ICR_NCF
#define UART_CLEAR_OREF USART_ICR_ORECF
#define UART_CLEAR_IDLEF USART_ICR_IDLECF
#define UART_CLEAR_TCF USART_ICR_TCCF
#define UART_CLEAR_LBDF USART_ICR_LBDCF
#define UART_CLEAR_CTSF USART_ICR_CTSCF
#define UART_CLEAR_RTOF USART_ICR_RTOCF
#define UART_CLEAR_EOBF USART_ICR_EOBCF
#define UART_CLEAR_CMF USART_ICR_CMCF
#define UART_CLEAR_WUF USART_ICR_WUCF







#define UART_AUTOBAUD_REQUEST ((uint32_t)USART_RQR_ABRRQ)
#define UART_SENDBREAK_REQUEST ((uint32_t)USART_RQR_SBKRQ)
#define UART_MUTE_MODE_REQUEST ((uint32_t)USART_RQR_MMRQ)
#define UART_RXDATA_FLUSH_REQUEST ((uint32_t)USART_RQR_RXFRQ)
#define UART_TXDATA_FLUSH_REQUEST ((uint32_t)USART_RQR_TXFRQ)







#define UART_ADVFEATURE_NO_INIT (0x00000000U)
#define UART_ADVFEATURE_TXINVERT_INIT (0x00000001U)
#define UART_ADVFEATURE_RXINVERT_INIT (0x00000002U)
#define UART_ADVFEATURE_DATAINVERT_INIT (0x00000004U)
#define UART_ADVFEATURE_SWAP_INIT (0x00000008U)
#define UART_ADVFEATURE_RXOVERRUNDISABLE_INIT (0x00000010U)
#define UART_ADVFEATURE_DMADISABLEONERROR_INIT (0x00000020U)
#define UART_ADVFEATURE_AUTOBAUDRATE_INIT (0x00000040U)
#define UART_ADVFEATURE_MSBFIRST_INIT (0x00000080U)







#define UART_ADVFEATURE_TXINV_DISABLE (0x00000000U)
#define UART_ADVFEATURE_TXINV_ENABLE ((uint32_t)USART_CR2_TXINV)







#define UART_ADVFEATURE_RXINV_DISABLE (0x00000000U)
#define UART_ADVFEATURE_RXINV_ENABLE ((uint32_t)USART_CR2_RXINV)







#define UART_ADVFEATURE_DATAINV_DISABLE (0x00000000U)
#define UART_ADVFEATURE_DATAINV_ENABLE ((uint32_t)USART_CR2_DATAINV)







#define UART_ADVFEATURE_SWAP_DISABLE (0x00000000U)
#define UART_ADVFEATURE_SWAP_ENABLE ((uint32_t)USART_CR2_SWAP)







#define UART_ADVFEATURE_OVERRUN_ENABLE (0x00000000U)
#define UART_ADVFEATURE_OVERRUN_DISABLE ((uint32_t)USART_CR3_OVRDIS)







#define UART_ADVFEATURE_AUTOBAUDRATE_DISABLE (0x00000000U)
#define UART_ADVFEATURE_AUTOBAUDRATE_ENABLE ((uint32_t)USART_CR2_ABREN)







#define UART_ADVFEATURE_DMA_ENABLEONRXERROR (0x00000000U)
#define UART_ADVFEATURE_DMA_DISABLEONRXERROR ((uint32_t)USART_CR3_DDRE)







#define UART_ADVFEATURE_MSBFIRST_DISABLE (0x00000000U)
#define UART_ADVFEATURE_MSBFIRST_ENABLE ((uint32_t)USART_CR2_MSBFIRST)







#define UART_ADVFEATURE_STOPMODE_DISABLE (0x00000000U)
#define UART_ADVFEATURE_STOPMODE_ENABLE ((uint32_t)USART_CR1_UESM)







#define UART_ADVFEATURE_MUTEMODE_DISABLE (0x00000000U)
#define UART_ADVFEATURE_MUTEMODE_ENABLE ((uint32_t)USART_CR1_MME)







#define UART_CR2_ADDRESS_LSB_POS ( 24U)







#define UART_WAKEUP_ON_ADDRESS (0x00000000U)
#define UART_WAKEUP_ON_STARTBIT ((uint32_t)USART_CR3_WUS_1)
#define UART_WAKEUP_ON_READDATA_NONEMPTY ((uint32_t)USART_CR3_WUS)







#define UART_DE_POLARITY_HIGH (0x00000000U)
#define UART_DE_POLARITY_LOW ((uint32_t)USART_CR3_DEP)







#define UART_CR1_DEAT_ADDRESS_LSB_POS ( 21U)







#define UART_CR1_DEDT_ADDRESS_LSB_POS ( 16U)







#define UART_IT_MASK (0x001FU)







#define HAL_UART_TIMEOUT_VALUE 0x1FFFFFF
# 714 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_RESET_HANDLE_STATE(__HANDLE__) do{ (__HANDLE__)->gState = HAL_UART_STATE_RESET; (__HANDLE__)->RxState = HAL_UART_STATE_RESET; } while(0U)







#define __HAL_UART_FLUSH_DRREGISTER(__HANDLE__) do{ SET_BIT((__HANDLE__)->Instance->RQR, UART_RXDATA_FLUSH_REQUEST); SET_BIT((__HANDLE__)->Instance->RQR, UART_TXDATA_FLUSH_REQUEST); } while(0U)
# 746 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_CLEAR_FLAG(__HANDLE__,__FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))





#define __HAL_UART_CLEAR_PEFLAG(__HANDLE__) __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_PEF)





#define __HAL_UART_CLEAR_FEFLAG(__HANDLE__) __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_FEF)





#define __HAL_UART_CLEAR_NEFLAG(__HANDLE__) __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_NEF)





#define __HAL_UART_CLEAR_OREFLAG(__HANDLE__) __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_OREF)





#define __HAL_UART_CLEAR_IDLEFLAG(__HANDLE__) __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_IDLEF)
# 805 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_GET_FLAG(__HANDLE__,__FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# 823 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_ENABLE_IT(__HANDLE__,__INTERRUPT__) (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): ((__HANDLE__)->Instance->CR3 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))))
# 844 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_DISABLE_IT(__HANDLE__,__INTERRUPT__) (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): ((__HANDLE__)->Instance->CR3 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))))
# 866 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_GET_IT(__HANDLE__,__IT__) ((__HANDLE__)->Instance->ISR & (1U << ((__IT__)>> 0x08U)))
# 884 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_GET_IT_SOURCE(__HANDLE__,__IT__) ((((((uint8_t)(__IT__)) >> 5U) == 1U)? (__HANDLE__)->Instance->CR1:(((((uint8_t)(__IT__)) >> 5U) == 2U)? (__HANDLE__)->Instance->CR2 : (__HANDLE__)->Instance->CR3)) & (1U << (((uint16_t)(__IT__)) & UART_IT_MASK)))
# 906 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_CLEAR_IT(__HANDLE__,__IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
# 919 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_SEND_REQ(__HANDLE__,__REQ__) ((__HANDLE__)->Instance->RQR |= (uint32_t)(__REQ__))





#define __HAL_UART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)





#define __HAL_UART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT))





#define __HAL_UART_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1 |= USART_CR1_UE)





#define __HAL_UART_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1 &= ~USART_CR1_UE)
# 957 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_HWCONTROL_CTS_ENABLE(__HANDLE__) do{ SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_CTSE; } while(0U)
# 975 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_HWCONTROL_CTS_DISABLE(__HANDLE__) do{ CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_CTSE); } while(0U)
# 993 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_HWCONTROL_RTS_ENABLE(__HANDLE__) do{ SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_RTSE; } while(0U)
# 1011 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define __HAL_UART_HWCONTROL_RTS_DISABLE(__HANDLE__) do{ CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_RTSE); } while(0U)
# 1030 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define UART_DIV_SAMPLING8(__PCLK__,__BAUD__) ((((__PCLK__)*2U) + ((__BAUD__)/2U)) / (__BAUD__))






#define UART_DIV_SAMPLING16(__PCLK__,__BAUD__) (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))







#define IS_UART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 9000001U)





#define IS_UART_ASSERTIONTIME(__TIME__) ((__TIME__) <= 0x1FU)





#define IS_UART_DEASSERTIONTIME(__TIME__) ((__TIME__) <= 0x1FU)






#define IS_UART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_0_5) || ((__STOPBITS__) == UART_STOPBITS_1) || ((__STOPBITS__) == UART_STOPBITS_1_5) || ((__STOPBITS__) == UART_STOPBITS_2))
# 1074 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_PARITY(__PARITY__) (((__PARITY__) == UART_PARITY_NONE) || ((__PARITY__) == UART_PARITY_EVEN) || ((__PARITY__) == UART_PARITY_ODD))
# 1083 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_HARDWARE_FLOW_CONTROL(__CONTROL__) (((__CONTROL__) == UART_HWCONTROL_NONE) || ((__CONTROL__) == UART_HWCONTROL_RTS) || ((__CONTROL__) == UART_HWCONTROL_CTS) || ((__CONTROL__) == UART_HWCONTROL_RTS_CTS))
# 1094 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_MODE(__MODE__) ((((__MODE__) & (~((uint32_t)(UART_MODE_TX_RX)))) == 0x00U) && ((__MODE__) != 0x00U))






#define IS_UART_STATE(__STATE__) (((__STATE__) == UART_STATE_DISABLE) || ((__STATE__) == UART_STATE_ENABLE))







#define IS_UART_OVERSAMPLING(__SAMPLING__) (((__SAMPLING__) == UART_OVERSAMPLING_16) || ((__SAMPLING__) == UART_OVERSAMPLING_8))







#define IS_UART_ONE_BIT_SAMPLE(__ONEBIT__) (((__ONEBIT__) == UART_ONE_BIT_SAMPLE_DISABLE) || ((__ONEBIT__) == UART_ONE_BIT_SAMPLE_ENABLE))







#define IS_UART_ADDRESSLENGTH_DETECT(__ADDRESS__) (((__ADDRESS__) == UART_ADDRESS_DETECT_4B) || ((__ADDRESS__) == UART_ADDRESS_DETECT_7B))







#define IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(__MODE__) (((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT) || ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE) || ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME) || ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME))
# 1143 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_RECEIVER_TIMEOUT(__TIMEOUT__) (((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_DISABLE) || ((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_ENABLE))







#define IS_UART_LIN(__LIN__) (((__LIN__) == UART_LIN_DISABLE) || ((__LIN__) == UART_LIN_ENABLE))







#define IS_UART_LIN_BREAK_DETECT_LENGTH(__LENGTH__) (((__LENGTH__) == UART_LINBREAKDETECTLENGTH_10B) || ((__LENGTH__) == UART_LINBREAKDETECTLENGTH_11B))







#define IS_UART_DMA_TX(__DMATX__) (((__DMATX__) == UART_DMA_TX_DISABLE) || ((__DMATX__) == UART_DMA_TX_ENABLE))







#define IS_UART_DMA_RX(__DMARX__) (((__DMARX__) == UART_DMA_RX_DISABLE) || ((__DMARX__) == UART_DMA_RX_ENABLE))







#define IS_UART_HALF_DUPLEX(__HDSEL__) (((__HDSEL__) == UART_HALF_DUPLEX_DISABLE) || ((__HDSEL__) == UART_HALF_DUPLEX_ENABLE))







#define IS_UART_WAKEUPMETHOD(__WAKEUP__) (((__WAKEUP__) == UART_WAKEUPMETHOD_IDLELINE) || ((__WAKEUP__) == UART_WAKEUPMETHOD_ADDRESSMARK))







#define IS_UART_ADVFEATURE_INIT(__INIT__) ((__INIT__) <= (UART_ADVFEATURE_NO_INIT | UART_ADVFEATURE_TXINVERT_INIT | UART_ADVFEATURE_RXINVERT_INIT | UART_ADVFEATURE_DATAINVERT_INIT | UART_ADVFEATURE_SWAP_INIT | UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT | UART_ADVFEATURE_AUTOBAUDRATE_INIT | UART_ADVFEATURE_MSBFIRST_INIT))
# 1214 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_ADVFEATURE_TXINV(__TXINV__) (((__TXINV__) == UART_ADVFEATURE_TXINV_DISABLE) || ((__TXINV__) == UART_ADVFEATURE_TXINV_ENABLE))







#define IS_UART_ADVFEATURE_RXINV(__RXINV__) (((__RXINV__) == UART_ADVFEATURE_RXINV_DISABLE) || ((__RXINV__) == UART_ADVFEATURE_RXINV_ENABLE))







#define IS_UART_ADVFEATURE_DATAINV(__DATAINV__) (((__DATAINV__) == UART_ADVFEATURE_DATAINV_DISABLE) || ((__DATAINV__) == UART_ADVFEATURE_DATAINV_ENABLE))







#define IS_UART_ADVFEATURE_SWAP(__SWAP__) (((__SWAP__) == UART_ADVFEATURE_SWAP_DISABLE) || ((__SWAP__) == UART_ADVFEATURE_SWAP_ENABLE))







#define IS_UART_OVERRUN(__OVERRUN__) (((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_ENABLE) || ((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_DISABLE))







#define IS_UART_ADVFEATURE_AUTOBAUDRATE(__AUTOBAUDRATE__) (((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_DISABLE) || ((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE))







#define IS_UART_ADVFEATURE_DMAONRXERROR(__DMA__) (((__DMA__) == UART_ADVFEATURE_DMA_ENABLEONRXERROR) || ((__DMA__) == UART_ADVFEATURE_DMA_DISABLEONRXERROR))







#define IS_UART_ADVFEATURE_MSBFIRST(__MSBFIRST__) (((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_DISABLE) || ((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_ENABLE))







#define IS_UART_ADVFEATURE_STOPMODE(__STOPMODE__) (((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_DISABLE) || ((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_ENABLE))







#define IS_UART_MUTE_MODE(__MUTE__) (((__MUTE__) == UART_ADVFEATURE_MUTEMODE_DISABLE) || ((__MUTE__) == UART_ADVFEATURE_MUTEMODE_ENABLE))







#define IS_UART_WAKEUP_SELECTION(__WAKE__) (((__WAKE__) == UART_WAKEUP_ON_ADDRESS) || ((__WAKE__) == UART_WAKEUP_ON_STARTBIT) || ((__WAKE__) == UART_WAKEUP_ON_READDATA_NONEMPTY))
# 1303 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
#define IS_UART_DE_POLARITY(__POLARITY__) (((__POLARITY__) == UART_DE_POLARITY_HIGH) || ((__POLARITY__) == UART_DE_POLARITY_LOW))







#define IS_UART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == UART_AUTOBAUD_REQUEST) || ((__PARAM__) == UART_SENDBREAK_REQUEST) || ((__PARAM__) == UART_MUTE_MODE_REQUEST) || ((__PARAM__) == UART_RXDATA_FLUSH_REQUEST) || ((__PARAM__) == UART_TXDATA_FLUSH_REQUEST))
# 1322 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
#define __STM32F3xx_HAL_UART_EX_H 
# 71 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
#define UART_WORDLENGTH_8B (0x00000000U)
#define UART_WORDLENGTH_9B ((uint32_t)USART_CR1_M)
# 95 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime);
# 108 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength);
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart);
# 134 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
#define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__) do { if((__HANDLE__)->Instance == USART1) { switch(__HAL_RCC_GET_USART1_SOURCE()) { case RCC_USART1CLKSOURCE_PCLK2: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2; break; case RCC_USART1CLKSOURCE_HSI: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI; break; case RCC_USART1CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK; break; case RCC_USART1CLKSOURCE_LSE: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; break; } } else if((__HANDLE__)->Instance == USART2) { switch(__HAL_RCC_GET_USART2_SOURCE()) { case RCC_USART2CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1; break; case RCC_USART2CLKSOURCE_HSI: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI; break; case RCC_USART2CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK; break; case RCC_USART2CLKSOURCE_LSE: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; break; } } else if((__HANDLE__)->Instance == USART3) { switch(__HAL_RCC_GET_USART3_SOURCE()) { case RCC_USART3CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1; break; case RCC_USART3CLKSOURCE_HSI: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI; break; case RCC_USART3CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK; break; case RCC_USART3CLKSOURCE_LSE: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; break; } } else if((__HANDLE__)->Instance == UART4) { switch(__HAL_RCC_GET_UART4_SOURCE()) { case RCC_UART4CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1; break; case RCC_UART4CLKSOURCE_HSI: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI; break; case RCC_UART4CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK; break; case RCC_UART4CLKSOURCE_LSE: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; break; } } else if ((__HANDLE__)->Instance == UART5) { switch(__HAL_RCC_GET_UART5_SOURCE()) { case RCC_UART5CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1; break; case RCC_UART5CLKSOURCE_HSI: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI; break; case RCC_UART5CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK; break; case RCC_UART5CLKSOURCE_LSE: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; break; } } else { (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED; } } while(0U)
# 408 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
#define UART_MASK_COMPUTATION(__HANDLE__) do { if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_9B) { if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE) { (__HANDLE__)->Mask = 0x01FFU ; } else { (__HANDLE__)->Mask = 0x00FFU ; } } else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_8B) { if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE) { (__HANDLE__)->Mask = 0x00FFU ; } else { (__HANDLE__)->Mask = 0x007FU ; } } } while(0U)
# 449 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart_ex.h"
#define IS_UART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == UART_WORDLENGTH_8B) || ((__LENGTH__) == UART_WORDLENGTH_9B))
# 1323 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h" 2
# 1334 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength);
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod);
HAL_StatusTypeDef HAL_UART_DeInit (UART_HandleTypeDef *huart);
void HAL_UART_MspInit(UART_HandleTypeDef *huart);
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart);
# 1351 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart);

HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart);

void HAL_UART_IRQHandler(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart);
void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart);
void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart);
# 1387 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart);
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart);
# 1403 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart);
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart);
# 1418 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout);
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
void UART_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);
# 301 "./src/main/target/stm32f3xx_hal_conf.h" 2



# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __STM32F3xx_HAL_USART_H 
# 63 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
typedef struct
{
  uint32_t BaudRate;



  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t CLKLastBit;


}USART_InitTypeDef;




typedef enum
{
  HAL_USART_STATE_RESET = 0x00U,
  HAL_USART_STATE_READY = 0x01U,
  HAL_USART_STATE_BUSY = 0x02U,
  HAL_USART_STATE_BUSY_TX = 0x12U,
  HAL_USART_STATE_BUSY_RX = 0x22U,
  HAL_USART_STATE_BUSY_TX_RX = 0x32U,
  HAL_USART_STATE_TIMEOUT = 0x03U,
  HAL_USART_STATE_ERROR = 0x04U
}HAL_USART_StateTypeDef;




typedef enum
{
  USART_CLOCKSOURCE_PCLK1 = 0x00U,
  USART_CLOCKSOURCE_PCLK2 = 0x01U,
  USART_CLOCKSOURCE_HSI = 0x02U,
  USART_CLOCKSOURCE_SYSCLK = 0x04U,
  USART_CLOCKSOURCE_LSE = 0x08U,
  USART_CLOCKSOURCE_UNDEFINED = 0x10U
}USART_ClockSourceTypeDef;





typedef struct
{
  USART_TypeDef *Instance;

  USART_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_USART_StateTypeDef State;

  volatile uint32_t ErrorCode;

}USART_HandleTypeDef;
# 172 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define HAL_USART_ERROR_NONE (0x00000000U)
#define HAL_USART_ERROR_PE (0x00000001U)
#define HAL_USART_ERROR_NE (0x00000002U)
#define HAL_USART_ERROR_FE (0x00000004U)
#define HAL_USART_ERROR_ORE (0x00000008U)
#define HAL_USART_ERROR_DMA (0x00000010U)







#define USART_STOPBITS_0_5 ((uint32_t)USART_CR2_STOP_0)
#define USART_STOPBITS_1 (0x00000000U)
#define USART_STOPBITS_1_5 ((uint32_t)(USART_CR2_STOP_0 | USART_CR2_STOP_1))
#define USART_STOPBITS_2 ((uint32_t)USART_CR2_STOP_1)







#define USART_PARITY_NONE (0x00000000U)
#define USART_PARITY_EVEN ((uint32_t)USART_CR1_PCE)
#define USART_PARITY_ODD ((uint32_t)(USART_CR1_PCE | USART_CR1_PS))







#define USART_MODE_RX ((uint32_t)USART_CR1_RE)
#define USART_MODE_TX ((uint32_t)USART_CR1_TE)
#define USART_MODE_TX_RX ((uint32_t)(USART_CR1_TE |USART_CR1_RE))







#define USART_CLOCK_DISABLE (0x00000000U)
#define USART_CLOCK_ENABLE ((uint32_t)USART_CR2_CLKEN)







#define USART_POLARITY_LOW (0x00000000U)
#define USART_POLARITY_HIGH ((uint32_t)USART_CR2_CPOL)







#define USART_PHASE_1EDGE (0x00000000U)
#define USART_PHASE_2EDGE ((uint32_t)USART_CR2_CPHA)







#define USART_LASTBIT_DISABLE (0x00000000U)
#define USART_LASTBIT_ENABLE ((uint32_t)USART_CR2_LBCL)







#define USART_RXDATA_FLUSH_REQUEST ((uint32_t)USART_RQR_RXFRQ)
#define USART_TXDATA_FLUSH_REQUEST ((uint32_t)USART_RQR_TXFRQ)
# 263 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define USART_FLAG_REACK (0x00400000U)
#define USART_FLAG_TEACK (0x00200000U)
#define USART_FLAG_BUSY (0x00010000U)
#define USART_FLAG_CTS (0x00000400U)
#define USART_FLAG_CTSIF (0x00000200U)
#define USART_FLAG_LBDF (0x00000100U)
#define USART_FLAG_TXE (0x00000080U)
#define USART_FLAG_TC (0x00000040U)
#define USART_FLAG_RXNE (0x00000020U)
#define USART_FLAG_IDLE (0x00000010U)
#define USART_FLAG_ORE (0x00000008U)
#define USART_FLAG_NE (0x00000004U)
#define USART_FLAG_FE (0x00000002U)
#define USART_FLAG_PE (0x00000001U)
# 292 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define USART_IT_PE ((uint16_t)0x0028U)
#define USART_IT_TXE ((uint16_t)0x0727U)
#define USART_IT_TC ((uint16_t)0x0626U)
#define USART_IT_RXNE ((uint16_t)0x0525U)
#define USART_IT_IDLE ((uint16_t)0x0424U)
#define USART_IT_ERR ((uint16_t)0x0060U)
#define USART_IT_ORE ((uint16_t)0x0300U)
#define USART_IT_NE ((uint16_t)0x0200U)
#define USART_IT_FE ((uint16_t)0x0100U)







#define USART_CLEAR_PEF USART_ICR_PECF
#define USART_CLEAR_FEF USART_ICR_FECF
#define USART_CLEAR_NEF USART_ICR_NCF
#define USART_CLEAR_OREF USART_ICR_ORECF
#define USART_CLEAR_IDLEF USART_ICR_IDLECF
#define USART_CLEAR_TCF USART_ICR_TCCF
#define USART_CLEAR_CTSF USART_ICR_CTSCF







#define USART_IT_MASK ((uint16_t)0x001FU)
# 340 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_USART_STATE_RESET)





#define __HAL_USART_FLUSH_DRREGISTER(__HANDLE__) do{ SET_BIT((__HANDLE__)->Instance->RQR, USART_RXDATA_FLUSH_REQUEST); SET_BIT((__HANDLE__)->Instance->RQR, USART_TXDATA_FLUSH_REQUEST); } while(0U)
# 370 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_GET_FLAG(__HANDLE__,__FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# 385 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_CLEAR_FLAG(__HANDLE__,__FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))





#define __HAL_USART_CLEAR_PEFLAG(__HANDLE__) __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_PEF)





#define __HAL_USART_CLEAR_FEFLAG(__HANDLE__) __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_FEF)





#define __HAL_USART_CLEAR_NEFLAG(__HANDLE__) __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_NEF)





#define __HAL_USART_CLEAR_OREFLAG(__HANDLE__) __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_OREF)





#define __HAL_USART_CLEAR_IDLEFLAG(__HANDLE__) __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_IDLEF)
# 429 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_ENABLE_IT(__HANDLE__,__INTERRUPT__) (((((__INTERRUPT__) & 0xFFU) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 |= (1U << ((__INTERRUPT__) & USART_IT_MASK))): ((((__INTERRUPT__) & 0xFFU) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 |= (1U << ((__INTERRUPT__) & USART_IT_MASK))): ((__HANDLE__)->Instance->CR3 |= (1U << ((__INTERRUPT__) & USART_IT_MASK))))
# 445 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_DISABLE_IT(__HANDLE__,__INTERRUPT__) (((((__INTERRUPT__) & 0xFFU) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ (1U << ((__INTERRUPT__) & USART_IT_MASK))): ((((__INTERRUPT__) & 0xFFU) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ (1U << ((__INTERRUPT__) & USART_IT_MASK))): ((__HANDLE__)->Instance->CR3 &= ~ (1U << ((__INTERRUPT__) & USART_IT_MASK))))
# 464 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_GET_IT(__HANDLE__,__IT__) ((__HANDLE__)->Instance->ISR & (1U << ((__IT__)>> 0x08U)))
# 480 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_GET_IT_SOURCE(__HANDLE__,__IT__) ((((((uint8_t)(__IT__)) >> 5U) == 1U)? (__HANDLE__)->Instance->CR1:(((((uint8_t)(__IT__)) >> 5U) == 2U)? (__HANDLE__)->Instance->CR2 : (__HANDLE__)->Instance->CR3)) & (1U << (((uint16_t)(__IT__)) & USART_IT_MASK)))
# 499 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_CLEAR_IT(__HANDLE__,__IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
# 510 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define __HAL_USART_SEND_REQ(__HANDLE__,__REQ__) ((__HANDLE__)->Instance->RQR |= (__REQ__))





#define __HAL_USART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)





#define __HAL_USART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT))





#define __HAL_USART_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1 |= USART_CR1_UE)





#define __HAL_USART_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR1 &= ~USART_CR1_UE)
# 551 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define IS_USART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 9000001U)






#define IS_USART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == USART_STOPBITS_0_5) || ((__STOPBITS__) == USART_STOPBITS_1) || ((__STOPBITS__) == USART_STOPBITS_1_5) || ((__STOPBITS__) == USART_STOPBITS_2))
# 568 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define IS_USART_PARITY(__PARITY__) (((__PARITY__) == USART_PARITY_NONE) || ((__PARITY__) == USART_PARITY_EVEN) || ((__PARITY__) == USART_PARITY_ODD))
# 577 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
#define IS_USART_MODE(__MODE__) ((((__MODE__) & 0xFFFFFFF3U) == 0x00U) && ((__MODE__) != 0x00U))






#define IS_USART_CLOCK(__CLOCK__) (((__CLOCK__) == USART_CLOCK_DISABLE) || ((__CLOCK__) == USART_CLOCK_ENABLE))







#define IS_USART_POLARITY(__CPOL__) (((__CPOL__) == USART_POLARITY_LOW) || ((__CPOL__) == USART_POLARITY_HIGH))






#define IS_USART_PHASE(__CPHA__) (((__CPHA__) == USART_PHASE_1EDGE) || ((__CPHA__) == USART_PHASE_2EDGE))






#define IS_USART_LASTBIT(__LASTBIT__) (((__LASTBIT__) == USART_LASTBIT_DISABLE) || ((__LASTBIT__) == USART_LASTBIT_ENABLE))







#define IS_USART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == USART_RXDATA_FLUSH_REQUEST) || ((__PARAM__) == USART_TXDATA_FLUSH_REQUEST))







# 1 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h" 1
# 38 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h"
#define __STM32F3xx_HAL_USART_EX_H 
# 71 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h"
#define USART_WORDLENGTH_8B (0x00000000U)
#define USART_WORDLENGTH_9B ((uint32_t)USART_CR1_M)
# 133 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h"
#define USART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__) do { if((__HANDLE__)->Instance == USART1) { switch(__HAL_RCC_GET_USART1_SOURCE()) { case RCC_USART1CLKSOURCE_PCLK2: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK2; break; case RCC_USART1CLKSOURCE_HSI: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI; break; case RCC_USART1CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK; break; case RCC_USART1CLKSOURCE_LSE: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED; break; } } else if((__HANDLE__)->Instance == USART2) { switch(__HAL_RCC_GET_USART2_SOURCE()) { case RCC_USART2CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1; break; case RCC_USART2CLKSOURCE_HSI: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI; break; case RCC_USART2CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK; break; case RCC_USART2CLKSOURCE_LSE: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED; break; } } else if((__HANDLE__)->Instance == USART3) { switch(__HAL_RCC_GET_USART3_SOURCE()) { case RCC_USART3CLKSOURCE_PCLK1: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1; break; case RCC_USART3CLKSOURCE_HSI: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI; break; case RCC_USART3CLKSOURCE_SYSCLK: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK; break; case RCC_USART3CLKSOURCE_LSE: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE; break; default: (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED; break; } } else { (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED; } } while(0U)
# 254 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h"
#define USART_MASK_COMPUTATION(__HANDLE__) do { if ((__HANDLE__)->Init.WordLength == USART_WORDLENGTH_9B) { if ((__HANDLE__)->Init.Parity == USART_PARITY_NONE) { (__HANDLE__)->Mask = 0x01FFU ; } else { (__HANDLE__)->Mask = 0x00FFU ; } } else if ((__HANDLE__)->Init.WordLength == USART_WORDLENGTH_8B) { if ((__HANDLE__)->Init.Parity == USART_PARITY_NONE) { (__HANDLE__)->Mask = 0x00FFU ; } else { (__HANDLE__)->Mask = 0x007FU ; } } } while(0U)
# 296 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart_ex.h"
#define IS_USART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == USART_WORDLENGTH_8B) || ((__LENGTH__) == USART_WORDLENGTH_9B))
# 623 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h" 2
# 634 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart);
void HAL_USART_MspInit(USART_HandleTypeDef *husart);
void HAL_USART_MspDeInit(USART_HandleTypeDef *husart);
# 648 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart);

HAL_StatusTypeDef HAL_USART_Abort(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_Abort_IT(USART_HandleTypeDef *husart);

void HAL_USART_IRQHandler(USART_HandleTypeDef *husart);
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart);
void HAL_USART_AbortCpltCallback (USART_HandleTypeDef *husart);
# 684 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_usart.h"
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart);
uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart);
# 305 "./src/main/target/stm32f3xx_hal_conf.h" 2
# 325 "./src/main/target/stm32f3xx_hal_conf.h"
#define assert_param(expr) ((void)0U)
# 47 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h" 2
# 60 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define IS_SYSCFG_FASTMODEPLUS(__PIN__) ((((__PIN__) & SYSCFG_FASTMODEPLUS_PB6) == SYSCFG_FASTMODEPLUS_PB6) || (((__PIN__) & SYSCFG_FASTMODEPLUS_PB7) == SYSCFG_FASTMODEPLUS_PB7) || (((__PIN__) & SYSCFG_FASTMODEPLUS_PB8) == SYSCFG_FASTMODEPLUS_PB8) || (((__PIN__) & SYSCFG_FASTMODEPLUS_PB9) == SYSCFG_FASTMODEPLUS_PB9))
# 78 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define SYSCFG_OFFSET (SYSCFG_BASE - PERIPH_BASE)


#define CFGR2_OFFSET (SYSCFG_OFFSET + 0x18U)
#define BYPADDRPAR_BitNumber 0x04U
#define CFGR2_BYPADDRPAR_BB (PERIPH_BB_BASE + (CFGR2_OFFSET * 32U) + (BYPADDRPAR_BitNumber * 4U))
# 97 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define HAL_REMAPDMA_ADC24_DMA2_CH34 (0x00000100U)

#define HAL_REMAPDMA_TIM16_DMA1_CH6 (0x00000800U)

#define HAL_REMAPDMA_TIM17_DMA1_CH7 (0x00001000U)

#define HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3 (0x00002000U)

#define HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4 (0x00004000U)

#define HAL_REMAPDMA_DAC2_CH1_DMA1_CH5 (0x00008000U)

#define HAL_REMAPDMA_TIM18_DAC2_CH1_DMA1_CH5 (0x00008000U)
# 170 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define IS_DMA_REMAP(RMP) ((((RMP) & HAL_REMAPDMA_ADC24_DMA2_CH34) == HAL_REMAPDMA_ADC24_DMA2_CH34) || (((RMP) & HAL_REMAPDMA_TIM16_DMA1_CH6) == HAL_REMAPDMA_TIM16_DMA1_CH6) || (((RMP) & HAL_REMAPDMA_TIM17_DMA1_CH7) == HAL_REMAPDMA_TIM17_DMA1_CH7) || (((RMP) & HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3) == HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3) || (((RMP) & HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4) == HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4) || (((RMP) & HAL_REMAPDMA_DAC2_CH1_DMA1_CH5) == HAL_REMAPDMA_DAC2_CH1_DMA1_CH5) || (((RMP) & HAL_REMAPDMA_TIM18_DAC2_CH1_DMA1_CH5) == HAL_REMAPDMA_TIM18_DAC2_CH1_DMA1_CH5))
# 191 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define HAL_REMAPTRIGGER_DAC1_TRIG (0x00000080U)


#define HAL_REMAPTRIGGER_TIM1_ITR3 (0x00000040U)
# 212 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define IS_HAL_REMAPTRIGGER(RMP) ((((RMP) & HAL_REMAPTRIGGER_DAC1) == HAL_REMAPTRIGGER_DAC1) || (((RMP) & HAL_REMAPTRIGGER_TIM1_ITR3) == HAL_REMAPTRIGGER_TIM1_ITR3))
# 334 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define SYSCFG_FASTMODEPLUS_PB6 ((uint32_t)SYSCFG_CFGR1_I2C_PB6_FMP)



#define SYSCFG_FASTMODEPLUS_PB7 ((uint32_t)SYSCFG_CFGR1_I2C_PB7_FMP)



#define SYSCFG_FASTMODEPLUS_PB8 ((uint32_t)SYSCFG_CFGR1_I2C_PB8_FMP)



#define SYSCFG_FASTMODEPLUS_PB9 ((uint32_t)SYSCFG_CFGR1_I2C_PB9_FMP)
# 357 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define HAL_SYSCFG_WP_PAGE0 (SYSCFG_RCR_PAGE0)
#define HAL_SYSCFG_WP_PAGE1 (SYSCFG_RCR_PAGE1)
#define HAL_SYSCFG_WP_PAGE2 (SYSCFG_RCR_PAGE2)
#define HAL_SYSCFG_WP_PAGE3 (SYSCFG_RCR_PAGE3)


#define HAL_SYSCFG_WP_PAGE4 (SYSCFG_RCR_PAGE4)
#define HAL_SYSCFG_WP_PAGE5 (SYSCFG_RCR_PAGE5)
#define HAL_SYSCFG_WP_PAGE6 (SYSCFG_RCR_PAGE6)
#define HAL_SYSCFG_WP_PAGE7 (SYSCFG_RCR_PAGE7)
# 382 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define IS_HAL_SYSCFG_WP_PAGE(__PAGE__) (((__PAGE__) > 0U) && ((__PAGE__) <= 0x00FFU))
# 394 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define HAL_SYSCFG_IT_FPU_IOC (SYSCFG_CFGR1_FPU_IE_0)
#define HAL_SYSCFG_IT_FPU_DZC (SYSCFG_CFGR1_FPU_IE_1)
#define HAL_SYSCFG_IT_FPU_UFC (SYSCFG_CFGR1_FPU_IE_2)
#define HAL_SYSCFG_IT_FPU_OFC (SYSCFG_CFGR1_FPU_IE_3)
#define HAL_SYSCFG_IT_FPU_IDC (SYSCFG_CFGR1_FPU_IE_4)
#define HAL_SYSCFG_IT_FPU_IXC (SYSCFG_CFGR1_FPU_IE_5)

#define IS_HAL_SYSCFG_INTERRUPT(__INTERRUPT__) ((((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_0) == SYSCFG_CFGR1_FPU_IE_0) || (((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_1) == SYSCFG_CFGR1_FPU_IE_1) || (((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_2) == SYSCFG_CFGR1_FPU_IE_2) || (((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_3) == SYSCFG_CFGR1_FPU_IE_3) || (((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_4) == SYSCFG_CFGR1_FPU_IE_4) || (((__INTERRUPT__) & SYSCFG_CFGR1_FPU_IE_5) == SYSCFG_CFGR1_FPU_IE_5))
# 425 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_DBGMCU_FREEZE_TIM2() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM2_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM2() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM2_STOP))



#define __HAL_DBGMCU_FREEZE_TIM3() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM3_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM3() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM3_STOP))



#define __HAL_DBGMCU_FREEZE_TIM4() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM4_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM4() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM4_STOP))
# 445 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_DBGMCU_FREEZE_TIM6() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM6_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM6() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM6_STOP))



#define __HAL_DBGMCU_FREEZE_TIM7() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM7_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM7() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_TIM7_STOP))
# 475 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_DBGMCU_FREEZE_RTC() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_RTC_STOP))
#define __HAL_DBGMCU_UNFREEZE_RTC() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_RTC_STOP))



#define __HAL_DBGMCU_FREEZE_WWDG() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_WWDG_STOP))
#define __HAL_DBGMCU_UNFREEZE_WWDG() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_WWDG_STOP))



#define __HAL_DBGMCU_FREEZE_IWDG() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_IWDG_STOP))
#define __HAL_DBGMCU_UNFREEZE_IWDG() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_IWDG_STOP))



#define __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT))
#define __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT))



#define __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT))
#define __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT))
# 505 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_FREEZE_CAN_DBGMCU() (DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_CAN_STOP))
#define __HAL_UNFREEZE_CAN_DBGMCU() (DBGMCU->APB1FZ &= ~(DBGMCU_APB1_FZ_DBG_CAN_STOP))
# 516 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_DBGMCU_FREEZE_TIM1() (DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM1_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM1() (DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM1_STOP))



#define __HAL_DBGMCU_FREEZE_TIM8() (DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM8_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM8() (DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM8_STOP))



#define __HAL_DBGMCU_FREEZE_TIM15() (DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM15_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM15() (DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM15_STOP))



#define __HAL_DBGMCU_FREEZE_TIM16() (DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM16_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM16() (DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM16_STOP))



#define __HAL_DBGMCU_FREEZE_TIM17() (DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM17_STOP))
#define __HAL_DBGMCU_UNFREEZE_TIM17() (DBGMCU->APB2FZ &= ~(DBGMCU_APB2_FZ_DBG_TIM17_STOP))
# 564 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_REMAPMEMORY_FLASH() (SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_MEM_MODE))





#define __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH() do {SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_MEM_MODE); SYSCFG->CFGR1 |= SYSCFG_CFGR1_MEM_MODE_0; }while(0U)







#define __HAL_SYSCFG_REMAPMEMORY_SRAM() do {SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_MEM_MODE); SYSCFG->CFGR1 |= (SYSCFG_CFGR1_MEM_MODE_0 | SYSCFG_CFGR1_MEM_MODE_1); }while(0U)
# 598 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_REMAPENCODER_NONE() (SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_ENCODER_MODE))





#define __HAL_REMAPENCODER_TIM2() do {SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_ENCODER_MODE); SYSCFG->CFGR1 |= SYSCFG_CFGR1_ENCODER_MODE_0; }while(0U)







#define __HAL_REMAPENCODER_TIM3() do {SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_ENCODER_MODE); SYSCFG->CFGR1 |= SYSCFG_CFGR1_ENCODER_MODE_1; }while(0U)







#define __HAL_REMAPENCODER_TIM4() do {SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_ENCODER_MODE); SYSCFG->CFGR1 |= (SYSCFG_CFGR1_ENCODER_MODE_0 | SYSCFG_CFGR1_ENCODER_MODE_1); }while(0U)
# 649 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_DMA_REMAP_CHANNEL_ENABLE(__DMA_REMAP__) do {assert_param(IS_DMA_REMAP((__DMA_REMAP__))); SYSCFG->CFGR1 |= (__DMA_REMAP__); }while(0U)


#define __HAL_DMA_REMAP_CHANNEL_DISABLE(__DMA_REMAP__) do {assert_param(IS_DMA_REMAP((__DMA_REMAP__))); SYSCFG->CFGR1 &= ~(__DMA_REMAP__); }while(0U)
# 667 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); SET_BIT(SYSCFG->CFGR1, (__FASTMODEPLUS__)); }while(0U)



#define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); CLEAR_BIT(SYSCFG->CFGR1, (__FASTMODEPLUS__)); }while(0U)
# 684 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_INTERRUPT_ENABLE(__INTERRUPT__) do {assert_param(IS_HAL_SYSCFG_INTERRUPT((__INTERRUPT__))); SYSCFG->CFGR1 |= (__INTERRUPT__); }while(0U)



#define __HAL_SYSCFG_INTERRUPT_DISABLE(__INTERRUPT__) do {assert_param(IS_HAL_SYSCFG_INTERRUPT((__INTERRUPT__))); SYSCFG->CFGR1 &= ~(__INTERRUPT__); }while(0U)
# 701 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_REMAPINTERRUPT_USB_ENABLE() (SYSCFG->CFGR1 |= (SYSCFG_CFGR1_USB_IT_RMP))
#define __HAL_REMAPINTERRUPT_USB_DISABLE() (SYSCFG->CFGR1 &= ~(SYSCFG_CFGR1_USB_IT_RMP))
# 729 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_BREAK_LOCKUP_LOCK() do {SYSCFG->CFGR2 &= ~(SYSCFG_CFGR2_LOCKUP_LOCK); SYSCFG->CFGR2 |= SYSCFG_CFGR2_LOCKUP_LOCK; }while(0U)
# 745 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_BREAK_PVD_LOCK() do {SYSCFG->CFGR2 &= ~(SYSCFG_CFGR2_PVD_LOCK); SYSCFG->CFGR2 |= SYSCFG_CFGR2_PVD_LOCK; }while(0U)
# 761 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_BREAK_SRAMPARITY_LOCK() do {SYSCFG->CFGR2 &= ~(SYSCFG_CFGR2_SRAM_PARITY_LOCK); SYSCFG->CFGR2 |= SYSCFG_CFGR2_SRAM_PARITY_LOCK; }while(0U)
# 790 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_REMAPTRIGGER_ENABLE(__TRIGGER_REMAP__) do {assert_param(IS_HAL_REMAPTRIGGER((__TRIGGER_REMAP__))); (SYSCFG->CFGR1 |= (__TRIGGER_REMAP__)); }while(0U)


#define __HAL_REMAPTRIGGER_DISABLE(__TRIGGER_REMAP__) do {assert_param(IS_HAL_REMAPTRIGGER((__TRIGGER_REMAP__))); (SYSCFG->CFGR1 &= ~(__TRIGGER_REMAP__)); }while(0U)
# 828 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_RAM_PARITYCHECK_DISABLE() (*(__IO uint32_t *) CFGR2_BYPADDRPAR_BB = 0x00000001U)
# 842 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
#define __HAL_SYSCFG_SRAM_WRP_ENABLE(__PAGE_WP__) do {assert_param(IS_HAL_SYSCFG_WP_PAGE((__PAGE_WP__))); SYSCFG->RCR |= (__PAGE_WP__); }while(0U)
# 863 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
# 877 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
void HAL_IncTick(void);
void HAL_Delay(volatile uint32_t Delay);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
uint32_t HAL_GetUIDw0(void);
uint32_t HAL_GetUIDw1(void);
uint32_t HAL_GetUIDw2(void);
void HAL_DBGMCU_EnableDBGSleepMode(void);
void HAL_DBGMCU_DisableDBGSleepMode(void);
void HAL_DBGMCU_EnableDBGStopMode(void);
void HAL_DBGMCU_DisableDBGStopMode(void);
void HAL_DBGMCU_EnableDBGStandbyMode(void);
void HAL_DBGMCU_DisableDBGStandbyMode(void);
# 74 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c" 2
# 97 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
#define BTABLE_ADDRESS (0x000U)
# 108 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd);
# 138 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;


  if(hpcd == 
# 145 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c" 3 4
            ((void *)0)
# 145 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
                )
  {
    return HAL_ERROR;
  }


  ((void)0U);

  if(hpcd->State == HAL_PCD_STATE_RESET)
  {

    hpcd->Lock = HAL_UNLOCKED;


    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;


 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {

   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;

   hpcd->IN_ep[i].type = 0U;
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }

 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
   hpcd->OUT_ep[i].num = i;

   hpcd->OUT_ep[i].type = 0U;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
 }



 hpcd->Instance->CNTR = ((uint16_t)0x0001U);


 hpcd->Instance->CNTR = 0U;


 hpcd->Instance->ISTR = 0U;


 hpcd->Instance->BTABLE = (0x000U);


  wInterrupt_Mask = ((uint16_t)0x8000U) | ((uint16_t)0x1000U) | ((uint16_t)0x0800U) | ((uint16_t)0x2000U)
  | ((uint16_t)0x0200U) | ((uint16_t)0x0100U) | ((uint16_t)0x0400U);


  hpcd->Instance->CNTR = wInterrupt_Mask;

  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
}






HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{

  if(hpcd == 
# 222 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c" 3 4
            ((void *)0)
# 222 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
                )
  {
    return HAL_ERROR;
  }

  hpcd->State = HAL_PCD_STATE_BUSY;


  HAL_PCD_Stop(hpcd);


  HAL_PCD_MspDeInit(hpcd);

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}






__attribute__((weak)) void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






__attribute__((weak)) void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}
# 294 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{

  HAL_PCDEx_SetConnectionState (hpcd, 1U);

  return HAL_OK;
}






HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);


  hpcd->Instance->CNTR = ((uint16_t)0x0001U);


  hpcd->Instance->ISTR = 0U;


  hpcd->Instance->CNTR = (((uint16_t)0x0001U) | ((uint16_t)0x0002U));

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return HAL_OK;
}
# 339 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  volatile uint16_t wIstr;
  volatile uint16_t wEPVal = 0U;


  while (((wIstr = hpcd->Instance->ISTR) & ((uint16_t)0x8000U)) != 0U)
  {

    EPindex = (uint8_t)(wIstr & ((uint16_t)0x000FU));

    if (EPindex == 0U)
    {



      if ((wIstr & ((uint16_t)0x0010U)) == 0U)
      {




        ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))= (uint16_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))) & 0xFF7FU & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))));
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+2)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);
        ep->xfer_buff += ep->xfer_count;


        HAL_PCD_DataInStageCallback(hpcd, 0U);


        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | ((uint8_t)0x80U));
          hpcd->USB_Address = 0U;
        }

      }
      else
      {




        ep = &hpcd->OUT_ep[0];
        wEPVal = (*((uint16_t *)(((uint32_t)(&(hpcd->Instance)->EP0R + (((uint8_t)0U)) * 2U)))));

        if ((wEPVal & ((uint16_t)0x0800U)) != 0U)
        {

          ep->xfer_count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);

          ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))= (uint16_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))) & 0x7FFFU & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))));


          HAL_PCD_SetupStageCallback(hpcd);
        }

        else if ((wEPVal & ((uint16_t)0x8000U)) != 0U)
        {
          ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))= (uint16_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))) & 0x7FFFU & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))));

          ep->xfer_count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);

          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }


           HAL_PCD_DataOutStageCallback(hpcd, 0U);

          { uint16_t *pdwReg =((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((((uint8_t)0U)))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))); { uint16_t wNBlocks; if(((ep->maxpacket)) > 62U) { { (wNBlocks) = (((ep->maxpacket))) >> 5U; if(((((ep->maxpacket))) & 0x1fU) == 0U) { (wNBlocks)--; } *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10U) | (uint16_t)0x8000U); } } else { { (wNBlocks) = (((ep->maxpacket))) >> 1U; if(((((ep->maxpacket))) & 0x1U) != 0U) { (wNBlocks)++; } *pdwReg = (uint16_t)((wNBlocks) << 10U); } } } }
          { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x3000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x3000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((((uint8_t)0U))) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
        }
      }
    }
    else
    {




      wEPVal = (*((uint16_t *)(((uint32_t)(&(hpcd->Instance)->EP0R + (EPindex) * 2U)))));
      if ((wEPVal & ((uint16_t)0x8000U)) != 0U)
      {

        ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((EPindex)) * 2U))))= (uint16_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((EPindex)) * 2U))))) & 0x7FFFU & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))));
        ep = &hpcd->OUT_ep[EPindex];


        if (ep->doublebuffer == 0U)
        {
          count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);
          if (count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (((*((uint16_t *)(((uint32_t)(&(hpcd->Instance)->EP0R + (ep->num) * 2U)))))& ((uint16_t)0x4000U)) == ((uint16_t)0x4000U))
          {

            count = (((uint16_t)(*((uint16_t *)((uint32_t)((((((hpcd->Instance)))->BTABLE+(((ep->num)))*8+2)*2+ ((uint32_t)(((hpcd->Instance))) + 0x400U)))))) & 0x3ffU));
            if (count != 0U)
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
            }
          }
          else
          {

            count = (((uint16_t)(*((uint16_t *)((uint32_t)((((((hpcd->Instance)))->BTABLE+(((ep->num)))*8+6)*2+ ((uint32_t)(((hpcd->Instance))) + 0x400U)))))) & 0x3ffU));
            if (count != 0U)
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
            }
          }
          { if ((PCD_EP_DBUF_OUT) == PCD_EP_DBUF_OUT) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); } else if ((PCD_EP_DBUF_OUT) == PCD_EP_DBUF_IN) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }}
        }

        ep->xfer_count+=count;
        ep->xfer_buff+=count;

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
        {

          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      }

      if ((wEPVal & ((uint16_t)0x0080U)) != 0U)
      {
        ep = &hpcd->IN_ep[EPindex];


        ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((EPindex)) * 2U))))= (uint16_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((EPindex)) * 2U))))) & 0xFF7FU & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))));


        if (ep->doublebuffer == 0U)
        {
          ep->xfer_count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+2)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);
          if (ep->xfer_count != 0U)
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (((*((uint16_t *)(((uint32_t)(&(hpcd->Instance)->EP0R + (ep->num) * 2U)))))& ((uint16_t)0x0040U)) == ((uint16_t)0x0040U))
          {

            ep->xfer_count = (((uint16_t)(*((uint16_t *)((uint32_t)((((((hpcd->Instance)))->BTABLE+(((ep->num)))*8+2)*2+ ((uint32_t)(((hpcd->Instance))) + 0x400U)))))) & 0x3ffU));
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
            }
          }
          else
          {

            ep->xfer_count = (((uint16_t)(*((uint16_t *)((uint32_t)((((((hpcd->Instance)))->BTABLE+(((ep->num)))*8+6)*2+ ((uint32_t)(((hpcd->Instance))) + 0x400U)))))) & 0x3ffU));
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          { if ((PCD_EP_DBUF_IN) == PCD_EP_DBUF_OUT) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); } else if ((PCD_EP_DBUF_IN) == PCD_EP_DBUF_IN) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }}
        }

        ep->xfer_count = ((uint16_t)(*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+2)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U)))))) & 0x3ffU);
        ep->xfer_buff+=ep->xfer_count;


        if (ep->xfer_len == 0U)
        {

          HAL_PCD_DataInStageCallback(hpcd, ep->num);
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
      }
    }
  }
  return HAL_OK;
}
# 556 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x8000U))) == (((uint16_t)0x8000U))))
  {


    PCD_EP_ISR_Handler(hpcd);
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x0400U))) == (((uint16_t)0x0400U))))
  {
    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x0400U)))));
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x4000U))) == (((uint16_t)0x4000U))))
  {
    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x4000U)))));
  }
  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x2000U))) == (((uint16_t)0x2000U))))
  {
    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x2000U)))));
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x1000U))) == (((uint16_t)0x1000U))))
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(((uint16_t)0x0004U));
    hpcd->Instance->CNTR &= (uint16_t) ~(((uint16_t)0x0008U));

    HAL_PCD_ResumeCallback(hpcd);

    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x1000U)))));
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x0800U))) == (((uint16_t)0x0800U))))
  {

    hpcd->Instance->CNTR |= ((uint16_t)0x0008U);


    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x0800U)))));

    hpcd->Instance->CNTR |= ((uint16_t)0x0004U);
    if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x1000U))) == (((uint16_t)0x1000U))) == 0U)
    {
      HAL_PCD_SuspendCallback(hpcd);
    }
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x0200U))) == (((uint16_t)0x0200U))))
  {
    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x0200U)))));
    HAL_PCD_SOFCallback(hpcd);
  }

  if (((((hpcd)->Instance->ISTR) & (((uint16_t)0x0100U))) == (((uint16_t)0x0100U))))
  {

    ((((hpcd)->Instance->ISTR) = (uint16_t)(~(((uint16_t)0x0100U)))));
  }
}







 __attribute__((weak)) void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{

  ((void)(hpcd));
  ((void)(epnum));




}







 __attribute__((weak)) void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{

  ((void)(hpcd));
  ((void)(epnum));




}





 __attribute__((weak)) void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






 __attribute__((weak)) void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






 __attribute__((weak)) void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






 __attribute__((weak)) void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






 __attribute__((weak)) void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}







 __attribute__((weak)) void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{

  ((void)(hpcd));
  ((void)(epnum));




}







 __attribute__((weak)) void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{

  ((void)(hpcd));
  ((void)(epnum));




}






 __attribute__((weak)) void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}






 __attribute__((weak)) void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{

  ((void)(hpcd));




}
# 815 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);


   HAL_PCDEx_SetConnectionState(hpcd, 1U);

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return HAL_OK;
}






HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);


  HAL_PCDEx_SetConnectionState(hpcd, 0U);

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return HAL_OK;
}







HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);

   if(address == 0U)
   {

     hpcd->Instance->DADDR = ((uint8_t)0x80U);
   }
   else
   {
     hpcd->USB_Address = address;
   }

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return HAL_OK;
}
# 873 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  }
  ep->num = ep_addr & 0x7FU;

  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);


  switch (ep->type)
  {
  case 0U:
    ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint32_t)(((uint16_t) ~((uint16_t)0x0600U) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))) | ((uint32_t)(((uint16_t)0x0200U))) ))));
    break;
  case 2U:
    ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint32_t)(((uint16_t) ~((uint16_t)0x0600U) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))) | ((uint32_t)(((uint16_t)0x0000U))) ))));
    break;
  case 3U:
    ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint32_t)(((uint16_t) ~((uint16_t)0x0600U) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))) | ((uint32_t)(((uint16_t)0x0600U))) ))));
    break;
  case 1U:
    ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint32_t)(((uint16_t) ~((uint16_t)0x0600U) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))) | ((uint32_t)(((uint16_t)0x0400U))) ))));
    break;
  default:
    break;
  }

  (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|(((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))) | (ep->num)));

  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in)
    {

      (*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))) = (((ep->pmaadress) >> 1U) << 1U));
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0020U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0020U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
    else
    {

      (*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+4)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))) = (((ep->pmaadress) >> 1U) << 1U));

      { uint16_t *pdwReg =((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))); { uint16_t wNBlocks; if(((ep->maxpacket)) > 62U) { { (wNBlocks) = (((ep->maxpacket))) >> 5U; if(((((ep->maxpacket))) & 0x1fU) == 0U) { (wNBlocks)--; } *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10U) | (uint16_t)0x8000U); } } else { { (wNBlocks) = (((ep->maxpacket))) >> 1U; if(((((ep->maxpacket))) & 0x1U) != 0U) { (wNBlocks)++; } *pdwReg = (uint16_t)((wNBlocks) << 10U); } } } }
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x3000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x3000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
  }

  else
  {

    ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)((((uint16_t)0x8000U)|((uint16_t)0x0080U)|((((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) | ((uint16_t)0x0100U)) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))));

    { ((*((uint16_t *)((uint32_t)(((((((hpcd->Instance))))->BTABLE+((((ep->num))))*8)*2+ ((uint32_t)((((hpcd->Instance)))) + 0x400U))))) = (((((ep->pmaaddr0))) >> 1U) << 1U))); ((*((uint16_t *)((uint32_t)(((((((hpcd->Instance))))->BTABLE+((((ep->num))))*8+4)*2+ ((uint32_t)((((hpcd->Instance)))) + 0x400U))))) = (((((ep->pmaaddr1))) >> 1U) << 1U))); }

    if (ep->is_in==0U)
    {

      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }


      ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))))));

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x3000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x3000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
    else
    {

      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))))));

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
  }

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return ret;
}
# 979 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num = ep_addr & 0x7FU;

  ep->is_in = (0x80U & ep_addr) != 0U;

  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);

  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in)
    {
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
    else
    {
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
  }

  else
  {
    if (ep->is_in==0U)
    {

      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }


      ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))))));

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
    else
    {

      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
      ((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))))));

      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x0000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x0000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
  }

  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);
  return HAL_OK;
}
# 1052 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{

 PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];


  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;


  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len;
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }


  if (ep->doublebuffer == 0U)
  {

    { uint16_t *pdwReg =((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))); { uint16_t wNBlocks; if(((len)) > 62U) { { (wNBlocks) = (((len))) >> 5U; if(((((len))) & 0x1fU) == 0U) { (wNBlocks)--; } *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10U) | (uint16_t)0x8000U); } } else { { (wNBlocks) = (((len))) >> 1U; if(((((len))) & 0x1U) != 0U) { (wNBlocks)++; } *pdwReg = (uint16_t)((wNBlocks) << 10U); } } } }
  }
  else
  {

    { if((ep->is_in) == PCD_EP_DBUF_OUT) { { uint16_t *pdwReg =((uint16_t *)((uint32_t)((((((hpcd->Instance)))->BTABLE+(((ep->num)))*8+6)*2+ ((uint32_t)(((hpcd->Instance))) + 0x400U))))); { uint16_t wNBlocks; if((((len))) > 62U) { { (wNBlocks) = ((((len)))) >> 5U; if((((((len)))) & 0x1fU) == 0U) { (wNBlocks)--; } *pdwReg = (uint16_t)((uint16_t)((wNBlocks) << 10U) | (uint16_t)0x8000U); } } else { { (wNBlocks) = ((((len)))) >> 1U; if((((((len)))) & 0x1U) != 0U) { (wNBlocks)++; } *pdwReg = (uint16_t)((wNBlocks) << 10U); } } } } } else if((ep->is_in) == PCD_EP_DBUF_IN) { *((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+6)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))) = (uint32_t)(len); } }
  }

  { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x3000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x3000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }

  return HAL_OK;
}







uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
}
# 1113 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];


  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;


  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len;
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }


  if (ep->doublebuffer == 0U)
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
    (*((uint16_t *)((uint32_t)(((((hpcd->Instance))->BTABLE+((ep->num))*8+2)*2+ ((uint32_t)((hpcd->Instance)) + 0x400U))))) = (len));
  }
  else
  {

    if (((*((uint16_t *)(((uint32_t)(&(hpcd->Instance)->EP0R + (ep->num) * 2U)))))& ((uint16_t)0x0040U)) == ((uint16_t)0x0040U))
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    { if ((ep->is_in) == PCD_EP_DBUF_OUT) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); } else if ((ep->is_in) == PCD_EP_DBUF_IN) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }}
  }

  { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0030U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0030U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }

  return HAL_OK;
}







HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  ep->is_stall = 1U;
  ep->num = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);

  if (ep->num == 0U)
  {

    { register uint32_t _wRegVal; _wRegVal = (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))) & ((((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU))) |((uint16_t)0x0030U)) ; if((((uint16_t)0x1000U) & ((((uint16_t)0x1000U))))!= 0U) { _wRegVal ^= ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & (((uint16_t)0x1000U)))!= 0U) { _wRegVal ^= ((uint16_t)0x2000U); } if((((uint16_t)0x0010U) & (((uint16_t)0x0010U)))!= 0U) { _wRegVal ^= ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & (((uint16_t)0x0010U)))!= 0U) { _wRegVal ^= ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)(_wRegVal | ((uint16_t)0x8000U)|((uint16_t)0x0080U))); }
  }
  else
  {
    if (ep->is_in)
    {
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0010U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0010U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
    else
    {
      { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x1000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x1000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
    }
  }
  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);

  return HAL_OK;
}







HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  ep->is_stall = 0U;
  ep->num = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);

  do{ if((hpcd)->Lock == HAL_LOCKED) { return HAL_BUSY; } else { (hpcd)->Lock = HAL_LOCKED; } }while (0U);

  if (ep->is_in)
  {
    if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x0040U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x0040U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
    { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x0030U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x0010U) & (((uint16_t)0x0030U)))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0010U); } if((((uint16_t)0x0020U) & ((uint32_t)(((uint16_t)0x0030U))))!= 0U) { _wRegVal ^=(uint16_t) ((uint16_t)0x0020U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
  }
  else
  {
    if((((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & ((uint16_t)0x4000U)) != 0) { ((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))= (uint16_t)(((uint16_t)0x8000U)|((uint16_t)0x0080U)|((uint16_t)0x4000U) | (((uint32_t)((*((uint16_t *)(((uint32_t)(&(((hpcd->Instance)))->EP0R + (((ep->num))) * 2U))))))) & (((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))))); }
    { register uint16_t _wRegVal; _wRegVal = (uint32_t) (((uint32_t)((*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))))) & (((uint16_t)0x3000U)|(((uint16_t)0x8000U)|((uint16_t)0x0800U)|((uint16_t)0x0600U)|((uint16_t)0x0100U)|((uint16_t)0x0080U)|((uint16_t)0x000FU)))); if((((uint16_t)0x1000U) & (((uint16_t)0x3000U)))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x1000U); } if((((uint16_t)0x2000U) & ((uint32_t)(((uint16_t)0x3000U))))!= 0U) { _wRegVal ^= (uint16_t) ((uint16_t)0x2000U); } (*((uint16_t *)(((uint32_t)(&((hpcd->Instance))->EP0R + ((ep->num)) * 2U))))= (uint16_t)((((uint32_t)(_wRegVal)) | ((uint16_t)0x8000U)|((uint16_t)0x0080U)))); }
  }
  do{ (hpcd)->Lock = HAL_UNLOCKED; }while (0U);

  return HAL_OK;
}







HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return HAL_OK;
}






HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
  hpcd->Instance->CNTR |= ((uint16_t)0x0010U);
  return HAL_OK;
}






HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
  hpcd->Instance->CNTR &=~((uint32_t)((uint16_t)0x0010U));
  return HAL_OK;
}
# 1308 "./lib/main/STM32F3/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c"
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
  return hpcd->State;
}
